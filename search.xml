<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java_5</title>
      <link href="2021/05/15/java-5/"/>
      <url>2021/05/15/java-5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9add248305f5c51010deb901f7aeddb79cae683f54ae9408ab3107eb7875fa11">4630436162ade97ba2718b7d0c4b3b6351ade09e539dfebeb5402828e29e64b0471baae69ffa7347be00a5cde5f56d61d7b5cd9b876de6fbc729beb1bc078489cbf0b6e4e7ce55e127701501005c0291e42ff54d6964d6fa643cfd9c8c07936a7ffef609885c40ceb5fd536bda57b90aac83bf530bc1da47f77ece72bb6c2e7de10261425eedbf64b6d36117e0619fe113d20ad93616ec63ad8afc4ef2c7116d8856287a1a23f5fb6b60cb01763e467f0efd573b429ca54dbeabd850529fa382471bc74f4b8b9cad7c9db90030bcab55086b3121a87dcbcab304f111a9b36586f5b9e088f7c5bd2c543cfb37519f4898373bd24df7156d74524bd70136f31e1e38da233bc60510d5f2311b1b5a7153c587f2af7ed252399c64cbf66e135eaa6ba2e6f196cfe5bbe13d910afd759bfc285f84113d959a39581d539da2936607afcb95afb86364ebe13d858f2bf3ea409211afca4d696e7a65f22a48e1991076c307406e62bb1ac9789d2f3eed0859bb2138182dd0ba8dd191394622faef2c295abc6dd677541a13c46d1696bc30c91892be61e05a441174c303f5d267cd1eb428c6d6bd509be8548907968f3f927eba407cb1ec173fe74ae8481e4fe7e8c8ef615df541adbf20c9b3445c353903833c78fc54d423d1df05a4388550cbcfed73bd76fa2f4b41dfef7c1161ac4c5dede7eb7aa4af55530f48a279f6e72550645e134420bc39631c0494655dbc0945dc2ebb889102e3502d5a0ab7122ca2cba54e455b490c312264a9995e0d49399c512468362c39e9bb3b979a3eacf068d3fe996b7811a16b2971b63b8ed338ed0d6d0ba676442a98e8bd5100cda14959e26de7d7ce59453ed1703e9df693acbe23f1eef2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编/译码</title>
      <link href="2021/05/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96-%E8%AF%91%E7%A0%81/"/>
      <url>2021/05/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96-%E8%AF%91%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>预备知识</p><p><strong>1、路径和路径长度</strong></p><p>从树中一个结点到另一个结点之间的分支构成两个结点的路径，路径上的分支数目叫做路径长度。树的路径长度是从树根到每一个结点的路径长度之和。<br><span id="more"></span><br><strong>2、带权路径长度</strong></p><p>结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有<strong>叶子结点</strong>的带权路径长度之和，通常记作WPL。</p><p>若有n个权值为w1,w2,…,wn的结点构成一棵有n个叶子结点的二叉树，则树的带权路径最小的二叉树叫做哈夫曼树或最优二叉树。</p><p>哈夫曼树是由n个带权叶子节点构成的所有二叉树中带权路径长度最短的二叉树.</p><p>树的带权路径长度</p><script type="math/tex; mode=display">WPL = \sum_{i=1}^{n}w_i*l_i</script><p>哈夫曼树，又称最优树，是一类带权路径长度最短的树。首先有几个概念需要清楚：</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>一颗有n个叶子的哈夫曼树共有2n-1个结点，每个结点包含其双亲信息和孩子结点的信息,构成一个静态三链表</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210508151242.png" alt="2021-5-8"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M (2*(N)-1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> weight;<span class="comment">//权值</span></span><br><span class="line"><span class="keyword">int</span> parent;<span class="comment">//双亲结点</span></span><br><span class="line"><span class="keyword">int</span> Lchild;<span class="comment">//左孩子结点</span></span><br><span class="line"><span class="keyword">int</span> rchild;<span class="comment">//右孩子结点</span></span><br><span class="line">&#125;HTNode,HuffmanTree[M+<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>哈夫曼树的存储结构</p><h2 id="创建哈夫曼树"><a href="#创建哈夫曼树" class="headerlink" title="创建哈夫曼树"></a>创建哈夫曼树</h2><p>1.根据给定的n个权值{w1,w2,…,wn}构成二叉树集合F={T1,T2,…,Tn},其中每棵二叉树Ti中只有一个带权为wi的根结点,其左右子树为空.</p><p>2.在F中选取两棵根结点权值最小的树作为左右子树构造一棵新的二叉树,且置新的二叉树的根结点的权值为左右子树根结点的权值之和.</p><p>3.在F中删除这两棵树,同时将新的二叉树加入F中.</p><p>4.重复2、3,直到F只含有一棵树为止.(得到哈夫曼树)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HufmanTree ht,<span class="keyword">int</span> w[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ht[i] = &#123;w[i],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//叶子节点n个</span></span><br><span class="line"><span class="comment">//初始化每个叶子结点</span></span><br><span class="line">m = <span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">ht[i] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//初始化n-1个非叶子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">select(ht,i<span class="number">-1</span>,&amp;s1,&amp;s2);</span><br><span class="line"><span class="comment">//在叶子节点中选取两个parent=0且weight最小的两个结点</span></span><br><span class="line">ht[i].weight = ht[s1].weight+ht[s2].weight;</span><br><span class="line">ht[s1].parent = ht[s2].parent = i;</span><br><span class="line">ht[i].lchild = s1;</span><br><span class="line">ht[i].rchild = s2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、满二叉树不一定是哈夫曼树 </p><p>2、哈夫曼树中权越大的叶子离根越近  （很好理解，WPL最小的二叉树）</p><p>3、具有相同带权结点的哈夫曼树不惟一</p><p>4、哈夫曼树的结点的度数为 0 或 2， 没有度为 1 的结点。</p><p>5、包含 n 个叶子结点的哈夫曼树中共有 2n – 1 个结点。</p><p>6、包含 n 棵树的森林要经过 n–1 次合并才能形成哈夫曼树，共产生 n–1 个新结点</p><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>对一颗具有n个叶子的哈夫曼树,若对树中的每个左分支赋予0,右分支赋予1,从根到每个叶子的通路上,各分支的赋值分别构成一个二进制串,该二进制串就称为哈夫曼编码.</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210508155846.png" alt="QQ截图20210508155705"></p><p>哈夫曼编码是前缀编码,以使用频度作为权值构造哈夫曼树,这样编码得到的二进制串平均值最短.</p><p>（1）创建长度为2n-1的哈夫曼树数组，含有n个叶子节点</p><p>（2）<strong>创建长度为n的string数组，用于存放n个叶子节点的哈夫曼码</strong></p><p>（3）从某叶子节点开始，不断寻找其父节点，直到寻找到根节点，并对此路径上每个分支进行编码，左孩子为0，右孩子为1</p><p><strong>算法实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* HuffmanCode[N+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht,HuffmanCode hc,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *cd;</span><br><span class="line">cd = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">cd[n<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">start = n<span class="number">-1</span>;</span><br><span class="line">c = i;</span><br><span class="line">p = ht[i].parent;<span class="comment">//找到叶子结点的父亲节点</span></span><br><span class="line"><span class="keyword">while</span>(p)<span class="comment">//如果存在父亲节点.即parent不为0</span></span><br><span class="line">&#123;</span><br><span class="line">--start;</span><br><span class="line"><span class="keyword">if</span>(ht[p].lchild==c)</span><br><span class="line">cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">c = p;</span><br><span class="line">p = ht[p].parent;<span class="comment">//继续搜索父亲节点</span></span><br><span class="line">&#125;</span><br><span class="line">hc[i] = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n-start)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(hc[i],&amp;cd[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从任意叶子X节点（数组前n项中的某一项）开始，根据X的parent值（即X的父节点在数组中的位置）找到其父节点。</p><p><strong>找到X的父节点后，根据父节点的left和right值判断X和父节点的关系。如果X是父节点的左子树，则编码为1；如果X是父节点的右子树，则编码为0</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M (2 * N - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *HuffmanCode[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">int</span> parent; <span class="comment">//父节点在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Lchild; <span class="comment">//左孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Rchild; <span class="comment">//右孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">char</span> c;     <span class="comment">//字符</span></span><br><span class="line">&#125; HTNode, HuffmanTree[M + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree, <span class="keyword">int</span>)</span></span>;       <span class="comment">//构造哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree, <span class="keyword">int</span>, <span class="keyword">int</span> *, <span class="keyword">int</span> *)</span></span>; <span class="comment">//用于寻找最小的两个值</span></span><br><span class="line"><span class="comment">//hc[N+1]为相应节点的编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>)</span></span>; <span class="comment">//根据哈夫曼树得到相应编码</span></span><br><span class="line"><span class="comment">//解码得到明文</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//编码得到二进制串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//根据HuffmanTree得到HuffmanCode</span></span><br><span class="line"><span class="comment">//HuffmanCode储存的是每个字符对应的编码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    getchar();</span><br><span class="line">    HuffmanTree ht;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ht[i].c); <span class="comment">//输入n个叶子节点的字符</span></span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    CrtHuffmanTree(ht, size);</span><br><span class="line">    HuffmanCode hc;</span><br><span class="line">    CrtHuffmanCode(ht, hc, size);</span><br><span class="line">    <span class="keyword">char</span> encoding_text[<span class="number">100</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    encode(ht, hc, size, encoding_text);</span><br><span class="line">    decode(ht, hc, size, encoding_text);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int w[N + 1];</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">//     scanf(&quot;%d&quot;, &amp;w[i]); //输入n个叶子节点的权值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ht[i].weight); <span class="comment">//输入n个叶子节点的权值</span></span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight = <span class="number">0</span>;</span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s1, s2; <span class="comment">//s1,s2为两个值最小的无父结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        select(ht, i - <span class="number">1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[s1].parent = ht[s2].parent = i;</span><br><span class="line">        ht[i].Lchild = s1;</span><br><span class="line">        ht[i].Rchild = s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> *s1, <span class="keyword">int</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_1_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min_2_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[i].weight &lt; min_1_w)</span><br><span class="line">            &#123;</span><br><span class="line">                min_1_w = ht[i].weight;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//找到第一个最小值</span></span><br><span class="line">    *s1 = min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[j].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != *s1 &amp;&amp; ht[j].weight &lt; min_2_w) <span class="comment">//倒数第二小的值大于等于最小的值,小于其余值</span></span><br><span class="line">            &#123;</span><br><span class="line">                min_2_w = ht[j].weight;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//最小的第二个值</span></span><br><span class="line">    *s2 = min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span> <span class="comment">//建立好哈夫曼树后,得到哈夫曼编码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *cd;                              <span class="comment">//cd是指向字符的指针,用来存储字符串</span></span><br><span class="line">    cd = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//开辟n个单元,因为共有n个结点,最多只有n-1个编码位</span></span><br><span class="line">    cd[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;                      <span class="comment">//因为存储字符串,最后一位为空字符</span></span><br><span class="line">    <span class="keyword">int</span> start, c;                          <span class="comment">//start为cd数组开始存储的起点,c用来标记每次往上找到的双亲的位置</span></span><br><span class="line">    <span class="keyword">int</span> p;                                 <span class="comment">//p为双亲的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        start = n - <span class="number">1</span>;    <span class="comment">//这是cd数组的最后一位,是&#x27;/0&#x27;，因为储存字符串</span></span><br><span class="line">        c = i;            <span class="comment">//c为第一个结点,得到第一个结点的编码</span></span><br><span class="line">        p = ht[i].parent; <span class="comment">//寻找结点父亲</span></span><br><span class="line">        <span class="keyword">while</span> (p)         <span class="comment">//若有父亲结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            --start;               <span class="comment">//每次递减,从后向前得到编码</span></span><br><span class="line">            <span class="keyword">if</span> (ht[p].Lchild == c) <span class="comment">//若子节点为左孩子,则为0</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = p;</span><br><span class="line">            p = ht[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        while循环可改为</span></span><br><span class="line"><span class="comment">        for(c=i,p=ht[i].parent;p!=0;c=p,p=ht[p].parent)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">             --start;</span></span><br><span class="line"><span class="comment">            if (ht[p].Lchild == c)</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;1&#x27;;</span></span><br><span class="line"><span class="comment">            c = p;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        hc[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//为hc[i]分配空间,空间大小为编码的位数+1,最后一位为&#x27;\0&#x27;</span></span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i], &amp;cd[start]);                          <span class="comment">//注意这里取地址符不可以去掉,因为本身cd是一个数组(指针),但复制时应该从start开始,所以取数组start位的元素地址</span></span><br><span class="line">                                                            <span class="comment">//   printf(&quot;%d:%s\n&quot;,i,hc[i]);//hc 存储的是n个字符分别的编码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *text = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(text));</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (encoding_text[pos] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text[t_pos++] = encoding_text[pos++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(text, hc[i])==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[i].c);</span><br><span class="line">                <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">                t_pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//得到了哈夫曼编码,因为知道了每个字符相应的编码,解码就很简单了</span></span><br><span class="line">    <span class="comment">//进行编码</span></span><br><span class="line">    getchar();<span class="comment">//这里接受一个空格,避免下面fgets直接接受一个空格了</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">1000</span>]; <span class="comment">//进行编码的文本</span></span><br><span class="line">    fgets(text, <span class="number">1000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; text[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = text[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[j].c == c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hc[j]);</span><br><span class="line">                <span class="built_in">strcat</span>(encoding_text, hc[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Young_IT/article/details/106730343">哈夫曼编码详解——图解真能看了秒懂_Young_IT的博客-CSDN博客</a></p><p><a href="http://data.biancheng.net/view/101.html">哈夫曼（赫夫曼，哈弗曼）编码算法（带源码+解析） (biancheng.net)</a></p><p><a href="https://www.cnblogs.com/kubixuesheng/p/4397798.html">哈夫曼（huffman）树和哈夫曼编码 - dashuai的博客 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data_structure </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于指针和函数</title>
      <link href="2021/04/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于函数和指针"><a href="#关于函数和指针" class="headerlink" title="关于函数和指针"></a>关于函数和指针</h1><p>这几天瞎写的时候关于指针以及malloc产生了一些问题。</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">initial</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">    p = initial(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">initial</span><span class="params">(<span class="keyword">int</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//在函数中，指针p的地址变了</span></span><br><span class="line">    *p = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void initial(int* p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">      p = (int*)malloc(sizeof(int));//在函数中，指针p的地址变了</span></span><br><span class="line"><span class="comment">    //为p分配地址,但退栈后p的地址没了（找不到了）</span></span><br><span class="line"><span class="comment">    *p = 5;</span></span><br><span class="line"><span class="comment">    printf(&quot;%p %p\n&quot;,p,&amp;p);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>运行截图</p><p>如果用return返回在函数中用malloc分配得到的指针</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429195130.png" alt="QQ截图20210429195130"></p><p>p是一个指向int类型的指针,其值一开始设置为NULL,指针的地址是61fe18,但在函数中利用malloc分配后得到的新值为6b1640,并且指针本身的地址也不一样。</p><p>这是因为调用函数时,生成栈,参数只是一层浅拷贝,值相同,但地址不同，这就是函数的机制吧.</p><p>再举个例子,比如说</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;n);</span><br><span class="line">func(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429200528.png" alt="QQ截图20210429200528"></p><p>可以发现地址并不同,这也说明了地址的变化.</p><p>如果不用return返回,运行截图所示,根据刚才函数机制可知,指针的值(即所指向值的地址)并不会变化。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429195214.png" alt="QQ截图20210429195214"></p><p>所以可以得到第一个结论了。</p><p><strong>指针也是一个变量，我们如果要改变它，必须找到它在内存中的地址，也就是指针的地址。也就是说，对于函数中，如果对指针的地址进行赋值，事实上是改变不了原指针的！</strong></p><p>所以解决方法主要两个,在c中利用二级指针改变指针的地址.</p><p>如果在cpp中即可利用引用类型&amp;比较方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*Bitree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(Bitree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Bitree t = (Bitree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,t);</span><br><span class="line">    initial(t);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子孩子结点为空k\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,t-&gt;lchild);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,t-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t-&gt;lchild-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(Bitree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,root);</span><br><span class="line">    <span class="comment">// scanf(&quot;%c&quot;,&amp;root-&gt;data);</span></span><br><span class="line">    root-&gt;lchild = (Bitree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,root-&gt;lchild);   <span class="comment">//this pointer&#x27;s value ,means pointed object addres</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/04/29/EBN1HXtmY8DLRMT.png" alt="20214291"></p><p>可知,指针传入函数后,其值(即指向值的地址)未变,在函数中为子节点申请了空间,在函数外也能通过其访问。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210429205005.png" alt="QQ截图20210429204704"></p><p>内存分配的知识：</p><p>1、参数、局部变量分配在栈区中。编译器自动回收<br>2、malloc申请的内存分配在堆上，由程序结束OS回收3、全局（静态区），全局变量和静态变量，由程序结束OS回收</p><p>在函数中利用malloc分配空间或为指针赋值需要注意：</p><ol><li>函数的参数是浅拷贝,地址与实参不同,如果要相同,在cpp中用&amp;引用参数</li><li>在函数内为指针分配地址时,栈退后会使得这个分配得到的地址无法引用,指针的地址依然是调用前,值没有改变</li></ol>]]></content>
      
      
      <categories>
          
          <category> 误区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 指针 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广义表简介</title>
      <link href="2021/04/23/%E5%B9%BF%E4%B9%89%E8%A1%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2021/04/23/%E5%B9%BF%E4%B9%89%E8%A1%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="广义表简介"><a href="#广义表简介" class="headerlink" title="广义表简介"></a>广义表简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>广义表是n个数据元素组成的有限序列</p><script type="math/tex; mode=display">GL =  (d_1,d_2,d_3,...,d_n)</script><p>GL是广义表的名字,n是广义表的长度.</p><span id="more"></span><p>广义表中的元素既可以是单个元素,也可以是广义表.</p><p>若d<sub>i</sub>为广义表,则可称为是GL的子表.<br>广义表的表头:d<sub>1</sub>是广义表的表头,即广义表的第一个元素</p><p>通常，广义表中存储的单个元素称为 “原子”，而存储的广义表称为 “子表”。</p><p>广义表的表尾:广义表的GL其余部分组成的表,即(d<sub>2</sub>,d<sub>3</sub>,…,d<sub>n</sub>)为表尾</p><p><strong>除非广义表为空表，否则广义表一定具有表头和表尾，且广义表的表尾一定是一个广义表。</strong></p><p>广义表是递归定义的.</p><ul><li>A = ()：A 表示一个广义表，只不过表是空的。</li><li>B = (e)：广义表 B 中只有一个原子 e。</li><li>C = (a,(b,c,d)) ：广义表 C 中有两个元素，原子 a 和子表 (b,c,d)。</li><li>D = (A,B,C)：广义表 D 中存有 3 个子表，分别是A、B和C。这种表示方式等同于 D = ((),(e),(b,c,d)) 。</li><li>E = (a,E)：广义表 E 中有两个元素，原子 a 和它本身。这是一个递归广义表，等同于：E = (a,(a,(a,…)))。</li></ul><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>由于<a href="http://data.biancheng.net/view/189.html">广义表</a>中既可存储原子（不可再分的数据元素），也可以存储子表，因此很难使用顺序存储结构表示，通常情况下广义表结构采用<a href="http://data.biancheng.net/view/160.html">链表</a>实现.</p><h3 id="头尾链表存储结构"><a href="#头尾链表存储结构" class="headerlink" title="头尾链表存储结构"></a>头尾链表存储结构</h3><p>表中每个元素用一个结点表示,表中有两类结点:</p><ol><li>单个元素结点 </li><li>子表节点</li></ol><p>任何非空的子表都可以分成表头和表尾两部分</p><p>元素节点需要值域和标志域,表结点由标志域和指向表头,表尾的指针组成</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/4_23_%E5%B9%BF%E4%B9%89%E8%A1%A8.png" alt="4_23_广义表"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>ATOM,LIST&#125; ElemTag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span>&#123;</span></span><br><span class="line">    ElemTag tag;<span class="comment">//标志域</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        AtomType atom;<span class="comment">//原子结点的值域</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">hp</span>,*<span class="title">tp</span>;</span><span class="comment">//表头结点指针与表尾结点</span></span><br><span class="line">        &#125;htp;<span class="comment">//子表结点的指针域，hp指向表头；tp指向表尾</span></span><br><span class="line">    &#125;atom_htp;<span class="comment">//原子值域与表结点指针域的联合体</span></span><br><span class="line">&#125;GLNode,*Glist;</span><br></pre></td></tr></table></figure><h3 id="广义表同层节点链存储结构"><a href="#广义表同层节点链存储结构" class="headerlink" title="广义表同层节点链存储结构"></a>广义表同层节点链存储结构</h3><p>在这种结构中,无论是原子结点还是表结点都由三个域构成</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/4_12_%E5%B9%BF%E4%B9%89%E8%A1%A8(2).png" alt="4_12_广义表(2)"  /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>ATOM,LIST&#125; ElemTag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span>&#123;</span></span><br><span class="line">    ElemTag tag;<span class="comment">//标志域</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        AtomType atom;<span class="comment">//原子结点的值域</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> *<span class="title">hp</span>;</span><span class="comment">//子表结点的指针域，hp指向表头</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">tp</span>;</span><span class="comment">//同层下一个结点的指针域</span></span><br><span class="line">    <span class="comment">//这里的tp相当于链表的next指针，用于指向下一个数据元素</span></span><br><span class="line">&#125;GLNode,*Glist;</span><br></pre></td></tr></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    <span class="comment">//tag = 0为原子</span></span><br><span class="line">    <span class="comment">//tag =1 为子表</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">hp</span>,*<span class="title">tp</span>;</span></span><br><span class="line">        &#125;htp;</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">    &#125;atom_htp;</span><br><span class="line">&#125;GLNode,*GList;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Head</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function">GList <span class="title">Tail</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountAtom</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CopyGList</span><span class="params">(GList,GList*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Head</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Head(L-&gt;atom_htp.htp.hp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Tail</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Tail(L-&gt;atom_htp.htp.tp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    GList s;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    s = L;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        s = s-&gt;atom_htp.htp.tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d,max;</span><br><span class="line">    GList s;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag ==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s = L;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        d = Depth(s-&gt;atom_htp.htp.hp);</span><br><span class="line">        <span class="keyword">if</span>(d&gt;max)</span><br><span class="line">        max =d;</span><br><span class="line">        s = s-&gt;atom_htp.htp.tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountAtom</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1,n2;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    n1 = CountAtom(L-&gt;atom_htp.htp.hp);</span><br><span class="line">    n2 = CountAtom(L-&gt;atom_htp.htp.tp);</span><br><span class="line">    <span class="keyword">return</span> (n1+n2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CopyGList</span><span class="params">(GList S,GList *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;*T == <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    (*T)-&gt;atom_htp.data = S-&gt;atom_htp.data;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CopyGList(S-&gt;atom_htp.htp.hp,&amp;((*T)-&gt;atom_htp.htp.hp));</span><br><span class="line">        CopyGList(S-&gt;atom_htp.htp.tp,&amp;((*T)-&gt;atom_htp.htp.tp));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data_structure </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏矩阵</title>
      <link href="2021/04/20/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>2021/04/20/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>概念：矩阵中大多数元素为0。</p><p>直观上讲非零元素低于5%。</p><p>零元素代表着没有意义的值，所以零元素较多情况下，用链表代替存储比二维数组要好很多。</p><p>下面介绍三种表示方法</p><span id="more"></span><h2 id="2-三元组表示"><a href="#2-三元组表示" class="headerlink" title="2.三元组表示"></a>2.三元组表示</h2><p>只存储非零元素，由于非零元素位置不存在概率，则利用行，列，值的信息进行存储，这是容易想到的。</p><script type="math/tex; mode=display">\left\{\begin{matrix}0 & 4 & 0 \\1 & 2 & 0 \\0 & 0 & 6 \end{matrix}\right\}\tag{1}</script><p>随便写个例子(虽然不满足稀疏矩阵定义)</p><p>三元组表示法可以写为（假设起始行与列为1）一维数组。</p><p>TSMatrix[0],TSMatrix[1],TSMatrix[2]</p><p>数组元素为结构体Triple,结构体包含行列与值的信息</p><p>三元组表中的元素是有序排列的。(按照行优先、行相同列大小方式)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 20000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="keyword">int</span>  i, j;<span class="comment">/* 行号和列号 */</span></span><br><span class="line">        ElemType  elem;<span class="comment">/* 元素值 */</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        Triple  data[MaxSize];</span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">/* 行数、列数和非零元个数*/</span></span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种表示法节省了空间</p><h3 id="1-三元组表示法转置"><a href="#1-三元组表示法转置" class="headerlink" title="1.三元组表示法转置"></a>1.三元组表示法转置</h3><p>矩阵转置是将行(列)上的元素换到列(行)上</p><p>不用三元组表示的话，利用两层for循环，效率O(m*n)</p><p><strong>列序递增转置法</strong></p><p>采用被转置矩阵三元组表A的列序递增进行转置，这样转置后的矩阵三元组表是以行序递增的。</p><p>所以，先以被转置矩阵A的列为主序,内层为每个A矩阵的非零元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TransposeSMatrix</span> <span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//M为被转置矩阵，T为转置后的矩阵</span></span><br><span class="line">    <span class="keyword">int</span>  p, q, col;</span><br><span class="line">    T-&gt;mu = M.nu;  T-&gt;nu = M.mu;  T-&gt;tu = M.tu;<span class="comment">//T的行数为M的列数</span></span><br><span class="line">    <span class="keyword">if</span> (T-&gt;tu)&#123;</span><br><span class="line">        q = <span class="number">0</span>;<span class="comment">//q可以计数,当转置一个后q+1</span></span><br><span class="line">        <span class="keyword">for</span> (col = <span class="number">0</span>; col&lt; M.nu; ++col)</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p&lt; M.tu; ++p)<span class="comment">//p为三元组表元素的位置，for循环不断扫描三元组表,查看是否有元素的列数为col，若有则转置</span></span><br><span class="line">                <span class="keyword">if</span> (M.data[p].j == col) &#123;</span><br><span class="line">                    T-&gt;data[q].i = M.data[p].j;</span><br><span class="line">                    T-&gt;data[q].j = M.data[p].i;</span><br><span class="line">                    T-&gt;data[q].elem = M.data[p].elem;</span><br><span class="line">                    q++;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法时间效率O(M.nu×M.tu),for两层循环</p><p>当矩阵中非零元个数tu和mu<em>nu同数量级时，则该算法的时间复杂度为O(M.mu</em>M.nu2）。因此该算法只适用于M.tu &lt;&lt; M.mu*M.nu的情况。</p><p><strong>一次定位快速转置法</strong></p><p>刚才的算法效率并不是很高，想要提高可以通过减少for循环</p><p>如果能预先确定矩阵M中每一列（即T中的每一行）的第一个非零元素在T中的合适位置，那么在对M进行转置时就可以直接放到T中的恰当位置上去。为了确定这些位置，应先求得M的每一列中非零元的个数，进而求得每一列的第一个非零元在T中的位置。(M为被转置矩阵，T为转置后的矩阵)</p><p>为了”一次定位”，需要知道</p><ol><li>待转置矩阵A中的每一列非零元素总数</li><li>A中的每一列第一个非零元素在三元组表中位置</li></ol><p>对于第一个,就是转制后矩阵B每一行的非零元个数，设数组num[],则num[col]表示A的第col列非零元素个数;对于第二点,设pos[]，pos[col]表示A的第col列第一个非零元在<strong>B三元组表</strong>的位置。</p><p>num[]比较好算，扫一遍三元组表，遇到col值便+1(数组下标法)</p><p>pos[]要麻烦一点，它是三元组表中元素的位置,可以通过迭加计算</p><p>pos[1] = 1（假设,这里也可以是0，随意了）</p><p>pos[col] = pos[col-1] + num[col-1]</p><p>具体做法是pos[col]是第col列第一个非零元在三元组表的顺序，当有一个元素加入到B时，则pos[col] = pos[col]+1,使pos[col]始终指向A中第col列中下一个非零元在B的正确存放位置。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418161823660.png" alt="image-20210418161823660" style="zoom:80%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418161944713.png" alt="image-20210418161944713" style="zoom:80%;" /></p><p>如上图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">FastTransposeSMatrix</span> <span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">int</span>   col, p, q, t;</span><br><span class="line">      T-&gt;mu = M.nu; T-&gt;nu = M.mu; T-&gt;tu = M.tu;</span><br><span class="line">      <span class="keyword">if</span> (T-&gt;tu) &#123;</span><br><span class="line">            <span class="keyword">for</span> (col=<span class="number">0</span>; col&lt; M.nu; ++col)  num[col] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; M.tu; ++t) <span class="comment">/*统计每列的非零元个数*/</span></span><br><span class="line">                  ++num[M.data[t].j];</span><br><span class="line">            cpot[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">/*计算每列第一个非零元转置后的位置*/</span></span><br><span class="line">          <span class="keyword">for</span> (col = <span class="number">1</span>; col &lt; M.nu; ++col)</span><br><span class="line">     cpot[col] = cpot[col<span class="number">-1</span>] +num[col<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; M.tu; ++p)&#123;</span><br><span class="line">                  col = M.data[p].j; q = cpot[col];</span><br><span class="line">           T-&gt;data[q].i =M.data[p].j; </span><br><span class="line">          T-&gt;data[q].j = M.data[p].i;</span><br><span class="line">          T-&gt;data[q].elem =M.data[p].elem;</span><br><span class="line">              ++cpot[col];<span class="comment">//当一列有一个元素转置后，位置+1指向下一个该列非零元素</span></span><br><span class="line">            &#125;  <span class="comment">/* for */</span></span><br><span class="line">      &#125;  <span class="comment">/* if */</span></span><br><span class="line">      <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(M.nu+M.tu)。<br>即使非零元个数与mu<em>nu同数量级，其时间复杂度为O(M.mu </em> M.nu)，与经典算法时间复杂度相同</p><p><strong>总结</strong></p><p>三元组顺序表（有序的双下标法）的特点：<br>（1）便于进行以行顺序处理的矩阵运算。<br>（2）若需按行号存取某一行的非零元，需从开始进行查找。</p><h3 id="2-三元组表示法加法"><a href="#2-三元组表示法加法" class="headerlink" title="2.三元组表示法加法"></a>2.三元组表示法加法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tripe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> col;</span><br><span class="line">&#125; Tripe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSmatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    Tripe Element[maxsize];</span><br><span class="line">&#125; TSmatrix, *pTsmatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix, pTsmatrix, pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pTsmatrix a = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix b = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix c = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    <span class="keyword">int</span> r,col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;r,&amp;col);</span><br><span class="line">    a-&gt;row = b-&gt;row = c-&gt;row = r;</span><br><span class="line">    a-&gt;col = b-&gt;col = c-&gt;col = col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a-&gt;num, &amp;b-&gt;num);</span><br><span class="line">    initial(a);</span><br><span class="line">    initial(b);</span><br><span class="line">    add(a, b, c);</span><br><span class="line">    print(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= result-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, result-&gt;Element[i].row, result-&gt;Element[i].col, result-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix a, pTsmatrix b, pTsmatrix c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= a-&gt;num) &amp;&amp; (j &lt;= b-&gt;num))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((a-&gt;Element[i].row == b-&gt;Element[j].row) &amp;&amp; (a-&gt;Element[i].col == b-&gt;Element[j].col))</span><br><span class="line">        &#123;<span class="comment">//两个非零元行相同列相同，则进行相加并判断值是否为0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((a-&gt;Element[i].data + b-&gt;Element[j].data) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值为0则不管，i,j递增</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                c-&gt;Element[k].data = a-&gt;Element[i].data + b-&gt;Element[j].data;</span><br><span class="line">                c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">                c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值不为0,则赋值并递增i,j,k</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((a-&gt;Element[i].row &lt; b-&gt;Element[j].row) || (a-&gt;Element[i].row == b-&gt;Element[j].row &amp;&amp; (a-&gt;Element[i].col &lt; b-&gt;Element[j].col)))</span><br><span class="line">        &#123;<span class="comment">//若a的非零元行数小于b的非零元,意味着c = a+0 则直接将a的值赋给c</span></span><br><span class="line">        <span class="comment">//后面同理，因为a元素对应在b矩阵处值为0</span></span><br><span class="line">        <span class="comment">//i,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">            c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">            c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//剩下的情况就是b矩阵的值的位置对应在a矩阵中的值为0</span></span><br><span class="line">        <span class="comment">//即 c = 0+b</span></span><br><span class="line">        <span class="comment">//j,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">            c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">            c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= a-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//若a矩阵中还有未处理完的非零元，则直接加上</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">        c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">        c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= b-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//道理同上,b矩阵的值直接赋给c</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">        c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">        c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    c-&gt;num = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;p-&gt;Element[i].row, &amp;p-&gt;Element[i].col, &amp;p-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-行逻辑连接的顺序表"><a href="#3-行逻辑连接的顺序表" class="headerlink" title="3.行逻辑连接的顺序表"></a>3.行逻辑连接的顺序表</h2><p>由上题快速转置，我们可以想到将pos[]数组放在结构体里，得到行逻辑连接顺序表</p><p>概念:为了便于随机存取任意一行的非零元，则需知道每一行的第一个非零元在三元组表中的位置。为此，可将快速转置矩阵的算法中创建的辅助数组cpot，rpos固定在稀疏矩阵的存储结构中。这种带“行链接信息”的三元组表称为行逻辑链接的顺序表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        Triple  data[MaxSize];</span><br><span class="line">        <span class="keyword">int</span>  rpos[MaxRC+<span class="number">1</span>];<span class="comment">//数组起始下标为1</span></span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">//分别为行数，列数，非零元个数</span></span><br><span class="line">&#125;RLSMatrix;</span><br></pre></td></tr></table></figure><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><p>以上述结构进行矩阵乘法，可以体现出其优越性</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418163820144.png" alt="image-20210418163820144"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C=AxB</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++) </span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;l; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">            C[i][j] += A[i][k]*B[k][j]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>矩阵的乘法，当两个值其中一个为0，则乘积为0，因此，应免去这种无效操作。</p><p>例如矩阵元素(1,2,4)与(2,3,6)则可以算出(1,3,24)</p><p>但是若没有相对应的元素(即左乘数的列==右乘数的行),则乘积为0.</p><p>因此,只需在右乘数中寻找符合的非零值，利用上述数据结构特点。</p><p>rpos[row]为第row行第一个非零元素在三元组表中的位置</p><p><strong>基本操作</strong></p><p>M×N</p><p>对于M中每个元素，找到N中满足条件的值，求的乘积。</p><p>矩阵相应位置的值为几个乘积的和，所以设置一个累计和的变量，初值为0.</p><p><strong>易忽略点</strong></p><p>两个稀疏矩阵相乘的值不一定是稀疏矩阵。</p><p>因为几个乘积的和不一定非零，所以算出值后需要检验。</p><p>若为0则跳过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">MultiSMatrix</span><span class="params">(RLSMatrix M, RLSMatrix N, RLSMatrix *Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arow, brow, ccol, p, q, t;</span><br><span class="line">    <span class="keyword">float</span> ctemp[];</span><br><span class="line">    <span class="keyword">if</span> (M.mu != N.nu)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    Q-&gt;mu = M.mu;</span><br><span class="line">    Q-&gt;nu = N.nu;</span><br><span class="line">    Q-&gt;tu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (M.tu * N.tu != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (arow = <span class="number">0</span>; arow &lt; M.mu; ++arow)</span><br><span class="line">        &#123;</span><br><span class="line">            ctemp[] = <span class="number">0</span>; <span class="comment">//memset(ctemp,0,n*sizeof(float));</span></span><br><span class="line">            Q-&gt;rpos[arow] = Q-&gt;tu;</span><br><span class="line">            <span class="keyword">for</span> (p = M.rpos[arow]; p &lt; M.rpos[arow + <span class="number">1</span>]; ++p)</span><br><span class="line">            &#123;</span><br><span class="line">                brow = M.data[p].j;</span><br><span class="line">                <span class="keyword">for</span> (q = N.rpos[brow]; q &lt; N.rpos[brow + <span class="number">1</span>]; ++q)</span><br><span class="line">                &#123;</span><br><span class="line">                    ccol = N.data[q].j;</span><br><span class="line">                    ctemp[ccol] += M.data[p].elem * N.data[q].elem;</span><br><span class="line">                &#125; <span class="comment">//for q</span></span><br><span class="line">            &#125;     <span class="comment">// for p</span></span><br><span class="line"> <span class="keyword">for</span> (ccol = <span class="number">0</span>; ccol &lt; Q.nu; ++ccol)</span><br><span class="line">            &#123;</span><br><span class="line">       <span class="keyword">if</span> (ctemp[ccol] &#123;</span><br><span class="line">          <span class="keyword">if</span> (++Q-&gt;tu &gt; MAXSIZE)</span><br><span class="line">                     <span class="keyword">return</span> ERROR;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                 Q-&gt;data[Q-&gt;tu].i = arow;</span><br><span class="line">                 Q-&gt;data[Q-&gt;tu].j =ccol;</span><br><span class="line">          Q-&gt;data[Q-&gt;tu].elem=ctemp[ccol];</span><br><span class="line">                    &#125; <span class="comment">//else</span></span><br><span class="line">                   &#125; <span class="comment">//if</span></span><br><span class="line">            &#125;  <span class="comment">//for ccol</span></span><br><span class="line">      &#125; <span class="comment">//for arrow</span></span><br><span class="line">   &#125;  <span class="comment">//if</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度    O(M.mu×N.nu+M.tu×N.tu/N.mu)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418181608401.png" alt="image-20210418181608401" style="zoom:80%;" /></p><h2 id="4-十字链表"><a href="#4-十字链表" class="headerlink" title="4.十字链表"></a>4.十字链表</h2><p>当需要进行矩阵加法,减法,乘法时，矩阵中非零元素个数和位置会发生变化，若用三元组表表示会移动大量元素,相对较麻烦.</p><p>十字链表能够灵活插入因运算产生的新的非零元素,删除因运算产生的新的零元素.</p><p>由于矩阵有行和列，所以一个结点除了数据域(i, j, elem)之外，还应该用两个方向的指针(right, down)，分别指向行和列。这样整个矩阵构成了一个十字交叉的链表，因此称十字链表。每一行或每一列的头指针，可以用两个一维指针数组来存放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="keyword">int</span>  i, j;</span><br><span class="line">        ElemType  elem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">right</span>, *<span class="title">down</span>;</span></span><br><span class="line">&#125;OLNode, *OLink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        OLink  *rHead, *cHead;</span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">//行数，列数，非零元个数</span></span><br><span class="line">&#125;CrossList;</span><br></pre></td></tr></table></figure><p>初始化十字链表</p><p><strong>算法实现</strong></p><ol><li>读入稀疏矩阵行数列数，非零元个数</li><li>动态申请行链表,列链表头指针向量</li><li>逐个读入非零元，分别插入行链表,列链表</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">CreateOLSMatrix</span> <span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (M) <span class="built_in">free</span>(M); <span class="built_in">scanf</span>(&amp;m, &amp;n, &amp;t);</span><br><span class="line">    M.mu=m; M.nu=n; M.tu=t;</span><br><span class="line">    <span class="keyword">if</span> (!(M.rhead=(OLink *) <span class="built_in">malloc</span> ((m+<span class="number">1</span>)*<span class="keyword">sizeof</span>(OLink)))) </span><br><span class="line">        <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">    <span class="keyword">if</span> (!(M.chead=(OLink *) <span class="built_in">malloc</span> ((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(OLink)))) </span><br><span class="line">        <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">scanf</span>(&amp;i, &amp;j, &amp;e); i!=<span class="number">0</span>; <span class="built_in">scanf</span>(&amp;i, &amp;j, &amp;e))  &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(p=(OLink*) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(OLNode))) <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">        p-&gt;i=i; p-&gt;j=j; p-&gt;elem=e;</span><br><span class="line">        <span class="keyword">if</span> (M.rhead[i]==<span class="literal">NULL</span> || M.rhead[i]-&gt;j &gt; j)  &#123;</span><br><span class="line">            p-&gt;right=M.rhead[i]; M.rhead[i]=p; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (q=M.rhead[i]; (q-&gt;right) &amp;&amp; q-&gt;right-&gt;j &lt; j; q=q-&gt;right);</span><br><span class="line">            p-&gt;right=q-&gt;right; q-&gt;right=p;</span><br><span class="line">        &#125;  <span class="comment">//完成行插入</span></span><br><span class="line"><span class="keyword">if</span> (M.chead[j]==<span class="literal">NULL</span> || M.chead[j]-&gt;i &gt; i)  &#123;</span><br><span class="line">            p-&gt;down=M.chead[j]; M.chead[j]=p; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (q=M.chead[j]; (q-&gt;down) &amp;&amp; q-&gt;down-&gt;i &lt; i; q=q-&gt;down);</span><br><span class="line">            p-&gt;down=q-&gt;down; q-&gt;down=p;</span><br><span class="line">        &#125;  <span class="comment">//完成列插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h3><p><strong>算法原理</strong></p><p>​       对每一行都用行表头出发分别找到A和B在该行中的第一个非零元，假设非空指针pa和pb分别指向矩阵A和B中行值相同的两个结点，</p><p>将B加到A上去时，对A矩阵的十字链表来说,要么改变值(!=0),或者不变(b=0),或者插入一个节点(a=0),或者相加和为0，操作时删除这个节点.</p><p>整个运算从从矩阵第一行逐行进行,对每一行都从行表头出发分别找到A和B在该行的第一个非零元节点后开始比较</p><p>（1）若pa==NULL或pa-&gt;j&gt;pb-&gt;j，则需要在A中插入B结点；<br>（2）若pa-&gt;j==pb-&gt;j，且pa-&gt;elem+pb-&gt;elem!=0，则A结点改值；<br>（3）若pa-&gt;j==pb-&gt;j，且pa-&gt;elem+pb-&gt;elem==0，则需要删除A结点；<br>（4）若pa-&gt;j<pb->j，则只要将pa指针往右推进。<br>        为了便于插入和删除结点，需要设立一些辅助指针，比如pre指针指示pa所指结点的前驱结点，每一列也要设立一个指针hl[j]，初始值和列链表的头指针相同chead[j]。</p><ol><li>若pa ==NULL或pa-&gt;j&gt;pb-&gt;j,表明当前行元素已处理完,需要在A矩阵的链表中插入一个B的节点，也就是要改变pa前一个节点的right域同时改变添加节点所在列上一节点的down域</li><li>若pa-&gt;j<pb->j,使pa节点后移即可，注意改变pre</li><li>若pa-&gt;j == pb-&gt;j，两值相加，注意值是否为0，若为0删除该节点，不为0改变值即可</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">down</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125; OLNode, *OLlink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    OLlink *rhead, *chead; <span class="comment">//指向行或列第一个非零元(指向结构体的指针),可以用数组rhead[row]表示第row行的数据</span></span><br><span class="line">    <span class="keyword">int</span> m, n, len;         <span class="comment">//行列数,非零元个数</span></span><br><span class="line">&#125; CrossList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *, CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CrossList *M = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    CrossList *N = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;m, &amp;M-&gt;n);</span><br><span class="line">    N-&gt;m = M-&gt;m;</span><br><span class="line">    N-&gt;n = M-&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;len, &amp;N-&gt;len);</span><br><span class="line">    initial(M);</span><br><span class="line">    initial(N);</span><br><span class="line">    plus(M, N);</span><br><span class="line">    print(M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink pa = M-&gt;rhead[row];</span><br><span class="line">        <span class="keyword">while</span> (pa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, pa-&gt;i, pa-&gt;j, pa-&gt;e);</span><br><span class="line">            pa = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *M, CrossList *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink pa, pb;</span><br><span class="line">    OLlink pre; <span class="comment">//指向前面一个节点,方便插入</span></span><br><span class="line">    OLlink *hl = (OLlink *)<span class="built_in">malloc</span>((M-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M-&gt;n; j++)</span><br><span class="line">        hl[j] = M-&gt;chead[j]; <span class="comment">//hl[]表示的是每列非零元的pre指向元素，与pre类似</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++) <span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        pa = M-&gt;rhead[row];</span><br><span class="line">        pb = N-&gt;rhead[row];</span><br><span class="line">        pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (pb) <span class="comment">//当pb有非零元素时进行处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa == <span class="literal">NULL</span> || pa-&gt;j &gt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                Insert(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa != <span class="literal">NULL</span> &amp;&amp; pa-&gt;j &lt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                pre = pa;</span><br><span class="line">                pa = pa-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa-&gt;j == pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                add(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = pa-&gt;e + pb-&gt;e;</span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;e = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OLlink temp = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">            M-&gt;rhead[pa-&gt;i] = pa-&gt;right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            (*pre)-&gt;right = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = pa;</span><br><span class="line">        pa = pa-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (M-&gt;chead[temp-&gt;j] == temp)</span><br><span class="line">            M-&gt;chead[temp-&gt;j] = hl[temp-&gt;j] = temp-&gt;down;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hl[temp-&gt;j]-&gt;down = temp-&gt;down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span> <span class="comment">//插入有两种情况，一种是pa该行无非零元素，另一种pb所在列小于pa所在列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink p = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    p-&gt;i = pb-&gt;i;</span><br><span class="line">    p-&gt;j = pb-&gt;j;</span><br><span class="line">    p-&gt;e = pb-&gt;e;</span><br><span class="line">    p-&gt;down = p-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        M-&gt;rhead[p-&gt;i] = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*pre)-&gt;right = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;right = pa;</span><br><span class="line">    </span><br><span class="line">    (*pre) = p;</span><br><span class="line">    pa = (*pre)-&gt;right;<span class="comment">//这一句可以不要</span></span><br><span class="line">    <span class="keyword">if</span> (!M-&gt;chead[p-&gt;j] || M-&gt;chead[p-&gt;j]-&gt;i &gt; p-&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = M-&gt;chead[p-&gt;j];</span><br><span class="line">        M-&gt;chead[p-&gt;j] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = hl[p-&gt;j]-&gt;down;</span><br><span class="line">        hl[p-&gt;j]-&gt;down = p;</span><br><span class="line">    &#125;</span><br><span class="line">    hl[p-&gt;j] = p;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *Clist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    Clist-&gt;rhead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    Clist-&gt;chead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    <span class="comment">// if(rhead||chead)</span></span><br><span class="line">    <span class="comment">// exit(1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;m; i++)</span><br><span class="line">        Clist-&gt;rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;n; i++)</span><br><span class="line">        Clist-&gt;chead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    OLlink s = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; Clist-&gt;len; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink cur = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        cur-&gt;down = <span class="literal">NULL</span>;</span><br><span class="line">        cur-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// if(cur==NULL)</span></span><br><span class="line">        <span class="comment">// exit(1);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;e);</span><br><span class="line">        cur-&gt;i = i;</span><br><span class="line">        cur-&gt;j = j;</span><br><span class="line">        cur-&gt;e = e;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;rhead[i] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Clist-&gt;rhead[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;rhead[i];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;right != <span class="literal">NULL</span> &amp;&amp; s-&gt;right-&gt;j &lt; j)</span><br><span class="line">                s = s-&gt;right;</span><br><span class="line">            cur-&gt;right = s-&gt;right;</span><br><span class="line">            s-&gt;right = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;chead[j] == <span class="literal">NULL</span>)</span><br><span class="line">            Clist-&gt;chead[j] = cur;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;chead[j];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;down != <span class="literal">NULL</span> &amp;&amp; s-&gt;down-&gt;i &lt; i)</span><br><span class="line">                s = s-&gt;down;</span><br><span class="line">            cur-&gt;down = s-&gt;down;</span><br><span class="line">            s-&gt;down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data_structure </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-4-15-数据结构noj_1</title>
      <link href="2021/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_1/"/>
      <url>2021/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构noj-1"><a href="#数据结构noj-1" class="headerlink" title="数据结构noj_1"></a>数据结构noj_1</h1><p>个人做的，不当之处欢迎提出，希望一起改进。</p><p>先发前10题  <del>因为后面我也没做</del></p><span id="more"></span><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000331032.png" alt="image-20210416000331032"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elenum;</span><br><span class="line">    <span class="keyword">int</span> element[maxsize];</span><br><span class="line">&#125;<span class="built_in">list</span>,* plist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> insert_num;</span><br><span class="line">    <span class="keyword">int</span> i,j;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;size);</span><br><span class="line">    plist l = (plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line"> </span><br><span class="line">        l-&gt;elenum=size;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;l-&gt;elenum ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">            l-&gt;element[i] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;insert_num);      </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;l-&gt;elenum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l-&gt;element[i]&gt;=insert_num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>( j = size;j&gt;i;j--)</span><br><span class="line">                &#123;</span><br><span class="line">                l-&gt;element[j] = l-&gt;element[j<span class="number">-1</span>];      </span><br><span class="line">                &#125;</span><br><span class="line">                l-&gt;element[j] = insert_num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==l-&gt;elenum)</span><br><span class="line">        l-&gt;element[i] = insert_num;</span><br><span class="line">        l-&gt;elenum++;   </span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l-&gt;elenum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,l-&gt;element[i],(i==l-&gt;elenum<span class="number">-1</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000434268.png" alt="image-20210416000434268"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sequence_List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> element[maxsize];</span><br><span class="line">    <span class="keyword">int</span> elenum;</span><br><span class="line">&#125; List, *pList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *pLinkList;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList pa = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pLinkList pb, s, r;</span><br><span class="line">    <span class="keyword">int</span> size, i, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    pa-&gt;elenum = size;</span><br><span class="line">    pb = (pLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    s = pb;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        pa-&gt;element[i] = num;</span><br><span class="line">        r = (pLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        r-&gt;num = num;</span><br><span class="line">        s-&gt;next = r;</span><br><span class="line">        s = r;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= (size - <span class="number">1</span>) / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = pa-&gt;element[i];</span><br><span class="line">        pa-&gt;element[i] = pa-&gt;element[size - <span class="number">1</span> - i];</span><br><span class="line">        pa-&gt;element[size - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125; <span class="comment">//顺序表逆序</span></span><br><span class="line">    s = pb-&gt;next;</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Node *p;</span><br><span class="line">    <span class="keyword">while</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        p = s;</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">        p-&gt;next = pb-&gt;next;</span><br><span class="line">        pb-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;element[i], (i == size - <span class="number">1</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, p-&gt;num, (p-&gt;next == <span class="literal">NULL</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pa);</span><br><span class="line">    <span class="built_in">free</span>(pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000510643.png" alt="image-20210416000510643"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">&#125; List, *pList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(pList)</span></span>;</span><br><span class="line"><span class="function">pList <span class="title">cross_list</span><span class="params">(pList, pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(pList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_num</span><span class="params">(pList, pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    pList pa ;</span><br><span class="line">    pa = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pList pb = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pList pc = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;pa-&gt;length, &amp;pb-&gt;length, &amp;pc-&gt;length);</span><br><span class="line">    give_value(pa);</span><br><span class="line">    give_value(pb);</span><br><span class="line">    give_value(pc);</span><br><span class="line">    pb = cross_list(pb, pc);</span><br><span class="line">    delete_num(pa, pb);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pa-&gt;length; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;data[i], (i == pa-&gt;length - <span class="number">1</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pa);</span><br><span class="line">    <span class="built_in">free</span>(pb);</span><br><span class="line">    <span class="built_in">free</span>(pc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(pList p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; p-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        p-&gt;data[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pList <span class="title">cross_list</span><span class="params">(pList p, pList q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList result = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    t =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; p-&gt;length &amp;&amp; j &lt; q-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data[i] &gt; q-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j++;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data[i] &lt; q-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result-&gt;data[t] = p-&gt;data[i];</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result-&gt;length = t+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_num</span><span class="params">(pList pa, pList pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">int</span> j ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pb-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pa-&gt;length;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pb-&gt;data[i] &lt; pa-&gt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pb-&gt;data[i] &gt; pa-&gt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                delete_list (pa, j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(pList p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &lt; p-&gt;length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;data[i] = p-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000602232.png" alt="image-20210416000602232"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*Linklist;</span><br><span class="line"><span class="function">Linklist <span class="title">initial_list</span><span class="params">(Linklist,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(Linklist,Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist L,M;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    L = initial_list(L,n);</span><br><span class="line">    M = initial_list(M,m);</span><br><span class="line">    merge(L,M);</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,L-&gt;data,(L-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(Linklist pa,Linklist pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist p=pa-&gt;next,q=pb-&gt;next;</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&gt;q-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pa-&gt;next = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pa-&gt;next = q;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p<span class="comment">/* condition */</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;next = p;</span><br><span class="line">        pa = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;next = q;</span><br><span class="line">        pa = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pa-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Linklist <span class="title">initial_list</span><span class="params">(Linklist L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    Linklist s = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        s-&gt;data = num;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000639344.png" alt="image-20210416000639344"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *Linklist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(Linklist, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_list</span><span class="params">(Linklist, Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(Linklist, Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist pa = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Linklist pb = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Linklist pc = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">int</span> num_1, num_2, num_3;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;num_1, &amp;num_2, &amp;num_3);</span><br><span class="line">    give_value(pa, num_1);</span><br><span class="line">    give_value(pb, num_2);</span><br><span class="line">    give_value(pc, num_3);</span><br><span class="line">    cross_list(pb, pc);</span><br><span class="line">    delete_list(pa, pb);</span><br><span class="line">    <span class="keyword">while</span> (pa-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;next-&gt;data,(pa-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        pa = pa-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(Linklist pa, Linklist pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist tail = pa;</span><br><span class="line">    Linklist p = tail-&gt;next;</span><br><span class="line">    Linklist q;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        q = pb-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data == q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(tail-&gt;next);</span><br><span class="line">                tail-&gt;next = p;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            p = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(Linklist p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist s, r;</span><br><span class="line">    s = p;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        r = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r-&gt;data);</span><br><span class="line">        s-&gt;next = r;</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_list</span><span class="params">(Linklist p, Linklist q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist s, r, tail;</span><br><span class="line">    tail = p;</span><br><span class="line">    s = tail-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        r = q-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s-&gt;data == r-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">                s = tail-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = r-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(tail-&gt;next);</span><br><span class="line">            tail-&gt;next = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000713105.png" alt="image-20210416000713105"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">&#125; Node, *pNode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">const</span> pNode,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">const</span> pNode, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Locate_</span><span class="params">(<span class="keyword">const</span> pNode, <span class="keyword">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_List</span><span class="params">(<span class="keyword">const</span> pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode pa = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">int</span> size, l_size;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;size, &amp;l_size);</span><br><span class="line">    initial(pa, size);</span><br><span class="line">    <span class="keyword">while</span>(l_size--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;A&#x27;</span>||ch&gt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        &#125;</span><br><span class="line">        Locate_(pa,ch);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(pa,size);</span><br><span class="line">    print_List(pa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_List</span><span class="params">(pNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode r;</span><br><span class="line">    r = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(r != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,r-&gt;data,(r-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        r = r-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">const</span> pNode p,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pNode head,pa,pb;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      head = p;</span><br><span class="line">      pa = head-&gt;next;</span><br><span class="line">      pb = pa-&gt;next;</span><br><span class="line">      j = size-i<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">while</span>(j--)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(pa-&gt;freq&lt;pb-&gt;freq)</span><br><span class="line">          &#123;</span><br><span class="line">              pa-&gt;next = pb-&gt;next;</span><br><span class="line">              pb-&gt;next = pa;</span><br><span class="line">              head-&gt;next = pb;</span><br><span class="line">          &#125;</span><br><span class="line">          head = head-&gt;next;</span><br><span class="line">          pa = head-&gt;next;</span><br><span class="line">          pb = pa-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Locate_</span><span class="params">(<span class="keyword">const</span> pNode p, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode r = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (r != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r-&gt;data == ch)</span><br><span class="line">        &#123;</span><br><span class="line">            (r-&gt;freq)++;</span><br><span class="line">            <span class="comment">// printf(&quot;%c++\n&quot;,r-&gt;data);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">const</span> pNode p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode s, r;</span><br><span class="line">    r = p;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (size--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;A&#x27;</span>||ch&gt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;data = ch;</span><br><span class="line">        s-&gt;freq = <span class="number">0</span>;</span><br><span class="line">        s-&gt;pre = r;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        p-&gt;pre = s;</span><br><span class="line">        s-&gt;next = p;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000746427.png" alt="image-20210416000746427"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">stack</span>,*pStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_Pop</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    pStack op_stack = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">    op_stack-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch=getchar())!=EOF&amp;&amp;ch!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            push_(op_stack,ch);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span>(match(get_Pop(op_stack),ch))</span><br><span class="line">            &#123;</span><br><span class="line">                pop(op_stack);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack top,<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack s = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">    s-&gt;op = ch;</span><br><span class="line">    s-&gt;next = top-&gt;next;</span><br><span class="line">    top-&gt;next = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(pStack top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    pStack r = top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ret = r-&gt;op;</span><br><span class="line">    top-&gt;next = r-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(r);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_Pop</span><span class="params">(pStack top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    pStack r = top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ret = r-&gt;op;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> src,<span class="keyword">int</span> dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000817929.png" alt="image-20210416000817929"></p><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack_</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Stack_, *pStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_alpha</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_op</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bolan</span><span class="params">(pStack, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(pStack)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack opr = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack_));</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    opr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is_alpha(ch))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Bolan(opr, ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!is_empty(opr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, opr-&gt;next-&gt;data);</span><br><span class="line">        pop_(opr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(opr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(pStack pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pa-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_op</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_</span><span class="params">(pStack head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack pop_s = head-&gt;next;</span><br><span class="line">    head-&gt;next = pop_s-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pop_s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_</span><span class="params">(<span class="keyword">int</span> op_1, <span class="keyword">int</span> op_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op_1 == <span class="string">&#x27;*&#x27;</span> || op_1 == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (op_2 == <span class="string">&#x27;+&#x27;</span> || op_2 == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op_2 == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op_2 == <span class="number">0</span>)<span class="comment">//无元素，为空栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pStack head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty(head))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack head, <span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack r = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack_));</span><br><span class="line">    r-&gt;data = ch;</span><br><span class="line">    r-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_alpha</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bolan</span><span class="params">(pStack opr, <span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top_ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((top_ch = get_top(opr)) != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, top_ch);</span><br><span class="line">            pop_(opr);</span><br><span class="line">        &#125;</span><br><span class="line">        pop_(opr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        top_ch = get_top(opr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (compare_(ch, top_ch)) <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pop_(opr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, top_ch);</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416001130594.png" alt="image-20210416001130594"></p><p><strong>这个题系统设置有问题，不用太注意</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Element[maxsize];</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">&#125; Queue, *pQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="comment">// void push(pQueue, int);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pQueue <span class="built_in">queue</span> = (pQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initial(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="comment">// fflush(stdin);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;rear&lt;=<span class="built_in">queue</span>-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pop_date;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pop_date);</span><br><span class="line">    <span class="keyword">while</span>(get_top(<span class="built_in">queue</span>)!=pop_date)</span><br><span class="line">    &#123;</span><br><span class="line">        pop(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pop(<span class="built_in">queue</span>);</span><br><span class="line">    print(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> date;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q-&gt;length);</span><br><span class="line">    q-&gt;head = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;date);</span><br><span class="line">        q-&gt;Element[q-&gt;rear] = date;</span><br><span class="line">        (q-&gt;rear)++;</span><br><span class="line">    &#125;<span class="keyword">while</span>((q-&gt;rear&lt;q-&gt;length)&amp;&amp;getchar()!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (q-&gt;head)%q-&gt;length;i&lt;q-&gt;rear;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,q-&gt;Element[i],(i==q-&gt;rear<span class="number">-1</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head!=q-&gt;rear)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,get_top(q));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void push(pQueue q, int x)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     // if ((q-&gt;rear+1)%q-&gt;length==q-&gt;head)</span></span><br><span class="line"><span class="comment">//     // return false;</span></span><br><span class="line"><span class="comment">//     q-&gt;Element[q-&gt;rear] = x;</span></span><br><span class="line"><span class="comment">//     q-&gt;rear = (q-&gt;rear+1)%(q-&gt;length);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    x = q-&gt;Element[q-&gt;head];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if(q-&gt;head==q-&gt;rear)</span></span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line">    q-&gt;Element[q-&gt;head] = <span class="number">0</span>;</span><br><span class="line">    q-&gt;head = (q-&gt;head+<span class="number">1</span>)%q-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416001238359.png" alt="image-20210416001238359"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[Maxsize];</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">&#125; Queue, *pQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;        <span class="comment">//初始化队列，将前k项赋值，前k-1项为0，k项为1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fibonacci</span><span class="params">(pQueue, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//叠加，求得k的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;          <span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;max, &amp;k);</span><br><span class="line">    pQueue q = (pQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    initial(q, k);</span><br><span class="line">    fibonacci(q, max, k);</span><br><span class="line">    print(q, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue q, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = q-&gt;head; i &lt;= q-&gt;rear; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, q-&gt;data[i], (i == q-&gt;rear) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue q, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k - <span class="number">1</span>; i++)</span><br><span class="line">        q-&gt;data[i] = <span class="number">0</span>;</span><br><span class="line">    q-&gt;head = <span class="number">1</span>;</span><br><span class="line">    q-&gt;data[k] = <span class="number">1</span>;</span><br><span class="line">    q-&gt;rear = (q-&gt;head) + k - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fibonacci</span><span class="params">(pQueue q, <span class="keyword">int</span> max, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!((q-&gt;data[q-&gt;rear] &lt;= max) &amp;&amp; (q-&gt;data[(q-&gt;rear) + <span class="number">1</span>] &gt; max)))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        add(q, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pQueue q, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q-&gt;head += <span class="number">1</span>;</span><br><span class="line">    q-&gt;rear = q-&gt;head + t - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = q-&gt;head; k &lt;= (q-&gt;rear) + <span class="number">1</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k &lt; t)</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k == t)</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k - t; i &lt; k; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                q-&gt;data[k] += q-&gt;data[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data_structure </tag>
            
            <tag> c </tag>
            
            <tag> noj </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
