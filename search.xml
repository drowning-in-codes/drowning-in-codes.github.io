<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wm入坑</title>
      <link href="2021/10/20/wm%E5%85%A5%E5%9D%91/"/>
      <url>2021/10/20/wm%E5%85%A5%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>WM入门</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>wm，window manager</p><p>相当于是美化了</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>安装个好看的终端模拟器,这里我装alacritty</p><p>装一个i3wm或者dwm或者其他的wm</p><p>alacritty是用Rust写的,安装官方文档的一步一步来就行,需要装Rust编译器,<strong>注意</strong>我用的Ubuntu,本身带了rustc,需要先卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove rustc</span><br></pre></td></tr></table></figure><p>下面是下载Rust页面，default就行</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211011190048735.png" alt="image-20211011190048735" style="zoom:50%;" /></p><p>i3wm我是按照别人配置好了的文件直接下载的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install i3</span><br></pre></td></tr></table></figure><p><strong>注意</strong>,事实上不止要装i3,还有很多其他有用的包以及依赖.可以看看下面的参考资料,都很有用</p><p>参考</p><p><a href="https://www.youtube.com/watch?v=omhky9FgViU&amp;t=771s">Installing I3 Window Manager in Ubuntu 19.04 - YouTube</a></p><p>这个老哥挺好的,照着做就行</p><p><a href="https://www.youtube.com/watch?v=S5ra0DUDZww">Alacritty - A Fast Terminal Emulator with GPU Acceleration - YouTube</a></p><p><a href="https://github.com/alacritty/alacritty/blob/master/INSTALL.md">alacritty/INSTALL.md at master · alacritty/alacritty (github.com)</a></p><p>关于alacritty终端配置以及官方文档</p><p><a href="https://www.bilibili.com/video/BV11J411t7RY">【高效神器】dwm安装与配置（1） —— 极简的窗口管理器 【Suckless的极简主义02】_哔哩哔哩_bilibili</a></p><p>这是关于dwm的</p><p><a href="https://cxybb.com/article/weixin_43372529/106712115">i3wm美化与配置之使用feh进行随机壁纸的配置并透明化终端_大黄很黄的博客-程序员宝宝_i3wm 壁纸 - 程序员宝宝 (cxybb.com)</a></p><p>美化壁纸</p>]]></content>
      
      
      
        <tags>
            
            <tag> wm </tag>
            
            <tag> i3wm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dwm入门</title>
      <link href="2021/10/10/dwm%E5%85%A5%E9%97%A8/"/>
      <url>2021/10/10/dwm%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DWM入门"><a href="#DWM入门" class="headerlink" title="DWM入门"></a>DWM入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>桌面环境:KDE GNOME XFCE等</p><p>泛指桌面的背景图片，桌面的应用程序软件，桌面的快捷方式，桌面的DIY小部件等组成的一个直观的视觉环境。桌面环境可能仅仅是一个简单的<a href="https://baike.baidu.com/item/窗口管理器/8902451">窗口管理器</a>， 也可能是一个像 KDE 或者 GNOME这样的完整<a href="https://baike.baidu.com/item/桌面应用程序/2331979">桌面应用程序</a>套件。</p><span id="more"></span><p>窗口管理器 wm </p><p>显示管理器(Display Manager，DM)又叫做“登陆管理器”，如sddm、lightdm等</p><p>dynamic window manager</p><p><a href="https://dwm.suckless.org/">dwm</a>是<a href="https://wiki.archlinux.org/title/X">X</a>下的一个动态窗口管理器。它用平铺的、栈式的和全屏的布局方式，借助一些可选的补丁还可以实现其他的布局。布局可以动态得改变，为程序提供最优的环境和性能。dwm特别轻量快速，用C语言编写，被设计的目标是控制在2000行以下的代码。在xrandr和Xinerama支持下可实现multi-head。</p><p>dwm是目前平铺式桌面中的佼佼者，自己本身就是一个窗口管理器WM.占用资源低</p><p>是suckless组织开发,archLinux下的东西</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接开装  dwm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone git://http://git.suckless.org/dwm</span><br><span class="line"></span><br><span class="line">cd dwm</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>不过我建议,有别人写好补丁的,或者自己打上补丁.</p><p>装好后,由于我是Ubuntu,de是gnome,登陆管理器是gdm  需要在/usr/share/xsessions/下创建类似一个引导的东西,引导到dwm  de  </p><p>下面是ubuntu的de,可以参照这个写</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010201156141.png" alt="image-20211010201156141"></p><p>写好后注销,进入登陆界面</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010201857620.png" alt="image-20211010201857620" style="zoom:80%;" /></p><p>可以看到有dwm</p><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/183861786">入坑dwm——原来窗口管理器还可以这样用？！ - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dwm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装ohmyzsh并配置</title>
      <link href="2021/10/10/%E5%AE%89%E8%A3%85ohmyzsh%E5%B9%B6%E9%85%8D%E7%BD%AE/"/>
      <url>2021/10/10/%E5%AE%89%E8%A3%85ohmyzsh%E5%B9%B6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="shell介绍"><a href="#shell介绍" class="headerlink" title="shell介绍"></a>shell介绍</h2><p>真正能够控制计算机硬件（CPU、内存、显示器等）的只有操作系统内核（Kernel），图形界面和命令行只是架设在用户和内核之间的一座桥梁。</p><span id="more"></span><p>由于安全、复杂、繁琐等原因，用户不能直接接触内核（也没有必要），需要另外再开发一个程序，让用户直接使用这个程序；该程序的作用就是接收用户的操作（点击图标、输入命令），并进行简单的处理，然后再传递给内核。如此一来，用户和内核之间就多了一层“代理”，这层“代理”既简化了用户的操作，也保护了内核。</p><p>用户界面和命令行就是这个另外开发的程序，就是这层“代理”。在Linux下，这个命令行程序叫做 <strong>Shell</strong>。</p><p>Shell 除了能解释用户输入的命令，将它传递给内核，还可以：</p><ul><li>调用其他程序，给其他程序传递数据或参数，并获取程序的处理结果；</li><li>在多个程序之间传递数据，把一个程序的输出作为另一个程序的输入；</li><li>Shell 本身也可以被其他程序调用。</li></ul><p>由此可见，Shell 是将内核、程序和用户连接了起来。</p><p>Shell 本身支持的命令并不多，但是它可以调用其他的程序，每个程序就是一个命令，这使得 Shell 命令的数量可以无限扩展，其结果就是 Shell 的功能非常强大，完全能够胜任 Linux 的日常管理工作，如文本或字符串检索、文件的查找或创建、大规模软件的自动部署、更改系统设置、监控服务器性能、发送报警邮件、抓取网页内容、压缩文件等。</p><p>Shell 并不是简单的堆砌命令，我们还可以在 Shell 中编程，这和使用 C/C++、Java、Python 等常见的编程语言并没有什么两样。</p><h2 id="为什么用zsh"><a href="#为什么用zsh" class="headerlink" title="为什么用zsh"></a>为什么用zsh</h2><p>一般Linux下有bash,sh等,zsh功能较多,但配置麻烦.</p><p>因为有oh-my-zsh工具可以方便配置zsh,所以使用了zsh</p><p>我使用的Ubuntu,没有zsh</p><p>先下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh;</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010162840129.png" alt="image-20211010162840129"></p><p>接下来安装所说的工具</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010164449180.png" alt="image-20211010164449180" style="zoom:67%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl</span></span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wegt</span> </span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>多半会出现网络问题…</p><p>可以翻墙</p><p>也可以使用git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>我用虚拟机时出现一个问题,chsh -s /bin/zsh 没有反应…</p><p>重启之后就好了,应该是小bug</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010170942581.png" alt="image-20211010170942581"></p><p>我们可以发现有两个zsh</p><p>一个/bin/zsh 另一个 /usr/bin/zsh</p><p>貌似都可以用</p><p>在~目录下可以看见.ohmyzsh与.zshrc文件</p><p>可以在.zshrc更改插件主题</p><p>可以在.oh-my-zsh查看直接可以用的主题和插件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010171620642.png" alt="image-20211010171620642" style="zoom:67%;" /></p><p>当然,一些第三方插件也是需要的,可以从网上下载</p><h2 id="安装插件-主题"><a href="#安装插件-主题" class="headerlink" title="安装插件,主题"></a>安装插件,主题</h2><p>安装第三方插件,可以安装到刚在所说的plugins目录，也可以安装到一个custom下的plugin目录</p><p>在相关github主页直接clone到该目录下</p><p>1.incr  自动提示</p><p>2.auto-suggestions</p><p>3.zsh-syntax-hightlighting</p><p>4.autojump</p><p>安装autojump时注意提示,需要在相关文件更改</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010173204014.png" alt="image-20211010173204014"></p><p>然后在.zshrc文件中修改</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010175003689.png" alt="image-20211010175003689"></p><p>增加插件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><p>再source一下更新</p><p>更改主题类似</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010175117138.png" alt="image-20211010175117138"></p><p>如果使用某些主题会有字体缺失,比如agnoster</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure><p>下载相关字体即可</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010175430975.png" alt="image-20211010175430975" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010175510860.png" alt="image-20211010175510860" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20211010180652754.png" alt="image-20211010180652754" style="zoom:50%;" /></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1495395">修改 Linux 默认 Shell 用 chsh -s /bin/zsh 命令不生效，提示 chsh: Shell not changed. 怎么办？ - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://www.cnblogs.com/monsterdev/p/11166720.html">Oh-My-Zsh的配置与使用 - 再见理想_ - 博客园 (cnblogs.com)</a></p><p><a href="https://jyzhangchn.github.io/oh-my-zsh-diy.html">oh-my-zsh 插件介绍 | Jennifer’s Blog (jyzhangchn.github.io)</a></p><p><a href="https://www.mintimate.cn/2021/02/05/configZsh/">Linux/Mac如何配置zsh并使用Oh-my-zsh？让你的终端更加好用 - Mintimate’s Blog</a></p><p><a href="https://www.cnblogs.com/misfit/p/10694397.html#:~:text=Oh-My-Zsh及主题、插件安装与配置 1 打开终端，编辑&gt;&gt;&gt;&gt;首选项&gt;&gt;&gt;&gt;命令 2,勾选“运行自定义命令而不是shell”选项 3 在下面的“自定义命令”中填写" title="zsh">Oh-My-Zsh及主题、插件安装与配置 - 自命不凡的海浪 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_41550190/article/details/119804102">(15条消息) 解决：/usr/bin/env: ‘python’: No such file or directory_skr？-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket学习</title>
      <link href="2021/10/03/socket%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/10/03/socket%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="socket学习"><a href="#socket学习" class="headerlink" title="socket学习"></a>socket学习</h1><p>起因是老师的作业</p><span id="more"></span><h2 id="什么是-socket？"><a href="#什么是-socket？" class="headerlink" title="什么是 socket？"></a>什么是 socket？</h2><p>socket 的原意是“插座”，在计算机通信领域，socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。</p><p>socket 的典型应用就是 Web 服务器和浏览器：浏览器获取用户输入的 URL，向服务器发起请求，服务器分析接收到的 URL，将对应的网页内容返回给浏览器，浏览器再经过解析和渲染，就将文字、图片、视频等元素呈现给用户。</p><p>学习 socket，也就是学习计算机之间如何通信，并编写出实用的程序</p><h2 id="一个开始"><a href="#一个开始" class="headerlink" title="一个开始"></a>一个开始</h2><p>通过 socket() 函数来创建一个网络连接，或者说打开一个网络文件，socket() 的返回值就是文件描述符。有了文件描述符，我们就可以使用普通的文件操作函数来传输数据了，例如：</p><ul><li>用 read() 读取从远程计算机传来的数据；</li><li>用 write() 向远程计算机写入数据。</li></ul><p>Windows 也有类似“文件描述符”的概念，但通常被称为“文件句柄”。</p><p>与 UNIX/Linux 不同的是，Windows 会区分 socket 和文件，Windows 就把 socket 当做一个网络连接来对待，因此需要调用专门针对 socket 而设计的数据传输函数，针对普通文件的输入输出函数就无效了。</p><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><h4 id="流格式套接字（SOCK-STREAM）"><a href="#流格式套接字（SOCK-STREAM）" class="headerlink" title="流格式套接字（SOCK_STREAM）"></a>流格式套接字（SOCK_STREAM）</h4><p>流格式套接字（Stream Sockets）也叫“面向连接的套接字”，在代码中使用 SOCK_STREAM 表示。</p><p>SOCK_STREAM 是一种可靠的、双向的通信数据流，数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送。</p><blockquote><p>流格式套接字有自己的纠错机制，在此我们就不讨论了。</p></blockquote><p>SOCK_STREAM 有以下几个特征：</p><ul><li>数据在传输过程中不会消失；</li><li>数据是按照顺序传输的；</li><li>数据的发送和接收不是同步的（有的教程也称“不存在数据边界”）。</li></ul><p>可以将 SOCK_STREAM 比喻成一条传送带，只要传送带本身没有问题（不会断网），就能保证数据不丢失；同时，较晚传送的数据不会先到达，较早传送的数据不会晚到达，这就保证了数据是按照顺序传递的。</p><h4 id="数据报格式套接字（SOCK-DGRAM）"><a href="#数据报格式套接字（SOCK-DGRAM）" class="headerlink" title="数据报格式套接字（SOCK_DGRAM）"></a>数据报格式套接字（SOCK_DGRAM）</h4><p>数据报格式套接字（Datagram Sockets）也叫“无连接的套接字”，在代码中使用 SOCK_DGRAM 表示。</p><p>计算机只管传输数据，不作数据校验，如果数据在传输中损坏，或者没有到达另一台计算机，是没有办法补救的。也就是说，数据错了就错了，无法重传。</p><p>因为数据报套接字所做的校验工作少，所以在传输效率方面比流格式套接字要高。</p><p>可以将 SOCK_DGRAM 比喻成高速移动的摩托车快递，它有以下特征：</p><ul><li>强调快速传输而非传输顺序；</li><li>传输的数据可能丢失也可能损毁；</li><li>限制每次传输的数据大小；</li><li>数据的发送和接收是同步的（有的教程也称“存在数据边界”）</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="WSAStartup"><a href="#WSAStartup" class="headerlink" title="WSAStartup()"></a>WSAStartup()</h3><p>调用 WSAStartup() 函数进行初始化，以指明 WinSock 规范的版本，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAStartup</span><span class="params">(WORD wVersionRequested, LPWSADATA lpWSAData)</span></span>;</span><br></pre></td></tr></table></figure><p>wVersionRequested 为 WinSock 规范的版本号，低字节为主版本号，高字节为副版本号（修正版本号）；lpWSAData 为指向 WSAData 结构体的指针。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032205689.png" alt="image-20211003220519393"></p><p>makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)</p><p> 如果成功，WSAStartup函数返回0。否则，返回下面列表显示的错误码之一</p><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>错误码</td><td>解释</td></tr><tr><td>WSASYSNOTREADY</td><td>网络通信中下层的网络子系统没准备好</td></tr><tr><td>WSAVERNOTSUPPORTED</td><td>Socket实现提供版本和socket需要的版本不符</td></tr><tr><td>WSAEINPROGRESS</td><td>一个阻塞的Socket操作正在进行</td></tr><tr><td>WSAEPROCLIM</td><td>Socket的实现超过Socket支持的任务数限制</td></tr><tr><td>WSAEFAULT</td><td>lpWSAData参数不是一个合法的指针</td></tr></tbody></table></div><h3 id="WSADATA与SOCKET"><a href="#WSADATA与SOCKET" class="headerlink" title="WSADATA与SOCKET"></a>WSADATA与SOCKET</h3><p>WSAStartup() 函数执行成功后，会将与 ws2_32.dll 有关的信息写入 WSAData 结构体变量</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032210288.png" alt="image-20211003221025248" style="zoom:50%;" /></p><p>WinSock 编程的第一步就是加载 ws2_32.dll，然后调用 WSAStartup() 函数进行初始化，并指明要使用的版本号。</p><h3 id="socket"><a href="#socket" class="headerlink" title="socket()"></a>socket()</h3><p>Windows 下使用 socket() 函数来创建套接字，原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>af 为地址族（Address Family），也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。AF 是“Address Family”的简写，INET是“Inetnet”的简写。AF_INET 表示 IPv4 地址，例如 127.0.0.1；AF_INET6 表示 IPv6 地址，例如 1030::C9B4:FF12:48AA:1A2B。</p><p>记住<code>127.0.0.1</code>，它是一个特殊IP地址，表示本机地址</p><p>type 为数据传输方式，常用的有 SOCK_STREAM 和 SOCK_DGRAM</p><p> protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议</p><p>Windows 不把套接字作为普通文件对待，而是返回 SOCKET 类型的句柄</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032224379.png" alt="image-20211003222457345"></p><p>可以看到,这里是SOCK_STREAM面向连接的,说明是TCP协议</p><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind() 函数"></a>bind() 函数</h3><p>bind() 函数的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sock, struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;  <span class="comment">//Linux</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(SOCKET sock, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">int</span> addrlen)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><p>sock 为 socket 文件描述符，addr 为 sockaddr 结构体变量的指针，addrlen 为 addr 变量的大小，可由 sizeof() 计算得出.</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032228037.png" alt="image-20211003222759995"></p><p>oldSocket是刚才socket()函数返回的socket</p><p>sockaddr_in 结构体</p><p>先看一下 sockaddr_in 结构体，它的成员变量如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span>    <span class="keyword">sa_family_t</span>     sin_family;   <span class="comment">//地址族（Address Family），也就是地址类型    </span></span><br><span class="line">                   <span class="keyword">uint16_t</span>        sin_port;     <span class="comment">//16位的端口号    </span></span><br><span class="line">                   <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  <span class="title">sin_addr</span>;</span>     <span class="comment">//32位IP地址    </span></span><br><span class="line">                   <span class="keyword">char</span>            sin_zero[<span class="number">8</span>];  <span class="comment">//不使用，一般用0填充</span></span><br><span class="line">                  &#125;;</span><br></pre></td></tr></table></figure><p> sin_family 和 socket() 的第一个参数的含义相同，取值也要保持一致</p><p>sin_prot 为端口号。uint16_t 的长度为两个字节，理论上端口号的取值范围为 0~65536，但 0~1023 的端口一般由系统分配给特定的服务程序，例如 Web 服务的端口号为 80，FTP 服务的端口号为 21，所以我们的程序要尽量在 1024~65536 之间分配端口号。</p><p>端口号需要用 htons() 函数转换</p><p>sin_addr 是 struct in_addr 结构体类型的变量</p><p>sin_zero[8] 是多余的8个字节，没有用，一般使用 memset() 函数填充为 0</p><h4 id="in-addr-结构体"><a href="#in-addr-结构体" class="headerlink" title="in_addr 结构体"></a>in_addr 结构体</h4><p>sockaddr_in 的第3个成员是 in_addr 类型的结构体，该结构体只包含一个成员，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span>    <span class="keyword">in_addr_t</span>  s_addr;  <span class="comment">//32位的IP地址&#125;;</span></span><br></pre></td></tr></table></figure><p>in_addr_t 在头文件 <netinet/in.h> 中定义，等价于 unsigned long，长度为4个字节。也就是说，s_addr 是一个整数，而IP地址是一个字符串，所以需要 inet_addr() 函数进行转换，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ip = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, ip);</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032234228.png" alt="image-20211003223419184"></p><p>设置sockaddr_in  注意,又将其强制转换为了一个通用的socket_addr</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032243536.png" alt="image-20211003224306508"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032243776.png" alt="image-20211003224327739"></p><p>sockaddr 和 sockaddr_in 的长度相同，都是16字节，只是将IP地址和端口号合并到一起，用一个成员 sa_data 表示。要想给 sa_data 赋值，必须同时指明IP地址和端口号，例如”127.0.0.1:80“，遗憾的是，没有相关函数将这个字符串转换成需要的形式，也就很难给 sockaddr 类型的变量赋值，所以使用 sockaddr_in 来代替。这两个结构体的长度相同，强制转换类型时不会丢失字节，也没有多余的字节。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041029931.png" alt="image-20211004102955888"></p><p><strong>htons</strong>的功能：将一个无符号短整型的主机数值转换为网络 <a href="http://baike.baidu.com/view/567601.htm">字节顺序</a>，即大尾顺序(big-endian)</p><p>参数u_short hostshort：16位 <a href="http://baike.baidu.com/view/6052699.htm">无符号整数</a></p><p>返回值：TCP/IP网络 <a href="http://baike.baidu.com/view/567601.htm">字节顺序</a>.</p><p>The Windows <strong>Sockets</strong> <strong>inet</strong>_<strong>addr</strong> function converts a string containing an (Ipv4) Internet Protocol dotted address into a proper address for the IN_ADDR structure. </p><p>sockaddr 是一种通用的结构体，可以用来保存多种类型的IP地址和端口号，而 sockaddr_in 是专门用来保存 IPv4 地址的结构体</p><p>使用 bind() 绑定套接字后，还需要使用 listen() 函数让套接字进入被动监听状态，再调用 accept() 函数，就可以随时响应客户端的请求了。</p><h3 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen() 函数"></a>listen() 函数</h3><p>通过 listen() 函数可以让套接字进入被动监听状态，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">int</span> backlog)</span></span>;  <span class="comment">//Linux</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(SOCKET sock, <span class="keyword">int</span> backlog)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><p>sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。</p><p>所谓被动监听，是指当没有客户端请求时，套接字处于“睡眠”状态，只有当接收到客户端请求时，套接字才会被“唤醒”来响应请求。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032248206.png" alt="image-20211003224816157"></p><h4 id="请求队列"><a href="#请求队列" class="headerlink" title="请求队列"></a>请求队列</h4><p>当套接字正在处理客户端请求时，如果有新的请求进来，套接字是没法处理的，只能把它放进缓冲区，待当前请求处理完毕后，再从缓冲区中读取出来处理。如果不断有新的请求进来，它们就按照先后顺序在缓冲区中排队，直到缓冲区满。这个缓冲区，就称为请求队列（Request Queue）。</p><p>缓冲区的长度（能存放多少个客户端请求）可以通过 listen() 函数的 backlog 参数指定，但究竟为多少并没有什么标准，可以根据你的需求来定，并发量小的话可以是10或者20。</p><p>如果将 backlog 的值设置为 SOMAXCONN，就由系统来决定请求队列长度，这个值一般比较大，可能是几百，或者更多。</p><h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept() 函数"></a>accept() 函数</h3><p>当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求。它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sock, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;  <span class="comment">//Linux</span></span><br><span class="line"><span class="function">SOCKET <span class="title">accept</span><span class="params">(SOCKET sock, struct sockaddr *addr, <span class="keyword">int</span> *addrlen)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><p>它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。</p><p>accept() 返回一个新的套接字来和客户端通信，addr 保存了客户端的IP地址和端口号，而 sock 是服务器端的套接字，大家注意区分。后面和客户端通信时，要使用这个新生成的套接字，而不是原来服务器端的套接字。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032255704.png" alt="image-20211003225553648"></p><p>accept() 返回一个新的套接字来和客户端通信，addr 保存了客户端的IP地址和端口号，而 oldSocket 是服务器端的套接字，</p><p>注意区分。后面和客户端通信时，要使用这个新生成的套接字，而不是原来服务器端的套接字。</p><p>listen() 只是让套接字进入监听状态，并没有真正接收客户端请求，listen() 后面的代码会继续执行，直到遇到 accept()。accept() 会阻塞程序执行（后面代码不能被执行），直到有新的请求到来</p><h3 id="Windows下数据的接收和发送"><a href="#Windows下数据的接收和发送" class="headerlink" title="Windows下数据的接收和发送"></a>Windows下数据的接收和发送</h3><p>要在一个循环中监听事件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032307017.png" alt="image-20211003230747958"></p><p>Windows 区分普通文件和套接字，并定义了专门的接收和发送的函数。</p><p>从服务器端发送数据使用 send() 函数，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(SOCKET sock, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>sock 为要发送数据的套接字，buf 为要发送的数据的缓冲区地址，len 为要发送的数据的字节数，flags 为发送数据时的选项。</p><p>返回值和前三个参数不再赘述，最后的 flags 参数一般设置为 0 或 NULL。</p><p>在客户端接收数据使用 recv() 函数，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(SOCKET sock, <span class="keyword">char</span> *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>客户端下线，返回0,释放客户端socket</p><p>执行失败，返回<code>SOCKET_ERROR</code></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032305757.png" alt="image-20211003230553718"></p><p>这里设置了客户端输入quit即退出循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">closesocket</span>(newSocket);</span><br><span class="line"><span class="built_in">closesocket</span>(oldSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br></pre></td></tr></table></figure><p>关闭两个句柄</p><p>终止Winsock 2 DLL (Ws2_32.dll) 的使用.</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>socket() 函数用来创建套接字，确定套接字的各种属性，然后服务器端要用 bind() 函数将套接字与特定的IP地址和端口绑定起来，只有这样，流经该IP地址和端口的数据才能交给套接字处理；而客户端要用 connect() 函数建立连接。</p><h3 id="connect-函数"><a href="#connect-函数" class="headerlink" title="connect() 函数"></a>connect() 函数</h3><p>connect() 函数用来建立连接，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sock, struct sockaddr *serv_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;  <span class="comment">//Linux</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(SOCKET sock, <span class="keyword">const</span> struct sockaddr *serv_addr, <span class="keyword">int</span> addrlen)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><p>参数类型与上述相同</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032316701.png" alt="image-20211003231620650"></p><p>之前同理也要用WSAStartup先初始化,然后使用sock()建立客户端套接字</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110032321666.png" alt="image-20211003232120611" style="zoom:67%;" /></p><p>注意,客户端的代码只创建了客户端的套接字且与服务端连接</p><p>然后发送消息</p><h3 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h3><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041002350.png" alt="image-20211004100255294"></p><p>从客户端发送数据使用 send() 函数，它的原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(SOCKET sock, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>sock 为要发送数据的套接字，buf 为要发送的数据的缓冲区地址，len 为要发送的数据的字节数，flags 为发送数据时的选项。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>TCP 是面向连接的传输协议，建立连接时要经过三次握手，断开连接时要经过四次握手，中间传输数据时也要回复ACK包确认，多种机制保证了数据能够正确到达，不会丢失或出错。</p><p>UDP 是非连接的传输协议，没有建立连接和断开连接的过程，它只是简单地把数据丢到网络中，也不需要ACK包确认。</p><h3 id="UDP中的服务器端和客户端没有连接"><a href="#UDP中的服务器端和客户端没有连接" class="headerlink" title="UDP中的服务器端和客户端没有连接"></a>UDP中的服务器端和客户端没有连接</h3><p>UDP不像TCP，无需在连接状态下交换数据，因此基于UDP的服务器端和客户端也无需经过连接过程。也就是说，不必调用 listen() 和 accept() 函数。UDP中只有创建套接字的过程和数据交换的过程。</p><h3 id="UDP服务器端和客户端均只需1个套接字"><a href="#UDP服务器端和客户端均只需1个套接字" class="headerlink" title="UDP服务器端和客户端均只需1个套接字"></a>UDP服务器端和客户端均只需1个套接字</h3><p>TCP中，套接字是一对一的关系。如要向10个客户端提供服务，那么除了负责监听的套接字外，还需要创建10套接字。但在UDP中，不管是服务器端还是客户端都只需要1个套接字。之前解释UDP原理的时候举了邮寄包裹的例子，负责邮寄包裹的快递公司可以比喻为UDP套接字，只要有1个快递公司，就可以通过它向任意地址邮寄包裹。同样，只需1个UDP套接字就可以向任意主机传送数据。</p><h2 id="基于UDP的接收和发送函数"><a href="#基于UDP的接收和发送函数" class="headerlink" title="基于UDP的接收和发送函数"></a>基于UDP的接收和发送函数</h2><p>创建好TCP套接字后，传输数据时无需再添加地址信息，因为TCP套接字将保持与对方套接字的连接。换言之，TCP套接字知道目标地址信息。但UDP套接字不会保持连接状态，每次传输数据都要添加目标地址信息，这相当于在邮寄包裹前填写收件人地址。</p><p>udp与tcp协议不同,但创建套接字与绑定连接ip流程类似.</p><p>先初始化WSAStartup()</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110040945959.png" alt="image-20211004094535914"></p><p>再创建套接字,不过这里面向的是数据报连接</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110040946279.png" alt="image-20211004094604239"></p><p>再初始化sockadd_in,填入ipv4地址与端口,进行绑定</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110040947100.png" alt="image-20211004094721033" style="zoom:67%;" /></p><p>绑定之后进行接收数据即可.</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041000687.png" alt="image-20211004100014595"></p><p>接收数据使用 recvfrom() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvfrom</span><span class="params">(SOCKET sock, <span class="keyword">char</span> *buf, <span class="keyword">int</span> nbytes, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr *from, <span class="keyword">int</span> *addrlen)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><h3 id="recvfrom"><a href="#recvfrom" class="headerlink" title="recvfrom()"></a>recvfrom()</h3><p>由于UDP数据的发送端不不定，所以 recvfrom() 函数定义为可接收发送端信息的形式，具体参数如下：</p><ul><li>sock：用于接收UDP数据的套接字；</li><li>buf：保存接收数据的缓冲区地址；</li><li>nbytes：可接收的最大字节数（不能超过buf缓冲区的大小）；</li><li>flags：可选项参数，若没有可传递0；</li><li>from：存有发送端地址信息的sockaddr结构体变量的地址；</li><li>addrlen：保存参数 from 的结构体变量长度的变量地址值。</li></ul><h3 id="sendto"><a href="#sendto" class="headerlink" title="sendto()"></a>sendto()</h3><p>发送数据使用 sendto() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendto</span><span class="params">(SOCKET sock, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> nbytes, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockadr *to, <span class="keyword">int</span> addrlen)</span></span>;  <span class="comment">//Windows</span></span><br></pre></td></tr></table></figure><p>Linux和Windows下的 sendto() 函数类似，下面是详细参数说明：</p><ul><li>sock：用于传输UDP数据的套接字；</li><li>buf：保存待传输数据的缓冲区地址；</li><li>nbytes：带传输数据的长度（以字节计）；</li><li>flags：可选项参数，若没有可传递0；</li><li>to：存有目标地址信息的 sockaddr 结构体变量的地址；</li><li>addrlen：传递给参数 to 的地址值结构体变量的长度。</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041006429.png" alt="image-20211004100619357"></p><p>使用inet_ntoa与ntohs可以将数据转为字符串,整数</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041026714.png" alt="image-20211004102623675"></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h4 id="tcp通信"><a href="#tcp通信" class="headerlink" title="tcp通信"></a>tcp通信</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041009716.png" alt="image-20211004100907639"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041009662.png" alt="image-20211004100913307"></p><h4 id="udp通信"><a href="#udp通信" class="headerlink" title="udp通信"></a>udp通信</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041014283.png" alt="image-20211004101456204"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041015060.png" alt="image-20211004101508985"></p><p>下面是我跟其他ip地址交互的</p><p>客户端</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041019822.png" alt="img"></p><p>服务端</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/202110041020165.png" alt="image-20211004102014108" style="zoom:80%;" /></p><p>可以看到客户端的ip与端口</p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令集_4</title>
      <link href="2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-4/"/>
      <url>2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Linux进程与磁盘管理"><a href="#Linux进程与磁盘管理" class="headerlink" title="Linux进程与磁盘管理"></a>Linux进程与磁盘管理</h2><p><strong>进程</strong>（process）：进程是程序在一个数据集合上的一次执行过程，在早期的 UNIX、Linux 2.4 及更早的版本中，它是系统进行资源分配和调度的独立基本单位。</p><span id="more"></span><ul><li>动态性：进程的实质是一次程序执行的过程，有创建、撤销等状态的变化。而程序是一个静态的实体。</li><li>并发性：进程可以做到在一个时间段内，有多个程序在运行中。程序只是静态的实体，所以不存在并发性。</li><li>独立性：进程可以独立分配资源，独立接受调度，独立地运行。</li><li>异步性：进程以不可预知的速度向前推进。</li><li>结构性：进程拥有代码段、数据段、PCB（进程控制块，进程存在的唯一标志）。也正是因为有结构性，进程才可以做到独立地运行。</li></ul><blockquote><p><strong>并发：</strong>在一个时间段内，宏观来看有多个程序都在活动，有条不紊的执行（每一瞬间只有一个在执行，只是在一段时间有多个程序都执行过）</p><p><strong>并行：</strong>在每一个瞬间，都有多个程序都在同时执行，这个必须有多个 CPU 才行</p></blockquote><p><strong>线程</strong>（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。因为线程中几乎不包含系统资源，所以执行更快、更有效率。</p><h3 id="进程分类"><a href="#进程分类" class="headerlink" title="进程分类"></a>进程分类</h3><ul><li>用户进程：通过执行用户程序、应用程序或称之为内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。</li><li>系统进程：通过执行系统内核程序而产生的进程，比如可以执行内存资源分配和进程切换等相对底层的工作；而且该进程的运行不受用户的干预，即使是 root 用户也不能干预系统进程的运行</li></ul><ul><li>交互进程：由一个 shell 终端启动的进程，在执行过程中，需要与用户进行交互操作，可以运行于前台，也可以运行在后台。</li><li>批处理进程：该进程是一个进程集合，负责按顺序启动其他的进程。</li><li>守护进程：守护进程是一直运行的一种进程，在 Linux 系统启动时启动，在系统关闭时终止。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。例如 httpd 进程，一直处于运行状态，等待用户的访问。还有经常用的 cron（在 centOS 系列为 crond）进程，这个进程为 crontab 的守护进程，可以周期性的执行用户设定的某些任务。</li></ul><p>我们启动了终端，就是启动了一个 bash 进程，我们可以在 bash 中再输入 bash 则会再启动一个 bash 的进程，此时第二个 bash 进程就是由第一个 bash 进程创建出来的，他们之间关系是父进程与子进程</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915105254.png" alt="image-20210915105254288"></p><h3 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h3><p>我们可以通过 <code>top</code> 实时的查看进程的状态，以及系统的一些信息（如 CPU、内存信息等），我们还可以通过 <code>ps</code> 来静态查看当前的进程信息，同时我们还可以使用 <code>pstree</code> 来查看当前活跃进程的树形结构。</p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>查看系统中使用CPU、使用内存最多的进程；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>对于进程，平时我们最常想知道的就是哪些进程占用CPU最多，占用内存最多。以下两个命令就可以满足要求:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P：根据CPU使用百分比大小进行排序。</span><br><span class="line">M：根据驻留内存大小进行排序。</span><br><span class="line">i：使top不显示任何闲置或者僵死进程。</span><br></pre></td></tr></table></figure><p>可以说 top就是linux下的任务管理器</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915110542.png" alt="image-20210915110542055"></p><p><strong>关于进程情况</strong></p><div class="table-container"><table><thead><tr><th>列名</th><th>解释</th></tr></thead><tbody><tr><td>PID</td><td>进程 id</td></tr><tr><td>USER</td><td>该进程的所属用户</td></tr><tr><td>PR</td><td>该进程执行的优先级 priority 值  越小越高</td></tr><tr><td>NI</td><td>该进程的 nice 值</td></tr><tr><td>VIRT</td><td>该进程任务所使用的虚拟内存的总数</td></tr><tr><td>RES</td><td>该进程所使用的物理内存数，也称之为驻留内存数</td></tr><tr><td>SHR</td><td>该进程共享内存的大小</td></tr><tr><td>S</td><td>该进程进程的状态: S=sleep R=running Z=zombie</td></tr><tr><td>%CPU</td><td>该进程 CPU 的利用率</td></tr><tr><td>%MEM</td><td>该进程内存的利用率</td></tr><tr><td>TIME+</td><td>该进程活跃的总时间</td></tr><tr><td>COMMAND</td><td>该进程运行的名字</td></tr></tbody></table></div><p><strong>NICE 值</strong>叫做静态优先级，是用户空间的一个优先级值，其取值范围是 -20 至 19。这个值越小，表示进程”优先级”越高，而值越大“优先级”越低。nice 值中的 -20 到 19，中 -20 优先级最高， 0 是默认的值，而 19 优先级最低。</p><p><strong>PR 值</strong>表示 Priority 值叫动态优先级，是进程在内核中实际的优先级值，进程优先级的取值范围是通过一个宏定义的，这个宏的名称是 <code>MAX_PRIO</code>，它的值为 140。Linux 实际上实现了 140 个优先级范围，取值范围是从 <code>0-139</code>，这个值越小，优先级越高。而这其中的 <code>0-99</code> 是实时进程的值，而 <code>100-139</code> 是给用户的。</p><p>其中 PR 中的 <code>100 to 139</code> 值部分有这么一个对应 <code>PR = 20 + (-20 to +19)</code>，这里的 <code>-20 to +19</code> 便是 nice 值，所以说两个虽然都是优先级，而且有千丝万缕的关系，但是他们的值，他们的作用范围并不相同。</p><p><strong>VIRT</strong> 任务所使用的虚拟内存的总数，其中包含所有的代码，数据，共享库和被换出 swap 空间的页面等所占据空间的总数。</p><p>下面来解析一下</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915110618.png" alt="image-20210915110618881"></p><ul><li>第一行</li></ul><p>11:05:55 ： 系统当前时间 </p><p>up 219min ： 系统开机到现在经过了多少时间</p><p>1 user ： 当前1用户在线</p><p>load average: 0.14, 0.09, 0.11： 系统1分钟、5分钟、15分钟的CPU负载信息</p><ul><li>第二行</li></ul><p>Tasks：任务;296total：当前有87个任务，也就是87个进程。</p><p>running：2个进程正在运行</p><p>294sleeping：294个进程睡眠</p><p>0 stopped：停止的进程数</p><p>0 zombie：僵死的进程数</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915111128.png" alt="image-20210915111128522"></p><ul><li><p>第三行</p><p>Cpu(s)：表示这一行显示CPU总体信息</p><p>2.7%us：用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。</p><p>0.7%sy：内核占用CPU时间百分比</p><p>ni：改变过优先级的进程占用CPU的百分比</p><p>96.6%id：空闲CPU时间百分比</p><p>wa：等待I/O的CPU时间百分比</p><p>hi：CPU硬中断时间百分比</p><p>si：CPU软中断时间百分比</p><p>注：这里显示数据是所有cpu的平均值，如果想看每一个cpu的处理情况，按1即可；折叠，再次按1；</p></li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915112109.png" alt="image-20210915112109665"></p><div class="table-container"><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>1952.9 total</td><td>物理内存总量</td></tr><tr><td>409.0 used</td><td>使用的物理内存总量</td></tr><tr><td>409.0 free</td><td>空闲内存总量</td></tr><tr><td>681.1 buffers</td><td>用作内核缓存的内存量</td></tr></tbody></table></div><p><strong>注意：</strong></p><blockquote><p>系统中可用的物理内存最大值并不是 free 这个单一的值，而是 free + buffers + swap 中的 cached 的和。</p></blockquote><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915112325.png" alt="image-20210915112325499"></p><div class="table-container"><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>total</td><td>交换区总量</td></tr><tr><td>used</td><td>使用的交换区总量</td></tr><tr><td>free</td><td>空闲交换区总量</td></tr><tr><td>cached</td><td>缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖</td></tr></tbody></table></div><p><strong>交互命令</strong></p><div class="table-container"><table><thead><tr><th>常用交互命令</th><th>解释</th></tr></thead><tbody><tr><td>q</td><td>退出程序</td></tr><tr><td>I</td><td>切换显示平均负载和启动时间的信息</td></tr><tr><td>P</td><td>根据 CPU 使用百分比大小进行排序</td></tr><tr><td>M</td><td>根据驻留内存大小进行排序</td></tr><tr><td>i</td><td>忽略闲置和僵死的进程，这是一个开关式命令</td></tr><tr><td>k</td><td>终止一个进程，系统提示输入 PID 及发送的信号值。一般终止进程用 15 信号，不能正常结束则使用 9 信号。安全模式下该命令被屏蔽。</td></tr></tbody></table></div><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915112813.png" alt="image-20210915112813151"></p><ul><li><p>l 长格式输出；</p></li><li><p>u 按用户名和启动时间的顺序来显示进程；</p></li><li><p>j 用任务格式来显示进程；</p></li><li><p>f 用树形格式来显示进程；</p></li><li><p>a 显示所有用户的所有进程（包括其它用户）；</p></li><li><p>x 显示无控制终端的进程；</p></li><li><p>r 显示运行中的进程；</p></li><li><p>-e 显示所有进程,环境变量</p></li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915113104.png" alt="image-20210915113103961"></p><div class="table-container"><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td><code>F</code></td><td>进程的标志（process flags），当 flags 值为 1 则表示此子程序只是 fork 但没有执行 exec，为 4 表示此程序使用超级管理员 root 权限</td></tr><tr><td><code>USER</code></td><td>进程的拥有用户</td></tr><tr><td><code>PID</code></td><td>进程的 ID</td></tr><tr><td><code>PPID</code></td><td>其父进程的 PID</td></tr><tr><td><code>SID</code></td><td>session 的 ID</td></tr><tr><td><code>TPGID</code></td><td>前台进程组的 ID</td></tr><tr><td><code>%CPU</code></td><td>进程占用的 CPU 百分比</td></tr><tr><td><code>%MEM</code></td><td>占用内存的百分比</td></tr><tr><td><code>NI</code></td><td>进程的 NICE 值</td></tr><tr><td><code>VSZ</code></td><td>进程使用虚拟内存大小</td></tr><tr><td><code>RSS</code></td><td>驻留内存中页的大小</td></tr><tr><td><code>TTY</code></td><td>终端 ID</td></tr><tr><td><code>S or STAT</code></td><td>进程状态</td></tr><tr><td><code>WCHAN</code></td><td>正在等待的进程资源</td></tr><tr><td><code>START</code></td><td>启动进程的时间</td></tr><tr><td><code>TIME</code></td><td>进程消耗 CPU 的时间</td></tr><tr><td><code>COMMAND</code></td><td>命令的名称和参数</td></tr></tbody></table></div><p>查询正在运行的进程信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ps</span> -rf</span><br></pre></td></tr></table></figure><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915113749.png" alt="image-20210915113749274"></p><p>可以很直接的看到相同的进程数量，最主要的还是我们可以看到所有进程之间的相关性</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>内存管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure><p>查看内存使用情况</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915114130.png" alt="image-20210915114130103"></p><p>进程组与Sessions</p><p>每一个进程都会是一个进程组的成员，而且这个进程组是唯一存在的，他们是依靠 PGID（process group ID）来区别的，而每当一个进程被创建的时候，它便会成为其父进程所在组中的一员。</p><p>一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者，也就是领导进程，进程一般通过使用 <code>getpgrp()</code> 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的 PGID，直到进程组中最后一个进程终结。</p><p>与进程组类似，每当一个进程被创建的时候，它便会成为其父进程所在 Session 中的一员，每一个进程组都会在一个 Session 中，并且这个 Session 是唯一存在的，</p><p>Session 主要是针对一个 tty 建立，Session 中的每个进程都称为一个工作(job)。每个会话可以连接一个终端(control terminal)。当控制终端有输入输出时，都传递给该会话的前台进程组。Session 意义在于将多个 jobs 囊括在一个终端，并取其中的一个 job 作为前台，来直接接收该终端的输入输出以及终端信号。 其他 jobs 在后台运行。</p><blockquote><p><strong>前台</strong>（foreground）就是在终端中运行，能与你有交互的</p><p><strong>后台</strong>（background）就是在终端中运行，但是你并不能与其任何的交互，也不会显示其执行的过程</p></blockquote><p>被停止并放置在后台的工作我们可以使用这个命令来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span></span><br></pre></td></tr></table></figure><p>通过这样的一个命令将后台的工作拿到前台来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面不加参数提取预设工作，加参数提取指定工作的编号</span></span><br><span class="line"><span class="comment"># ubuntu 在 zsh 中需要 %，在 bash 中不需要 %</span></span><br><span class="line"><span class="built_in">fg</span> [%jobnumber]</span><br></pre></td></tr></table></figure><h4 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h4><p>​    在Linux系统中，除了系统启动之后的第一个进程由系统来创建，其余的进程都必须由已存在的进程来创建，新创建的进程叫做子进程，而创建子进程的进程叫做父进程。那个在系统启动及完成初始化之后，Linux自动创建的进程叫做根进程。根进程是Linux中所有进程的祖宗，其余进程都是根进程的子孙。具有同一个父进程的进程叫做兄弟进程<br>​    关于父进程与子进程便会提及这两个系统调用 <code>fork()</code> 与 <code>exec()</code></p><p>子进程就是父进程通过系统调用 <code>fork()</code> 而产生的复制品，<code>fork()</code> 就是把父进程的 PCB 等进程的数据结构信息直接复制过来，只是修改了 PID，所以一模一样，只有在执行 <code>exec()</code> 之后才会不同。</p><p>为了在一个进程中分裂出子进程，Linux提供了一个系统调用fork()。这里所说的分裂，实际上是一种复制。因为在系统中表示一个进程的实体是进程控制块，创建新进程的主要工作就是要创建一个新控制块，而创建一个新控制块最简单的方法就是复制。</p><p>​    当然，这里的复制并不是完全复制，因为父进程控制块中某些项的内容必须按照子进程的特性来修改，例如进程的标识、状态等。另外，子进程控制块还必须要有表示自己父进程的域和私有空间，例如数据空间、用户堆栈等。</p><p>函数fork()分裂出了两个进程：因为自函数fork()之后执行了两遍之后的代码（先子进程一次，后父进程一次）。同时，这也证明了父进程和子进程运行的是同一个程序，也正是这个理由，系统并未在内存中给子进程配置独立的程序运行空间，而只是简单地将程序指针指向父进程的代码；<br>    两个进程具有各自的数据区和用户堆栈，在函数fork()生成子进程时，将父进程数据区和用户堆栈的内容分别复制给了子进程。同时，接下来的内容，父进程和子进程都是对自己的数据区和堆栈中的内容进行修改运算了。<br>父进程中调用fork()之后会产生两种结果：一种为分裂子进程失败，另一种就是分裂子进程成功。<strong>如果fork()失败，则返回-1,；否则会出现父进程和子进程两个进程，在子进程中fork()返回0，在父进程中fork()返回子进程的ID。</strong></p><p>​    <strong>在代码中获得当前进程pid的函数为：getpid()；</strong></p><p><strong>在代码中获得当前进程父进程pid的函数为：getppid()。</strong></p><p><strong>这里需要注明一点：</strong>父子进程的调度的顺序是由调度器决定的，与进程的创建顺序无关。</p><p>​    当一个子进程要正常的终止运行时，或者该进程结束时它的主函数 <code>main()</code> 会执行 <code>exit(n);</code> 或者 <code>return n</code>，这里的返回值 n 是一个信号，系统会把这个 SIGCHLD 信号传给其父进程，当然若是异常终止也往往是因为这个信号。</p><p>​    在将要结束时的子进程代码执行部分已经结束执行了，系统的资源也基本归还给系统了，但若是其进程的进程控制块（PCB）仍驻留在内存中，而它的 PCB 还在，代表这个进程还存在（因为 PCB 就是进程存在的唯一标志，里面有 PID 等消息），并没有消亡，这样的进程称之为僵尸进程（Zombie）</p><p>​    正常情况下，父进程会收到两个返回值：exit code（SIGCHLD 信号）与 <code>reason for termination</code> 。之后，父进程会使用 <code>wait(&amp;status)</code> 系统调用以获取子进程的退出状态，然后内核就可以从内存中释放已结束的子进程的 PCB；而如若父进程没有这么做的话，子进程的 PCB 就会一直驻留在内存中，一直留在系统中成为僵尸进程（Zombie）。</p><p>虽然僵尸进程是已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，在进程列表中保留一个位置，记载该进程的退出状态等信息供其父进程收集，从而释放它。但是 Linux 系统中能使用的 PID 是有限的，如果系统中存在有大量的僵尸进程，系统将会因为没有可用的 PID 从而导致不能产生新的进程。</p><p>​    进程 0 是系统引导时创建的一个特殊进程，也称之为内核初始化，其最后一个动作就是调用 <code>fork()</code> 创建出一个子进程运行 <code>/sbin/init</code> 可执行文件，而该进程就是 PID=1 的进程 1，而进程 0 就转为交换进程（也被称为空闲进程），进程 1 （init 进程）是第一个用户态的进程，再由它不断调用 fork() 来创建系统里其他的进程，所以它是所有进程的父进程或者祖先进程。同时它是一个守护程序，直到计算机关机才会停止。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915121843.png" alt="image-20210915121843368"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> id = getpid();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;my id is %d\n&quot;</span>,id);</span><br><span class="line"> <span class="keyword">int</span> num = fork();</span><br><span class="line"> <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line"> &#123;<span class="comment">//child</span></span><br><span class="line">         <span class="keyword">int</span> n = getpid();</span><br><span class="line">         <span class="keyword">int</span> pn = getppid();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am child\nmy id is %d and my parent&#x27;s id is %d\n&quot;</span>,n,pn);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        <span class="comment">//parent</span></span><br><span class="line">        <span class="keyword">int</span> n = getpid();</span><br><span class="line">        <span class="keyword">int</span> pn = getppid();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am parent\nmy id is %d\nmy parent&#x27;s id is %d\n&quot;</span>,n,pn);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fork函数调用一次，会返回两个函数值，对于父进程而言，返回的是子进程的PID（因为一个父进程可能有多个子进程，并且没有一个函数可以使父进程获取其所有的子进程ID），对于子进程返回值是0（这样就能区分父子进程，子进程是可以通过getppid来获取父进程的ID，如果进程创建失败，那么返回给父进程-1）。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915125351.png" alt="image-20210915125351563"></p><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>杀死指定PID的进程 (PID为Process ID)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$kill</span> PID</span><br></pre></td></tr></table></figure><p>杀死相关进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 3434</span><br></pre></td></tr></table></figure><p>杀死job工作 (job为job number)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$kill</span> %job</span><br></pre></td></tr></table></figure><p>可以先用 ps -aux查看进程</p><p>然后通过kill pid 杀死进程</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="查看磁盘和目录的容量"><a href="#查看磁盘和目录的容量" class="headerlink" title="查看磁盘和目录的容量"></a>查看磁盘和目录的容量</h4><ul><li>使用 <code>df</code> 命令查看磁盘的容量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><p>-h: human缩写，以易读的方式显示结果（即带单位：比如M/G，如果不加这个参数，显示的数字以B为单位）</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915221320.png" alt="image-20210915221319880"></p><p>物理主机上的 <code>/dev/sda2</code> 是对应着主机硬盘的分区，后面的数字表示分区号，数字前面的字母 a 表示第几块硬盘（也可能是可移动磁盘），你如果主机上有多块硬盘则可能还会出现 <code>/dev/sdb</code>，<code>/dev/sdc</code> 这些磁盘设备都会在 <code>/dev</code> 目录下以文件的存在形式</p><p>使用 <code>du</code> 命令查看目录的容量</p><p>-s 递归整个目录的大小</p><p>-h 对人可读 即显示M/GB</p><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><p><img data-src="/images/70.png" alt="img"></p><p>lsblk</p><p>查看磁盘挂载情况</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915221448.png" alt="image-20210915221448745"></p><p>fdisk -l 查看系统所有识别到的磁盘</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915221545.png" alt="image-20210915221545182"></p><h4 id="mkfs-命令格式化磁盘"><a href="#mkfs-命令格式化磁盘" class="headerlink" title="mkfs 命令格式化磁盘"></a>mkfs 命令格式化磁盘</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915221611.png" alt="image-20210915200330145"></p><p>sudo mkfs.ext4 磁盘(也可以是虚拟软盘)</p><h4 id="mount-命令挂载磁盘到目录树"><a href="#mount-命令挂载磁盘到目录树" class="headerlink" title="mount 命令挂载磁盘到目录树"></a>mount 命令挂载磁盘到目录树</h4><p>用户要对该文件系统执行 <code>mount</code> 的指令以进行挂载。该指令通常是使用在 USB 或其他可移除存储设备上，而根目录则需要始终保持挂载的状态。又因为 Linux/UNIX 文件系统可以对应一个文件而不一定要是硬件设备，所以可以挂载一个包含文件系统的文件到目录树。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [options] [<span class="built_in">source</span>] [directory]</span><br></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>1.增加一块硬盘</p><p>可以在虚拟机下添加一个硬块</p><p>或者使用 dd命令制作软盘</p><p>dd if=/dev/zero of=virtual.img bs=1M count=256</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915222919.png" alt="image-20210915222919566" style="zoom:50%;" /></p><p>我这里添加了一个新硬盘</p><p>使用df -h 查看已挂载的磁盘</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915224038.png" alt="image-20210915224037960"></p><p>然后使用 fdisk -l 查看系统分区情况</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915224258.png" alt="image-20210915224258674"></p><p>发现 sda,也就是刚刚添加的5G硬盘没有挂载</p><p>继续使用lsblk还可以查看一些情况</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915224357.png" alt="image-20210915224357414"></p><p>发现  sda确实没有挂载点</p><p>就决定挂载它了!</p><p>如果是自己创建的软盘再使用mkfs格式化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.ext4 virtual.img</span><br></pre></td></tr></table></figure><p>2.分区</p><p>sudo fdisk virtual.img(软盘)</p><p>sudo fdisk /dev/sdb (添加的硬盘)</p><p>按照指示完成分区</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915224758.png" alt="image-20210915224757951" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915224847.png" alt="image-20210915224847528"></p><p>这样就分好区了,分了一个主区</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915225032.png" alt="image-20210915225032272"></p><p>使用fdisk -l 发现有了标识符</p><p>3.格式化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sda1</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915225208.png" alt="image-20210915225208889"></p><p>4.挂载 </p><p>先创建一个目录,使用</p><p>mount 设备名 目录名</p><p><strong>目录最好建立在/mnt下，这个目录是专门挂载的。</strong></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915225335.png" alt="image-20210915225335936"></p><p>如果重启这种挂载关系就会消失</p><p>这是临时挂载</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210915225425.png" alt="image-20210915225425145"></p><p>df -h 发现挂载成功了</p><h4 id="设置开机挂载"><a href="#设置开机挂载" class="headerlink" title="设置开机挂载"></a>设置开机挂载</h4><ol><li>查看开机挂载fstab文件<br>系统开机时会主动读取/etc/fstab这个文件中的内容，根据文件里面的配置挂载磁盘。<br><code># cat /etc/fstab</code></li></ol><blockquote><p>每一列代表的含义：<br>第一列：磁盘的编号或者UUID //挂载点需要使用UUID来进行挂载<br>第二列：需要挂载到的目录<br>第三列：文件系统格式<br>第四列：系统的默认参数，一般填defaults<br>第五列：是否做dump备份，0表示不备份，1表示每天备份，2表示不定期备份<br>第六列：是否开机检查扇区：0表示不检查，1表示最早检验，2表示在1之后开始检验</p></blockquote><h4 id="解除挂载"><a href="#解除挂载" class="headerlink" title="解除挂载"></a>解除挂载</h4><p>umount 设备名</p>]]></content>
      
      
      <categories>
          
          <category> Linux_study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令集_3</title>
      <link href="2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-3/"/>
      <url>2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Linux用户与用户组管理"><a href="#Linux用户与用户组管理" class="headerlink" title="Linux用户与用户组管理"></a>Linux用户与用户组管理</h2><p>上一节已经提到了一些Linux用户的知识</p><p>大部分 Linux 系统在安装时都会建议用户新建一个用户而不是直接使用 root 用户进行登录，当然也有直接使用 root 登录的例如 Kali（基于 Debian 的 Linux 发行版，集成大量工具软件，主要用于数字取证的操作系统）。一般我们登录系统时都是以普通账户的身份登录的，要创建用户需要 root 权限，要用到 <code>sudo</code> 命令。</p><span id="more"></span><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su &lt;user\&gt;</span><br></pre></td></tr></table></figure><p>使用户切换到user,需要输入目标用户的密码</p><p>sudo <cmd\>可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - &lt;user\&gt;</span><br></pre></td></tr></table></figure><p>切换用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser \&lt;user&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，添加用户操作也会相应的增加一个同名的组，用户属于同名组</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914181917.png" alt="image-20210914162057186" style="zoom:50%;" /></p><p>这个命令不但可以添加用户到系统，同时也会默认为新用户在 /home 目录下创建一个工作目录</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182113.png" alt="image-20210914162257824" style="zoom:50%;" /></p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups</span><br></pre></td></tr></table></figure><p>查看用户所属用户组</p><p>新建的用户 所属用户组即自身</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182109.png" alt="image-20210914162603936"></p><p>一个用户可以属于多个组，将用户加入到组:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$usermod</span> -G groupName username</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182224.png" alt="image-20210914163504552"></p><p>这样stu就拥有sudo权限了</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182227.png" alt="image-20210914164017539"></p><p>变更用户所属的根组(将用户加入到新的组，并从原有的组中除去）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$usermod</span> -g groupName username</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p><code>sudo deluser lilei --remove-home</code></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182124.png" alt="image-20210914164438751"></p><p>系统的所有用户及所有组信息分别记录在两个文件中：/etc/passwd , /etc/group 默认情况下这两个文件对所有用户可读：</p><p>查看所有用户及权限:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$more</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>查看所有的用户组及权限:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$more</span> /etc/group</span><br></pre></td></tr></table></figure><p>当然 less is better than more</p><h5 id="etc-group-文件格式说明"><a href="#etc-group-文件格式说明" class="headerlink" title="etc/group 文件格式说明"></a><code>etc/group</code> 文件格式说明</h5><p>/etc/group 的内容包括用户组（Group）、用户组口令、GID（组 ID） 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：</p><blockquote><p>group_name:password:GID:user_list</p></blockquote><p>如果用户的 GID 等于用户组的 GID，那么最后一个字段 <code>user_list</code> 就是空的</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182134.png" alt="image-20210914171348580"></p><p>x表示密码 不可见</p><p>利用查看文件命令可以知道有没有该用户</p><p>grep可以用于搜索</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182140.png" alt="image-20210914164726095"></p><h3 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h3><p><code>groupadd</code>命令<br>功能：添加用户组<br>用法：groupadd [-g gid][-o][-r][-f] groupname<br>参数<br>-g gid：除非使用-o参数不然该值必须是唯一，不可相同。数值不可为负。<br>-o：允许设置相同组id的群组<br>-r：建立系统组<br>-f：强制执行，默认是不允许创建相同id的组的，使用此参数就可以，而且不用-o选项。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182145.png" alt="image-20210914165619148"></p><h3 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod</span><br></pre></td></tr></table></figure><p>命令<br>功能：修改用户组<br>用法：groupmod [-g gid [-o]] [-n group_name] group<br>参数：<br>-g gid：指定id<br>-o：与groupadd相同<br>-n group_name：修改用户组名为group_name</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182149.png" alt="image-20210914165717338"></p><h3 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delgroup  &lt;groupname\&gt;</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182154.png" alt="image-20210914165056709"></p><p>删除用户组可以使用 <code>groupdel</code> 命令，倘若该群组中仍包括某些用户，则必须先删除这些用户后，才能删除群组。</p><p>注意 adduser 与useradd都有,但是有差别</p><p><code>useradd</code> 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 <code>passwd &lt;username&gt;</code> 去设置新用户的密码。<code>adduser</code> 在创建用户的同时，会创建工作目录和密码（提示你设置），做这一系列的操作</p><p>若使用useradd 则需要使用$passwd username修改密码</p><h3 id="批量添加-删除用户"><a href="#批量添加-删除用户" class="headerlink" title="批量添加(删除用户)"></a>批量添加(删除用户)</h3><p>我在网上搜到的办法基本都是用脚本执行,貌似没有这方面直接的命令</p><p>如果用脚本批量处理的话,这个问题也就不算问题了</p><p>前提是要会写shell脚本</p><p>关于vim以及shell脚本学习内容还是不少的</p><p>我后面会写一点</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182159.png" alt="image-20210914172622881"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182203.png" alt="image-20210914172610914"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914182207.png" alt="image-20210914172252606"></p><p>我在ubuntu上试了一下,发现会报错  stdin识别不了</p><p>这种方法只能在其他发行版用</p><p>所以换了一个方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> username:newpasswd | chpasswd</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914190012.png" alt="image-20210914190012781"></p><p><strong>注意</strong>  useradd并不会添加主目录,需要加上参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$useradd</span> -m username</span><br></pre></td></tr></table></figure><p>该命令为用户创建相应的帐号和用户目录/home/username；</p><p>我加上-m参数后</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914190234.png" alt="image-20210914190234095"></p><p>但是!!!</p><p>我发现没有办法登录,输入原本的密码不行</p><p>于是查看了 shadow文件(存储用户密码的)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914192729.png" alt="image-20210914192729556"></p><p>密码是 ！表示被锁了,然后我发现如果用 |就会报错</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914192817.png" alt="image-20210914192816986"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914192907.png" alt="image-20210914192907922" style="zoom:67%;" /></p><p>说是认证令牌错误,然后我将chpasswd提升到sudo,即</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914192959.png" alt="image-20210914192959814"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914193038.png" alt="image-20210914193038777"></p><p>修改成功了..所以说是权限不够…</p><p>并且我不清楚 | 与 &gt;的差别..</p><p>后面我再写一些重定向与管道..</p><p>批量删除用户  且删除用户目录 -r</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914191430.png" alt="image-20210914191430644"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914191500.png" alt="image-20210914191500303"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chpasswd &lt; user.txt</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>也可以利用newusers与chpasswd批量新建用户</p><p>一个user.txt内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user001:x600: 100:user:/home/user001:/bin/bashwin00: x:520:520::/home/win00:/sbin/nologin  通过这个属性让用户无法登录</span><br></pre></td></tr></table></figure><blockquote><p>字段含义：</p><p>Account：用户的名称，如例子中的root；</p><p>Password：用户密码，我们看到这里只显示x，不是指密码就为x，而是表示该密码已经被移动到shadow中去了。</p><p>UID：用户ID。</p><p>GID：组ID。指明用户所属组。</p><p>GECOS：一般说明用户信息的</p><p>Directory：即常说的家目录</p><p>Shell：用来指明用户登录时预设使用的bash</p></blockquote><p>（2）newusers &lt; user.txt</p><p>然后可以执行cat /etc/passwd检查/etc/passwd文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。此时就会在/etc/shadow中对新增的用户产生密码</p><p>（3）编辑每个用户的密码对照文件，</p><p>范例文件passwd.txt内容如下:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user001:密码user002:密码....</span><br></pre></td></tr></table></figure><p>（4）chpasswd &lt; passwd.txt</p>]]></content>
      
      
      <categories>
          
          <category> Linux_study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令集_2</title>
      <link href="2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-2/"/>
      <url>2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Linux-文件管理及目录与权限控制"><a href="#Linux-文件管理及目录与权限控制" class="headerlink" title="Linux 文件管理及目录与权限控制"></a>Linux 文件管理及目录与权限控制</h2><p><strong>前言</strong></p><p>事实上提到对文件及目录管理时,我认为无法避免会说到用户及用户组.所以在这个主题下先提及一下.</p><p>Linux可以实现多用户登陆,这些用户可以共享一些文件,但他们也都有自己的空间.实际上他们的文件都是放在同一个物理磁盘甚至同一个目录的.这就是因为<strong>用户管理</strong>与<strong>权限机制</strong>。<br><span id="more"></span><br>所以有些文件,我们可能无法进行更改,后面会提到.</p><p>输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who am i </span><br></pre></td></tr></table></figure><p>可以查看当前用户</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235127.png" alt="image-20210913235127244"></p><p>root账户权限最高,可以对其他用户文件进行删改</p><p>sudo 命令提升权限,否则一些命令可能无法执行</p><p>这个命令会常用</p><p>sudo  #使用这个命令需要知道当前登陆用户密码且该用户在sudo用户组内.</p><p>用户组就是若干个用户在一起的组合,其他用户就是既不是本身用户也不是这个用户组里的用户.</p><h3 id="文件及目录的管理"><a href="#文件及目录的管理" class="headerlink" title="文件及目录的管理"></a>文件及目录的管理</h3><p>有了些基本知识就可以对文件进行操作了</p><p>Linux目录结构与Windows不同,以目录为主.可以理解为树形目录是一个用户可操作系统的骨架。虽然本质上无论是目录结构还是操作系统内核都是存储在磁盘上的，但从逻辑上来说 Linux 的磁盘是挂载在目录上的，每一个目录不仅能使用本地磁盘分区的文件系统，也可以使用网络上的文件系统。</p><p>Linux目录配置依据 FHS。根据这个标准,Linux的目录该放那些文件是有规定的</p><p><img data-src="https://doc.shiyanlou.com/linux_base/4-1.png" alt="img" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235143.png" alt="img"></p><p><strong>关于目录树</strong></p><p>绝对路径: 由根目录/开始写起的文件名或目录名称</p><p>相对路径:相对于目前路径的文件名写法</p><p># 绝对路径 </p><p>cd /usr/local/bin </p><h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><p>cd ../../usr/local/bin</p><p>cd    改变当前目录</p><ul><li>找到文件/目录位置：cd</li><li>切换到上一个工作目录： cd -</li><li>切换到home目录： cd or cd ~</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000226.png" alt="image-20210913192130268" style="zoom:50%;"/></p><ul><li>显示当前路径: pwd</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000213.png" alt="image-20210913192046022" style="zoom:50%;" /></p><ul><li><p>更改当前工作路径为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path: <span class="variable">$cd</span> path</span><br></pre></td></tr></table></figure></li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000215.png" alt="image-20210913192304748" style="zoom:50%;" /></p><p>.. 表示上一级目录</p><p>.  表示当前目录</p><p>现在可以开始对文件的查看了</p><p>命令</p><ul><li>创建目录：mkdir</li><li>删除：rm</li><li>删除非空目录：rm -rf file目录</li><li>删除日志 rm <em>log (等价: $find ./ -name “</em>log” -exec rm {} ;)</li><li>移动：mv</li><li>复制：cp (复制目录：cp -r )</li><li>创建文件:touch</li></ul><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><h5 id="touch-创建空白文件"><a href="#touch-创建空白文件" class="headerlink" title="touch 创建空白文件"></a>touch 创建空白文件</h5><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000204.png" alt="image-20210913192915649" style="zoom:50%;" /></p><h5 id="mkdir-新建目录"><a href="#mkdir-新建目录" class="headerlink" title="mkdir 新建目录"></a>mkdir 新建目录</h5><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000202.png" alt="image-20210913193233984" style="zoom:50%;" /></p><p>我们发现如果想创建多层的目录直接使用mkdir不行,需要 mkdir -p</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000200.png" alt="image-20210913193350560" style="zoom:50%;" /></p><p>同时一个目录下文件不能与文件夹同名</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>使用 cp命令（copy）复制一个文件到指定目录</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000157.png" alt="image-20210913193711075" style="zoom:50%;"/></p><p>文件的复制。默认复制文件的数据</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235351.png" alt="image-20210913200119663"></p><h5 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h5><p>直接使用cp复制目录会出错</p><p>加上参数 -r 递归复制</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cp</span> -r source_dir  dest_dir</span><br></pre></td></tr></table></figure><p>常用参数</p><p>-f ：为强制 (force) 的意思，若有重复或其它疑问时，不会询问使用者，而强制复制；<br>-i ：若目的文件(destination)已经存在时，在覆盖时会先询问是否真的动作！<br>-l ：进行硬链接 (hard link) 建立，而非复制档案本身；<br>-p ：连同档案的属性(权限,时间,用户)一起复制过去，而非使用预设属性；<br>-r ：递归持续复制，用于目录的复制行为；</p><p>-d:复制成为符号连接</p><p>默认情况下,cp后目标文件拥有者是命令执行者.如果想要连着这个属性更改需要加上-p</p><p>复制时需要考虑:</p><p>保留源文件完整信息?</p><p>源文件是否是符号链接</p><p>源文件是否是mulu</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>使用 <code>rm</code>（remove files or directories）命令删除一个文件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000146.png" alt="image-20210913195612391" style="zoom:50%;" /></p><p>当然 不能删除本身不存在的文件</p><p>有时候你会遇到想要删除一些为只读权限的文件，直接使用 <code>rm</code> 删除会显示一个提示,加上 -f参数直接强制删除</p><p>-i  在删除前会询问</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000149.png" alt="image-20210913195758530" style="zoom:50%;" /></p><h5 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h5><p>同样的,需要加上-r参数才能删除目录</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000140.png" alt="image-20210913200839956" style="zoom:50%;" /></p><p>其实也可以使用rmdir,但只能删除空目录</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000130.png" alt="image-20210913201913643" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000126.png" alt="image-20210913201926192" style="zoom:50%;" /></p><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>使用mv命令移动文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="built_in">source</span> destination </span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000121.png" alt="image-20210913201207839" style="zoom:50%;" /></p><h5 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h5><p><code>mv</code> 命令除了能移动文件外，还能给文件重命名。命令格式为 <code>mv 旧的文件名 新的文件名</code>。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000111.png" alt="image-20210913201430489" style="zoom:50%;" /></p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>Unix/Linux 系统是一个典型的多用户系统，不同的用户处于不同的地位，对文件和目录有不同的访问权限。为了保护系统的安全性，Unix/Linux 系统除了对用户权限作了严格的界定外，还在用户身份认证、访问控制、传输安全、文件读写权限等方面作了周密的控制。</p><p>在 Unix/Linux 中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p><h4 id="查看文件与目录"><a href="#查看文件与目录" class="headerlink" title="查看文件与目录"></a>查看文件与目录</h4><p>之前也用到很多次  ls命令</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000101.png" alt="image-20210913202256597" style="zoom:50%;" /></p><p>ls列出目录下的文件</p><p>-a  显示所有文件及目录（包含以“.”开头的隐藏文件）<br><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000108.png" alt="image-20210913202947310" style="zoom:50%;" />-l  显示详细文件内容,长格式</p><p>-h  与-l一起使用，输出易于阅读的文件大小。 Human-readable</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000057.png" alt="image-20210913202919245" style="zoom:50%;" /></p><p>-r  将文件以相反次序显示(原定以英文字母次序)</p><p>-d 若不加参数指定目录,ls会列出目录中的内容,若与-l结合则可以查看目录信息</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000055.png" alt="image-20210913202837994" style="zoom:50%;" /></p><p>-t 安修改日期排序输出</p><p>-S 按文件大小排序输出</p><p>我们会发现 在长格式下,文件前面会有一些东西</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000053.png" alt="image-20210913203233587" style="zoom:50%;" /></p><p>分别是 文件类型权限  链接数  文件所属用户组 文件大小Byte  文件最后修改时间  文件名 (当然后面可能会有软链接) </p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000050.png" alt="pic"></p><h4 id="关于权限"><a href="#关于权限" class="headerlink" title="关于权限"></a>关于权限</h4><p><img data-src="https://doc.shiyanlou.com/linux_base/3-10.png" alt="pic" style="zoom: 67%;" /></p><p>读权限，表示你可以使用 <code>cat &lt;file name&gt;</code> 命令来读取某个文件的内容；写权限，表示你可以编辑和修改某个文件的内容；</p><p>执行权限，通常指可以运行的二进制程序文件或者脚本文件，如同 Windows 上的 <code>exe</code> 后缀的文件，不过 Linux 上不是通过文件后缀名来区分文件的类型。你需要注意的一点是，<strong>一个目录同时具有读权限和执行权限才可以打开并查看内部文件，而一个目录要有写权限才允许在其中创建其它文件</strong>，这是因为目录文件实际保存着该目录里面的文件的列表等信息。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000046.png" alt="image-20210913203914866" style="zoom:50%;" /></p><p>可以分析一下,这是个目录(d) 拥有者与用户组权限都是rwx,即可读可写可执行. 但其他用户不能写,说明其他用户不能改写该目录.所有者与所属用户组为shiyanlou</p><h4 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h4><p>chgrp:修改文件所属用户组</p><p>chown:修改文件拥有者</p><p>-R 参数递归修改连通目录下的所有文件</p><p>chomd:修改文件的权限</p><ul><li>改变文件的拥有者 chown</li><li>改变文件读、写、执行等属性 chmod</li><li>递归子目录修改： chown -R tuxapp source/</li><li>增加脚本可执行权限： chmod a+x myscript</li></ul><p>注意 用户组在 etc/group里。用户在etc/passwd里</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000043.png" alt="image-20210913205052643" style="zoom:50%;" /></p><p>创建用户,在该用户目录下创建ipone文件。发现该文件所有者是lilei</p><p>现在切回root</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000041.png" alt="image-20210913205812323" style="zoom:50%;" /></p><p>发现该文件所有者变为shiyanlou</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000039.png" alt="image-20210913205912499"></p><p>现在是更改了文件的所有者,下面继续更改所属用户组</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000037.png" alt="image-20210913212151973"></p><p>这样的话lilei就只有rx的权限了,也就是说无法更改文件.我们试一试</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000035.png" alt="image-20210913212322183" style="zoom:33%;" /></p><p>会发现无法修改…</p><p>接下来进行修改权限</p><ol><li><p>二进制数字表示</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000033.png" alt="pic"></p></li></ol><p>第一位指定属主的权限，第二位指定组权限，第三位指定其他用户的权限，每位通过4(读)、2(写)、1(执行)三种数值的和来确定权限。如6(4+2)代表有读写权，7(4+2+1)有读、写和执行的权限。</p><p>例如<img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000030.png" alt="image-20210913211810594"></p><p>可以发现改为了拥有者可读可写</p><ol><li><p>符号操作</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$chmod</span> userMark(+|-)PermissionsMark</span></span><br></pre></td></tr></table></figure><p>userMark取值：</p><ul><li>u：用户</li><li>g：组</li><li>o：其它用户</li><li>a：所有用户</li></ul><p>PermissionsMark取值：</p><ul><li>r:读</li><li>w：写</li><li>x：执行</li></ul></li></ol><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000026.png" alt="image-20210913212537141" style="zoom:50%;" /></p><p><code>+</code> 和 <code>-</code> 分别表示增加和去掉相应的权限。</p><p>在shell中，要修改文件当前的用户必须具有管理员root的权限。可以通过su命令切换到root用户，也可以通过sudo获得root的权限</p><p><strong>注意</strong>:对于文件和文件夹来说。 rwx权限不太一样</p><p>文件:r 读取文件内容  w修改文件内容  x执行文件内容</p><p>目录:r 读到文件名  w修改文件名  x进入目录权限</p><p>也就是说若没有x权限,无法进入目录(不代表不能知道目录下的东西)</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000024.png" alt="image-20210913213443471" style="zoom:50%;" /></p><p>创建一个目录 然后更改权限 使得用户组与其他用户只有r权限</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000022.png" alt="image-20210913213634417" style="zoom:50%;" /></p><p>使用groups查看当前用户的用户组。发现他加入了多个用户组</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000020.png" alt="image-20210913213536038"></p><p>然后想要进入该目录权限不够,因为只有r</p><p>sudo大法  更改权限进入文件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000018.png" alt="image-20210913214229305"></p><p>添加一个文件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000015.png" alt="image-20210913214622660" style="zoom:50%;" /></p><p>发现可以查询目录下的文件名列表但无法切换到目录内。甚至无法读取文件内容</p><h4 id="file确定文件类型"><a href="#file确定文件类型" class="headerlink" title="file确定文件类型"></a>file确定文件类型</h4><p>Linux下不要求文件名反应文件类型,使用file命令可以查看类型</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000012.png" alt="image-20210913215723013" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000010.png" alt="image-20210913225537180"></p><h4 id="less查看文本文件"><a href="#less查看文本文件" class="headerlink" title="less查看文本文件"></a>less查看文本文件</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000008.png" alt="image-20210913215804478"></p><p>我们可以上下翻页。q退出</p><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>cat命令用于连接文件并打印到标准输出设备上。</p><p>我写在这里是因为这些命令用的挺多的</p><p>把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n textfile1 &gt; textfile2</span><br></pre></td></tr></table></figure><p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b textfile1 textfile2 &gt;&gt; textfile3</span><br></pre></td></tr></table></figure><h4 id="查看文件：cat-vi-head-tail-more"><a href="#查看文件：cat-vi-head-tail-more" class="headerlink" title="查看文件：cat vi head tail more"></a>查看文件：cat vi head tail more</h4><p>显示时同时显示行号:</p><figure class="highlight sh"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> -n</span><br></pre></td></tr></table></figure><p>按页显示列表内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ls -al | more</span></span><br></pre></td></tr></table></figure><p>只看前10行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">head - 10 **</span></span><br></pre></td></tr></table></figure><p>显示文件第一行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">head -1 filename</span></span><br></pre></td></tr></table></figure><p>显示文件倒数第五行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">tail -5 filename</span></span><br></pre></td></tr></table></figure><p>查看两个文件间的差别:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">diff file1 file2</span></span><br></pre></td></tr></table></figure><p>动态显示文本最新信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">tail -f crawler.log</span></span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接</p><p>在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的</p><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>也叫符号链接</p><p>与Windows的快捷方式类似</p><p>在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s cc ccTo :符号链接(软链接)；删除源，另一个无法使用；（后面一个ccTo 为新建的文件）</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000002.png" alt="image-20210913220642505"></p><p>ls -li   -i可以显示inode节点。通过这个判断链接。当然,符号链接inode不同且有箭头指向被链接的文件.</p><p>若源文件被删,则符号链接的文件也失效</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000001.png" alt="image-20210913221115358"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235959.png" alt="image-20210913221136588"></p><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><p>它与软链接实现方式不同</p><p>硬链接指通过索引节点来进行连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000450.png" alt="image-20210913221552058"></p><p>硬链接f2到f1，将f1删掉.因为节点相同,发现原本软链接到f1的f3硬链接到了f2</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000445.png" alt="image-20210913221853123"></p><p>删除被软链接的文件,在创建同名文件,发现软链接的文件更新了</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235953.png" alt="image-20210913222100169"></p><h3 id="文件压缩与解压"><a href="#文件压缩与解压" class="headerlink" title="文件压缩与解压"></a>文件压缩与解压</h3><p>在 Windows 上最常见的不外乎这两种 <code>*.zip</code>，<code>*.7z</code> 后缀的压缩文件。而在 Linux 上面常见的格式除了以上两种外，还有 <code>.rar</code>，<code>*.gz</code>，<code>*.xz</code>，<code>*.bz2</code>，<code>*.tar</code>，<code>*.tar.gz</code>，<code>*.tar.xz</code>，<code>*.tar.bz2</code>，</p><p>Linux 常用的压缩与解压缩命令有：tar、gzip、gunzip、bzip2、bunzip2、compress 、uncompress、 zip、 unzip、rar、unrar 等</p><div class="table-container"><table><thead><tr><th>文件后缀名</th><th>说明</th></tr></thead><tbody><tr><td><code>*.zip</code></td><td>zip 程序打包压缩的文件</td></tr><tr><td><code>*.rar</code></td><td>rar 程序压缩的文件</td></tr><tr><td><code>*.7z</code></td><td>7zip 程序压缩的文件</td></tr><tr><td><code>*.tar</code></td><td>tar 程序打包，未压缩的文件</td></tr><tr><td><code>*.gz</code></td><td>gzip 程序（GNU zip）压缩的文件</td></tr><tr><td><code>*.xz</code></td><td>xz 程序压缩的文件</td></tr><tr><td><code>*.bz2</code></td><td>bzip2 程序压缩的文件</td></tr><tr><td><code>*.tar.gz</code></td><td>tar 打包，gzip 程序压缩的文件</td></tr><tr><td><code>*.tar.xz</code></td><td>tar 打包，xz 程序压缩的文件</td></tr><tr><td><code>*tar.bz2</code></td><td>tar 打包，bzip2 程序压缩的文件</td></tr><tr><td><code>*.tar.7z</code></td><td>tar 打包，7z 程序压缩的文件</td></tr></tbody></table></div><p>简单来说,就是打包,压缩</p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>最常用的打包命令是 tar，使用 tar 程序打出来的包我们常称为 tar 包，tar 包文件的命令通常都是以 .tar 结尾的。生成 tar 包后，就可以用其它的程序来进行压缩了</p><p>​    tar实现了对 7z、gzip、xz、bzip2 等工具的支持，这些压缩工具本身只能实现对文件或目录（单独压缩目录中的文件）的压缩，没有实现对文件的打包压缩.</p><p>下来来介绍参数</p><p>-c 创建一个tar包   -f指定文件名</p><p>-r 增加文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cf mytar.tar file</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235943.png" alt="image-20210913223434051"></p><p>创建了一个tar包</p><p>还可以加上 <code>-v</code> 参数以可视的的方式输出打包的文件。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235941.png" alt="image-20210913223923573" style="zoom:50%;" /></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -uf all.tar logo.gif</span><br></pre></td></tr></table></figure><p>更新原来 tar 包 all.tar 中 logo.gif 文件，-u 是表示更新文件的意思</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -tf all.tar</span><br></pre></td></tr></table></figure><p>列出 all.tar 包中所有文件，-t 是列出文件的意思</p><ul><li>保留文件属性和跟随链接（符号链接或软链接），有时候我们使用 tar 备份文件当你在其他主机还原时希望保留文件的属性（<code>-p</code> 参数）和备份链接指向的源文件而不是链接本身（<code>-h</code> 参数）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cphf etc.tar /etc</span><br></pre></td></tr></table></figure><h5 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h5><p>解包一个文件（<code>-x</code> 参数）到指定路径的<strong>已存在</strong>目录（<code>-C</code> 参数）</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235939.png" alt="image-20210913225018181"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235934.png" alt="image-20210913224507056"></p><p>只查看不解包文件 <code>-t</code> 参数</p><h5 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h5><p>对于创建不同的压缩格式的文件，对于 tar 来说是相当简单的，需要的只是换一个参数</p><p>在创建 tar 文件的基础上添加 <code>-z</code> 参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -czf mytar.tar.gz file</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235928.png" alt="image-20210913225228029"></p><p>解压文件使用 -xzf (对于gzip)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235918.png" alt="image-20210913225338711"></p><div class="table-container"><table><thead><tr><th>压缩文件格式</th><th>参数</th></tr></thead><tbody><tr><td><code>*.tar.gz</code></td><td><code>-z</code></td></tr><tr><td><code>*.tar.xz</code></td><td><code>-J</code></td></tr><tr><td><code>*tar.bz2</code></td><td><code>-j</code></td></tr></tbody></table></div><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>其实光tar已经够了,这里稍微写一下zip</p><p><code>-r</code> 参数表示递归打包包含子目录的全部内容</p><p><code>-q</code> 参数表示为安静模式，即不向屏幕输出信息</p><p><code>-o</code>，表示输出文件</p><p>还可以设置压缩等级</p><p>zip -r -o myzip.zip file</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235913.png" alt="image-20210913225914594"></p><p>du用于查看文件大小</p><p>-e设置密码</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913235858.png" alt="image-20210913230218420"></p><p>-l 用于使LF转化为CR+LF. 也就是linux换行符为LF在windows上无法显示</p><p><strong>unzip用于解压</strong></p><p>-q 安静模式</p><p>-d  指定输出到的目录</p><p>-l  不解压只查看内容</p><p>中文压缩包 -O GBK 指定编码类型</p><p><strong>小结</strong></p><ul><li>zip：</li><li>打包 ：zip something.zip something （目录请加 -r 参数）</li><li>解包：unzip something.zip</li><li>指定路径：-d 参数</li><li>tar：</li><li>打包：tar -cf something.tar something</li><li>解包：tar -xf something.tar</li><li>指定路径：-C 参数</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>实时查找</p><p>搜寻文件或目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$find</span> ./ -name <span class="string">&quot;core*&quot;</span> | xargs file</span><br></pre></td></tr></table></figure><p>查找目标文件夹中是否有obj文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$find</span> ./ -name <span class="string">&#x27;*.o&#x27;</span></span><br></pre></td></tr></table></figure><p>指定目录  与 -name查找关键字(可用正则)</p><p>递归当前目录及子目录删除所有.o文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$find</span> ./ -name <span class="string">&quot;*.o&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>locate会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$locate</span> string</span><br></pre></td></tr></table></figure><p>寻找包含有string的路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$updatedb</span></span><br></pre></td></tr></table></figure><p>与find不同，locate并不是实时查找。你需要更新数据库，以获得最新的文件索引信息。</p>]]></content>
      
      
      <categories>
          
          <category> Linux_study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令集_1.md</title>
      <link href="2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-1/"/>
      <url>2021/09/21/%E5%91%BD%E4%BB%A4%E9%9B%86-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>玩玩linux<br><span id="more"></span></p><h2 id="1-Linux软件部署及应用"><a href="#1-Linux软件部署及应用" class="headerlink" title="1.Linux软件部署及应用"></a>1.Linux软件部署及应用</h2><p>在Linux中,软件包分为</p><ul><li>源码包安装  提供了该软件所有程序源代码的发布形式，需要用户自己<strong>编译成可执行的二进制代码并进行安装</strong>，优点是<strong>配置灵活</strong>，可以随意去掉或保留某些功能或者模块，适应多种硬件/操作系统平台及编译环境，缺点就是<strong>难度比较大</strong>，一般不适合初学者使用。</li><li>二进制包安装  事先已经编译好的<strong>二进制</strong>形式的软件包，有点事<strong>安装方便</strong>，缺点是灵活性差，如果该软件包是为特定的硬件/操作系统平台编译的，那它就不能再另外的平台或者环境下正确执行</li></ul><p>注意,在不同linux发行版上软件安装机制不同</p><ul><li>DPKG Debian(ubuntu)   命令rpm   在线升级 yum </li><li>RPM  (Centos Fedora)   命令dpkg    在线apt(apt-get)</li></ul><h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><p>软件发布者将源代码先以tar打包,再进行压缩(如gzip,bzip2,xz)得到所谓<a href="https://baike.baidu.com/item/tarball/6505617">Tarball </a>文件.</p><p>解压该文件可以得到</p><ul><li>源代码文件</li><li>检测程序文件(configure或config文件)</li><li>本软件的建议安装说明(install或readme)</li></ul><p>通常的安装流程</p><ol><li>在厂商网站下载一个Tarball文件</li><li>将Tarball文件解开,产生很多源代码文件</li><li>利用gcc或make(与makefile)结合,产生目标文件</li><li>以gcc进行函数库与主,子程序进行链接,形成主要的二进制文件</li><li>将上述文件以及相关配置文件安装在主机上(install)</li></ol><h4 id="大概步骤"><a href="#大概步骤" class="headerlink" title="大概步骤"></a>大概步骤</h4><p>下载源代码软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget url</span><br></pre></td></tr></table></figure><p>或者直接在一些网站上下载得到一个压缩包 wget功能下载url上的文件</p><p>解压缩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf xx.tar.bz2</span><br><span class="line">tar -zxvf xx.tar.gz</span><br></pre></td></tr></table></figure><p>进入压缩目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure.   <span class="comment">#编译环境检查以及安装配置</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix == 安装路径</span><br></pre></td></tr></table></figure><p>编译源代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make   <span class="comment">#再修改configure后会有一个makefile。 make利用该文件(文件中有相关的配置条件)进行编译</span></span><br></pre></td></tr></table></figure><p>当然之前也可以make clean一下,目的是清除.o目标文件 </p><p>安装到本机器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：查看安装说明,提前处理软件包依赖</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>之前我在虚拟机上装了一个bochs(开源IA-32(x86)电脑模拟器) 符合源代码安装,把这个过程记录下</p><ol><li><p>在官网下载软件包,会得到一个压缩包. tar.gz或类似后缀文件</p></li><li><p>解压该文件。tar -zxvf nasm.tar.gz</p><p>得到一个文件夹</p></li></ol><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912223547.png" alt="image-20210912223547434"></p><ol><li><p>前两步其实很简单,现在是源码安装的重点:配置</p><p>在得到的文件中有许多程序文件,通常有configure,我们可以通过 ./configure -参数 来进行相关配置</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912223807.png" alt="image-20210912223807497"></p><p>进行编译设置</p><p>当然,我门很可能根本不知道有哪些参数,可以在解压得到文件中找到相关配置说明(一定会有的,不过是英文)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912223955.png" alt="image-20210912223955416"></p></li></ol><p>   配置好后会有makefile(或类似的东西),然后直接make根据这个配置文件进行配置,配置好后就能直接安装了</p><p>   <img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912224149.png" alt="image-20210912224149809" style="zoom:50%;" /></p><p>   因为我已经装好的,这里显示就会不一样</p><ol><li>安装。make install</li></ol><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912224240.png" alt="image-20210912224240669"></p><h3 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h3><p>我们需要做的只是将从网络上下载的二进制包解压后放到合适的目录，然后将包含可执行的主程序文件的目录添加进<code>PATH</code>环境变量即可</p><p>优点：安装过程简单快速</p><p>缺点：无法查看源代码、选择功能不灵活、有依赖性（需要提前一些前置依赖包）</p><p>这就设计到刚才说的rpm与dpkg了.     <strong>注意srpm里面是源码,rpm与dpkg下载的是经过编译的二进制文件,不可修改参数</strong></p><p>我认为二进制安装难点是安装的路径以及相关的东西,它都给你默认了,灵活性小,但安装简单.</p><p>dpkg与rpm只是用在不同linux发行平台,因为我用的ubuntu,只写一下dpkg就行了.道理类似.</p><p>dpkg本身是一个底层工具,上层的工具如apt,用于远程获取安装包</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>-i</td><td>安装指定deb包</td><td></td></tr><tr><td>-R</td><td>加上目录,安装目录下的所有deb包</td><td></td></tr><tr><td>-r</td><td>remove 移除安装的软件包</td><td></td></tr><tr><td>-s</td><td>显示已安装包的信息</td><td></td></tr><tr><td>-L</td><td>显示已安装的软件包的目录信息</td><td></td></tr><tr><td>-l</td><td>列出已安装的所有软件包</td></tr></tbody></table></div><h3 id="大概步骤-1"><a href="#大概步骤-1" class="headerlink" title="大概步骤"></a>大概步骤</h3><ol><li>下载(不安装)一个二进制文件(如何知道是否是一个二进制文件呢,要么自己甄别,要么利用apt或yum)一般 .rpm .deb 是二进制</li><li>利用dpkg(ubuntu)或rpm(Centos)安装,参数见上,列举不全,自行搜索</li><li>这样文件就在对应的目录</li></ol><p>过程确实比源码包安装简单</p><p>注意: apt-get install安装目录是包的维护者确定的，不是用户</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>我安装一个Emacs试一试</p><p>涉及到apt  后面会说</p><ol><li><p>利用apt在线下载一个软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update  <span class="comment">#更新软件列表</span></span><br><span class="line">sudo apt -d install -y emacs <span class="comment">#只下载不安装 且回应安装选项时一律yes.</span></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912231854.png" alt="image-20210912231853997"></p></li><li><p>利用dpkg安装</p><p>可以把安装包移动到一个路径下安装在那</p><p>我们发现不止下载了一个包,说有依赖关系,要一起安装</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912232149.png" alt="image-20210912232149245"></p></li></ol><p>​                    如果出现一些依赖关系,安装时就要提前或一起安装</p><p>​                    这是可以利用apt的 -f参数修复依赖关系,相当于将没安装的都装上了</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912232408.png" alt="image-20210912232408925"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在线下载</p><p>apt与yum</p><p>我们用到了apt下载,这个东西其实很常用.yum是其他发行版的,同理</p><p>一般有人常用apt-get,事实上apt更常用,也更好(至少我认为)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912232716.png" alt="image-20210912232716641"></p><p>apt可以自动下载,配置安装二进制<strong>或源代码</strong>格式的软件包.</p><p>当执行安装时,会在本地的数据库中搜索关于软件的相关信息,根据信息在相关服务器上下载(你也许最好要换源).需要执行sudo apt update 使本地软件包列表与服务器保持一致.</p><p>好消息：apt可以很好的处理依赖关系</p><div class="table-container"><table><thead><tr><th>工具</th><th>说明</th><th></th></tr></thead><tbody><tr><td>install</td><td>安装软件包</td><td></td></tr><tr><td>update</td><td>从服务器上更新用于更新本地软件的列表</td><td></td></tr><tr><td>upgrade</td><td>升级本地软件</td><td></td></tr><tr><td>remove</td><td>移除已安装的软件包与与其有关系的软件包(株连)</td><td></td></tr><tr><td>clean</td><td>移除下载到本地的软件包  路径 /var/cache/apt/archives/</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>-d</td><td>只下载不安装</td><td></td></tr><tr><td>-y</td><td>自动回应是否安装软件包的选项  yes</td><td></td></tr><tr><td>-f</td><td>修复依赖关系</td></tr></tbody></table></div><p>可以使用sudo-cache search搜索本地有没有该软件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912233857.png" alt="image-20210912233857067"></p><h3 id="软件卸载-更新"><a href="#软件卸载-更新" class="headerlink" title="软件卸载 更新"></a>软件卸载 更新</h3><p>根据不同的安装方式进行</p><h4 id="源码卸载-更新"><a href="#源码卸载-更新" class="headerlink" title="源码卸载 更新"></a>源码卸载 更新</h4><p>我们已经知道源码安装比较麻烦了,卸载的话也有点小麻烦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make uninstall <span class="comment">#可以卸载</span></span><br></pre></td></tr></table></figure><p>事实上有些源码包并未提供这样的卸载方式</p><p>可以在安装时指定安装路径   —prefix==路径</p><p>卸载时把那个目录删除就行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm  -rf 目录</span><br></pre></td></tr></table></figure><p>更新的话,如果是从网站上下载编译的只有重新下载再走一遍流程</p><h4 id="二进制卸载-更新"><a href="#二进制卸载-更新" class="headerlink" title="二进制卸载 更新"></a>二进制卸载 更新</h4><p>二进制代码如果在一个目录(比如是解压到一个目录的情况),直接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 目录</span><br></pre></td></tr></table></figure><p>我试一下,卸载源码安装的bochs,试一试 make uninstall</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210912234855.png" alt="image-20210912234855213"></p><p>成功了,我好不容易安装的软件没了</p><p>可以看出,安装的软件的路径不太好确定</p><p>更新的话同理,事实上如果从网站上下载的,不管是源码还是二进制,只能重新走一遍开始的流程了</p><p><strong>但是</strong></p><p>如果用apt或类似的软件管理就不一样了</p><p>更新软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update         <span class="comment"># 更新安装源(Source)apt upgrade         # 更新已安装的软件包apt dist-upgrade      # 更新已安装的软件包(识别并处理依赖关系的改变)</span></span><br></pre></td></tr></table></figure><p>卸载软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove PackageName       <span class="comment"># 删除软件包, 保留配置文件apt purge PackageName        # 删除软件包, 同时删除配置文件apt autoremove PackageName     # 移除之前被其他软件依赖但不再被使用的软件</span></span><br></pre></td></tr></table></figure><p> 安装软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install PackageName         <span class="comment"># 普通安装apt install PackageName=VersionName   # 安装指定包的指定版本apt --reinstall install PackageName   #重新安装apt build-dep PackageName        # 安装源码包所需要的编译环境apt -f install             # 修复依赖关系</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 如果出现一些问题需要重新安装软件, —reinstall install很有用，</p><p>同时dpkg也可以处理软件的卸载</p><ol><li>dpkg -r package-name删除软件包（保留配置信息）</li><li>dpkg —configure package-name 配置软件包，如果加上<code>-a</code>表示配置所有未配置的软件包</li></ol><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>1.更新软件列表</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913000617.png" alt="image-20210913000617325"></p><p>2.更新本地软件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210913000704.png" alt="image-20210913000704670"></p><p>这样就更新了</p><p>卸载的话 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove</span><br></pre></td></tr></table></figure><p>就不示范了,懒得再装</p><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><p>因为Linux命令太多了,学会使用帮助很重要</p><ul><li>在只记得部分命令关键字的场合，我们可通过man -k来搜索；</li><li>需要知道某个命令的简要说明，可以使用whatis；而更详细的介绍，则可用info命令；</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210914000533.png" alt="image-20210913231211364"></p><ul><li>查看命令在哪个位置，我们需要使用which；</li><li>而对于命令的具体参数及使用方法，我们需要用到强大的man</li><li>help也可以查看内置命令(help不在zsh中,且ls不是内置命令）</li></ul><p>简要说明命令的作用（显示命令所处的man分类页面）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whatis</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>查看程序的binary文件所在路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$which</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>详细的说明文档:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$info</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>eg:查找make程序安装路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$which</span> make/opt/app/openav/soft/bin/make install</span><br></pre></td></tr></table></figure><p>查看程序的搜索路径:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whereis</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>当系统中安装了同一软件的多个版本时，不确定使用的是哪个版本时，这个命令就能派上用场</p>]]></content>
      
      
      <categories>
          
          <category> Linux_study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发</title>
      <link href="2021/09/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>2021/09/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h1><p>开发文档挺齐全的,也是借着微信这个平台.</p><p>开发模式也挺好.</p><p>不过缺点也是只能局限在这个平台,要开发手机软件还要看其他的而且现在web比较好.</p><span id="more"></span><p><strong>开发文档</strong></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/">小程序简介 | 微信开放文档 (qq.com)</a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831185320.png" alt="image-20210831185320318" style="zoom:50%;" /></p><p><img data-src="C:/Users/Tim/AppData/Roaming/Typora/typora-user-images/image-20210831185251774.png" alt="image-20210831185251774" style="zoom:50%;" /></p><h3 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project.config.json</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831185432.png" alt="image-20210831185432310" style="zoom:50%;" /></p><p>当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p><h3 id="主体文件"><a href="#主体文件" class="headerlink" title="主体文件"></a>主体文件</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.json</span><br><span class="line"></span><br><span class="line">app.js</span><br><span class="line"></span><br><span class="line">app.wxss（可选文件）</span><br></pre></td></tr></table></figure><h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><p>小程序的全局配置文件.包含</p><ol><li>小程序所有页面的路径地址</li><li>导航栏样式</li><li><p>…</p></li><li><p><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</p></li><li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等</li></ol><p>还可以配置tabBar,networkTimeout,debug等属性</p><p>注意:pages记录小程序所有页面的路径地址.其中如果有多个页面地址,<strong>第一个默认为小程序初始页面</strong></p><p>tabBar设置页面底部tab工具条表现</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831192321.png" alt="image-20210831192321856" style="zoom:50%;" /></p><p>window属性对应的值是对象形式</p><p>还有networkTimeout和debug</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831192927.png" alt="image-20210831192927512" style="zoom:50%;" /></p><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><p>全局逻辑文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App(</span><br><span class="line"></span><br><span class="line">&#123;<span class="function"><span class="title">onLaunch</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"></span><br><span class="line">globalData:&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="app-wxss"><a href="#app-wxss" class="headerlink" title="app.wxss"></a>app.wxss</h4><p>可以不写,类似于css.规定所有页面都可用的样式效果</p><h3 id="页面配置文件"><a href="#页面配置文件" class="headerlink" title="页面配置文件"></a>页面配置文件</h3><p>在根目录下的pages文件夹中保存所有页面文件</p><p>每一个独立的页面基本都由四种文件构成</p><p>wxml wxss js和json</p><p>由于页面的json只能写与window相关的配置无须像app.json那样复杂</p><h3 id="sitemap-js"><a href="#sitemap-js" class="headerlink" title="sitemap.js"></a>sitemap.js</h3><p>开发者可以通过 <code>sitemap.json</code> 配置，或者管理后台页面收录开关来配置其小程序页面是否允许微信索引。当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索词条触发该索引时，小程序的页面将可能展示在搜索结果中。 爬虫访问小程序内页面时，会携带特定的 user-agent：<code>mpcrawler</code> 及<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html">场景值</a>：<code>1129</code>。需要注意的是，若小程序爬虫发现的页面数据和真实用户的呈现不一致，那么该页面将不会进入索引中。</p><p>具体配置说明</p><ol><li>页面收录设置：可对整个小程序的索引进行关闭，小程序管理后台-功能-页面内容接入-页面收录开关；<a href="https://mp.weixin.qq.com/wxopen/readtemplate?t=config/collection_agreement_tmpl">详情</a></li><li>sitemap 配置：可对特定页面的索引进行关闭</li></ol><p>在写网站时也会有sitemap相当于微信内对你的小程序的索引,可以设置哪些能索引到哪些不能</p><p>感觉不用改</p><h3 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h3><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831193616.png" alt="image-20210831193616831" style="zoom:67%;" /></p><p>utils文件夹用于存放公共js文件可以被其他文件引用</p><p>还可以自定义资源文件夹存放其他文件,如图片等</p><h2 id="IDE使用"><a href="#IDE使用" class="headerlink" title="IDE使用"></a>IDE使用</h2><p>感觉跟vscode类似,功能还是挺多的</p><p>我就不多介绍了</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831194949.png" style="zoom:50%;" /></p><h2 id="小程序框架"><a href="#小程序框架" class="headerlink" title="小程序框架"></a>小程序框架</h2><h3 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h3><p>App Services</p><p>逻辑层主要作用是处理数据后发送给视图层渲染以及接受视图层的反馈.（一般解释）</p><p>个人认为就是后台的处理.MVVM结构</p><p>在 <code>JavaScript</code> 的基础上，增加了一些功能，以方便小程序的开发：</p><ul><li>增加 <code>App</code> 和 <code>Page</code> 方法，进行<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">程序注册</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">页面注册</a>。</li><li>增加 <code>getApp</code> 和 <code>getCurrentPages</code> 方法，分别用来获取 <code>App</code> 实例和当前页面栈。</li><li>提供丰富的 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html">API</a>，如微信用户数据，扫一扫，支付等微信特有能力。</li><li>提供<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#模块化">模块化</a>能力，每个页面有独立的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#文件作用域">作用域</a>。</li></ul><p><strong>注意：小程序框架的逻辑层并非运行在浏览器中，因此 <code>JavaScript</code> 在 web 中一些能力都无法使用，如 <code>window</code>，<code>document</code> 等。</strong></p><h3 id="注册程序"><a href="#注册程序" class="headerlink" title="注册程序"></a>注册程序</h3><h4 id="App"><a href="#App" class="headerlink" title="App()"></a>App()</h4><p>只能写在app.js内且只能注册一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch (options) &#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow (options) &#123;</span><br><span class="line">    <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide () &#123;</span><br><span class="line">    <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError (msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: <span class="string">&#x27;I am global data&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序启动，或从后台进入前台显示，会触发 onShow</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序从前台进入后台，会触发 onHide</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>小程序后台就是按Home键或某些按钮将小程序退到后台</p><p>onLaunch()和onShow()方法在触发时会返回参数</p><p>globalData可以自由定义</p><h4 id="onpageNotFound"><a href="#onpageNotFound" class="headerlink" title="onpageNotFound()"></a>onpageNotFound()</h4><p>当需要打开的页面不催在时,微信客户端会有一个原生模板页面提示.如果想更改可以用这个方法</p><h4 id="getApp"><a href="#getApp" class="headerlink" title="getApp()"></a>getApp()</h4><p>获取小程序实例</p><p>整个小程序只有一个 App 实例，是全部页面共享的。开发者可以通过 <code>getApp</code> 方法获取到全局唯一的 App 实例，获取App上的数据或调用开发者注册在 <code>App</code> 上的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.js</span></span><br><span class="line"><span class="keyword">const</span> appInstance = getApp()</span><br><span class="line"><span class="built_in">console</span>.log(appInstance.globalData) <span class="comment">// I am global data</span></span><br></pre></td></tr></table></figure><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><p>对于小程序中的每个页面，都需要在页面对应的 <code>js</code> 文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">&quot;This is page data.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面创建时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面出现在前台时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面首次渲染完毕时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面从前台变为后台时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面销毁时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发下拉刷新时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面触底时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面被用户分享时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面滚动时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onResize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面尺寸变化时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onTabItemTap</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// tab 点击时执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(item.index)</span><br><span class="line">    <span class="built_in">console</span>.log(item.pagePath)</span><br><span class="line">    <span class="built_in">console</span>.log(item.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件响应函数</span></span><br><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      text: <span class="string">&#x27;Set some data for updating view.&#x27;</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is setData callback</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自由数据</span></span><br><span class="line">  customData: &#123;</span><br><span class="line">    hi: <span class="string">&#x27;MINA&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="初始数据"><a href="#初始数据" class="headerlink" title="初始数据"></a>初始数据</h4><p>data属性  当页面加载时由逻辑层到渲染层因此data数据必须是可以转化成json的类型  </p><p>wxml可以进行数据绑定</p><p>WXML 通过 { {变量名}} 来绑定 WXML 文件和对应的 JavaScript 文件中的 data 对象属性。</p><h4 id="生命周期回调函数"><a href="#生命周期回调函数" class="headerlink" title="生命周期回调函数"></a><a id="test">生命周期回调函数</a></h4><p>Page()函数中会生成onLoad(),onShow()等</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831204052.png" alt="image-20210831204052874" style="zoom:67%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210831204116.png" alt="image-20210831204116813" style="zoom:67%;" /></p><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li></ul><h4 id="页面事件处理函数"><a href="#页面事件处理函数" class="headerlink" title="页面事件处理函数"></a>页面事件处理函数</h4><p>Pages中的 onPullDownRefresh(),onReachBottom()等</p><h4 id="组件事件处理函数"><a href="#组件事件处理函数" class="headerlink" title="组件事件处理函数"></a>组件事件处理函数</h4><p>在wxml上定义事件绑定,事件触发时调用Page()中对应的事件处理函数</p><h4 id="rout"><a href="#rout" class="headerlink" title="rout"></a>rout</h4><p>利用this.route查看当前页面路径地址</p><h4 id="setData"><a href="#setData" class="headerlink" title="setData()"></a>setData()</h4><p>在Pages()中同步更新data属性中的数据值也异步更新相关数据到wxml页面。</p><p>也可以在pages中利用this.data调用数据</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><a href="https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png">https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png</a></p><p>页面路由见<a href="#test">路由</a></p><p>小程序应用打开时首先onLaunch()</p><p>页面打开时首先onLoad(),初次渲染onReady()</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/module.html"><code>module.exports</code></a> 或者 <code>exports</code> 才能对外暴露接口。</p><p>注意：</p><ul><li><code>exports</code> 是 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/module.html"><code>module.exports</code></a> 的一个引用，因此在模块里边随意更改 <code>exports</code> 的指向会造成未知的错误。所以更推荐开发者采用 <code>module.exports</code> 来暴露模块接口，除非你已经清晰知道这两者的关系。</li><li>小程序目前不支持直接引入 <code>node_modules</code> , 开发者需要使用到 <code>node_modules</code> 时候建议拷贝出相关的代码到小程序的目录中，或者使用小程序支持的 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/npm.html">npm</a> 功能。</li></ul><h3 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h3><p>在小程序的任意js文件声明的变量和函数只在该文件有效</p><p>不同js文件声明相同名字的变量和函数不会相互影响</p><p>通过全局函数 <code>getApp</code> 可以获取全局的应用实例，如果需要全局的数据可以在 <code>App()</code> 中设置</p><h3 id="模块调用"><a href="#模块调用" class="headerlink" title="模块调用"></a>模块调用</h3><p>可以将公共的js放在一个文件中</p><p>只能通过module.exports或exports对外提供接口</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>为了让开发者可以很方便的调起微信提供的能力，例如获取用户信息、微信支付等等，小程序提供了很多 API 给开发者去使用。</p><p>需要注意的是：多数 API 的回调都是异步，你需要处理好代码逻辑的异步问题。</p><ul><li>网络</li><li>媒体</li><li>文件</li><li>数据</li><li>位置</li><li>设备</li><li>界面</li></ul><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><h3 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h3><p>类似HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在此处写注释 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;标签名 属性名1=&quot;属性值1&quot; 属性名2=&quot;属性值2&quot; ...&gt; ...&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><h3 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h3><p>1.简单绑定</p><p>利用{ {}}形式表示动态数据,这个数据在js文件data中定义</p><p>如果需要在用户输入的同时改变 <code>this.data.value</code> ，需要借助简易双向绑定机制。此时，可以在对应项目之前加入 <code>model:</code> 前缀：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">model:value</span>=<span class="string">&quot;&#123; &#123;value&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样，如果输入框的值被改变了， <code>this.data.value</code> 也会同时改变。同时， WXML 中所有绑定了 <code>value</code> 的位置也会被一同更新， <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html">数据监听器</a> 也会被正常触发。</p><p>注意:只能单一字段绑定且不能data路径</p><p>2.组件属性</p><p>绑定属性值也可以动态的去改变，有所不同的是，属性值必须被包裹在双引号中</p><p>‘{ {}}’  加个引号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">data-test</span>=<span class="string">&quot;&#123; &#123;test&#125;&#125;&quot;</span>&gt;</span> hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.控制属性绑定</p><p>控制属性也可以使用动态数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&#x27;&#123; &#123;condition&#125;&#125;&#x27;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">view</span>&gt;</span>&lt;------------&gt;Page(    &#123;    data:    &#123;    condition:false;    &#125;    &#125;)</span><br></pre></td></tr></table></figure><p>4.关键字绑定</p><p>直接在引号内写布尔值也必须用双括号括起来</p><p>5.运算绑定</p><p>6.组合绑定</p><p>上面这几个挺好理解的</p><p>注意组合绑定不仅可以绑定数组也可以绑定其他对象</p><h3 id="2-逻辑语法"><a href="#2-逻辑语法" class="headerlink" title="2.逻辑语法"></a>2.逻辑语法</h3><p>可以在{ {}}中进行简单逻辑计算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123; &#123; a === 10? &quot;变量 a 等于10&quot;: &quot;变量 a 不等于10&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>{ { }}中还可以直接放置数字、字符串或者是数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123; &#123;[1,2,3]&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="comment">&lt;!-- 输出 1,2,3 --&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123; &#123;&quot;hello world&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="comment">&lt;!-- 输出 hello world --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="条件逻辑"><a href="#条件逻辑" class="headerlink" title="条件逻辑"></a>条件逻辑</h4><p>WXML 中，使用 wx:if=”{ {condition}}” 来判断是否需要渲染该代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123; &#123;condition&#125;&#125;&quot;</span>&gt;</span> True <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 wx:elif 和 wx:else 来添加一个 else 块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123; &#123;length &gt; 5&#125;&#125;&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123; &#123;length &gt; 2&#125;&#125;&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 wx:if 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <code>&lt;block/&gt;</code> 标签将多个组件包装起来，并在上边使用 wx:if 控制属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123; &#123;true&#125;&#125;&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。使用 name 属性，作为模板的名字。然后在 <code>&lt;template/&gt;</code> 内定义代码片段</p><p>定义模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span>    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123; &#123;index&#125;&#125;: &#123; &#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123; &#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span>  <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入</strong></p><p>模板使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--item: &#123;  index: 0,  msg: &#x27;this is a template&#x27;,  time: &#x27;2016-06-18&#x27;&#125;--&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span>    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123; &#123;index&#125;&#125;: &#123; &#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123; &#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span>  <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;msgItem&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123; &#123;...item&#125;&#125;&quot;</span>/&gt;</span><span class="comment">&lt;!-- 输出0: this is a template Time: 2016-06-18--&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用…符号将对象内容展开显示</p><p>如果对象中元素key和value相同可以省略表达</p><p>如果有相同的key则后者覆盖前者</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="1-简单渲染"><a href="#1-简单渲染" class="headerlink" title="1.简单渲染"></a>1.简单渲染</h4><p>在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&#x27;&#123; &#123;array&#125; &#125;&#x27;</span>&gt;</span>&#123; &#123;index&#125; &#125;:&#123; &#123;item&#125; &#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page(    data:&#123;    <span class="attr">array</span>:[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]    &#125;)</span><br></pre></td></tr></table></figure><p>使用 wx:for-item 指定数组当前元素的变量名，使用 wx:for-index 指定数组当前下标的变量名,即自定义当前元素和下表的变量名</p><p>注意,如果没有双括号,会直接将字符串当作数组拆开</p><h4 id="2-嵌套列表"><a href="#2-嵌套列表" class="headerlink" title="2.嵌套列表"></a>2.嵌套列表</h4><p>即使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123; &#123;array&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&#x27;i&#x27;</span>&gt;</span>    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&#x27;&#123; &#123;arrray&#125;&#125;&#x27;</span> <span class="attr">wx:for-item</span>=<span class="string">&#x27;j&#x27;</span>&gt;</span>        <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&#x27;&#123; &#123;&#125;&#125;&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-多节点列表"><a href="#3-多节点列表" class="headerlink" title="3.多节点列表"></a>3.多节点列表</h4><p>类似 <code>block wx:if</code> ，也可以将 <code>wx:for</code> 用在 <code>&lt;block/&gt;</code> 标签上，以渲染一个包含多节点的结构块。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123; &#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123; &#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span>  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123; &#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-wx-key属性"><a href="#4-wx-key属性" class="headerlink" title="4.wx:key属性"></a>4.wx:key属性</h4><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input/&gt;</code> 中的输入内容， <code>&lt;switch/&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p><p><code>wx:key</code> 的值以两种形式提供：</p><ol><li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</li></ol><p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>1.简单条件</p><p>使用wx:if=”{ {condition}}”判断是否需要渲染</p><p>2.多节点条件</p><p>同理</p><p>在\<block\>中嵌入组件</p><p>3.wx:if hidden</p><p>如果是wx:if只有当真时才会开始渲染</p><p>hidden初始就会渲染,只是简单地控制显示和隐藏</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>UI界面的程序需要和用户互动，例如用户可能会点击你界面上某个按钮，又或者长按某个区域，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户。<br>有些时候程序上的“行为反馈”不一定是用户主动触发的，例如我们在视频video播放的过程中，播放进度是会一直变化的，这种反馈也应该通知给开发者做相应的逻辑处理。</p><p>视图层到逻辑层的通信方式</p><ol><li>将用户行为反馈到逻辑层进行处理</li><li>可以绑定在组件中,当触发事件时就会执行逻辑层中对应的事件处理函数</li><li>对象可以携带额外的信息</li></ol><h4 id="1-事件的使用"><a href="#1-事件的使用" class="headerlink" title="1.事件的使用"></a>1.事件的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;mybtn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;myTap&quot;</span> <span class="attr">data-my</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">data-i</span>=<span class="string">&quot;fuck&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bind与catch</p><h4 id="2-事件的分类"><a href="#2-事件的分类" class="headerlink" title="2.事件的分类"></a>2.事件的分类</h4><p>冒泡事件与非冒泡事件</p><p>冒泡事件被触发后会向父节点传递</p><h4 id="3-事件绑定和冒泡"><a href="#3-事件绑定和冒泡" class="headerlink" title="3.事件绑定和冒泡"></a>3.事件绑定和冒泡</h4><p>key=value</p><p>事件绑定的写法类似于组件的属性，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleTap&quot;</span>&gt;</span>    Click here!<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果用户点击这个 view ，则页面的 <code>handleTap</code> 会被调用。</p><p>事件绑定函数可以是一个数据绑定，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;&#123; &#123; handlerName &#125;&#125;&quot;</span>&gt;</span>    Click here!<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>catch事件可以阻止冒泡事件向上冒泡</p><h4 id="4-事件的捕获阶段"><a href="#4-事件的捕获阶段" class="headerlink" title="4.事件的捕获阶段"></a>4.事件的捕获阶段</h4><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a> 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反。需要在捕获阶段监听事件时，可以采用<code>capture-bind</code>、<code>capture-catch</code>关键字，后者将中断捕获阶段和取消冒泡阶段</p><h4 id="5-事件对象"><a href="#5-事件对象" class="headerlink" title="5.事件对象"></a>5.事件对象</h4><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210901105757.png" alt="image-20210901105757525" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210901105827.png" alt="image-20210901105827504" style="zoom:50%;" /></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>代表事件的类型。</p><h3 id="timeStamp"><a href="#timeStamp" class="headerlink" title="timeStamp"></a>timeStamp</h3><p>页面打开到触发事件所经过的毫秒数。</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>触发事件的源组件。</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">String</td><td style="text-align:left">事件源组件的id</td></tr><tr><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td><td style="text-align:left">Object</td><td style="text-align:left">事件源组件上由<code>data-</code>开头的自定义属性组成的集合</td></tr></tbody></table></div><h3 id="currentTarget"><a href="#currentTarget" class="headerlink" title="currentTarget"></a>currentTarget</h3><p>事件绑定的当前组件。</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">String</td><td style="text-align:left">当前组件的id</td></tr><tr><td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td><td style="text-align:left">Object</td><td style="text-align:left">当前组件上由<code>data-</code>开头的自定义属性组成的集合</td></tr></tbody></table></div><h5 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h5><p>在组件节点中可以附加一些自定义数据。这样，在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理。</p><p>在 WXML 中，这些自定义数据以 <code>data-</code> 开头，多个单词由连字符 <code>-</code> 连接。这种写法中，连字符写法会转换成驼峰写法，而大写字符会自动转成小写字符。如：</p><ul><li><code>data-element-type</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementType</code> ；</li><li><code>data-elementType</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementtype</code> 。</li></ul><h4 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h4><h5 id="1-import"><a href="#1-import" class="headerlink" title="1.import"></a>1.import</h5><p>在 index.wxml 中引用了 item.wxml，就可以使用 item模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;item.wxml&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123; &#123;text: &#x27;forbar&#x27;&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是 import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，简言之就是 import 不具有递归的特性。</p><h5 id="2-include"><a href="#2-include" class="headerlink" title="2.include"></a>2.include</h5><p>include 可以将目标文件中除了 <code>&lt;template/&gt; &lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 include 位置</p><h3 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h3><h4 id="1-尺寸单位"><a href="#1-尺寸单位" class="headerlink" title="1.尺寸单位"></a>1.尺寸单位</h4><p>rpx  规定屏幕为750rpx</p><h4 id="2-样式导入"><a href="#2-样式导入" class="headerlink" title="2.样式导入"></a>2.样式导入</h4><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束。</p><h4 id="3-内联样式"><a href="#3-内联样式" class="headerlink" title="3.内联样式"></a>3.内联样式</h4><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ul><li>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color:&#123; &#123;color&#125;&#125;;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上<code>.</code>，样式类名之间用空格分隔。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;normal_view&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-选择器"><a href="#4-选择器" class="headerlink" title="4.选择器"></a>4.选择器</h2><div class="table-container"><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:left">样例</th><th style="text-align:left">样例描述</th></tr></thead><tbody><tr><td style="text-align:left">.class</td><td style="text-align:left"><code>.intro</code></td><td style="text-align:left">选择所有拥有 class=”intro” 的组件</td></tr><tr><td style="text-align:left">#id</td><td style="text-align:left"><code>#firstname</code></td><td style="text-align:left">选择拥有 id=”firstname” 的组件</td></tr><tr><td style="text-align:left">element</td><td style="text-align:left"><code>view</code></td><td style="text-align:left">选择所有 view 组件</td></tr><tr><td style="text-align:left">element, element</td><td style="text-align:left"><code>view, checkbox</code></td><td style="text-align:left">选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td style="text-align:left">::after</td><td style="text-align:left"><code>view::after</code></td><td style="text-align:left">在 view 组件后边插入内容</td></tr><tr><td style="text-align:left">::before</td><td style="text-align:left"><code>view::before</code></td><td style="text-align:left">在 view 组件前边插入内容</td></tr></tbody></table></div><h4 id="5-全局样式与局部样式"><a href="#5-全局样式与局部样式" class="headerlink" title="5.全局样式与局部样式"></a>5.全局样式与局部样式</h4><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>包含内容的组件称为容器,容器内部的组件成为项目</p><p>我们只需要在容器中设置以下两个属性即可实现内容不确定下的垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">display</span>: flex;  <span class="attribute">flex-direction</span>: column;  <span class="attribute">justify-content</span>: center;&#125;</span><br></pre></td></tr></table></figure><p>flex不单是一个属性，它包含了一套新的属性集。属性集包括用于设置容器，和用于设置项目两部分。</p><p>设置容器的属性有：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>:flex;<span class="attribute">flex-direction</span>:row（默认值） | row-reverse | column |column-reverseflex-wrap:nowrap（默认值） | wrap | wrap-reversejustify-content:flex-start（默认值） | flex-end | center |space-between | space-around | space-evenlyalign-items:stretch（默认值） | center  | flex-end | baseline | flex-startalign-content:stretch（默认值） | flex-start | center |flex-end | space-between | space-around | space-evenly</span><br></pre></td></tr></table></figure><p>项目是在主轴上排列，排满后在交叉轴方向换行。需要注意的是，交叉轴垂直于主轴，它的方向取决于主轴方向。</p><p><strong>flex-direction 属性</strong></p><p>通过设置坐标轴，来设置项目排列方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">flex-direction</span>: row（默认值） | row-reverse | column | column-reverse&#125;</span><br></pre></td></tr></table></figure><p>row（默认值）：主轴横向，方向为从左指向右。项目沿主轴排列，从左到右排列。</p><p>row-reverse：row的反方向。主轴横向，方向为从右指向左。项目沿主轴排列，从右到左排列。</p><p>column：主轴纵向，方向从上指向下。项目沿主轴排列，从上到下排列。</p><p>column-reverse：column的反方向。主轴纵向，方向从下指向上。项目沿主轴排列，从下到上排列。</p><h4 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h4><p>设置是否允许项目多行排列，以及多行排列时换行的方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">flex-wrap</span>: nowrap（默认值） | wrap | wrap-reverse&#125;</span><br></pre></td></tr></table></figure><p>nowrap（默认值）：不换行。如果单行内容过多，则溢出容器。<br>wrap：容器单行容不下所有项目时，换行排列。<br>wrap-reverse：容器单行容不下所有项目时，换行排列。换行方向为wrap时的反方向。</p><p><strong>justify-content 属性</strong></p><p>设置项目在主轴方向上对齐方式，以及分配项目之间及其周围多余的空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">justify-content</span>: flex-start（默认值） | flex-end | center | space-between | space-around| space-evenly&#125;</span><br></pre></td></tr></table></figure><p>flex-start（默认值）：项目对齐主轴起点，项目间不留空隙。</p><p>center：项目在主轴上居中排列，项目间不留空隙。主轴上第一个项目离主轴起点距离等于最后一个项目离主轴终点距离。</p><p>flex-end：项目对齐主轴终点，项目间不留空隙。<br>space-between：项目间间距相等，第一个项目离主轴起点和最后一个项目离主轴终点距离为0。<br>space-around：与space-between相似。不同点为，第一个项目离主轴起点和最后一个项目离主轴终点距离为中间项目间间距的一半。</p><p>space-evenly：项目间间距、第一个项目离主轴起点和最后一个项目离主轴终点距离等于项目间间距。</p><p><strong>align-items 属性</strong></p><p>设置项目在行中的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">align-items</span>:stretch（默认值） | flex-start | center | flex-end | baseline&#125;</span><br></pre></td></tr></table></figure><p>stretch（默认值）：项目拉伸至填满行高。<br>flex-start：项目顶部与行起点对齐。<br>center：项目在行中居中对齐。<br>flex-end：项目底部与行终点对齐。<br>baseline：项目的第一行文字的基线对齐。</p><p><strong>align-content 属性</strong></p><p>多行排列时，设置行在交叉轴方向上的对齐方式，以及分配行之间及其周围多余的空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  <span class="attribute">align-content</span>: stretch（默认值） | flex-start | center | flex-end | space-between |space-around | space-evenly&#125;</span><br></pre></td></tr></table></figure><p>stretch（默认值）：当未设置项目尺寸，将各行中的项目拉伸至填满交叉轴。当设置了项目尺寸，项目尺寸不变，项目行拉伸至填满交叉轴。</p><p>flex-start：首行在交叉轴起点开始排列，行间不留间距。</p><p>center：行在交叉轴中点排列，行间不留间距，首行离交叉轴起点和尾行离交叉轴终点距离相等。</p><p>flex-end：尾行在交叉轴终点开始排列，行间不留间距。<br>space-between：行与行间距相等，首行离交叉轴起点和尾行离交叉轴终点距离为0。<br>space-around：行与行间距相等，首行离交叉轴起点和尾行离交叉轴终点距离为行与行间间距的一半。</p><p>space-evenly：行间间距、以及首行离交叉轴起点和尾行离交叉轴终点距离相等。</p><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><p>设置项目，用于设置项目的尺寸、位置，以及对项目的对齐方式做特殊设置。</p><p><strong>order 属性</strong></p><p>设置项目沿主轴方向上的排列顺序，数值越小，排列越靠前。属性值为整数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;  <span class="attribute">order</span>: <span class="number">0</span>（默认值） | &lt;integer&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>flex-shrink 属性</strong></p><p>当项目在主轴方向上溢出时，通过设置项目收缩因子来压缩项目适应容器。属性值为项目的收缩因子，属性值取非负数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;  <span class="attribute">flex-shrink</span>: <span class="number">1</span>（默认值） | &lt;number&gt;&#125;<span class="selector-class">.item1</span>&#123;  <span class="attribute">width</span>: <span class="number">120px</span>;  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;&#125;<span class="selector-class">.item2</span>&#123;  <span class="attribute">width</span>: <span class="number">150px</span>;  <span class="attribute">flex-shrink</span>: <span class="number">3</span>;&#125;<span class="selector-class">.item3</span>&#123;// 项目<span class="number">3</span>未设置<span class="attribute">flex-shrink</span>，默认<span class="attribute">flex-shrink</span>值为<span class="number">1</span>  <span class="attribute">width</span>: <span class="number">180px</span>;&#125;</span><br></pre></td></tr></table></figure><p><strong>flex-grow 属性</strong></p><p>当项目在主轴方向上还有剩余空间时，通过设置项目扩张因子进行剩余空间的分配。属性值为项目的扩张因子，属性值取非负数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;  <span class="attribute">flex-grow</span>: <span class="number">0</span>（默认值） | &lt;number&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>flex-basis 属性</strong></p><p>当容器设置flex-direction为row或row-reverse时，flex-basis和width同时存在，flex-basis优先级高于width，也就是此时flex-basis代替项目的width属性。</p><p>当容器设置flex-direction为column或column-reverse时，flex-basis和height同时存在，flex-basis优先级高于height，也就是此时flex-basis代替项目的height属性。</p><p>需要注意的是，当flex-basis和width（或height），其中一个属性值为auto时，非auto的优先级更高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">flex-basis</span>: auto（默认值） | &lt;number&gt;px</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flex 属性</strong></p><p>是flex-grow，flex-shrink，flex-basis的简写方式。值设置为none，等价于00 auto。值设置为auto，等价于1 1 auto。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">flex</span>: none | auto | @flex-grow @flex-shrink@flex-basis</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>align-self 属性</strong></p><p>设置项目在行中交叉轴方向上的对齐方式，用于覆盖容器的align-items，这么做可以对项目的对齐方式做特殊处理。默认属性值为auto，继承容器的align-items值，当容器没有设置align-items时，属性值为stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">align-self</span>: auto（默认值） | flex-start | center | flex-end | baseline |stretch</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pygame实践_1</title>
      <link href="2021/08/15/pygame%E5%AE%9E%E8%B7%B5-1/"/>
      <url>2021/08/15/pygame%E5%AE%9E%E8%B7%B5-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用python做游戏——pygame-1"><a href="#利用python做游戏——pygame-1" class="headerlink" title="利用python做游戏——pygame_1"></a>利用python做游戏——pygame_1</h1><p>之前碰了Qt,winforms,wpf. 主要是想接触一下GUI</p><p>我都不知道该干啥了</p><span id="more"></span><p>这个项目是在《Python编程从入门到实践》上摘写的  个人推荐这本书还有同系列的蟒蛇书</p><p>后面想写写matplotlib和其他的python库,不过Python这个语言是真的舒服.</p><h2 id="pygame介绍"><a href="#pygame介绍" class="headerlink" title="pygame介绍"></a>pygame介绍</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815132429.webp" alt="Pygame游戏结构框架"></p><h2 id="1-创建界面"><a href="#1-创建界面" class="headerlink" title="1.创建界面"></a>1.创建界面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlienInvasions</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;&#x27;管理游戏资源和行为的类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化游戏并创建游戏资源&#x27;&#x27;&#x27;</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        self.screen = pygame.display.set_mode((<span class="number">1200</span>,<span class="number">800</span>))</span><br><span class="line">        pygame.display.set_caption(<span class="string">&quot;Alien Invasion&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_game</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;开始游戏的主循环&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 监视键盘和鼠标事件</span></span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                    sys.exit()</span><br><span class="line">            <span class="comment">#让最近绘制的屏幕可见</span></span><br><span class="line">            pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#创建游戏实例并运行</span></span><br><span class="line">    ai = AlienInvasions()</span><br><span class="line">    ai.run_game()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815132045.png" alt="image-20210815132045490" style="zoom:80%;" /></p><p>pygame.init() 初始化背景设置 让pygame正常工作</p><p>pygame.display.set_mode() 创建一个显示窗口,游戏的所有图形元素都将在其中绘制  (1200,800)是一个元组 宽1200像素 高800像素</p><p>赋给self.screen的对象是一个Surface.是屏幕的一部分,用于显示游戏元素 </p><p>激活游戏的动画循环后,每经过一次循环都将自动重绘这个Surface 将用户输入触发的所有变化都反映出来</p><p>run_game()包含一个while循环 监视事件</p><p>pygame.event.get()返回一个列表 包含它在上一次被调用发生的所有事件</p><p>所有键盘和鼠标事件都将倒是这个for循环进行  如果检查到pygame.QUIT则退出pygame.display.flip()将不断更新屏幕,以显示元素的新位置,并且在原来的位置隐藏元素,从而营造平滑的移动效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置屏幕背景颜色</span></span><br><span class="line">self.bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)  <span class="comment">#rgb三元组</span></span><br><span class="line">self.screen.fill(self.bg_color)</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815134354.png" alt="image-20210815134354356" style="zoom:67%;" /></p><p>fill处理Surface,填充颜色</p><h2 id="2-创建设置类"><a href="#2-创建设置类" class="headerlink" title="2.创建设置类"></a>2.创建设置类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;存储游戏中所设置的类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化游戏的设置&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 屏幕的设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_height = <span class="number">800</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br></pre></td></tr></table></figure><p>创建setting.py文件   这些变量可用于其他文件访问</p><p>这样写从代码上便于分离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line">self.settings = Settings()</span><br><span class="line">        self.screen = pygame.display.set_mode(</span><br><span class="line">            (self.settings.screen_width,self.settings.screen_height)</span><br><span class="line">        )</span><br><span class="line">self.screen.fill(self.settings.bg_color)</span><br></pre></td></tr></table></figure><h2 id="3-创建飞船类"><a href="#3-创建飞船类" class="headerlink" title="3.创建飞船类"></a>3.创建飞船类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;管理飞船的类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ai_game</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化飞船并设置其初始位置&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.screen = ai_game.screen()</span><br><span class="line">        self.screen_rect = ai_game.screen.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载飞船图像并获取其外接矩形</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/rocket.bmp&#x27;</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment">#对于每艘新飞船 初始化位置  放在屏幕底部中央</span></span><br><span class="line">        self.rect.midbottom = self.screen_rect.midbottom</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;在指定位置绘制飞船&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.screen.blit(self.image,self.rect)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们将屏幕和飞船都当作矩形,因为这样处理比较简单</p><p>参数有self,ai_game  后者指向当前AlienInvasion实例引用  访问定义中的游戏资源</p><p>rect对象有属性x,y,center,centerx,centery,top,bottom等</p><p>blit方法将图像self.rect绘制到指定位置</p><h3 id="飞船的移动"><a href="#飞船的移动" class="headerlink" title="飞船的移动"></a>飞船的移动</h3><p>主要是利用self.ship.rect.x等属性</p><p>将run_game()分为两个部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;开始游戏的主循环&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           <span class="comment"># 监视键盘和鼠标事件</span></span><br><span class="line">           self._check_events()</span><br><span class="line">           <span class="comment"># 更新屏幕</span></span><br><span class="line">           self.ship.update()</span><br><span class="line">           self._update_screen()</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;辅助方法&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_check_events</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;响应鼠标和键盘事件&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">           <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">               sys.exit()</span><br><span class="line">           <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">               <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                   <span class="comment"># 向右移动飞船</span></span><br><span class="line">                   <span class="comment"># self.ship.rect.x += 10</span></span><br><span class="line">                   self.ship.moving_right = <span class="literal">True</span></span><br><span class="line">               <span class="comment"># if event.type == pygame.K_LEFT:</span></span><br><span class="line">               <span class="comment">#     self.ship.rect.x -=10</span></span><br><span class="line">           <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">               <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                   self.ship.moving_right = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_update_screen</span>(<span class="params">self</span>):</span></span><br><span class="line">       self.screen.fill(self.settings.bg_color)</span><br><span class="line">       <span class="comment"># self.screen.fill(self.bg_color)</span></span><br><span class="line">       self.ship.blitme()</span><br><span class="line">       <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">       pygame.display.flip()</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815150339.png" alt="image-20210815150339152" style="zoom:67%;" /></p><p>注意event.key这个东西,用来控制飞船的移动</p><p>要实现连续移动可以给一个moving_right的flag控制</p><p>只要按下就能连续移动</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815150504.png" alt="image-20210815150504599" style="zoom:67%;" /></p><p>当然,要将这个东西加入while循环监视</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815150714.png" alt="image-20210815150714799" style="zoom:80%;" /></p><h3 id="加快飞船速度"><a href="#加快飞船速度" class="headerlink" title="加快飞船速度"></a>加快飞船速度</h3><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815152117.png" alt="image-20210815152117260"></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815152142.png" alt="image-20210815152142591" style="zoom:67%;" /></p><p>将速度改为1.5像素  由于rect.x为int值</p><p>将改变后的值赋给self.x 再赋值给self.rect.x  只存储整数部分</p><p>但问题不大</p><h3 id="限制飞船活动范围"><a href="#限制飞船活动范围" class="headerlink" title="限制飞船活动范围"></a>限制飞船活动范围</h3><p>主要利用rect.right等限制</p><p>rect.right返回距离飞船外接矩形右边缘的x坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;根据移动标志调整飞船位置&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right&lt;self.screen_rect.right:</span><br><span class="line">           self.x += self.settings.ship_speed</span><br><span class="line">       <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left&gt;<span class="number">0</span>:</span><br><span class="line">           self.x -= self.settings.ship_speed</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 根据self.x更新rect对象</span></span><br><span class="line">       self.rect.x = self.x</span><br></pre></td></tr></table></figure><h3 id="重构事件"><a href="#重构事件" class="headerlink" title="重构事件"></a>重构事件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_keydown_events</span>(<span class="params">self, event</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;响应按键&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">           self.ship.moving_right = <span class="literal">True</span></span><br><span class="line">       <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">           self.ship.moving_left = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_check_keyup_events</span>(<span class="params">self, event</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;相应松开&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">           self.ship.moving_right = <span class="literal">False</span></span><br><span class="line">       <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">           self.ship.moving_left = <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">        self._check_keydown_events(event)</span><br><span class="line"><span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">    self._check_keyup_events(event)</span><br></pre></td></tr></table></figure><h3 id="按Q键退出"><a href="#按Q键退出" class="headerlink" title="按Q键退出"></a>按Q键退出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_keydown_events</span>(<span class="params">self, event</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;响应按键&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        self.ship.moving_right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        self.ship.moving_left = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_q:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><h3 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.screen = pygame.display.set_mode((<span class="number">0</span>, <span class="number">0</span>), pygame.FULLSCREEN)</span><br><span class="line">        <span class="comment"># self.settings.screen_width = self.screen.get_rect().width</span></span><br><span class="line">        <span class="comment"># self.settings.screen_height = self.screen.get_rect().height</span></span><br></pre></td></tr></table></figure><h2 id="创建子弹类"><a href="#创建子弹类" class="headerlink" title="创建子弹类"></a>创建子弹类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span>(<span class="params">Sprite</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;管理飞船所发射子弹的类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ai_game</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;在飞船当前位置创建一个子弹对象&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>.__init__()</span><br><span class="line">        self.screen = ai_game.screen</span><br><span class="line">        self.settings = ai_game.settings</span><br><span class="line">        self.color = self.settings.bullet_color</span><br><span class="line"></span><br><span class="line">        <span class="comment">#在(0,0)处创建一个表示子弹的矩形,再设置正确的位置</span></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,self.settings.bullet_width,</span><br><span class="line">                                self.settings.bullet_height)</span><br><span class="line">        self.rect.midtop = ai_game.ship.rect.midtop</span><br><span class="line"></span><br><span class="line">        <span class="comment">#存储用小数表示的子弹位置</span></span><br><span class="line">        self.y = <span class="built_in">float</span>(self.rect.y)    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;向上移动子弹&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 更新表示子弹位置的小数值</span></span><br><span class="line">        self.y -= self.settings.bullet_speed</span><br><span class="line">        <span class="comment"># 更新表示子弹的rect位置</span></span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_bullet</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;在屏幕上绘制子弹&#x27;&#x27;&#x27;</span></span><br><span class="line">        pygame.draw.rect(self.screen, self.color, self.rect)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;向上移动子弹&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 更新表示子弹位置的小数值</span></span><br><span class="line">        self.y -= self.settings.bullet_speed</span><br><span class="line">        <span class="comment"># 更新表示子弹的rect位置</span></span><br><span class="line">        self.rect.y = self.y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_fire_bullet</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;创建一颗子弹 将其加入编组中&#x27;&#x27;&#x27;</span></span><br><span class="line">      new_bullet = Bullet(self)</span><br><span class="line">      self.bullets.add(new_bullet)</span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">_update_screen</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="comment"># self.screen.fill(self.settings.bg_color)</span></span><br><span class="line">      self.screen.fill(self.settings.bg_color)</span><br><span class="line">      self.ship.blitme()</span><br><span class="line">      <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullets.sprites():</span><br><span class="line">          bullet.draw_bullet()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_keydown_events</span>(<span class="params">self, event</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;响应按键&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">          self.ship.moving_right = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">          self.ship.moving_left = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">elif</span> event.key == pygame.K_q:</span><br><span class="line">          sys.exit()</span><br><span class="line">      <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">          self._fire_bullet() <span class="comment">#发射子弹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_game</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;开始游戏的主循环&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">          <span class="comment"># 监视键盘和鼠标事件</span></span><br><span class="line">          self._check_events()</span><br><span class="line">          <span class="comment"># 更新屏幕</span></span><br><span class="line">          self.ship.update()</span><br><span class="line">          self.bullets.update()<span class="comment">#更新位置</span></span><br><span class="line">          self._update_screen()</span><br></pre></td></tr></table></figure><h3 id="删除消失的子弹"><a href="#删除消失的子弹" class="headerlink" title="删除消失的子弹"></a>删除消失的子弹</h3><p>子弹没有消除,所以会消耗内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullets.copy():</span><br><span class="line">    <span class="keyword">if</span> bullet.rect.bottom &lt;=<span class="number">0</span>:</span><br><span class="line">        self.bullets.remove(bullet)</span><br></pre></td></tr></table></figure><p>使用copy是因为遍历的数组不能变化</p><h3 id="限制子弹数量"><a href="#限制子弹数量" class="headerlink" title="限制子弹数量"></a>限制子弹数量</h3><p>settings.py设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.bullet_allowed = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_fire_bullet</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;创建一颗子弹 将其加入编组中&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="comment">#限制数量 当子弹数量小于限制数量时</span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(self.bullets)&lt;self.settings.bullet_allowed:</span><br><span class="line">           new_bullet = Bullet(self)</span><br><span class="line">           self.bullets.add(new_bullet)</span><br></pre></td></tr></table></figure><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_updata_bullets</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;更新子弹位置并删除消失子弹&#x27;&#x27;&#x27;</span></span><br><span class="line">    self.bullets.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除消失的子弹</span></span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            self.bullets.remove(bullet)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;开始游戏的主循环&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 监视键盘和鼠标事件</span></span><br><span class="line">        self._check_events()</span><br><span class="line">        <span class="comment"># 更新屏幕</span></span><br><span class="line">        self.ship.update()</span><br><span class="line">        self._updata_bullets()</span><br><span class="line">        self._update_screen()</span><br></pre></td></tr></table></figure><h2 id="创建外星人"><a href="#创建外星人" class="headerlink" title="创建外星人"></a>创建外星人</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span>  pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span>(<span class="params">Sprite</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;表示单个外星人&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ai_game</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化外星人&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.screen = ai_game.screen</span><br><span class="line"></span><br><span class="line">        <span class="comment">#加载外星人图像并设置大小位置</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;./images/ufo.bmp&#x27;</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个外星人都从左上角产生出</span></span><br><span class="line">        self.rect.x = self.rect.width</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        self.x = <span class="built_in">float</span>(self.rect.x)</span><br></pre></td></tr></table></figure><p>设置其图像与大小,位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_fleet</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;创建外星人群&#x27;&#x27;&#x27;</span></span><br><span class="line">    alien = Alien(self)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    available_space_x = self.settings.screen_width - (<span class="number">2</span> * alien_width)</span><br><span class="line">    number_aliens_x = available_space_x // (<span class="number">2</span> * alien_width)</span><br><span class="line">    <span class="comment"># 创建一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(number_aliens_x):</span><br><span class="line">        self._create_alien(alien_number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_alien</span>(<span class="params">self, alien_number</span>):</span></span><br><span class="line">    <span class="comment"># 创建一个外星人</span></span><br><span class="line">    alien = Alien(self)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    self.aliens.add(alien)</span><br></pre></td></tr></table></figure><p>在__init__中加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.aliens = pygame.sprite.Group()</span><br><span class="line">self._create_fleet()</span><br></pre></td></tr></table></figure><p>同时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_update_screen</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># self.screen.fill(self.settings.bg_color)</span></span><br><span class="line">    self.screen.fill(self.settings.bg_color)</span><br><span class="line">    self.ship.blitme()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullets.sprites():</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line">    self.aliens.draw(self.screen)</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure><p>使用sprits.draw方法</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_fleet</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;创建外星人群&#x27;&#x27;&#x27;</span></span><br><span class="line">    alien = Alien(self)</span><br><span class="line">    alien_width,alien_height = alien.rect.size</span><br><span class="line">    available_space_x = self.settings.screen_width - (<span class="number">2</span> * alien_width)</span><br><span class="line">    number_aliens_x = available_space_x // (<span class="number">2</span> * alien_width)</span><br><span class="line"></span><br><span class="line">    ship_hight = self.ship.rect.height</span><br><span class="line">    available_space_y = (self.settings.screen_height-(<span class="number">3</span>*alien_height)-ship_hight)</span><br><span class="line">    number_rows = available_space_y//(<span class="number">2</span>*alien_height)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建外星人群</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> <span class="built_in">range</span>(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(number_aliens_x):</span><br><span class="line">            self._create_alien(alien_number,row_number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_alien</span>(<span class="params">self, alien_number,row_number</span>):</span></span><br><span class="line">    <span class="comment"># 创建一个外星人</span></span><br><span class="line">    alien = Alien(self)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    alien.rect.y = alien.rect.height+<span class="number">2</span>*alien.rect.height*row_number</span><br><span class="line">    self.aliens.add(alien)</span><br></pre></td></tr></table></figure><h3 id="让外星人移动"><a href="#让外星人移动" class="headerlink" title="让外星人移动"></a>让外星人移动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;向右移动外星人&#x27;&#x27;&#x27;</span></span><br><span class="line">    self.x += self.settings.alien_speed</span><br><span class="line">    self.rect.x = self.x</span><br></pre></td></tr></table></figure><h3 id="检查边界-到达边界后向另一个方向走并向下走"><a href="#检查边界-到达边界后向另一个方向走并向下走" class="headerlink" title="检查边界 到达边界后向另一个方向走并向下走"></a>检查边界 到达边界后向另一个方向走并向下走</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_update_alien</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;更新外星人群中所有外星人的位置&#x27;&#x27;&#x27;</span></span><br><span class="line">    self._check_fleet_edges()</span><br><span class="line">    self.aliens.update()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_fleet_edges</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> self.aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            self._change_fleet_direction()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_change_fleet_direction</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将整群外星人下移动  并换左右方向&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> self.aliens.sprites():</span><br><span class="line">        alien.rect.y += self.settings.fleet_drop_speed</span><br><span class="line">    self.settings.fleet_direction *= -<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;向右移动外星人&#x27;&#x27;&#x27;</span></span><br><span class="line">    self.x += (self.settings.alien_speed * self.settings.fleet_direction)</span><br><span class="line">    self.rect.x = self.x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_edges</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;如果外星人在边缘返回true&#x27;&#x27;&#x27;</span></span><br><span class="line">    screen_rect = self.screen.get_rect()</span><br><span class="line">    <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right <span class="keyword">or</span> self.rect.left &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="射击外星人"><a href="#射击外星人" class="headerlink" title="射击外星人"></a>射击外星人</h3><p>设计碰撞</p><p>sprits.groupcollide()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_updata_bullets</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;更新子弹位置并删除消失子弹&#x27;&#x27;&#x27;</span></span><br><span class="line">      self.bullets.update()</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 删除消失的子弹</span></span><br><span class="line">      <span class="keyword">for</span> bullet <span class="keyword">in</span> self.bullets.copy():</span><br><span class="line">          <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">              self.bullets.remove(bullet)</span><br><span class="line">      self._check_bullet_alien_collisions()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_bullet_alien_collisions</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;相应子弹和外星人碰撞&#x27;&#x27;&#x27;</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.aliens:</span><br><span class="line">        <span class="comment"># 删除现有的所有子弹 并创建外星人</span></span><br><span class="line">        self.bullets.empty()</span><br><span class="line">        self._create_fleet()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="飞船与ufo相碰撞"><a href="#飞船与ufo相碰撞" class="headerlink" title="飞船与ufo相碰撞"></a>飞船与ufo相碰撞</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_update_aliens</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;更新外星人群中所有外星人的位置&#x27;&#x27;&#x27;</span></span><br><span class="line">        self._check_fleet_edges()</span><br><span class="line">        self.aliens.update()</span><br><span class="line">        <span class="keyword">if</span> pygame.sprite.spritecollideany(self.ship,self.aliens):</span><br><span class="line">            self._ship_hit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ship_hit</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;响应飞船被外星人碰撞&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 将left-1</span></span><br><span class="line">    self.stats.ships_left -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 清空余下的外星人和子弹</span></span><br><span class="line">    self.aliens.empty()</span><br><span class="line">    self.bullets.empty()</span><br><span class="line">    <span class="comment"># 创建一群新的外星人 并将飞船放到屏幕的底端</span></span><br><span class="line">    self._create_fleet()</span><br><span class="line">    self.ship.center_ship()</span><br><span class="line">    <span class="comment"># 暂停</span></span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameStats</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;跟踪游戏统计信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ai_game</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化统计信息&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.settings = ai_game.settings</span><br><span class="line">        self.reset_stats()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;初始化在游戏运行期间可能变化的统计信息&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.ships_left = self.settings.ship_limit</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">center_ship</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;让飞船在底端中央&quot;&quot;&quot;</span></span><br><span class="line">    self.rect.midbottom = self.screen_rect.midbottom</span><br><span class="line">    self.x = <span class="built_in">float</span>(self.rect.x)</span><br></pre></td></tr></table></figure><p>碰撞后飞船消失</p><h3 id="检查外星人到屏幕底端"><a href="#检查外星人到屏幕底端" class="headerlink" title="检查外星人到屏幕底端"></a>检查外星人到屏幕底端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_aliens_bottom</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 检查外星人是否到达底端</span></span><br><span class="line">    screen_rect = self.screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> self.aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            <span class="comment"># 像飞船被撞到一样处理</span></span><br><span class="line">            self._ship_hit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_update_aliens</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;更新外星人群中所有外星人的位置&#x27;&#x27;&#x27;</span></span><br><span class="line">    self._check_fleet_edges()</span><br><span class="line">    self.aliens.update()</span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(self.ship, self.aliens):</span><br><span class="line">        self._ship_hit()</span><br><span class="line">    self._check_aliens_bottom()</span><br></pre></td></tr></table></figure><h3 id="游戏结束"><a href="#游戏结束" class="headerlink" title="游戏结束"></a>游戏结束</h3><p>添加一个标志</p><p>当数量小于0时设为False</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210815201215.png" alt="image-20210815201215794" style="zoom:67%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ship_hit</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;响应飞船被外星人碰撞&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 将left-1</span></span><br><span class="line">    <span class="keyword">if</span> self.stats.ships_left&gt;<span class="number">0</span>:</span><br><span class="line">        self.stats.ships_left -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 清空余下的外星人和子弹</span></span><br><span class="line">        self.aliens.empty()</span><br><span class="line">        self.bullets.empty()</span><br><span class="line">        <span class="comment"># 创建一群新的外星人 并将飞船放到屏幕的底端</span></span><br><span class="line">        self._create_fleet()</span><br><span class="line">        self.ship.center_ship()</span><br><span class="line">        <span class="comment"># 暂停</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.stats.game_active = <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;开始游戏的主循环&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 监视键盘和鼠标事件</span></span><br><span class="line">        self._check_events()</span><br><span class="line">        <span class="comment"># 更新屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.stats.game_active:</span><br><span class="line">            self.ship.update()</span><br><span class="line">            <span class="comment"># self.bullets.update()</span></span><br><span class="line">            self._updata_bullets()</span><br><span class="line">            self._update_screen()</span><br><span class="line">            self._update_aliens()</span><br><span class="line">            <span class="comment"># for bullet in self.bullets.copy():</span></span><br><span class="line">            <span class="comment">#     if bullet.rect.bottom &lt;= 0:</span></span><br><span class="line">            <span class="comment">#         self.bullets.remove(bullet)</span></span><br></pre></td></tr></table></figure><p>先写到这里,后面再补</p><p><a href="https://github.com/drowning-in-codes/pygame.git">https://github.com/drowning-in-codes/pygame.git</a></p><p>github地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="2021/08/10/Git%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/08/10/Git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h1><p>我的感觉就是可以把代码保存到一个地方,供自己和团队修改</p><span id="more"></span><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720214140.png" alt="image-20210720214140606" style="zoom:80%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash">使用当前目录,初始化一个Git仓库</span></span><br><span class="line">git init newrepo</span><br><span class="line"><span class="meta">#</span><span class="bash">指定目录</span></span><br><span class="line">git clone &lt;repo&gt;#克隆一个仓库</span><br><span class="line">git clone &lt;repo&gt; &lt;directory&gt;#将仓库克隆到一个指定目录</span><br><span class="line">git config#git设置信息</span><br><span class="line">git config--global user.name &quot;runoob&quot;</span><br><span class="line">git config --global user.email test@run</span><br></pre></td></tr></table></figure><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801131114.png" alt="image-20210801131105094" style="zoom:67%;" /></p><p>git status查看仓库状态,查看工作区有无更新与未被追踪的文件</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801135729.png" alt="image-20210801135729377" style="zoom:67%;" /></p><p>修改后还未git add更新到暂存区(stage)以及还未track的文件使用git add添加</p><p>git log 查看提交日志 查看提交的信息 message与提交人以及时间 在后面加上指定的文件或目录可以只显示所要求的信息</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801131231.png" alt="image-20210801131231033" style="zoom:67%;" /></p><p>commit旁是一串哈希值</p><p>git log -p 查看提交带来的变动,文件前后的差别</p><p>git diff 查看工作树,暂存区,最新提交之间的差别</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801132603.png" alt="image-20210801132603359" style="zoom:67%;" /></p><p>+表示增加一行  -表示减少一行</p><p>提交后,输入git diff没有输出 因为工作区和暂存区无差别</p><p>若要查看与最新提交的差别,需要git diff HEAD</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801134601.png" alt="image-20210801134601328" style="zoom:67%;" /></p><p>可以在git commit之前先执行git diff HEAD查看工作区与最新提交的差别,等确认玩别再进行提交</p><p>HEAD指向当前分支中最新一次提交的指针</p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>master分支是Git默认创建的分支,所有分支都是以这个分支为中心进行</p><p>git branch显示分支</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801140430.png" alt="image-20210801140430235" style="zoom:80%;" /></p><p>*号表示当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b A 创建,切换分支  #-b表示创建</span><br></pre></td></tr></table></figure><p>实际上与者两条指令作用相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch A#chuangjian</span><br><span class="line"></span><br><span class="line">git checkout A #转到A</span><br><span class="line"></span><br><span class="line">git checkout -  #切换到上次的分支</span><br></pre></td></tr></table></figure><p>以当前的master分支为基础创建新的分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m  <span class="string">&quot;feature-A&quot;</span> <span class="comment">#提交</span></span><br></pre></td></tr></table></figure><p>执行git add就会将代码提交到A分支,而master分支不会受影响.这样可以在不互相影响的情况下同时进行多个功能的开发</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801142740.png" alt="image-20210801142740455" style="zoom:67%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge #合并分支 </span><br></pre></td></tr></table></figure><p>将分支合并到主干分支master中,首先切换到master分支.为了在历史记录中明确记录下本次分支合并,我们需要创建合并提交.在合并时加上—no-ff参数随后录入合并提交的信息</p><p>默认信息中已经包含了是从feature-A分支合并过来的相关内容,所以可不做任何更改</p><p>fast-forward</p><p>Git 合并两个分支时，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，叫做“快进”（fast-forward）不过这种情况如果删除分支，则会丢失merge分支信息。</p><p>–squash</p><p>把一些不必要commit进行压缩，比如说，你的feature在开发的时候写的commit很乱，那么我们合并的时候不希望把这些历史commit带过来，于是使用–squash进行合并，此时文件已经同合并后一样了，但不移动HEAD，不提交。需要进行一次额外的commit来“总结”一下，然后完成最终的合并。</p><p>–no-ff</p><p>关闭fast-forward模式，在提交的时候，会创建一个merge的commit信息，然后合并的和master分支<br> merge的不同行为，向后看，其实最终都会将代码合并到master分支，而区别仅仅只是分支上的简洁清晰的问题，然后，向前看，也就是我们使用<code>reset</code> 的时候，就会发现，不同的行为就带来了不同的影响</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph  <span class="comment">#以图表形式查看提交</span></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210801150742.png" alt="image-20210801150741989" style="zoom:67%;" /></p><h2 id="更改提交"><a href="#更改提交" class="headerlink" title="更改提交"></a>更改提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset #回溯历史版本</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要让仓库的head，暂存区与当前工作树回溯到之前状态,需要用到git reset —hard 提供目标时间点的哈希值就可以完全恢复至改时间点的状态</p><p>回溯至之前状态后,利用git reflog可以前推</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend <span class="comment">#可以修改上一条提交信息</span></span><br><span class="line">git commit -am <span class="string">&quot;&quot;</span> <span class="comment">#不用add直接提交</span></span><br><span class="line">git rebase -i HEAD~2 <span class="comment">#合并历史  选定当前分支包含HEAD在内的两个最新历史记录</span></span><br></pre></td></tr></table></figure><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p><p>1)、在本地创建一个版本库（即文件夹），通过<code>git init</code>把它变成Git仓库；</p><p>2)、把项目复制到这个文件夹里面，再通过<code>git add .</code>把项目添加到仓库；</p><p>3)、再通过<code>git commit -m &quot;注释内容&quot;</code>把项目提交到仓库；</p><p>4)、在Github上设置好SSH密钥后，新建一个远程仓库，通过<code>git remote add origin 远程仓库地址</code>将本地仓库和远程仓库进行关联；</p><p>5)、最后通过<code>git push -u origin master</code>把本地仓库的项目推送到远程仓库（也就是Github）上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程学习</title>
      <link href="2021/07/31/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/07/31/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python多线程学习"><a href="#Python多线程学习" class="headerlink" title="Python多线程学习"></a>Python多线程学习</h1><p>在使用tkinter过程中,调用一个函数发现主界面长时间未响应,原因是这个函数占用太长时间.界面卡死,这里应该要用多线程解决</p><span id="more"></span><ul><li>使用线程可以把占据长时间的程序中的任务放到后台去处理。</li><li>用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</li><li>程序的运行速度可能加快。</li><li>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</li></ul><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210730190808.png" alt="image-20210730190703000" style="zoom:50%;" /></p><p>这里使用threading模块解决</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210730191254.png" alt="image-20210730191254448" style="zoom:67%;" /></p><p>创建子线程,需要两个要素</p><p>1.线程对象:线程对象是threading模块的线程类Thread或子类</p><p>2.线程体:线程体是子线程要执行的代码,这些代码会被封装到一个函数.子线程在启动后会执行线程体.实现线程体主要有:</p><ol><li>自定义函数实现线程体</li><li>自定义线程类实现线程体</li></ol><h2 id="自定义函数实现线程体"><a href="#自定义函数实现线程体" class="headerlink" title="自定义函数实现线程体"></a>自定义函数实现线程体</h2><p>创建线程对象的构造方法</p><p>Thread(target=None,name=None,args=())</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210730193034.png" alt="image-20210730193033951" style="zoom:67%;" /></p><p>注意  Thread还有daemon属性,守护进程,默认为False</p><p>即主线程若运行完后子线程还未运行完,则子线程将继续运行</p><p>设置为True后主线程运行完,子线程也将被kill</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread = threading.Thread(target=test,name=<span class="string">&#x27;TestThread&#x27;</span>,daemon=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="自定义线程类实现线程体"><a href="#自定义线程类实现线程体" class="headerlink" title="自定义线程类实现线程体"></a>自定义线程类实现线程体</h2><p>继承threading.Thread,实现run方法</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210730194648.png" alt="image-20210730194648097" style="zoom:67%;" /></p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="1-等待线程结束"><a href="#1-等待线程结束" class="headerlink" title="1.等待线程结束"></a>1.等待线程结束</h3><p><strong>join([time]):</strong> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生</p><p>有时一个线程需要等待另外一个线程执行结束才能继续执行</p><p>join()</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210730195311.png" alt="image-20210730195311797" style="zoom:67%;" /></p><h2 id="线程间还有通信"><a href="#线程间还有通信" class="headerlink" title="线程间还有通信"></a>线程间还有通信</h2><p>线程可以利用全局变量,因此容易造成混乱</p><p>互斥锁</p><p>threading模块有Lock类可以方便处理锁定</p><p>Lock类有acquire()锁定和release()释放锁</p><p>同时还有Queue队列</p><p>这里就不细说了</p><p>相关资料:<a href="https://www.runoob.com/python3/python3-multithreading.html">Python3 多线程</a></p><p>​    <a href="https://guo-pu.blog.csdn.net/article/details/86707216?utm_medium=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down.none-task-blog-baidujs-2.nonecase">python tkinter界面卡死的解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkinter+requests练习</title>
      <link href="2021/07/31/tkinter-requests%E7%BB%83%E4%B9%A0/"/>
      <url>2021/07/31/tkinter-requests%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>想用tkinter写个桌面程序</p><span id="more"></span><p>tkinter参考资料主要有官方文档,还有一本台湾人写的书tkinter菜鸟编程.此外还有一堆抄来抄去的书.我觉得只要多练就行了,看看官方写的代码</p><p>主要解决问题:</p><ol><li>tkinter的控件布局.整洁好看,不过这并不是最重要的</li><li>调用程序,触发一个选项后要有调用的函数</li><li>多线程.不然界面会出现未响应</li></ol><p>一些小问题  控件的大小,字体颜色与大小   利用python打开资源管理器<a href="https://my.oschina.net/famiover/blog/783289">Python调Windows的资源管理器打开指定目录 - famiover - OSCHINA - 中文开源技术交流社区</a></p><h2 id="1-布局问题"><a href="#1-布局问题" class="headerlink" title="1.布局问题"></a>1.布局问题</h2><p>tkinter布局一般,不像PyQt拖拽式那样简单.</p><p>一般用到的控件Label,Entry,Button,messagebox,menu,text,toplevel(打开新窗口)</p><p>像按钮啥的暂时用不上</p><p>同时还有添加图像时有时图片太大,可以利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">photo = Image.<span class="built_in">open</span>(<span class="string">&quot;小猫.jpg&quot;</span>)  <span class="comment">#括号里为需要显示在图形化界面里的图片</span></span><br><span class="line">   </span><br><span class="line">photo = photo.resize((<span class="number">400</span>,<span class="number">400</span>))  <span class="comment">#规定图片大小</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_45687410/article/details/109103338">python 使用图形化界面tkinter显示图片 规定大小！_地中海的博客-CSDN博客_tkinter设置图片大小</a></p><h2 id="2-调用程序"><a href="#2-调用程序" class="headerlink" title="2.调用程序"></a>2.调用程序</h2><p>tkinter两种方法</p><p>command调用与bind绑定</p><p>不过我发现</p><p>控件command=callback传参不方便,只能利用     </p><ol><li><p>lambda函数 </p></li><li><p>IntVar() StringVar()等这种变量设置</p></li></ol><p>而bind会传一个参数event</p><p>可以得到相关参数(例如鼠标点击位置啥的)</p><p>建议一个空间不要同时用这两个调用</p><h2 id="3-多线程"><a href="#3-多线程" class="headerlink" title="3.多线程"></a>3.多线程</h2><p>主要是要将桌面主程序与爬虫等程序分开</p><p>上次讲了python多线程利用threading模块的两种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            n = threading.currentThread()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;现在是&#123;0&#125;的第&#123;1&#125;次&quot;</span>.<span class="built_in">format</span>(n.name,i))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子线程执行完了&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mythread = Mythread(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    mythread.setDaemon(<span class="literal">True</span>) <span class="comment">#守护线程,当主线程执行完后,子线程强制关闭</span></span><br><span class="line">    mythread.start()</span><br><span class="line">    mythread.join() <span class="comment">#必须当这个子线程执行完,主线程才开始执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        n = threading.currentThread()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;现在是&#123;0&#125;的第&#123;1&#125;次&quot;</span>.<span class="built_in">format</span>(n.name, i))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210731230340.png" alt="image-20210731230339270" style="zoom:67%;" /></p><p>可以看出join之后子线程先执行完,若去掉join</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210731230516.png" alt="image-20210731230516420" style="zoom:67%;" /></p><p>注意主线程与子线程同时执行并且当主线程执行完,子线程关闭</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>特别注意的是,我添加图片时,如果在函数里添加,那么图片就没了(程序没有报错,但图片显示空白)</p><p>我把那段代码改在主函数里就行了,猜测可能是因为GC机制回收了</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>(<span class="params">tk.Frame</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.button = tk.Button(self, text=<span class="string">&quot;确定&quot;</span>, )  <span class="comment"># command=self.get_info)</span></span><br><span class="line">        self.entry = tk.Entry(self, font=<span class="string">&quot;times 15&quot;</span>)</span><br><span class="line">        self.endbtn = Button(self, text=<span class="string">&quot;结束&quot;</span>, command=stop)</span><br><span class="line">        self.label1 = tk.Label(self, text=<span class="string">&quot;请输入爬取的页数范围:\n例子:1,2&quot;</span>, font=<span class="string">&quot;times 15&quot;</span>, relief=<span class="string">&quot;raised&quot;</span>)</span><br><span class="line">        self.create_widget()</span><br><span class="line">        self.pack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_widget</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.entry.insert(<span class="number">0</span>, <span class="string">&quot;1,2&quot;</span>)</span><br><span class="line">        self.label1.pack(side=LEFT, fill=BOTH)</span><br><span class="line">        self.entry.pack(fill=X)</span><br><span class="line">        self.button.pack(fill=BOTH)</span><br><span class="line">        self.button.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.get_info)</span><br><span class="line">        self.entry.bind(<span class="string">&quot;&lt;Return&gt;&quot;</span>, self.get_info)</span><br><span class="line"></span><br><span class="line">        self.endbtn.pack(fill=X)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        entry_info = self.entry.get()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fir_page = <span class="built_in">int</span>(entry_info.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">            sec_page = <span class="built_in">int</span>(entry_info.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;输入格式错误\n%s&quot;</span> % e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;输入格式错误\n%s&quot;</span> % e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;输入格式错误\n%s&quot;</span> % e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        spider = Spider(fir_page, sec_page)</span><br><span class="line">        spider.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&quot;正在爬取...&quot;</span>)</span><br><span class="line">        spider.start()</span><br><span class="line">        <span class="comment"># spider.join()   这里如果join了运行爬虫桌面程序多半会卡</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="comment"># global info</span></span><br><span class="line">    <span class="comment"># location = os.getcwd() + &#x27;/fake_useragent.json&#x27;</span></span><br><span class="line">    <span class="comment"># ua = UserAgent(path=location)</span></span><br><span class="line">    __headers = &#123;<span class="string">&#x27;user_agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                               <span class="string">&quot;Chrome/92.0.4515.107 Safari/537.36 Edg/92.0.902.55&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># __base_url = &quot;https://konachan.net/&quot;</span></span><br><span class="line">    <span class="comment"># __url = &quot;https://konachan.net/post?page=&#123;&#125;&quot;</span></span><br><span class="line">    __url = <span class="string">&quot;https://gelbooru.com/index.php?page=post&amp;s=list&amp;tags=all&amp;pid=&#123;&#125;&quot;</span></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, fir_page, sec_page</span>):</span></span><br><span class="line">        Spider.flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># self.fir_page = fir_page</span></span><br><span class="line">        <span class="comment"># self.sec_page = sec_page</span></span><br><span class="line">        self.fir_page = (fir_page - <span class="number">1</span>) * <span class="number">42</span></span><br><span class="line">        self.sec_page = sec_page * <span class="number">42</span></span><br><span class="line">        self.tag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        pb.start()</span><br><span class="line">        self.parse()</span><br><span class="line">        pb.stop()</span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&quot;爬取完毕&quot;</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;提示消息&quot;</span>, <span class="string">&quot;爬取结束了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self</span>):</span></span><br><span class="line">        text.delete(<span class="string">&quot;1.0&quot;</span>, END)</span><br><span class="line">        requests.adapters.DEFAULT_RETRIES = <span class="number">5</span></span><br><span class="line">        text.insert(END, <span class="string">&quot;下载至&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(os.getcwd() + <span class="string">r&#x27;\images或\videos&#x27;</span>))</span><br><span class="line">        <span class="comment"># info += &quot;下载至&#123;&#125;\n&quot;.format(os.getcwd() + r&#x27;\images或\videos&#x27;)</span></span><br><span class="line">        <span class="comment"># msg_var.set(info)</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.fir_page, self.sec_page + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> Spider.flag:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">1.5</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(self.__url.<span class="built_in">format</span>(n), headers=self.__headers)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">                messagebox.showinfo(<span class="string">&quot;出现问题&quot;</span>, <span class="string">&quot;爬取频繁,请连接代理\n%s&quot;</span> % e)</span><br><span class="line">                pb.stop()</span><br><span class="line">                var.<span class="built_in">set</span>(<span class="string">&quot;爬取完毕&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            selector = etree.HTML(res.text)</span><br><span class="line">            <span class="comment"># images_urls = selector.xpath(&quot;//ul[@id=&#x27;post-list-posts&#x27;]/li//a[@class=&#x27;thumb&#x27;]/@href&quot;)</span></span><br><span class="line">            images_urls = selector.xpath(<span class="string">&quot;//article//a/@href&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> image_url <span class="keyword">in</span> images_urls:</span><br><span class="line">                <span class="keyword">if</span> Spider.flag:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.parse_next(image_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_next</span>(<span class="params">self, image_url</span>):</span></span><br><span class="line">        <span class="comment"># image_id = image_url.split(&quot;/&quot;)[3]</span></span><br><span class="line">        <span class="comment"># next_url = self.__base_url + image_url</span></span><br><span class="line">        image_id = image_url.split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        next_url = image_url</span><br><span class="line">        time.sleep(<span class="number">1.5</span>)</span><br><span class="line">        res = requests.get(next_url, headers=self.__headers)</span><br><span class="line">        selector = etree.HTML(res.text)</span><br><span class="line">        <span class="comment"># img = selector.xpath(&quot;//img[@id=&#x27;image&#x27;]/@src&quot;)[0]</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            img = selector.xpath(<span class="string">&quot;//img[@id=&#x27;image&#x27;]/@src&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            img = selector.xpath(<span class="string">&quot;//video/source[1]/@src&quot;</span>)[<span class="number">0</span>]  <span class="comment"># 这是图片</span></span><br><span class="line">            self.tag = <span class="literal">False</span></span><br><span class="line">        self.download(img, image_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, img, image_id</span>):</span></span><br><span class="line">        <span class="keyword">if</span> Spider.flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        suffix = img.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        res = requests.get(img, headers=self.__headers)</span><br><span class="line">        text.insert(END, <span class="string">&quot;正在下载:%s\n&quot;</span> % img)</span><br><span class="line">        <span class="comment"># info += &quot;正在下载:%s\n&quot; % img</span></span><br><span class="line">        <span class="comment"># msg_var.set(info)</span></span><br><span class="line">        <span class="keyword">if</span> self.tag:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./images&quot;</span>):</span><br><span class="line">                os.mkdir(<span class="string">&quot;./images&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/&#123;0&#125;.&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(image_id, suffix), <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(res.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./videos&quot;</span>):</span><br><span class="line">                os.mkdir(<span class="string">&quot;./videos&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;videos/&#123;0&#125;.&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(image_id, suffix), <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(res.content)</span><br><span class="line">        text.insert(END, <span class="string">&quot;下载成功:%s\n&quot;</span> % img)</span><br><span class="line">        <span class="comment"># info += &quot;下载成功:%s\n&quot; % img</span></span><br><span class="line">        <span class="comment"># msg_var.set(info)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>():</span></span><br><span class="line">    Spider.flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_current</span>():</span></span><br><span class="line">    base_path = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./images&quot;</span>):</span><br><span class="line">        is_cre = messagebox.askyesno(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;不存在图片文件夹，是否创建?&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_cre:</span><br><span class="line">            os.mkdir(<span class="string">&quot;./images&quot;</span>)</span><br><span class="line">            path = base_path + <span class="string">r&quot;\images&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path = base_path</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path = base_path + <span class="string">r&quot;\images&quot;</span></span><br><span class="line">    os.system(<span class="string">&quot;explorer.exe %s&quot;</span> % path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_myinfo</span>():</span></span><br><span class="line">    my_info = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        website:http://sekyoro.top/</span></span><br><span class="line"><span class="string">        github:https://github.com/drowning-in-codes</span></span><br><span class="line"><span class="string">        一起学习</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    toplevel = Toplevel()</span><br><span class="line">    toplevel.title(<span class="string">&quot;关于我&quot;</span>)</span><br><span class="line">    toplevel.iconbitmap(<span class="string">&quot;th.ico&quot;</span>)</span><br><span class="line">    toplevel.geometry(<span class="string">&quot;400x350&quot;</span>)</span><br><span class="line">    info_label = Label(toplevel, font=<span class="string">&quot;times 15&quot;</span>, text=my_info, image=info_tk_image, compound=<span class="string">&quot;top&quot;</span>, justify=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">    info_label.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_window</span>():</span></span><br><span class="line">    root.title(<span class="string">&quot;桌面爬虫&quot;</span>)</span><br><span class="line">    root.geometry(<span class="string">&quot;400x450&quot;</span>)</span><br><span class="line">    root.iconbitmap(<span class="string">&quot;th.ico&quot;</span>)</span><br><span class="line">    label.pack()</span><br><span class="line">    menubar = Menu(root)</span><br><span class="line">    filemenu = Menu(menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">    menubar.add_cascade(label=<span class="string">&quot;File&quot;</span>, menu=filemenu)</span><br><span class="line">    filemenu.add_command(label=<span class="string">&quot;Open&quot;</span>, command=open_current)</span><br><span class="line">    filemenu.add_separator()</span><br><span class="line">    filemenu.add_command(label=<span class="string">&quot;Exit&quot;</span>, command=root.destroy)</span><br><span class="line">    helpmenu = Menu(menubar, tearoff=<span class="number">0</span>)</span><br><span class="line">    helpmenu.add_command(label=<span class="string">&quot;About me&quot;</span>, command=show_myinfo)</span><br><span class="line">    menubar.add_cascade(label=<span class="string">&quot;Help&quot;</span>, menu=helpmenu)</span><br><span class="line">    root.config(menu=menubar)</span><br><span class="line">    text_label = Label(root, textvariable=var).pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&quot;OIP-C.gif&quot;</span>)</span><br><span class="line">    image = image.resize((<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">    <span class="comment"># info = &quot;爬取信息\n&quot;</span></span><br><span class="line">    image_tk = ImageTk.PhotoImage(image)</span><br><span class="line">    label = tk.Label(root, font=<span class="string">&quot;20&quot;</span>, fg=<span class="string">&quot;blue&quot;</span>, text=<span class="string">&quot;欢迎使用&quot;</span>, image=image_tk, compound=<span class="string">&quot;top&quot;</span>)</span><br><span class="line">    var = StringVar()</span><br><span class="line">    set_window()</span><br><span class="line">    pb = Progressbar(root, mode=<span class="string">&quot;indeterminate&quot;</span>, length=<span class="number">200</span>, name=<span class="string">&quot;进度&quot;</span>)</span><br><span class="line">    pb[<span class="string">&quot;value&quot;</span>] = <span class="number">0</span></span><br><span class="line">    pb[<span class="string">&quot;maximum&quot;</span>] = <span class="number">100</span></span><br><span class="line">    pb.pack()</span><br><span class="line">    app = Application(root)</span><br><span class="line">    info_image = Image.<span class="built_in">open</span>(<span class="string">&quot;info.png&quot;</span>)</span><br><span class="line">    info_image = info_image.resize((<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">    info_tk_image = ImageTk.PhotoImage(info_image)</span><br><span class="line">    <span class="comment"># msg_var = StringVar()</span></span><br><span class="line">    <span class="comment"># msg = Message(root, textvariable=msg_var, relief=&quot;raised&quot;)</span></span><br><span class="line">    <span class="comment"># msg.pack(padx=10, pady=10)</span></span><br><span class="line">    <span class="comment"># msg_var.set(info)</span></span><br><span class="line">    <span class="comment">#  待滚轮的text</span></span><br><span class="line">    yscrollbar = Scrollbar(root)</span><br><span class="line">    text = Text(root)</span><br><span class="line">    yscrollbar.pack(side=RIGHT, fill=Y)</span><br><span class="line">    text.pack()</span><br><span class="line">    yscrollbar.config(command=text.yview)</span><br><span class="line">    text.config(yscrollcommand=yscrollbar.<span class="built_in">set</span>)</span><br><span class="line">    app.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210731231013.png" alt="image-20210731231013251" style="zoom:50%;" /></p><p>最后pyinstaller  -w  -F name.py打包就行了</p><p>大概长这样,看来要多多尝试</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> tkinter </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库认识</title>
      <link href="2021/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A4%E8%AF%86/"/>
      <url>2021/07/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据库认识"><a href="#数据库认识" class="headerlink" title="数据库认识"></a>数据库认识</h1><p>在学习计算机课程时,数据库是必修课.在写软件时数据库也是重要的一环</p><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>数据库是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p><h2 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h2><p>RDBMS 指关系型数据库管理系统，全称 Relational Database Management System。</p><p>RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。</p><p>RDBMS 中的数据存储在被称为表的数据库对象中。</p><p>表是相关的数据项的集合，它由列和行组成。</p><p>SQL（Structured Query Language） 是用于访问和处理数据库的标准的计算机语言。</p><p>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</p><p>一个数据库通常包含一个或多个表(TABLE)。每个表有一个名字标识（例如:”Websites”）,表包含带有数据的记录（行）</p><p>数据表（<code>table</code>）简称表，它是数据库最重要的组成部分之一。数据库只是一个框架，表才是实质内容。</p><p>而一个数据库中一般会有多张表，这些各自独立的表通过建立关系被联接起来，才成为可以交叉查阅、一目了然的数据库。</p><p><strong>注意</strong></p><p>虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。</p><p>然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p><h2 id="2-直接上手"><a href="#2-直接上手" class="headerlink" title="2.直接上手"></a>2.直接上手</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;<span class="operator">/</span><span class="operator">/</span>查看数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE name;  <span class="operator">/</span><span class="operator">/</span>创建一个数据库</span><br><span class="line">use name;<span class="operator">/</span><span class="operator">/</span>使用一个数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> name</span><br><span class="line">(</span><br><span class="line">    项名 数据类型(数据长度)</span><br><span class="line">)；<span class="operator">/</span><span class="operator">/</span>创建一个表</span><br><span class="line"><span class="keyword">show</span> tables;<span class="operator">/</span><span class="operator">/</span>查看表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> name;<span class="operator">/</span><span class="operator">/</span>查看表的内容</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> name(项名,...)  <span class="keyword">VALUES</span>(值,...) <span class="operator">/</span><span class="operator">/</span>向表中插入数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在大多数系统中，SQL 语句都是不区分大小写的</p><p>但是由于有保留字,使用大写可以表明保留字</p><p>注意分号,有些可能不需要</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>大小(字节)</td><td>用途</td><td>格式</td></tr><tr><td>INT</td><td>4</td><td>整数</td><td></td></tr><tr><td>FLOAT</td><td>4</td><td>单精度浮点数</td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>ENUM</td><td>—</td><td>单选,比如性别</td><td>ENUM(‘a’,’b’,’c’)</td></tr><tr><td>SET</td><td>—</td><td>多选</td><td>SET(‘1’,’2’,’3’)</td></tr><tr><td>DATE</td><td>3</td><td>日期</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>时间点或持续时间</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>年份值</td><td>YYYY</td></tr><tr><td>CHAR</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>VARCHAR</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>TEXT</td><td>0~65535</td><td>长文本数据</td></tr></tbody></table></div><h2 id="2-MySQL的约束"><a href="#2-MySQL的约束" class="headerlink" title="2.MySQL的约束"></a>2.MySQL的约束</h2><p>约束是一种限制，它通过对表的行或列的数据做出限制，来确保表的数据的完整性、唯一性。</p><div class="table-container"><table><thead><tr><th>约束类型：</th><th>主键</th><th>默认值</th><th>唯一</th><th>外键</th><th>非空</th></tr></thead><tbody><tr><td>关键字：</td><td>PRIMARY KEY</td><td>DEFAULT</td><td>UNIQUE</td><td>FOREIGN KEY</td><td>NOT NULL</td></tr></tbody></table></div><p>主键（PRIMARY KEY）作为数据表中一行数据的唯一标识符，在一张表中通过主键就能准确定位到某一行数据，因此主键十分重要，它不能有重复记录且不能为空</p><p>默认值约束 (DEFAULT) 规定，当有 DEFAULT 约束的列，插入数据为空时，将使用默认值。</p><p>唯一约束 (UNIQUE) 比较简单，它规定一张表中指定的一列的值必须不能有重复值，即这一列每个值都是唯一的。</p><p>外键 (FOREIGN KEY) 既能确保数据完整性，也能表现表之间的关系。</p><p>一个表可以有多个外键，每个外键必须 REFERENCES (参考) 另一个表的主键，被外键约束的列，取值必须在它参考的列中有对应值。</p><p>非空约束 (NOT NULL),听名字就能理解，被非空约束的列，在插入值时必须非空。</p>]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy代理设置</title>
      <link href="2021/07/29/Scrapy%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/07/29/Scrapy%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Scapy代理设置-爬取代理实战"><a href="#Scapy代理设置-爬取代理实战" class="headerlink" title="Scapy代理设置__爬取代理实战"></a>Scapy代理设置__爬取代理实战</h1><p>设置代理可以避免爬虫频繁爬取被封</p><p>付费代理就不用说了,我这里爬取免费代理</p><span id="more"></span><p>Scrapy代理使用HttpProxyMiddlewar中间件（默认开启）</p><p><strong>在Scrapy中设置代理本质是将代理服务器的url写入request.meta[‘proxy’]</strong></p><p>如果代理需要身份验证,需要通过HTTP头部的Proxy-Authorization字段传递用户账号和密码的身份验证信息</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>接下来进行实战</p><p>xicidaili貌似没了</p><p>我用的 <a href="https://www.kuaidaili.com/free/">国内高匿免费HTTP代理IP - 快代理 (kuaidaili.com)</a></p><p>一上来三连鞭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject proxy;</span><br><span class="line">cd proxy;</span><br><span class="line">scrapy genspider kuaidaili kuaidaili.com;</span><br></pre></td></tr></table></figure><p>然后直接开爬</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuaidailiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;kuaidaili&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;kuaidaili.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># start_urls = [&#x27;http://kuaidaili.com/free/inha&#x27;]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(<span class="string">&quot;https://www.kuaidaili.com/free/inha/%s/&quot;</span> % i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">&quot;//tbody//tr&quot;</span>):</span><br><span class="line">            ip = sel.xpath(<span class="string">&quot;.//td[1]/text()&quot;</span>).extract_first()</span><br><span class="line">            port = sel.xpath(<span class="string">&quot;.//td[2]/text()&quot;</span>).extract_first()</span><br><span class="line">            scheme = sel.xpath(<span class="string">&quot;.//td[4]/text()&quot;</span>).extract_first().lower()</span><br><span class="line">            <span class="comment"># 使用爬取的代理验证</span></span><br><span class="line">            url = <span class="string">&quot;%s://httpbin.org/ip&quot;</span> % scheme</span><br><span class="line">            proxy = <span class="string">&quot;%s://%s:%s&quot;</span> % (scheme, ip, port)</span><br><span class="line">            meta = &#123;</span><br><span class="line">                <span class="string">&#x27;proxy&#x27;</span>: proxy,</span><br><span class="line">                <span class="string">&#x27;dont_retry&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;download_timeout&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="comment"># 以下两个字段用于检验</span></span><br><span class="line">                <span class="string">&#x27;_proxy_scheme&#x27;</span>: scheme,</span><br><span class="line">                <span class="string">&#x27;_proxy_ip&#x27;</span>: ip</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.check_available, meta=meta, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_available</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        proxy_ip = response.meta[<span class="string">&#x27;_proxy_ip_&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> proxy_ip == json.loads(response.text)[<span class="string">&#x27;origin&#x27;</span>]:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;proxy_scheme&#x27;</span>: response.meta[<span class="string">&#x27;_proxy_scheme&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;proxy&#x27;</span>: response.meta[<span class="string">&#x27;proxy&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>settings.py改一下设置</p><p>我尝试后发现直接503</p><p>还没有得到解决…</p><h2 id="再次尝试"><a href="#再次尝试" class="headerlink" title="再次尝试"></a>再次尝试</h2><p>于是我更换了网站,换了个墙外的</p><p><a href="http://proxy-list.org/english/index.php?p=1">1 minute ago checked proxy servers - Free proxy list service since 2004 year! Almost 10 years of proxy service (proxy-list.org)</a></p><p>这个尝试了一下  貌似是动态网站 我懒</p><p>所以又换了一个</p><p><a href="https://free-proxy-list.net/">Free Proxy List - Just Checked Proxy List (free-proxy-list.net)</a></p><p>这个可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreeScrapySpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;free_proxy&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;free-proxy-list.net&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">&quot;https://free-proxy-list.net/&quot;</span>]</span><br><span class="line">    <span class="comment"># def start_requests(self):</span></span><br><span class="line">    <span class="comment">#     for i in range(1, 4):</span></span><br><span class="line">    <span class="comment">#         yield scrapy.Request(&quot;http://proxy-list.org/english/index.php?p=%s&quot; % i)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">&quot;//tbody//tr&quot;</span>):</span><br><span class="line">            ip = sel.xpath(<span class="string">&quot;./td[1]/text()&quot;</span>).extract_first()</span><br><span class="line">            port = sel.xpath(<span class="string">&quot;./td[2]/text()&quot;</span>).extract_first()</span><br><span class="line">            scheme = sel.xpath(<span class="string">&quot;./td[7]/text()&quot;</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> scheme == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">                scheme = <span class="string">&#x27;https&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                scheme = <span class="string">&#x27;http&#x27;</span></span><br><span class="line">            url = <span class="string">&quot;%s://httpbin.org/ip&quot;</span> % scheme</span><br><span class="line">            proxy = <span class="string">&quot;%s://%s:%s&quot;</span> % (scheme, ip,port)</span><br><span class="line">        <span class="comment"># ip = ip_port.split(&quot;:&quot;)[0]</span></span><br><span class="line">            meta = &#123;</span><br><span class="line">                <span class="string">&#x27;proxy&#x27;</span>: proxy,</span><br><span class="line">                <span class="string">&#x27;download_timeout&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="string">&#x27;dont_retry&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">                <span class="string">&#x27;_proxy_scheme&#x27;</span>: scheme,</span><br><span class="line">                <span class="string">&#x27;_proxy_ip&#x27;</span>: ip</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.check_available, meta=meta, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_available</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        proxy_ip = response.meta[<span class="string">&#x27;_proxy_ip&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> proxy_ip == json.loads(response.text)[<span class="string">&#x27;origin&#x27;</span>]:</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">&#x27;proxy_scheme&#x27;</span>: response.meta[<span class="string">&#x27;_proxy_scheme&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;proxy&#x27;</span>: response.meta[<span class="string">&#x27;proxy&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后实现随机代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomHttpProxyMiddleware</span>(<span class="params">HttpProxyMiddleware</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,auth_encoding=<span class="string">&#x27;latin-1&#x27;</span>,proxy_list_file=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> proxy_list_file:</span><br><span class="line">            <span class="keyword">raise</span> scrapy.exceptions.NotConfigured</span><br><span class="line">        self.auth_encoding = auth_encoding</span><br><span class="line">        self.proxies = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(proxy_list_file) <span class="keyword">as</span> f:</span><br><span class="line">            proxy_list = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> proxy <span class="keyword">in</span> proxy_list:</span><br><span class="line">                scheme = proxy[<span class="string">&#x27;proxy_scheme&#x27;</span>]</span><br><span class="line">                url = proxy[<span class="string">&#x27;proxy&#x27;</span>]</span><br><span class="line">                self.proxies[scheme].append(self._get_proxy(url,scheme))</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        auth_encoding = crawler.settings.get(<span class="string">&#x27;HTTPPROXY_AUTH_ENCODING&#x27;</span>,<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">        proxy_list_file = crawler.settings.get(<span class="string">&quot;HTTPPROXY_PROXY_LIST_FILE&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls(auth_encoding,proxy_list_file)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_proxy</span>(<span class="params">self, request, scheme</span>):</span></span><br><span class="line">        creds,proxy = random.choice(self.proxies[scheme])</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = proxy</span><br><span class="line">        <span class="keyword">if</span> creds:</span><br><span class="line">            request.headers[<span class="string">&quot;Proxy-Authorization&quot;</span>]=<span class="string">b&#x27;Basic&#x27;</span>+creds</span><br></pre></td></tr></table></figure><p>并在settings.py里更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="comment">#    &#x27;free_proxy.middlewares.FreeProxyDownloaderMiddleware&#x27;: 543,</span></span><br><span class="line">    <span class="string">&#x27;free_proxy.middlewares.RandomHttpProxyMiddleware&#x27;</span>:<span class="number">745</span></span><br><span class="line">&#125;</span><br><span class="line">HTTPPROXY_PROXY_LIST_FILE = <span class="string">&#x27;proxy_list_json&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HubSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># start_urls = [&#x27;http://httpbin.org/ip&#x27;]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>, dont_filter=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(<span class="string">&#x27;https://httpbin.org/ip&#x27;</span>, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(json.loads(response.text))</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;proxy&#x27;</span>:json.loads(response.text)[<span class="string">&#x27;origin&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment"># 写一个测试程序</span></span><br></pre></td></tr></table></figure><p>可以看到得到的代理是设置的代理</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> Scrapy </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scapy_动态网页爬取</title>
      <link href="2021/07/21/Scrapy-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96/"/>
      <url>2021/07/21/Scrapy-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Scrapy之动态网页爬取"><a href="#Scrapy之动态网页爬取" class="headerlink" title="Scrapy之动态网页爬取"></a>Scrapy之动态网页爬取</h1><p>动态网页通过JavaScript与html交互</p><p>可以通过Splash渲染引擎爬取</p><span id="more"></span><h2 id="1-下载Splash"><a href="#1-下载Splash" class="headerlink" title="1.下载Splash"></a>1.下载Splash</h2><p>使用Docker安装</p><p>注意,如果你是windows家庭版则安装方式不同</p><p>可以参考<a href="https://blog.csdn.net/cherish152/article/details/103824034">Scrapy-Splash的安装(windows篇)</a></p><p>由于我是教育版，直接安装docker for desktop 就行</p><p><a href="https://www.docker.com/products/docker-desktop">Docker Desktop for Mac and Windows | Docker</a></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210729173502.png" alt="image-20210721143756897"></p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程 (runoob.com)</a></p><p>网上教程有点乱,我看这个还挺好的</p><p>下载Desktop重启后可能会提示WSL2更新,直接在相关网站更新就行了</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">在 Windows 10 上安装 WSL | Microsoft Docs</a></p><p>安装好后可以在power shell里运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">8050</span>:<span class="number">8050</span> scrapinghub/splash</span><br></pre></td></tr></table></figure><p>应该会跳出一个页面(可能时间比较长)</p><p><a href="https://www.cnblogs.com/pzk7788/p/10551338.html#:~:text=Splash 说白了就是一个轻量级的浏览器，利用它，我们同样可以实现跟其他浏览器一样的操作，我们使用 Docker 来安装 Splash：. [root%40localhost ~]%23 docker,安装好之后，可以通过 http%3A%2F%2Flocalhost%3A8050 访问其 Web 界面，如下，我们可以通过输入 https%3A%2F%2Fwww.baidu.com%2F，然后点击 Render me！.">Splash 简介与安装 - 孔雀东南飞 - 博客园 (cnblogs.com)</a></p><p>可以看看这篇博客</p><p>然后 下载scrapy-splash 一个python库操作splash的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy-splash</span><br></pre></td></tr></table></figure><p><a href="https://splash.readthedocs.io/en/stable/">Splash - A javascript rendering service — Splash 3.5 documentation</a></p><p>splash的文档</p><p>服务端点</p><p>render.html 提供JavaScript页面渲染服务</p><p>url参数为要渲染的网址</p><p>execute  执行用户自定义的渲染脚本(lua),在页面中执行JavaScript代码</p><p>请求方式post lua_source 用户自定义的脚本</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下载了scrapy-splash后配置settings.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy.downloadermiddlewares.httpcompression</span><br><span class="line"><span class="keyword">import</span> scrapy_splash</span><br><span class="line">BOT_NAME = <span class="string">&#x27;splash_example&#x27;</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;splash_example.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;splash_example.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 Edg/92.0.902.55&#x27;</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">0.5</span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="comment">#    &#x27;splash_example.middlewares.SplashExampleSpiderMiddleware&#x27;: 543,</span></span><br><span class="line">   <span class="string">&#x27;scrapy_splash.SplashDeduplicateArgsMiddleware&#x27;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="comment">#    &#x27;splash_example.middlewares.SplashExampleDownloaderMiddleware&#x27;: 543,</span></span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashCookiesMiddleware&#x27;</span>:<span class="number">732</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashMiddleware&#x27;</span>:<span class="number">725</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#x27;</span>:<span class="number">810</span></span><br><span class="line">    &#125;</span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;scrapy_splash.SplashAwareDupeFilter&#x27;</span></span><br><span class="line"></span><br><span class="line">SPLASH_URL = <span class="string">&quot;http://localhost:8050&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用splashRequest()请求即可</p><p>url,args,cache_args</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> scrapy_splash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;quotes&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;quotes.toscrape.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/js/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        args = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy_splash.SplashRequest(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">&quot;//div[@class=&#x27;quote&#x27;]&quot;</span>):</span><br><span class="line">            quote = sel.xpath(<span class="string">&quot;./span[1]/text()&quot;</span>).extract_first()</span><br><span class="line">            author = sel.xpath(<span class="string">&quot;string(./span[2])&quot;</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">&#x27;quote&#x27;</span>:quote,</span><br><span class="line">                <span class="string">&#x27;author&#x27;</span>:author</span><br><span class="line">            &#125;</span><br><span class="line">        href = response.xpath(<span class="string">&quot;//li[@class=&#x27;next&#x27;]/a/@href&quot;</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> href:</span><br><span class="line">            url = response.urljoin(href)</span><br><span class="line">            <span class="keyword">yield</span> scrapy_splash.SplashRequest(url)</span><br></pre></td></tr></table></figure><p>当然要打开docker的splash</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> Scrapy </tag>
            
            <tag> splash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情打卡</title>
      <link href="2021/07/21/%E7%96%AB%E6%83%85%E6%89%93%E5%8D%A1/"/>
      <url>2021/07/21/%E7%96%AB%E6%83%85%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python爬虫实战-疫情打卡"><a href="#Python爬虫实战-疫情打卡" class="headerlink" title="Python爬虫实战_疫情打卡"></a>Python爬虫实战_疫情打卡</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>python这个语言易学简单,也可以利用其丰富的库写点东西.</p><p>所以我打算写个爬虫打卡(其实之前早就写过,不过已经忘干净了)</p><p>大概流程是 requests+selenium再加个图形界面tkinter或者pyqt</p><p>本来打算只使用requests get和post直接打卡的,试了很久都卡在原页面.</p><p>希望会的朋友留言帮帮忙.另外我试了试selenium的getcookie也未能成功</p><span id="more"></span><h2 id="1-html解析"><a href="#1-html解析" class="headerlink" title="1.html解析"></a>1.html解析</h2><p>使用requests</p><p><a href="https://docs.python-requests.org/zh_CN/latest/index.html">Requests介绍</a></p><h2 id="2-selenium"><a href="#2-selenium" class="headerlink" title="2.selenium"></a>2.selenium</h2><p><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium-python中文文档 (python-selenium-zh.readthedocs.io)</a></p><p>使用selenium自动化</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># option = Options()</span></span><br><span class="line"><span class="comment"># option.add_argument(&quot;--headless&quot;)</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;http://yqtb.nwpu.edu.cn/wx/xg/yz-mobile/index.jsp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取cookie</span></span><br><span class="line">driver.get(login_url)</span><br><span class="line"><span class="comment"># print(driver.get_cookies())</span></span><br><span class="line"><span class="comment"># print(driver.get_cookie(&#x27;domain&#x27;))</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;campus_Cookie.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        listCookies = json.loads(f.read())</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> listCookies:</span><br><span class="line">            driver.add_cookie(&#123;</span><br><span class="line">               <span class="comment"># &quot;domain&quot;: cookie[&#x27;domain&#x27;],</span></span><br><span class="line">                <span class="string">&quot;httpOnly&quot;</span>: cookie[<span class="string">&quot;httpOnly&quot;</span>],</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: cookie[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: cookie[<span class="string">&#x27;path&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;secure&quot;</span>: cookie[<span class="string">&#x27;secure&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: cookie[<span class="string">&quot;value&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">except</span> json.decoder.JSONDecodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;空的cookie文件&#x27;</span>)</span><br><span class="line">driver.get(login_url)</span><br><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">name = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">name.send_keys(<span class="built_in">input</span>(<span class="string">&quot;输入学号:\n&quot;</span>))</span><br><span class="line">password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">password.send_keys(<span class="built_in">input</span>(<span class="string">&quot;输入密码:\n&quot;</span>))</span><br><span class="line">password.send_keys(Keys.RETURN)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;西北工业大学 | 统一身份认证 | 登录&#x27;</span> <span class="keyword">in</span> driver.page_source:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密码错误\n请再次输入\n&quot;</span>)</span><br><span class="line">    name = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    name.clear()</span><br><span class="line">    name.send_keys(<span class="built_in">input</span>(<span class="string">&quot;输入学号:\n&quot;</span>))</span><br><span class="line">    password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    password.clear()</span><br><span class="line">    password.send_keys(<span class="built_in">input</span>(<span class="string">&quot;输入密码:\n&quot;</span>))</span><br><span class="line">    password.send_keys(Keys.RETURN)</span><br><span class="line"><span class="comment"># 保存cookie</span></span><br><span class="line">cookie = driver.get_cookies()</span><br><span class="line">jsonCookies = json.dumps(cookie)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;campus_Cookie.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(jsonCookies)</span><br><span class="line"></span><br><span class="line"><span class="comment">#填报</span></span><br><span class="line">fill_form = driver.find_element_by_class_name(<span class="string">&#x27;icon-shangbao1&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line"></span><br><span class="line">submit = driver.find_element_by_link_text(<span class="string">&#x27;提交填报信息&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;qrxx_div&quot;]/div[2]/div[25]/label/div[1]/i&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">save = driver.find_element_by_id(<span class="string">&#x27;save_div&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存cookie</span></span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.window_handles()</span></span><br><span class="line"><span class="comment"># def log_in():</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>cookie功能没法用,有知道的朋友麻烦留言告诉我一下</p><p>这个cookie怎么添加之后进入打卡页面</p><h2 id="3-图形界面-其实这并不重要"><a href="#3-图形界面-其实这并不重要" class="headerlink" title="3.图形界面(其实这并不重要)"></a>3.图形界面(其实这并不重要)</h2><p>鉴于PyQt的上手难度,我用的tkinter(python自带的)</p><p>推荐一本学tkinter的书,《Python GUI设计:tkinter菜鸟编程》台湾人写的,大概一周能好好看完(有基础两三天就行)</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>之前写过一个打卡的程序 </p><p>但是用的chromedriver版本低了(主要是浏览器升级得太快),我以为就没法用了</p><p>但是只要新下载一个版本得driver就行了</p><p>网上还有自动下载的代码。不过我懒得在这上面花时间了</p>]]></content>
      
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> sign in </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 下载图片 文件</title>
      <link href="2021/07/20/Scrapy-%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87-%E6%96%87%E4%BB%B6/"/>
      <url>2021/07/20/Scrapy-%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87-%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Scrapy-下载图片-文件"><a href="#Scrapy-下载图片-文件" class="headerlink" title="Scrapy 下载图片 文件"></a>Scrapy 下载图片 文件</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Scrapy可以说是一辆大车,我们并不需要注重个别的零件(代码),而是注重部件之间的联系。学会使用这个框架,可以说方便又快捷</p><span id="more"></span><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210719172100.png" alt="image-20210719172051258"></p><p><a href="https://www.runoob.com/w3cnote/scrapy-detail.html">Scrapy 入门教程 </a></p><p>入门可以看看,也有相关书籍和官方文档(不过貌似中文文档很久没更新了)</p><p>知道了基本的操作,就可以直接上手了</p><p>如果有爬虫经验的话,一天上手完全没问题</p><p><strong>一个范例项目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ToscrapeBookItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;books&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;books.toscrape.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://books.toscrape.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 书籍列表页面解析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 提取书籍列表页面中每本书的链接</span></span><br><span class="line">        le = LinkExtractor(restrict_xpaths=<span class="string">&#x27;//div[@class=&quot;image_container&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> le.extract_links(response):</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(link.url, callback=self.book_parse)</span><br><span class="line">        <span class="comment"># 提取下一页的链接</span></span><br><span class="line">        <span class="comment"># le = LinkExtractor(restrict_xpaths=&#x27;//li[@class=&quot;next&quot;]&#x27;)</span></span><br><span class="line">        <span class="comment"># links = le.extract_links(response)</span></span><br><span class="line">        <span class="comment"># if links:</span></span><br><span class="line">        <span class="comment">#     next_url = links[0].url</span></span><br><span class="line">        <span class="comment">#     yield scrapy.Request(next_url, callback=self.parse)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 书籍页面信息的解析函数</span></span><br><span class="line">    <span class="comment"># review_rating = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># review_num = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># upc = scrapy.Field()  # 编码</span></span><br><span class="line">    <span class="comment"># stock = scrapy.Field()  # 库存</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book_parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        book = ToscrapeBookItem()</span><br><span class="line">        book[<span class="string">&#x27;name&#x27;</span>] = response.xpath(<span class="string">&quot;//div[contains(@class,&#x27;product_main&#x27;)]//h1/text()&quot;</span>).extract_first()</span><br><span class="line">        book[<span class="string">&#x27;price&#x27;</span>] = response.xpath(<span class="string">&quot;//div[contains(@class,&#x27;product_main&#x27;)]//p/text()&quot;</span>).extract_first()</span><br><span class="line">        book[<span class="string">&#x27;review_rating&#x27;</span>] = response.xpath(<span class="string">&quot;//p[contains(@class,&#x27;star-rating&#x27;)]/@class&quot;</span>).re_first(</span><br><span class="line">            <span class="string">&#x27;star-rating ([a-zA-Z]+)&#x27;</span>)</span><br><span class="line">        book[<span class="string">&#x27;review_num&#x27;</span>] = response.xpath(<span class="string">&quot;//table[contains(@class,&#x27;table&#x27;)]//tr[7]/td/text()&quot;</span>).extract_first()</span><br><span class="line">        book[<span class="string">&#x27;upc&#x27;</span>] = response.xpath(<span class="string">&quot;//table[contains(@class,&#x27;table&#x27;)]//tr[1]/td/text()&quot;</span>).extract_first()</span><br><span class="line">        book[<span class="string">&#x27;stock&#x27;</span>] = response.xpath(<span class="string">&quot;//table[contains(@class,&#x27;table&#x27;)]//tr[6]/td/text()&quot;</span>).re_first(</span><br><span class="line">            <span class="string">&#x27;\((\d+) available\)&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(book)</span><br><span class="line">        <span class="keyword">yield</span> book</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">import</span> itemadapter</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToscrapeBookPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.wb = openpyxl.Workbook()</span><br><span class="line">        self.ws = self.wb.active</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        line = [item[<span class="string">&#x27;name&#x27;</span>], item[<span class="string">&#x27;price&#x27;</span>], item[<span class="string">&#x27;review_rating&#x27;</span>], item[<span class="string">&#x27;review_num&#x27;</span>], item[<span class="string">&#x27;upc&#x27;</span>], item[<span class="string">&#x27;stock&#x27;</span>]]</span><br><span class="line">        self.ws.append(line)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.wb.save(<span class="string">&#x27;&#123;&#125;.csv&#x27;</span>.<span class="built_in">format</span>(spider.name))</span><br><span class="line">        self.wb.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToscrapeBookItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    price = scrapy.Field()</span><br><span class="line">    review_rating = scrapy.Field()</span><br><span class="line">    review_num = scrapy.Field()</span><br><span class="line">    upc = scrapy.Field()  <span class="comment">#编码</span></span><br><span class="line">    stock = scrapy.Field()  <span class="comment">#库存</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意在setting.py中打开管道以及最好把user-agent写一下</p><p>并改一下延迟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;toscrape_book.pipelines.ToscrapeBookPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line">DOWNLOAD_DELAY = <span class="number">1</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span> <span class="comment">#这个要改为False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-下载图片和图片"><a href="#2-下载图片和图片" class="headerlink" title="2.下载图片和图片"></a>2.下载图片和图片</h2><p>接下来就是文件和图片了</p><ol><li>FilePipeline</li><li>ImagePipeline</li></ol><p>利用这两个专门的下载器,我们只用传参就行了,文件会自动下载到本地,并将下载信息存入item的一个字段</p><p>步骤</p><ul><li><p>在配置文件(settings.py)中打开管道并设置下载目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;scrapy.pipelines.files.FilesPipeline&#x27;</span>: <span class="number">1</span>,<span class="comment">#优先度最高</span></span><br><span class="line">&#125;</span><br><span class="line">FILES_STORE<span class="string">&#x27;./project&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在Scrapy解析页面时将文件下载链接收集到一个列表</p><p>赋给item的file_urls字段。FilesPipeline在处理item时会读取该项字段并进行下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span>(<span class="params">scrapy.spider</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">response</span>):</span></span><br><span class="line">        item =&#123;&#125;</span><br><span class="line">        item[<span class="string">&#x27;file_urls&#x27;</span>]=[]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> response.xpath(<span class="string">&#x27;&#x27;</span>).extract():</span><br><span class="line">            download_url = response.urljoin(url)</span><br><span class="line">            item[<span class="string">&#x27;file_urls&#x27;</span>].append(download_url)</span><br><span class="line">       <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>当下载完文件后,会将信息收集到item[‘files’],信息包含：1. path(下载到本地路径)2.Checksum(文件校验和)3.url(文件的url)</p><p>以上是FilePipeline的使用</p><p>图片类似</p><p>导入路径 scrapy.pipelines.images.ImagesPipeline</p><p>Item 字段  image_urls images</p><p>下载目录 IMAGES_STORE  </p></li></ul><p>ImagePipeline在File上增加了对图片的处理</p><ul><li>生成缩略图  在settings.py中设置IMAGES_THUMBS(dict)  设置字典的每一项值(缩略图的尺寸)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAGES_THUMBS = &#123;</span><br><span class="line">   <span class="string">&#x27;small&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">   <span class="string">&#x27;big&#x27;</span>:(<span class="number">270</span>,<span class="number">270</span>),</span><br><span class="line">&#125;<span class="comment">#增加缩略图</span></span><br></pre></td></tr></table></figure><p>开启该功能,下载一张图片会有三张图片</p><ul><li><p>过滤掉尺寸过小的图片</p><p>在配置文件中设置IMAGES_MIN_WIDTH  IMAGES_MIN_HEIGHT </p><p>分别指定图片最小的宽和高</p><p>开启该功能后小于这个尺寸的会忽略</p></li></ul><p>以上资料来源于《精通Scrapy网络爬虫》(刘硕)</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>写一波实战 爬取图片</p><p>网址 <a href="https://gelbooru.com/index.php?page=post&amp;s=list&amp;tags=all">| Gelbooru </a></p><p>(感觉有点危险)</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>创建项目</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720224649.png" alt="image-20210720224648989" style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrapy startprojct name</span><br><span class="line"></span><br><span class="line">cd name</span><br><span class="line"></span><br><span class="line">scrapy genspider name name.com</span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>明确任务   </p><p>爬取每一页的图片所在地址以及下一页地址(使用LinkExtractor) a href</p><p>爬取图片,使用自带的ImagePipiline</p><p>根据之前说的</p><p>开启Image.Pipeline管道   不遵守robot协议  设置下载路径 </p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720225237.png" alt="image-20210720225237812" style="zoom:67%;" /></p><p>并设置一下user-agent与下载延时</p><p>大概这样</p><p>然后开写</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720225423.png" alt="image-20210720225423059" style="zoom:50%;" /></p><p>查看元素(最好 Scrapy shell),可以看到每张图片的链接在<div class='thumbnail-container'>下  很好爬取</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720225737.png" alt="image-20210720225737447" style="zoom:50%;" /></p><p>写好item,第一项是要传递的参数,图像的链接供下载</p><p>第二项会返回相关信息</p><p>根据观察发现,其实pid参数与页数相关,每一页42(其实就是图片数)</p><p>所以可以通过改变这个参数发送请求爬取每一页</p><p>如果通过获取每一页的下一页链接,我发现它是这样的,通过LinkExtractor后,因为下一页的href总会与存在的某一页的href相同,貌似会覆盖掉.也就是无法通过le.extract_links(response)[-1]得到最后一项</p><p>所以我最后没有用LinkExtractor(如果哪位朋友知道如何处理麻烦告知)</p><p>直接使用response.xpath获取链接,麻烦的地方就是要将相对地址变为绝对地址</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720231310.png" alt="image-20210720231310444" style="zoom:50%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720231944.png" alt="image-20210720231944580" style="zoom:67%;" /></p><p>一个是parse ,用于爬取每一张图片的二级链接(首页链接的图片明显偏小)与下一页链接</p><p>另一个是pic_parse,用与获取图片链接</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720232401.png" alt="image-20210720232401831"></p><p>观察可知,图片链接在<picture>的src下,可以使用xpath</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720233928.png" alt="image-20210720233928786" style="zoom:67%;" /></p><p>这里直接获取链接,注意一定要是列表形式</p><p>我有定了两个字段想用来重命名图片名  可以复写ImagesPipeline使图片名字自定义.但我这里没写。类似下面这样</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210720233546.png" alt="image-20210720233546829" style="zoom: 67%;" /></p><p>最后 scrapy crawl name 运行即可</p><p>注意 我这里没有写停止条件,即会一直爬到最后</p><p>只要写一个控制就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">51</span>):            url = <span class="string">&quot;https://gelbooru.com/index.php?page=post&amp;s=list&amp;tags=all&amp;pid=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i)            <span class="keyword">yield</span> scrapy.Request(url,callback=self.parse())        <span class="comment">#控制爬取的页数</span></span><br></pre></td></tr></table></figure><p>最后 如果有问题请回复</p><p>我也是才学</p><p><a href="https://sm.ms/image/B5zTmq8ek7R1aWX" target="_blank"><img data-src="https://i.loli.net/2021/07/20/B5zTmq8ek7R1aWX.jpg" ></a></p><p>这里贴一张爬到的图片</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++与Qt开发入门_1.安装与下载</title>
      <link href="2021/07/08/C++%E4%B8%8EQt%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8_1.%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
      <url>2021/07/08/C++%E4%B8%8EQt%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8_1.%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>闲来无事,我玩玩Qt.不过我看网上说这东西有点过时,还提到了Flutter</p><p>不过我已经无所谓了</p><span id="more"></span><p>下载镜像网址</p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fdownload.qt.io%2Farchive%2Fqt%2F">http://download.qt.io/archive/qt/</a></p><p>安装可以参照<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fdownload.qt.io%2Farchive%2Fqt%2F">http://download.qt.io/archive/qt/</a></p><p>我是vs2019+qt5.14</p><p>不过我在下载时遇到几个问题,在这里提出来</p><ol><li>我用了visual studio搭配Qt,所以需要vsaddin这个插件.既可以在那个镜像网址里下载(速度较快),也可以在vs里下载(我试了试,翻墙速度快很多)</li><li>如果用vs的话需要msvc,一般情况用MinGW.UWP是windows平台,这些据情况安装</li><li>如果vscode是2018或以上,qt5.14只有msvc2017,如果没有装msvc2017的话,套件会出现警告,不过影响不大</li></ol><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210708205613.png" alt="image-20210708205605907"></p><ol><li>关于Qt for desktop,我之前记得应该有这个东西的,现在这版本没找到了。</li></ol><p>当我想打包程序时需要用到windeployqt(<a href="https://blog.csdn.net/my1324/article/details/103270782">Qt5程序打包发布（Windows版）（一）_my1324的博客-CSDN博客_qt打包发布windows</a>),照这个教程不太行</p><p>不过只要把相应编译器下包含windeployqt的文件夹bin设为环境变量path就行</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210708210707.png" alt="image-20210708210707199" style="zoom: 67%;" /></p><p>这样就方便以后打包可执行程序了.</p><p>先入门大概写到这,后面慢慢琢磨</p><p><img data-src="https://i.loli.net/2021/07/08/ClI3Pztemyaxq9H.jpg" alt="5.jpg" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程资源分享</title>
      <link href="2021/07/08/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
      <url>2021/07/08/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一些课程资料<br>当然,要看具体学校了<br><span id="more"></span></p><p>链接：<a href="https://pan.baidu.com/s/1Ex0OYxdR8Xd_RXza3UAzQA">https://pan.baidu.com/s/1Ex0OYxdR8Xd_RXza3UAzQA</a><br>提取码：0jdd </p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210708164908.jpg" style="zoom:67%;" /></p><p><img data-src="https://i.loli.net/2021/07/08/XZ36z4pGWadBr7k.jpg" alt="Konachan.com - 326372 aqua_eyes bell blue_hair blush breasts flowers ganyu__genshin_impact_ genshin_impact gloves horns leotard long_hair pantyhose piukute062 signed.jpg" style="zoom: 67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> material </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构noj_3</title>
      <link href="2021/06/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj-3/"/>
      <url>2021/06/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构noj-3"><a href="#数据结构noj-3" class="headerlink" title="数据结构noj_3"></a>数据结构noj_3</h1><p>差不多看看就行了</p><span id="more"></span><h2 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612110800.png" alt="image-20210612110800240" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 2000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Snode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tag;   <span class="comment">//标签</span></span><br><span class="line">    <span class="keyword">char</span> elem;</span><br><span class="line">    <span class="keyword">int</span> prio;  <span class="comment">//优先级</span></span><br><span class="line">&#125; Snode; <span class="comment">//字符节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MyString</span>&#123;</span></span><br><span class="line">    Snode data[max];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;MyString;  <span class="comment">//存储字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    Snode data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;TNode,BiTree,*PTNode;   <span class="comment">//二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">(MyString *S)</span><span class="comment">//去除外层多余的括号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;data[<span class="number">0</span>].elem == <span class="string">&#x27;(&#x27;</span> &amp;&amp; S-&gt;data[S-&gt;length - <span class="number">1</span>].elem == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; S-&gt;length<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S-&gt;data[i].elem == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            level++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(S-&gt;data[i].elem == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            level--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(level == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S-&gt;length<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            S-&gt;data[i<span class="number">-1</span>] = S-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        S-&gt;length = S-&gt;length - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(MyString *S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[max];</span><br><span class="line">    <span class="keyword">int</span> len,baselevel = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,c);</span><br><span class="line">    len = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S-&gt;data[i].elem = c[i];</span><br><span class="line"><span class="keyword">if</span> (c[i] == <span class="string">&#x27;+&#x27;</span> || c[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;data[i].tag = <span class="number">1</span>;</span><br><span class="line">S-&gt;data[i].prio = baselevel + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c[i] == <span class="string">&#x27;*&#x27;</span> || c[i] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;data[i].tag = <span class="number">1</span>;</span><br><span class="line">S-&gt;data[i].prio = baselevel + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;data[i].tag = <span class="number">0</span>;</span><br><span class="line">baselevel = baselevel + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;data[i].tag = <span class="number">0</span>;</span><br><span class="line">baselevel = baselevel - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">S-&gt;data[i].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;length = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMid</span><span class="params">(MyString *S)</span></span>&#123; <span class="comment">//返回level最小符号的下标</span></span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>,min = max;<span class="comment">//min 当前最小的level，pos记录下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; S-&gt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;data[i].prio &lt;= min &amp;&amp; S-&gt;data[i].tag == <span class="number">1</span>)<span class="comment">// 优先级相同时，先算前面的，所以将后面的作为中间值划分。</span></span><br><span class="line">        &#123;</span><br><span class="line">            min = S-&gt;data[i].prio;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PTNode <span class="title">CreatTree</span><span class="params">(MyString *S)</span></span>&#123;</span><br><span class="line">    MyString left,right;</span><br><span class="line">    PTNode T;</span><br><span class="line">    T = (PTNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">    <span class="keyword">int</span> midpos,len;</span><br><span class="line">    len = S-&gt;length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;data = S-&gt;data[len<span class="number">-1</span>];</span><br><span class="line">        T-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">        T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        midpos = FindMid(S);</span><br><span class="line">        left.length = midpos;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; midpos;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            left.data[i] = S-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        right.length = S-&gt;length - midpos - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; right.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            right.data[i] = S-&gt;data[i+midpos+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Clear(&amp;left);</span><br><span class="line">        Clear(&amp;right);</span><br><span class="line">        T-&gt;data = S-&gt;data[midpos];</span><br><span class="line">        T-&gt;lchild = (TNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">        T-&gt;rchild = (TNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line"></span><br><span class="line">        T-&gt;lchild = CreatTree(&amp;left);</span><br><span class="line">        T-&gt;rchild = CreatTree(&amp;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Last</span><span class="params">(BiTree* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data.elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Last(T-&gt;lchild);</span><br><span class="line">        Last(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data.elem);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyString s;</span><br><span class="line">    s.length = <span class="number">0</span>;</span><br><span class="line">    PTNode T;</span><br><span class="line"></span><br><span class="line">    InitString(&amp;s);</span><br><span class="line">    Clear(&amp;s);</span><br><span class="line">    T = CreatTree(&amp;s);</span><br><span class="line">    Last(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612110908.png" alt="image-20210612110908312" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YES 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Seqlist, *pList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adj; <span class="comment">//权值数据</span></span><br><span class="line"></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AdjMatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vertex[MAX_VERTEX_NUM];                   <span class="comment">//顶点向量</span></span><br><span class="line">    ArcNode arcs[MAX_VERTEX_NUM][MAX_VERTEX_NUM]; <span class="comment">//邻接矩阵,权值</span></span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;                           <span class="comment">//顶点数与弧数</span></span><br><span class="line">&#125; AdjMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化有向图权值</span></span><br><span class="line"><span class="function">AdjMatrix <span class="title">initial</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(AdjMatrix, <span class="keyword">int</span>, <span class="keyword">int</span>[], pList *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化路径 从v0开始到vi的最短路径序列</span></span><br><span class="line"><span class="comment">//初值为 若v0到vi有弧,则为v0,vi</span></span><br><span class="line"><span class="function">pList <span class="title">initial_path</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">member</span><span class="params">(<span class="keyword">int</span>, pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addtail</span><span class="params">(pList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// pList addtail(pList,int);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span>[], AdjMatrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjMatrix adj;</span><br><span class="line">    pList s;</span><br><span class="line">    <span class="comment">//dist存储目前已经找到的v0到vi当前最短路径长度</span></span><br><span class="line">    <span class="keyword">int</span> dist[MAX_VERTEX_NUM];</span><br><span class="line">    <span class="comment">//path,若v0到vi有路径则存储,否则为空</span></span><br><span class="line">    pList *path = (pList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pList));</span><br><span class="line">    adj = initial();</span><br><span class="line">    dijkstra(adj, <span class="number">0</span>, dist, path);</span><br><span class="line">    output(dist,adj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">AdjMatrix <span class="title">initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjMatrix adj;</span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;vexnum, &amp;arcnum);</span><br><span class="line">    adj.vexnum = vexnum;</span><br><span class="line">    adj.arcnum = arcnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; vexnum; i++)</span></span><br><span class="line">    <span class="comment">//     scanf(&quot;%d&quot;, &amp;adj.vertex[i]); //输入每个节点信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vexnum; i++)</span><br><span class="line">        adj.vertex[i] = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j, weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; vexnum; ix++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> jx = <span class="number">0</span>; jx &lt; vexnum; jx++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ix != jx)</span><br><span class="line">                adj.arcs[ix][jx].adj = INT_MAX;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                adj.arcs[ix][jx].adj = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arcnum--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;weight);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; vexnum; ix++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (adj.vertex[ix] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> jx = <span class="number">0</span>; jx &lt; vexnum; jx++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (adj.vertex[jx] == j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        adj.arcs[ix][jx].adj = weight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(AdjMatrix adj, <span class="keyword">int</span> v0, <span class="keyword">int</span> dist[], pList path[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList s;</span><br><span class="line">    <span class="comment">//初始化 dist 为长度最短的一条的最短路径</span></span><br><span class="line">    <span class="comment">//path为存在路径的序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; adj.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        path[i] = initial_path();</span><br><span class="line">        dist[i] = adj.arcs[v0][i].adj;</span><br><span class="line">        <span class="keyword">if</span> (dist[i] &lt; INT_MAX)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            addtail(path[i], adj.vertex[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s = initial_path();</span><br><span class="line">    <span class="comment">// addtail(s, adj.vertex[v0]);</span></span><br><span class="line">    <span class="keyword">int</span> k ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= adj.vexnum - <span class="number">1</span>; t++) <span class="comment">//计算v0从第二个到最后一个结点最短路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; adj.vexnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!member(adj.vertex[j], s) &amp;&amp; dist[j] &lt; min) <span class="comment">//j不在s中且存在路径</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = j;</span><br><span class="line">                min = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if(min == INT_MAX)</span></span><br><span class="line">        <span class="comment">// continue;</span></span><br><span class="line">        addtail(s, adj.vertex[k]);</span><br><span class="line">        <span class="comment">// if(dist[])</span></span><br><span class="line">        <span class="comment">// if ()</span></span><br><span class="line">        <span class="comment">//     printf(&quot;1 %d %d\n&quot;, k + 1, (dist[k] == INT_MAX) ? -1 : dist[k]);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; adj.vexnum; i++) <span class="comment">//修正dist[i]</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!member(adj.vertex[i], s) &amp;&amp; adj.arcs[k][i].adj &lt; INT_MAX &amp;&amp; (dist[k] + adj.arcs[k][i].adj &lt; dist[i]))</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                dist[i] = dist[k] + adj.arcs[k][i].adj;</span><br><span class="line">                path[i] = path[k];</span><br><span class="line">                addtail(path[i], adj.vertex[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pList <span class="title">initial_path</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList l = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Seqlist));</span><br><span class="line">    l-&gt;value = <span class="number">0</span>;</span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addtail</span><span class="params">(pList path, <span class="keyword">int</span> vertex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if(path-&gt;value == 0)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     path-&gt;value = vertex;</span></span><br><span class="line">    <span class="comment">//     path-&gt;next = NULL;</span></span><br><span class="line">    <span class="comment">//     return;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    pList c = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Seqlist));</span><br><span class="line">    c-&gt;value = vertex;</span><br><span class="line">    c-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (path-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        path = path-&gt;next;</span><br><span class="line">    path-&gt;next = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pList addtail(pList path,int vertex)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     pList c = (pList)malloc(sizeof(Seqlist));</span></span><br><span class="line"><span class="comment">//     pList l = path;</span></span><br><span class="line"><span class="comment">//     c-&gt;value = vertex;</span></span><br><span class="line"><span class="comment">//     c-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//     while(l)</span></span><br><span class="line"><span class="comment">//     l = l-&gt;next;</span></span><br><span class="line"><span class="comment">//     l = c;</span></span><br><span class="line"><span class="comment">//     return path;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">member</span><span class="params">(<span class="keyword">int</span> vertex, pList path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (path)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vertex == path-&gt;value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> YES;</span><br><span class="line">        &#125;</span><br><span class="line">        path = path-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> dist[], AdjMatrix adj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int temp;</span></span><br><span class="line">    <span class="comment">// for(int i = 1;i&lt;adj.vexnum-1;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1;j&lt;adj.vexnum - i -1;j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if(dist[j]&gt;dist[j+1])</span></span><br><span class="line">    <span class="comment">//             &#123;</span></span><br><span class="line">    <span class="comment">//                     temp = dist[j];</span></span><br><span class="line">    <span class="comment">//                     dist[j] = dist[j+1];</span></span><br><span class="line">    <span class="comment">//                     dist[j+1] = temp;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// for(int i = 1;i&lt;adj.vexnum;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;1 %d %d\n&quot;,i+1,(dist[i]==INT_MAX)?(-1):dist[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// int min = INT_MAX;</span></span><br><span class="line">    <span class="comment">// int max = INT_MAX;</span></span><br><span class="line">    <span class="comment">// int mark = 1;</span></span><br><span class="line">    <span class="comment">// for(int t = 1;t&lt;=adj.vexnum;t++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// for(int i = 1;i&lt;adj.vexnum;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     min = INT_MAX;</span></span><br><span class="line">    <span class="comment">//     if(dist[i]&lt;min&amp;&amp;dist[i]!=0&amp;&amp;dist[i]&gt;=dist[mark])</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         min = dist[i];</span></span><br><span class="line">    <span class="comment">//         mark = i;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if(min!=INT_MAX)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// printf(&quot;1 %d %d\n&quot;,adj.vertex[mark],min);</span></span><br><span class="line">    <span class="comment">// dist[mark] = 0;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">    <span class="comment">// printf(&quot;1 %d %d\n&quot;,adj.vertex[mark],-1);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt; adj.vexnum; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; adj.vexnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist[i] &lt; min &amp;&amp; dist[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                min = dist[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if (dist[i] == INT_MAX)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     flag = i;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != INT_MAX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1 %d %d\n&quot;</span>, adj.vertex[flag], min);</span><br><span class="line">            dist[flag] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1 %d %d\n&quot;</span>, adj.vertex[i<span class="number">-1</span>], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612110943.png" alt="image-20210612110943431" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">&#125;Recordtype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Recordtype hashtable[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(hashtable,<span class="keyword">int</span>[],<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">8</span>] = &#123;<span class="number">22</span>,<span class="number">41</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">30</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">67</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    hashtable ht;</span><br><span class="line">    create(ht,data,<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        s+=ht[i].flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s/<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">3</span>*k)%<span class="number">11</span>;<span class="comment">//返回位置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(hashtable ht,<span class="keyword">int</span> data[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].key = <span class="number">0</span>;</span><br><span class="line">        ht[i].flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h = hash(data[i]);</span><br><span class="line">        <span class="keyword">if</span>(ht[h].key==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ht[h].key = data[i];</span><br><span class="line">            ht[h].flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(ht[h].key!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                h++;</span><br><span class="line">                h = h%<span class="number">11</span>;</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            ht[h].key = data[i];</span><br><span class="line">            ht[h].flag = flag;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612111013.png" alt="image-20210612111013055" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//24.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;Bstnode,*Bstree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_bstree</span><span class="params">(Bstree)</span></span>;</span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree t = (Bstree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">    t = create();    </span><br><span class="line">    <span class="keyword">if</span>(is_bstree(t))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    Bstree p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;elem);</span><br><span class="line">    <span class="keyword">if</span>(elem!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       p = (Bstree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">       p-&gt;val = elem;</span><br><span class="line">        p-&gt;lchild = create();</span><br><span class="line">        p-&gt;rchild = create();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_bstree</span><span class="params">(Bstree t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;lchild&amp;&amp;t-&gt;rchild)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t-&gt;val&lt;t-&gt;lchild-&gt;val||t-&gt;val&gt;t-&gt;rchild-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> is_bstree(t-&gt;lchild)&amp;&amp;is_bstree(t-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(t-&gt;lchild)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(t-&gt;val&lt;t-&gt;lchild-&gt;val)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> is_bstree(t-&gt;lchild);</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(t-&gt;rchild)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(t-&gt;val&gt;t-&gt;rchild-&gt;val)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> is_bstree(t-&gt;rchild);</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FALSE 0</span></span><br><span class="line"><span class="comment">// #define TRUE 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef struct BinTreeNode&#123;</span></span><br><span class="line"><span class="comment">//     int data;</span></span><br><span class="line"><span class="comment">//     struct BinTreeNode *left;</span></span><br><span class="line"><span class="comment">//     struct BinTreeNode *right;</span></span><br><span class="line"><span class="comment">// &#125;BinTreeNode;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BinTreeNode *CreatBinTree()&#123;//先序递归输入</span></span><br><span class="line"><span class="comment">// int elem;</span></span><br><span class="line"><span class="comment">// BinTreeNode *p;</span></span><br><span class="line"><span class="comment">// scanf(&quot;%d&quot;,&amp;elem);</span></span><br><span class="line"><span class="comment">// if(elem==-1)&#123;</span></span><br><span class="line"><span class="comment">//         return NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// else&#123;</span></span><br><span class="line"><span class="comment">// p = (BinTreeNode*)malloc(sizeof(BinTreeNode));</span></span><br><span class="line"><span class="comment">// p-&gt;data = elem;</span></span><br><span class="line"><span class="comment">// p-&gt;left = CreatBinTree();</span></span><br><span class="line"><span class="comment">// p-&gt;right = CreatBinTree();</span></span><br><span class="line"><span class="comment">// return p;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int IsBinarySortTree(BinTreeNode *T)&#123;//判断是否为排序树，即(T-&gt;left-&gt;data)&lt;(T-&gt;data)&lt;(T-&gt;right-&gt;data)</span></span><br><span class="line"><span class="comment">//     if(!T)&#123;</span></span><br><span class="line"><span class="comment">//         return TRUE;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else if(T-&gt;left&amp;&amp;T-&gt;right)&#123;</span></span><br><span class="line"><span class="comment">//         if(T-&gt;data&lt;T-&gt;left-&gt;data||T-&gt;data&gt;T-&gt;right-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">//             return FALSE;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         else&#123;</span></span><br><span class="line"><span class="comment">//             return (IsBinarySortTree(T-&gt;left)&amp;&amp;IsBinarySortTree(T-&gt;right));</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else if(T-&gt;left)&#123;</span></span><br><span class="line"><span class="comment">//         if(T-&gt;data&gt;T-&gt;left-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">//             return FALSE;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         else&#123;</span></span><br><span class="line"><span class="comment">//             return (IsBinarySortTree(T-&gt;left));</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else if(T-&gt;right)&#123;</span></span><br><span class="line"><span class="comment">//         if(T-&gt;data&lt;T-&gt;right-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">//             return FALSE;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         else&#123;</span></span><br><span class="line"><span class="comment">//             return (IsBinarySortTree(T-&gt;right));</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return TRUE;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void Output(BinTreeNode *T)&#123;//中递归输出</span></span><br><span class="line"><span class="comment">//     if(T!=NULL)&#123;</span></span><br><span class="line"><span class="comment">//         Output(T-&gt;left);</span></span><br><span class="line"><span class="comment">//         printf(&quot;%d &quot;,T-&gt;data);</span></span><br><span class="line"><span class="comment">//         Output(T-&gt;right);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int main()&#123;</span></span><br><span class="line"><span class="comment">//     //其实我一般习惯是先给存储结构申请空间，用void函数对存储结构进行操作的，但是这个题在读取输入字符前无法确定是否需要申请空间，于是我选择在函数内申请空间</span></span><br><span class="line"><span class="comment">//     //因为我们无法将指针变量的本身传入函数，因此直接将指针传入函数可能会造成无效的处理</span></span><br><span class="line"><span class="comment">//     //因为在C语言中，所有非数组形式的数据实参均以传值形式调用（对实参做一备份并传递给调用的函数，函数不能修改作为实参实际变量的值，而只能修改传递给它的那份备份）</span></span><br><span class="line"><span class="comment">//     //此时我们通常有如下两种办法：</span></span><br><span class="line"><span class="comment">//     //1.通过return返回，例如 BT *T; T = creat(); ( BT *creat() )</span></span><br><span class="line"><span class="comment">//     //2.使用二级指针，例如 BT *T; creat(&amp;T); ( void creat(BT **T) )</span></span><br><span class="line"><span class="comment">//     BinTreeNode *T;</span></span><br><span class="line"><span class="comment">//     T = CreatBinTree();</span></span><br><span class="line"><span class="comment">//     if(IsBinarySortTree(T))&#123;</span></span><br><span class="line"><span class="comment">//         printf(&quot;yes&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else&#123;</span></span><br><span class="line"><span class="comment">//         printf(&quot;no&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612111120.png" alt="image-20210612111120529" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;Bstnode,*Bstree;</span><br><span class="line"></span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span>;<span class="comment">//创建  可以利用插入创建 也可以直接创建  </span></span><br><span class="line"><span class="comment">//这里说是先序输入，所以直接创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(Bstree,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;<span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Bstree*,<span class="keyword">int</span>)</span></span>;<span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delBst</span><span class="params">(Bstree*,<span class="keyword">int</span>)</span></span>;<span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Bstree)</span></span>;<span class="comment">//输出  中序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree t = (Bstree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">    t = create();</span><br><span class="line">    <span class="keyword">int</span> min,max;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;min,&amp;max);</span><br><span class="line">    search(t,min,max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> insert_val;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;insert_val);</span><br><span class="line">    insert(&amp;t,insert_val);</span><br><span class="line">    output(t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> del_val;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del_val);</span><br><span class="line">    delBst(&amp;t,del_val);</span><br><span class="line">    output(t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree p;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (Bstree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">        p-&gt;val = n;</span><br><span class="line">        p-&gt;lchild = create();</span><br><span class="line">        p-&gt;rchild = create();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(Bstree t,<span class="keyword">int</span> min,<span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    search(t-&gt;lchild,min,max);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;val&gt;=min&amp;&amp;t-&gt;val&lt;=max)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;val);</span><br><span class="line">   search(t-&gt;rchild,min,max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Bstree *t,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree s;</span><br><span class="line">    <span class="keyword">if</span>(!t)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">        s-&gt;val = num;</span><br><span class="line">        s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        *t = s;<span class="comment">//注意这里要改变值,所以用了指针</span></span><br><span class="line">        <span class="comment">//通过地址改变值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(num&lt;(*t)-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        insert(&amp;(*t)-&gt;lchild,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(&amp;(*t)-&gt;rchild,num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delBst</span><span class="params">(Bstree *t,<span class="keyword">int</span> val)</span><span class="comment">//删除</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">                <span class="comment">//找到节点</span></span><br><span class="line">    <span class="keyword">if</span>((*t)-&gt;val==val)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>((*t)-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;(*t)-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//叶子结点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    (*t) = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>((*t)-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//只有左子树,将左子树置为父节点的左子树</span></span><br><span class="line">                &#123;</span><br><span class="line">                    (*t) = (*t)-&gt;lchild;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                 <span class="keyword">if</span>((*t)-&gt;lchild==<span class="literal">NULL</span>)<span class="comment">//只有右子树,将右子树置为父节点的右子树</span></span><br><span class="line">                &#123;</span><br><span class="line">                    (*t) = (*t)-&gt;rchild;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//待删除节点 左右子树都有</span></span><br><span class="line">                <span class="comment">//找到中序遍历下的上一个点,右子树置为其右子树</span></span><br><span class="line">                <span class="comment">//左子树依旧为父节点左子树</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Bstree s;</span><br><span class="line">                    s = (*t)-&gt;lchild;</span><br><span class="line">                    <span class="keyword">while</span>(s-&gt;rchild)</span><br><span class="line">                    &#123;</span><br><span class="line">                        s = s-&gt;rchild;<span class="comment">//找到左子树的最右分支叶子节点，将其右节点子树置为右子树</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    s-&gt;rchild = (*t)-&gt;rchild;</span><br><span class="line">                    (*t) = (*t)-&gt;lchild;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(val&lt;(*t)-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        delBst(&amp;(*t)-&gt;lchild,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        delBst(&amp;(*t)-&gt;lchild,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Bstree t)</span><span class="comment">//输出  中序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// if(t-&gt;lchild)</span></span><br><span class="line">        output(t-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;val);</span><br><span class="line">        output(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include&lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">// int data;</span></span><br><span class="line"><span class="comment">// struct BiTNode* left;</span></span><br><span class="line"><span class="comment">// struct BiTNode* right;</span></span><br><span class="line"><span class="comment">// &#125;BiTNode, * BiTree;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BiTree CreateBiTree();   //创建二叉树</span></span><br><span class="line"><span class="comment">// void SearchAndPrint(BiTree T, int a, int b);//要求1：输出大于a、小于b的关键字</span></span><br><span class="line"><span class="comment">// void InsertBi(BiTree* T, int insert);//插入一个关键字并输出</span></span><br><span class="line"><span class="comment">// void DeleteBi(BiTree* T, int dele);  //删除结点</span></span><br><span class="line"><span class="comment">// void MidPrint(BiTree T); //中序输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int main()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// BiTree T;</span></span><br><span class="line"><span class="comment">// T = CreateBiTree();</span></span><br><span class="line"><span class="comment">// int a, b, insert, dele;</span></span><br><span class="line"><span class="comment">// scanf(&quot;%d%d%d%d&quot;, &amp;a, &amp;b, &amp;insert, &amp;dele);</span></span><br><span class="line"><span class="comment">// SearchAndPrint(T, a, b);//要求1</span></span><br><span class="line"><span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;T, insert);//插入</span></span><br><span class="line"><span class="comment">// MidPrint(T);//中序输出</span></span><br><span class="line"><span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">// DeleteBi(&amp;T, insert);//删除insert</span></span><br><span class="line"><span class="comment">// DeleteBi(&amp;T, dele);//删除dele</span></span><br><span class="line"><span class="comment">// MidPrint(T);//中序输出</span></span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BiTree CreateBiTree()</span></span><br><span class="line"><span class="comment">// &#123;   //创建二叉树</span></span><br><span class="line"><span class="comment">// int data;</span></span><br><span class="line"><span class="comment">// scanf(&quot;%d&quot;, &amp;data);</span></span><br><span class="line"><span class="comment">// if (data == -1) &#123;</span></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// BiTree tmp;</span></span><br><span class="line"><span class="comment">// tmp = (BiTree)malloc(sizeof(BiTNode));</span></span><br><span class="line"><span class="comment">// if (!tmp) &#123;</span></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// tmp-&gt;data = data;</span></span><br><span class="line"><span class="comment">// tmp-&gt;left = CreateBiTree();</span></span><br><span class="line"><span class="comment">// tmp-&gt;right = CreateBiTree();</span></span><br><span class="line"><span class="comment">// return tmp;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void SearchAndPrint(BiTree T, int a, int b)</span></span><br><span class="line"><span class="comment">// &#123;   //要求1：输出大于a、小于b的关键字</span></span><br><span class="line"><span class="comment">// //用中序输出</span></span><br><span class="line"><span class="comment">// if (!T) &#123;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// SearchAndPrint(T-&gt;left, a, b);</span></span><br><span class="line"><span class="comment">// if (T-&gt;data &gt; a &amp;&amp; T-&gt;data &lt; b) &#123;</span></span><br><span class="line"><span class="comment">// printf(&quot;%d &quot;, T-&gt;data);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// SearchAndPrint(T-&gt;right, a, b);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void InsertBi(BiTree* T, int insert)</span></span><br><span class="line"><span class="comment">// &#123;   //插入结点</span></span><br><span class="line"><span class="comment">// if (!(*T)) &#123;</span></span><br><span class="line"><span class="comment">// BiTree tmp;</span></span><br><span class="line"><span class="comment">// tmp = (BiTree)malloc(sizeof(BiTNode));</span></span><br><span class="line"><span class="comment">// tmp-&gt;data = insert;</span></span><br><span class="line"><span class="comment">// tmp-&gt;left = NULL;</span></span><br><span class="line"><span class="comment">// tmp-&gt;right = NULL;</span></span><br><span class="line"><span class="comment">// *T = tmp;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if (insert &lt; (*T)-&gt;data) &#123;</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;(*T)-&gt;left, insert);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if (insert &gt; (*T)-&gt;data) &#123;</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;(*T)-&gt;right, insert);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void DeleteBi(BiTree* T, int dele)</span></span><br><span class="line"><span class="comment">// &#123;   //删除结点</span></span><br><span class="line"><span class="comment">// if (!(*T)) &#123;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// DeleteBi(&amp;(*T)-&gt;left, dele);</span></span><br><span class="line"><span class="comment">// if ((*T)-&gt;data == dele) &#123;</span></span><br><span class="line"><span class="comment">// if (!(*T)-&gt;left) &#123;</span></span><br><span class="line"><span class="comment">// //左子树为空</span></span><br><span class="line"><span class="comment">// (*T) = (*T)-&gt;right;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// else &#123;//左子树非空</span></span><br><span class="line"><span class="comment">// BiTree tmp = (*T)-&gt;left;</span></span><br><span class="line"><span class="comment">// while (tmp-&gt;right) &#123;</span></span><br><span class="line"><span class="comment">// tmp = tmp-&gt;right;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// tmp-&gt;right = (*T)-&gt;right;</span></span><br><span class="line"><span class="comment">// (*T) = (*T)-&gt;left;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// DeleteBi(&amp;(*T)-&gt;right, dele);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void MidPrint(BiTree T)</span></span><br><span class="line"><span class="comment">// &#123;   //中序输出</span></span><br><span class="line"><span class="comment">// if (!T) &#123;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// MidPrint(T-&gt;left);</span></span><br><span class="line"><span class="comment">// printf(&quot;%d &quot;, T-&gt;data);</span></span><br><span class="line"><span class="comment">// MidPrint(T-&gt;right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210612111201.png" alt="image-20210612111201004" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的合并</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">&#125;Bstnode,*Bstree;</span><br><span class="line"></span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine_tree</span><span class="params">(Bstree*,Bstree*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Bstree*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Bstree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree t1,t2;</span><br><span class="line">    t1 = create();</span><br><span class="line">    t2 = create();</span><br><span class="line">    combine_tree(&amp;t1,&amp;t2);</span><br><span class="line">    output(t1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Bstree <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree p;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (Bstree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">        p-&gt;key = n;</span><br><span class="line">        p-&gt;lchild = create();</span><br><span class="line">        p-&gt;rchild = create();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历T2，将T2各个元素插入T1中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine_tree</span><span class="params">(Bstree* m,Bstree* n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*n)</span><br><span class="line">    &#123;</span><br><span class="line">        combine_tree(&amp;(*m),&amp;(*n)-&gt;lchild);</span><br><span class="line">        insert(&amp;(*m),(*n)-&gt;key);</span><br><span class="line">        combine_tree(&amp;(*m),&amp;(*n)-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Bstree *t,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bstree s;</span><br><span class="line">    <span class="keyword">if</span>(!t)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bstnode));</span><br><span class="line">        s-&gt;key = num;</span><br><span class="line">        s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        *t = s;<span class="comment">//注意这里要改变值,所以用了指针</span></span><br><span class="line">        <span class="comment">//通过地址改变值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(num&lt;(*t)-&gt;key)</span><br><span class="line">    &#123;</span><br><span class="line">        insert(&amp;(*t)-&gt;lchild,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(&amp;(*t)-&gt;rchild,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Bstree t)</span><span class="comment">//输出  中序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// if(t-&gt;lchild)</span></span><br><span class="line">        output(t-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;key);</span><br><span class="line">        output(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include&lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">// int data;</span></span><br><span class="line"><span class="comment">// struct BiTNode* left;</span></span><br><span class="line"><span class="comment">// struct BiTNode* right;</span></span><br><span class="line"><span class="comment">// &#125;BiTNode, * BiTree;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BiTree CreateBiTree();   //创建二叉树</span></span><br><span class="line"><span class="comment">// void InsertBi(BiTree* T, int insert);//插入节点</span></span><br><span class="line"><span class="comment">// void CombineBi(BiTree T1, BiTree T2);//合并二叉树T1，T2</span></span><br><span class="line"><span class="comment">// void MidPrint(BiTree T); //中序输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int main()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// BiTree T1, T2;</span></span><br><span class="line"><span class="comment">// T1 = CreateBiTree();</span></span><br><span class="line"><span class="comment">// T2 = CreateBiTree();</span></span><br><span class="line"><span class="comment">// CombineBi(T1, T2);</span></span><br><span class="line"><span class="comment">// MidPrint(T1);</span></span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BiTree CreateBiTree()</span></span><br><span class="line"><span class="comment">// &#123;   //创建二叉树</span></span><br><span class="line"><span class="comment">// int data;</span></span><br><span class="line"><span class="comment">// scanf(&quot;%d&quot;, &amp;data);</span></span><br><span class="line"><span class="comment">// if (data == -1) &#123;</span></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// BiTree tmp;</span></span><br><span class="line"><span class="comment">// tmp = (BiTree)malloc(sizeof(BiTNode));</span></span><br><span class="line"><span class="comment">// if (!tmp) &#123;</span></span><br><span class="line"><span class="comment">// return NULL;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// tmp-&gt;data = data;</span></span><br><span class="line"><span class="comment">// tmp-&gt;left = CreateBiTree();</span></span><br><span class="line"><span class="comment">// tmp-&gt;right = CreateBiTree();</span></span><br><span class="line"><span class="comment">// return tmp;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void InsertBi(BiTree* T, int insert)</span></span><br><span class="line"><span class="comment">// &#123;   //插入结点</span></span><br><span class="line"><span class="comment">// if (!(*T)) &#123;</span></span><br><span class="line"><span class="comment">// BiTree tmp;</span></span><br><span class="line"><span class="comment">// tmp = (BiTree)malloc(sizeof(BiTNode));</span></span><br><span class="line"><span class="comment">// tmp-&gt;data = insert;</span></span><br><span class="line"><span class="comment">// tmp-&gt;left = NULL;</span></span><br><span class="line"><span class="comment">// tmp-&gt;right = NULL;</span></span><br><span class="line"><span class="comment">// *T = tmp;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if (insert &lt; (*T)-&gt;data) &#123;</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;(*T)-&gt;left, insert);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if (insert &gt; (*T)-&gt;data) &#123;</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;(*T)-&gt;right, insert);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void CombineBi(BiTree T1, BiTree T2)</span></span><br><span class="line"><span class="comment">// &#123;   //合并二叉树T1，T2</span></span><br><span class="line"><span class="comment">// if (!T2) &#123;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// CombineBi(T1, T2-&gt;left);</span></span><br><span class="line"><span class="comment">// InsertBi(&amp;T1, T2-&gt;data);</span></span><br><span class="line"><span class="comment">// CombineBi(T1, T2-&gt;right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void MidPrint(BiTree T)</span></span><br><span class="line"><span class="comment">// &#123;   //中序输出</span></span><br><span class="line"><span class="comment">// if (!T) &#123;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// MidPrint(T-&gt;left);</span></span><br><span class="line"><span class="comment">// printf(&quot;%d &quot;, T-&gt;data);</span></span><br><span class="line"><span class="comment">// MidPrint(T-&gt;right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
            <tag> noj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构试验</title>
      <link href="2021/05/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C/"/>
      <url>2021/05/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构实验"><a href="#数据结构实验" class="headerlink" title="数据结构实验"></a>数据结构实验</h1><p>数据实验写了</p><p>不过也忘得差不多了</p><p>人生艰难啊..</p><span id="more"></span><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155126.png" alt="image-20210530155126345" style="zoom: 67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**合并有序数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkedList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkedList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkedList, *pLinkedList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkedList</span><span class="params">(pLinkedList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span><span class="params">(pLinkedList, pLinkedList)</span></span>;</span><br><span class="line"><span class="function">pLinkedList <span class="title">Initial</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    pLinkedList pa, pb;</span><br><span class="line">    pa = Initial();</span><br><span class="line">    pb = Initial();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the size of first LinkedList:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    CreateLinkedList(pa, size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the size of second LinkedList:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    CreateLinkedList(pb, size);</span><br><span class="line">    MergeList(pa, pb);</span><br><span class="line">    pa = pa-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the result is:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (pa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pa-&gt;data);</span><br><span class="line">        pa = pa-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pa);</span><br><span class="line">    <span class="built_in">free</span>(pb);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pLinkedList <span class="title">Initial</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pLinkedList p = (pLinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkedList</span><span class="params">(pLinkedList p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pLinkedList s, r;</span><br><span class="line">    r = p;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the %d numbers:\n&quot;</span>,size);</span><br><span class="line">    <span class="keyword">while</span> (size--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        s = (pLinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">        s-&gt;data = num;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span><span class="params">(pLinkedList p, pLinkedList q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pLinkedList s, r;</span><br><span class="line">    s = p;<span class="comment">//s指针是作为整个归并的核心，它使得元素从小到大排序</span></span><br><span class="line">    r = s-&gt;next;<span class="comment">//q与r指针分别指向两个链表，随着排序的进行，后移</span></span><br><span class="line">    q = q-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (r &amp;&amp; q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/**当一个链表中数据大于另一个链表</span></span><br><span class="line"><span class="comment">        **则指针s指向小元素值的节点，并使其后移，</span></span><br><span class="line"><span class="comment">        **然后指向较小元素值的指针后移*/</span></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;data &gt; q-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;next = q;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**当一个链表中数据小于另一个链表</span></span><br><span class="line"><span class="comment">        **道理类似，s指针指向小元素节点，并后移</span></span><br><span class="line"><span class="comment">        **然后指向较小元素的指针后移</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            s-&gt;next = r;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*链表p元素已取完，表明q还有未取元素</span></span><br><span class="line"><span class="comment">    **使s指针指向q</span></span><br><span class="line"><span class="comment">    */</span><span class="keyword">if</span> (!r)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果链表q元素取完,同理，使s指针指向还未取完元素的指针</span></span><br><span class="line">    <span class="keyword">if</span> (!q)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;next = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155212.png" alt="image-20210530155212444" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DoubleNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DoubleNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DoubleNode</span> *<span class="title">pre</span>;</span></span><br><span class="line">&#125; DoubleNode, *pDoubleNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DLinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    pDoubleNode head;</span><br><span class="line">    pDoubleNode tail;</span><br><span class="line">&#125; DLinkList, *pDLinkList;</span><br><span class="line"><span class="function">pDLinkList <span class="title">initial_node</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Multi</span><span class="params">(pDLinkList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(pDLinkList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(pDLinkList, pDLinkList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">terms</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> prec;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;prec);</span><br><span class="line">    pDLinkList num ;</span><br><span class="line">    pDLinkList sum ;</span><br><span class="line">    num = initial_node();</span><br><span class="line">    sum = initial_node();</span><br><span class="line">    num-&gt;head-&gt;next-&gt;data = <span class="number">2</span>; <span class="comment">//根据计算公式，第一项是2</span></span><br><span class="line">    sum-&gt;head-&gt;next-&gt;data = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> t = terms(prec);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Multi(num, i);</span><br><span class="line">        Div(num, i);</span><br><span class="line">        Add(num, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    pDoubleNode temp = sum-&gt;head-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (prec--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Multi</span><span class="params">(pDLinkList L, <span class="keyword">int</span> i)</span> <span class="comment">//乘法从尾部开始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pDoubleNode tail = L-&gt;tail;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L-&gt;head != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = tail-&gt;data * i + ret;</span><br><span class="line">        tail-&gt;data = temp % <span class="number">10</span>;</span><br><span class="line">        ret = temp / <span class="number">10</span>;</span><br><span class="line">        tail = tail-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(pDLinkList L, <span class="keyword">int</span> i)</span> <span class="comment">//除法从头部开始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pDoubleNode head = L-&gt;head-&gt;next;<span class="comment">//指向第一个有值的节点</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != L-&gt;tail)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = head-&gt;data + ret * <span class="number">10</span>;</span><br><span class="line">        head-&gt;data = temp / (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        ret = temp % (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(pDLinkList num, pDLinkList sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    pDoubleNode p = num-&gt;tail;</span><br><span class="line">    pDoubleNode q = sum-&gt;tail;</span><br><span class="line">    <span class="keyword">while</span> (p != num-&gt;head)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = p-&gt;data + q-&gt;data + ret;</span><br><span class="line">        q-&gt;data = temp % <span class="number">10</span>;</span><br><span class="line">        ret = temp / <span class="number">10</span>;</span><br><span class="line">        p = p-&gt;pre;</span><br><span class="line">        q = q-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">terms</span><span class="params">(<span class="keyword">double</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; sum &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = (<span class="number">2</span> * i + <span class="number">1</span>) / i;</span><br><span class="line">        temp = <span class="built_in">log10</span>(temp);</span><br><span class="line">        sum += temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pDLinkList <span class="title">initial_node</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">    pDLinkList L = (pDLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">    pDoubleNode s,r;</span><br><span class="line">    L-&gt;head = (pDoubleNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DoubleNode));</span><br><span class="line">    r = L-&gt;head;</span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (pDoubleNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DoubleNode));</span><br><span class="line">        s-&gt;data = <span class="number">0</span>;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        s-&gt;pre = r;</span><br><span class="line">        L-&gt;head-&gt;pre = s;</span><br><span class="line">        s-&gt;next = L-&gt;head;</span><br><span class="line">        r = s; <span class="comment">//r为尾指针    </span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;tail = r;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155312.png" alt="image-20210530155312387" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速转置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Triple</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">&#125; Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> row, col, len;</span><br><span class="line">&#125; TSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(TSMatrix *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transpose</span><span class="params">(TSMatrix *, TSMatrix *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(TSMatrix *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    TSMatrix *M = (TSMatrix *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSMatrix));</span><br><span class="line">    TSMatrix *N = (TSMatrix *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSMatrix));</span><br><span class="line">    initial(M);</span><br><span class="line">    Transpose(M, N);</span><br><span class="line">    print(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(TSMatrix *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result-&gt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, result-&gt;data[i].i, result-&gt;data[i].j, result-&gt;data[i].elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transpose</span><span class="params">(TSMatrix *M, TSMatrix *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    N-&gt;row = M-&gt;col;</span><br><span class="line">    N-&gt;col = M-&gt;row;</span><br><span class="line">    N-&gt;len = M-&gt;len;</span><br><span class="line">    <span class="keyword">if</span> (N-&gt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num[maxsize], cpos[maxsize];</span><br><span class="line">        <span class="comment">//num[col]表示col列非零元个数,</span></span><br><span class="line">        <span class="comment">//cpos[col]表示col列第一个非零元在转置后三元组表位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;M-&gt;col; i++)</span><br><span class="line">            num[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M-&gt;len; i++)</span><br><span class="line">            num[M-&gt;data[i].j]++;</span><br><span class="line"></span><br><span class="line">        cpos[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; M-&gt;col; i++)</span><br><span class="line">            cpos[i] = cpos[i - <span class="number">1</span>] + num[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> col, q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M-&gt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            col = M-&gt;data[i].j; <span class="comment">//M的三元组表第i个元素对应的列,即为转置后的行</span></span><br><span class="line">            q = cpos[col];      <span class="comment">//M第col列第一个非零元在转置后三元组表位置</span></span><br><span class="line">            N-&gt;data[q].i = M-&gt;data[i].j;</span><br><span class="line">            N-&gt;data[q].j = M-&gt;data[i].i;</span><br><span class="line">            N-&gt;data[q].elem = M-&gt;data[i].elem;</span><br><span class="line">            ++cpos[col]; <span class="comment">//指向下个非零元</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(TSMatrix *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> r, c, element;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    M-&gt;row = m;</span><br><span class="line">    M-&gt;col = n;</span><br><span class="line">    M-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;r,&amp;c,&amp;element)&amp;&amp;(r!=<span class="number">0</span>||c!=<span class="number">0</span>||element!=<span class="number">0</span>))</span><br><span class="line">    &#123;    </span><br><span class="line">        M-&gt;data[M-&gt;len].i = r;</span><br><span class="line">        M-&gt;data[M-&gt;len].j = c;</span><br><span class="line">        M-&gt;data[M-&gt;len].elem = element;</span><br><span class="line">        M-&gt;len++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155806.png" alt="image-20210530155806685" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tripe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> col;</span><br><span class="line">&#125; Tripe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSmatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    Tripe Element[maxsize];</span><br><span class="line">&#125; TSmatrix, *pTsmatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix, pTsmatrix, pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pTsmatrix a = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix b = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix c = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    <span class="keyword">int</span> r,col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;r,&amp;col);</span><br><span class="line">    a-&gt;row = b-&gt;row = c-&gt;row = r;</span><br><span class="line">    a-&gt;col = b-&gt;col = c-&gt;col = col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a-&gt;num, &amp;b-&gt;num);</span><br><span class="line">    initial(a);</span><br><span class="line">    initial(b);</span><br><span class="line">    add(a, b, c);</span><br><span class="line">    print(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= result-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, result-&gt;Element[i].row, result-&gt;Element[i].col, result-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix a, pTsmatrix b, pTsmatrix c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= a-&gt;num) &amp;&amp; (j &lt;= b-&gt;num))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((a-&gt;Element[i].row == b-&gt;Element[j].row) &amp;&amp; (a-&gt;Element[i].col == b-&gt;Element[j].col))</span><br><span class="line">        &#123;<span class="comment">//两个非零元行相同列相同，则进行相加并判断值是否为0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((a-&gt;Element[i].data + b-&gt;Element[j].data) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值为0则不管，i,j递增</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                c-&gt;Element[k].data = a-&gt;Element[i].data + b-&gt;Element[j].data;</span><br><span class="line">                c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">                c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值不为0,则赋值并递增i,j,k</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((a-&gt;Element[i].row &lt; b-&gt;Element[j].row) || (a-&gt;Element[i].row == b-&gt;Element[j].row &amp;&amp; (a-&gt;Element[i].col &lt; b-&gt;Element[j].col)))</span><br><span class="line">        &#123;<span class="comment">//若a的非零元行数小于b的非零元,意味着c = a+0 则直接将a的值赋给c</span></span><br><span class="line">        <span class="comment">//后面同理，因为a元素对应在b矩阵处值为0</span></span><br><span class="line">        <span class="comment">//i,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">            c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">            c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//剩下的情况就是b矩阵的值的位置对应在a矩阵中的值为0</span></span><br><span class="line">        <span class="comment">//即 c = 0+b</span></span><br><span class="line">        <span class="comment">//j,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">            c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">            c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= a-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//若a矩阵中还有未处理完的非零元，则直接加上</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">        c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">        c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= b-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//道理同上,b矩阵的值直接赋给c</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">        c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">        c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    c-&gt;num = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;p-&gt;Element[i].row, &amp;p-&gt;Element[i].col, &amp;p-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155750.png" alt="image-20210530155750904"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">down</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125; OLNode, *OLlink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    OLlink *rhead, *chead; <span class="comment">//指向行或列第一个非零元(指向结构体的指针),可以用数组rhead[row]表示第row行的数据</span></span><br><span class="line">    <span class="keyword">int</span> m, n, len;         <span class="comment">//行列数,非零元个数</span></span><br><span class="line">&#125; CrossList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *, CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CrossList *M = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    CrossList *N = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;m, &amp;M-&gt;n);</span><br><span class="line">    N-&gt;m = M-&gt;m;</span><br><span class="line">    N-&gt;n = M-&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;len, &amp;N-&gt;len);</span><br><span class="line">    initial(M);</span><br><span class="line">    initial(N);</span><br><span class="line">    plus(M, N);</span><br><span class="line">    print(M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink pa = M-&gt;rhead[row];</span><br><span class="line">        <span class="keyword">while</span> (pa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, pa-&gt;i, pa-&gt;j, pa-&gt;e);</span><br><span class="line">            pa = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *M, CrossList *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink pa, pb;</span><br><span class="line">    OLlink pre; <span class="comment">//指向前面一个节点,方便插入</span></span><br><span class="line">    OLlink *hl = (OLlink *)<span class="built_in">malloc</span>((M-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M-&gt;n; j++)</span><br><span class="line">        hl[j] = M-&gt;chead[j]; <span class="comment">//hl[]表示的是每列非零元的pre指向元素，与pre类似</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++) <span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        pa = M-&gt;rhead[row];</span><br><span class="line">        pb = N-&gt;rhead[row];</span><br><span class="line">        pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (pb) <span class="comment">//当pb有非零元素时进行处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa == <span class="literal">NULL</span> || pa-&gt;j &gt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                Insert(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa != <span class="literal">NULL</span> &amp;&amp; pa-&gt;j &lt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                pre = pa;</span><br><span class="line">                pa = pa-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa-&gt;j == pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                add(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> data = pa-&gt;e + pb-&gt;e;</span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;e = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OLlink temp = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">            M-&gt;rhead[pa-&gt;i] = pa-&gt;right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            (*pre)-&gt;right = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = pa;</span><br><span class="line">        pa = pa-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (M-&gt;chead[temp-&gt;j] == temp)</span><br><span class="line">            M-&gt;chead[temp-&gt;j] = hl[temp-&gt;j] = temp-&gt;down;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hl[temp-&gt;j]-&gt;down = temp-&gt;down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span> <span class="comment">//插入有两种情况，一种是pa该行无非零元素，另一种pb所在列小于pa所在列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink p = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    p-&gt;i = pb-&gt;i;</span><br><span class="line">    p-&gt;j = pb-&gt;j;</span><br><span class="line">    p-&gt;e = pb-&gt;e;</span><br><span class="line">    p-&gt;down = p-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        M-&gt;rhead[p-&gt;i] = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*pre)-&gt;right = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;right = pa;</span><br><span class="line">    </span><br><span class="line">    (*pre) = p;</span><br><span class="line">   <span class="comment">// pa = (*pre)-&gt;right;//这一句可以不要</span></span><br><span class="line">    <span class="keyword">if</span> (!M-&gt;chead[p-&gt;j] || M-&gt;chead[p-&gt;j]-&gt;i &gt; p-&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = M-&gt;chead[p-&gt;j];</span><br><span class="line">        M-&gt;chead[p-&gt;j] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = hl[p-&gt;j]-&gt;down;</span><br><span class="line">        hl[p-&gt;j]-&gt;down = p;</span><br><span class="line">    &#125;</span><br><span class="line">    hl[p-&gt;j] = p;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *Clist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    Clist-&gt;rhead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    Clist-&gt;chead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    <span class="comment">// if(rhead||chead)</span></span><br><span class="line">    <span class="comment">// exit(1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;m; i++)</span><br><span class="line">        Clist-&gt;rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;n; i++)</span><br><span class="line">        Clist-&gt;chead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    OLlink s = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; Clist-&gt;len; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink cur = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        cur-&gt;down = <span class="literal">NULL</span>;</span><br><span class="line">        cur-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// if(cur==NULL)</span></span><br><span class="line">        <span class="comment">// exit(1);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;e);</span><br><span class="line">        cur-&gt;i = i;</span><br><span class="line">        cur-&gt;j = j;</span><br><span class="line">        cur-&gt;e = e;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;rhead[i] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Clist-&gt;rhead[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;rhead[i];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;right != <span class="literal">NULL</span> &amp;&amp; s-&gt;right-&gt;j &lt; j)</span><br><span class="line">                s = s-&gt;right;</span><br><span class="line">            cur-&gt;right = s-&gt;right;</span><br><span class="line">            s-&gt;right = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;chead[j] == <span class="literal">NULL</span>)</span><br><span class="line">            Clist-&gt;chead[j] = cur;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;chead[j];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;down != <span class="literal">NULL</span> &amp;&amp; s-&gt;down-&gt;i &lt; i)</span><br><span class="line">                s = s-&gt;down;</span><br><span class="line">            cur-&gt;down = s-&gt;down;</span><br><span class="line">            s-&gt;down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155731.png" alt="image-20210530155731455" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1000 <span class="comment">//非零元个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXRs 500    <span class="comment">//矩阵最大行数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Triple</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">&#125; Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RLSMatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> rpos[MAXRs]; <span class="comment">//第row行第一个非零元在结果三元组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;  <span class="comment">//分别表示行数,列数非零元个数</span></span><br><span class="line">&#125; RLSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Multi</span><span class="params">(RLSMatrix *, RLSMatrix *, RLSMatrix *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(RLSMatrix *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(RLSMatrix *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RLSMatrix *M = (RLSMatrix *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RLSMatrix));</span><br><span class="line">    RLSMatrix *N = (RLSMatrix *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RLSMatrix));</span><br><span class="line">    RLSMatrix *result = (RLSMatrix *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RLSMatrix));</span><br><span class="line">    initial(M);</span><br><span class="line">    initial(N);</span><br><span class="line">    Multi(M, N, result);</span><br><span class="line">    print(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(RLSMatrix* result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=result-&gt;tu;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,result-&gt;data[i].row,result-&gt;data[i].col,result-&gt;data[i].elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Multi</span><span class="params">(RLSMatrix *M, RLSMatrix *N, RLSMatrix *Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arow, brow; <span class="comment">//M,N矩阵的row</span></span><br><span class="line">    <span class="keyword">int</span> ccol;       <span class="comment">//Q结果矩阵的col</span></span><br><span class="line">    <span class="keyword">int</span> ctemp[MAXSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// if(M-&gt;mu!=N-&gt;nu)</span></span><br><span class="line">    <span class="comment">// exit(1);</span></span><br><span class="line">    Q-&gt;mu = M-&gt;mu;</span><br><span class="line">    Q-&gt;nu = N-&gt;nu;</span><br><span class="line">    Q-&gt;tu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (M-&gt;tu &amp;&amp; N-&gt;tu)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (arow = <span class="number">1</span>; arow &lt;= M-&gt;mu; arow++)<span class="comment">//对于M的每一行,根据行数确定三元组表取值范围(p)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(ctemp,<span class="number">0</span>,(N-&gt;nu+<span class="number">1</span>)*(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)));</span><br><span class="line">            Q-&gt;rpos[arow] = Q-&gt;tu+<span class="number">1</span>;<span class="comment">//每一行第一个非零元在三元组的位置是此时的非零元个数+1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = M-&gt;rpos[arow]; p &lt; M-&gt;rpos[arow + <span class="number">1</span>]; p++)<span class="comment">//对于每一行的各个元素,取其列</span></span><br><span class="line">            &#123;</span><br><span class="line">                brow = M-&gt;data[p].col;<span class="comment">//列为N所对应的行数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> q = N-&gt;rpos[brow]; q &lt; N-&gt;rpos[brow + <span class="number">1</span>]; q++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ccol = N-&gt;data[q].col;<span class="comment">//取得ccol为结果矩阵元素对应的列数</span></span><br><span class="line">                    ctemp[ccol] += M-&gt;data[p].elem * N-&gt;data[q].elem;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (ccol = <span class="number">1</span>; ccol &lt;= Q-&gt;nu; ++ccol)<span class="comment">//对于每一列</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctemp[ccol])</span><br><span class="line">                &#123;</span><br><span class="line">                    Q-&gt;tu++;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].row = arow;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].col = ccol;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].elem = ctemp[ccol];</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(RLSMatrix *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;mu, &amp;M-&gt;nu);</span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;e) &amp;&amp; (i != <span class="number">0</span> || j != <span class="number">0</span> || e != <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        M-&gt;data[count].row = i;</span><br><span class="line">        M-&gt;data[count].col = j;</span><br><span class="line">        M-&gt;data[count].elem = e;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    M-&gt;tu = count<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> num[MAXSIZE] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=M-&gt;tu;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[M-&gt;data[i].row]++;</span><br><span class="line">    &#125;</span><br><span class="line">    M-&gt;rpos[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=M-&gt;mu;i++)</span><br><span class="line">    M-&gt;rpos[i] = M-&gt;rpos[i<span class="number">-1</span>]+num[i<span class="number">-1</span>];</span><br><span class="line">    M-&gt;rpos[M-&gt;mu+<span class="number">1</span>] = M-&gt;tu+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155715.png" alt="image-20210530155715476" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M (2 * N - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *HuffmanCode[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">int</span> parent; <span class="comment">//父节点在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Lchild; <span class="comment">//左孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Rchild; <span class="comment">//右孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">char</span> c;     <span class="comment">//字符</span></span><br><span class="line">&#125; HTNode, HuffmanTree[M + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree, <span class="keyword">int</span>)</span></span>;       <span class="comment">//构造哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree, <span class="keyword">int</span>, <span class="keyword">int</span> *, <span class="keyword">int</span> *)</span></span>; <span class="comment">//用于寻找最小的两个值</span></span><br><span class="line"><span class="comment">//hc[N+1]为相应节点的编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>)</span></span>; <span class="comment">//根据哈夫曼树得到相应编码</span></span><br><span class="line"><span class="comment">//解码得到明文</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//编码得到二进制串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//根据HuffmanTree得到HuffmanCode</span></span><br><span class="line"><span class="comment">//HuffmanCode储存的是每个字符对应的编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> weight_[N + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;weight_[i]); <span class="comment">//输入n个叶子节点的权值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight = weight_[i];</span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ht[i].weight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    getchar();</span><br><span class="line">    HuffmanTree ht;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ht[i].c); <span class="comment">//输入n个叶子节点的字符</span></span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    CrtHuffmanTree(ht, size);</span><br><span class="line">    HuffmanCode hc;</span><br><span class="line">    CrtHuffmanCode(ht, hc, size);</span><br><span class="line">    <span class="comment">//  test(ht,size);</span></span><br><span class="line">    <span class="keyword">char</span> encoding_text[<span class="number">100</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    encode(ht, hc, size, encoding_text);</span><br><span class="line">    decode(ht, hc, size, encoding_text);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int w[N + 1];</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">//     scanf(&quot;%d&quot;, &amp;w[i]); //输入n个叶子节点的权值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ht[i].weight); <span class="comment">//输入n个叶子节点的权值</span></span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight = <span class="number">0</span>;</span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s1, s2; <span class="comment">//s1,s2为两个值最小的无父结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        select(ht, i - <span class="number">1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[s1].parent = ht[s2].parent = i;</span><br><span class="line">        ht[i].Lchild = s1;</span><br><span class="line">        ht[i].Rchild = s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> *s1, <span class="keyword">int</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_1_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min_2_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[i].weight &lt; min_1_w)</span><br><span class="line">            &#123;</span><br><span class="line">                min_1_w = ht[i].weight;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//找到第一个最小值</span></span><br><span class="line">    *s1 = min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[j].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != *s1 &amp;&amp; ht[j].weight &lt; min_2_w) <span class="comment">//倒数第二小的值大于等于最小的值,小于其余值</span></span><br><span class="line">            &#123;</span><br><span class="line">                min_2_w = ht[j].weight;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//最小的第二个值</span></span><br><span class="line">    *s2 = min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span> <span class="comment">//建立好哈夫曼树后,得到哈夫曼编码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *cd;                              <span class="comment">//cd是指向字符的指针,用来存储字符串</span></span><br><span class="line">    cd = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//开辟n个单元,因为共有n个结点,最多只有n-1个编码位</span></span><br><span class="line">    cd[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;                      <span class="comment">//因为存储字符串,最后一位为空字符</span></span><br><span class="line">    <span class="keyword">int</span> start, c;                          <span class="comment">//start为cd数组开始存储的起点,c用来标记每次往上找到的双亲的位置</span></span><br><span class="line">    <span class="keyword">int</span> p;                                 <span class="comment">//p为双亲的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        start = n - <span class="number">1</span>;    <span class="comment">//这是cd数组的最后一位,是&#x27;/0&#x27;，因为储存字符串</span></span><br><span class="line">        c = i;            <span class="comment">//c为第一个结点,得到第一个结点的编码</span></span><br><span class="line">        p = ht[i].parent; <span class="comment">//寻找结点父亲</span></span><br><span class="line">        <span class="keyword">while</span> (p)         <span class="comment">//若有父亲结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            --start;               <span class="comment">//每次递减,从后向前得到编码</span></span><br><span class="line">            <span class="keyword">if</span> (ht[p].Lchild == c) <span class="comment">//若子节点为左孩子,则为0</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = p;</span><br><span class="line">            p = ht[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        while循环可改为</span></span><br><span class="line"><span class="comment">        for(c=i,p=ht[i].parent;p!=0;c=p,p=ht[p].parent)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">             --start;</span></span><br><span class="line"><span class="comment">            if (ht[p].Lchild == c)</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;1&#x27;;</span></span><br><span class="line"><span class="comment">            c = p;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        hc[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//为hc[i]分配空间,空间大小为编码的位数+1,最后一位为&#x27;\0&#x27;</span></span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i], &amp;cd[start]);                          <span class="comment">//注意这里取地址符不可以去掉,因为本身cd是一个数组(指针),但复制时应该从start开始,所以取数组start位的元素地址</span></span><br><span class="line">                                                            <span class="comment">//   printf(&quot;%d:%s\n&quot;,i,hc[i]);//hc 存储的是n个字符分别的编码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *text = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(text));</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (encoding_text[pos] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text[t_pos++] = encoding_text[pos++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(text, hc[i])==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[i].c);</span><br><span class="line">                <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">                t_pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//得到了哈夫曼编码,因为知道了每个字符相应的编码,解码就很简单了</span></span><br><span class="line">    <span class="comment">//进行编码</span></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">1000</span>]; <span class="comment">//进行编码的文本</span></span><br><span class="line">    fgets(text, <span class="number">1000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; text[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = text[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[j].c == c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hc[j]);</span><br><span class="line">                <span class="built_in">strcat</span>(encoding_text, hc[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155657.png" alt="image-20210530155656921" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_Node 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vex[MAX_Node];            <span class="comment">//顶点信息</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAX_Node][MAX_Node]; <span class="comment">//权值  邻接矩阵信息</span></span><br><span class="line">    <span class="keyword">int</span> arccount, vexcount;       <span class="comment">//顶点个数,边的个数</span></span><br><span class="line">&#125; Graph, *PGraph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    PGraph g = (PGraph)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">    initial(g);</span><br><span class="line">    find_minpath(g);</span><br><span class="line">    output(g);</span><br><span class="line">    <span class="built_in">free</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;g-&gt;vexcount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,g-&gt;arcs[<span class="number">0</span>][i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录节点是否已经判断过</span></span><br><span class="line">    <span class="comment">//1表示判断过</span></span><br><span class="line">    <span class="keyword">int</span> visited[MAX_Node];</span><br><span class="line">    <span class="comment">//记录0到各节点的最短路径</span></span><br><span class="line">    <span class="keyword">int</span> dist[MAX_Node];</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag;<span class="comment">//标记</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;          <span class="comment">//初始化,未判断</span></span><br><span class="line">        dist[i] = g-&gt;arcs[<span class="number">0</span>][i]; <span class="comment">//初始化距离</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//初始节点置为判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = <span class="number">10000</span>;<span class="comment">//最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)<span class="comment">//遍历每个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="number">0</span>)<span class="comment">//未判断,即没有在集合中，尚未处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &lt; min)<span class="comment">//不是最大值min</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = j; <span class="comment">//如果距离比MIN小,则j为中间路径,更新</span></span><br><span class="line">                    min = dist[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            visited[flag] = <span class="number">1</span>;<span class="comment">//置为判断</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新路径</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visited[j] == <span class="number">0</span> &amp;&amp; (min + g-&gt;arcs[flag][j] &lt; dist[j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[j] = min + g-&gt;arcs[flag][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;g-&gt;vexcount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g-&gt;arcs[<span class="number">0</span>][i] = dist[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;vexcount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155639.png" alt="image-20210530155639357" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_Node 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vex[MAX_Node];            <span class="comment">//顶点信息</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAX_Node][MAX_Node]; <span class="comment">//权值  邻接矩阵信息</span></span><br><span class="line">    <span class="keyword">int</span> arccount, vexcount;       <span class="comment">//顶点个数,边的个数</span></span><br><span class="line">&#125; Graph, *PGraph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph,<span class="keyword">int</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(PGraph, <span class="keyword">int</span>[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, y;<span class="comment">//从x到y的最短路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> way[MAX_Node];</span><br><span class="line">    PGraph g = (PGraph)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">    initial(g);</span><br><span class="line">    find_minpath(g,way);</span><br><span class="line">    output(g,way);</span><br><span class="line">    <span class="built_in">free</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(PGraph g, <span class="keyword">int</span> way[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tmp, ans[MAX_Node], k = <span class="number">0</span>;</span><br><span class="line">    tmp = y;</span><br><span class="line">    <span class="keyword">while</span> (tmp != x)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[k++] = tmp;</span><br><span class="line">        tmp = way[tmp];<span class="comment">//逆推,到达y点需要经过哪个点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当tmp==x时跳出,到达x点需要经过x</span></span><br><span class="line">    ans[k] = way[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph g,<span class="keyword">int</span> way[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录节点是否已经判断过</span></span><br><span class="line">    <span class="comment">//1表示判断过</span></span><br><span class="line">    <span class="keyword">int</span> visited[MAX_Node];</span><br><span class="line">    <span class="comment">//记录0到各节点的最短路径</span></span><br><span class="line">    <span class="keyword">int</span> dist[MAX_Node];</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag; <span class="comment">//标记</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y); <span class="comment">//输入要求路径的两个点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;          <span class="comment">//初始化,未判断</span></span><br><span class="line">        dist[i] = g-&gt;arcs[x][i]; <span class="comment">//初始化距离,从x到各点的距离</span></span><br><span class="line">        way[i] = x;<span class="comment">//初始化,到达第i点经过x 即 经过x到达i</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[x] = <span class="number">1</span>; <span class="comment">//初始节点置为判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = <span class="number">10000</span>; <span class="comment">//最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++) <span class="comment">//遍历每个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="number">0</span>) <span class="comment">//未判断,即没有在集合中，尚未处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &lt; min) <span class="comment">//不是最大值min</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = j; <span class="comment">//如果距离比MIN小,则j为中间路径,更新</span></span><br><span class="line">                    min = dist[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[flag] = <span class="number">1</span>; <span class="comment">//置为判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="number">0</span> &amp;&amp; (min + g-&gt;arcs[flag][j] &lt; dist[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = min + g-&gt;arcs[flag][j];</span><br><span class="line">                way[j] = flag;<span class="comment">//到达j点经过flag</span></span><br><span class="line">                <span class="comment">//这里加上路径</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;vexcount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155622.png" alt="image-20210530155622500" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_Node 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vex[MAX_Node];            <span class="comment">//顶点信息</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAX_Node][MAX_Node]; <span class="comment">//权值  邻接矩阵信息</span></span><br><span class="line">    <span class="keyword">int</span> arccount, vexcount;       <span class="comment">//顶点个数,边的个数</span></span><br><span class="line">&#125; Graph, *PGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ShortPath</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* 矩阵A，存放每对顶点间最短路径长度 */</span></span><br><span class="line">    <span class="keyword">int</span> a[MAX_Node][MAX_Node];</span><br><span class="line">    <span class="comment">/* nextvex[i][j]存放vi到vj最短路径上vi的后继顶点的下标值 */</span></span><br><span class="line">    <span class="keyword">int</span> nextvex[MAX_Node][MAX_Node];</span><br><span class="line">&#125; ShortPath, *path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph, path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(path,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count; </span><br><span class="line">    PGraph g = (PGraph)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">    path p = (path)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ShortPath));</span><br><span class="line">    initial(g);  </span><br><span class="line">    find_minpath(g, p);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;count);</span><br><span class="line">    output(p,count);</span><br><span class="line">    <span class="built_in">free</span>(g);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(path p,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(count--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p-&gt;a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph g, path p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g-&gt;arcs[i][j] &lt; MAX)  <span class="comment">//如果两点存在路径</span></span><br><span class="line">                p-&gt;nextvex[i][j] = j; <span class="comment">//先把j初始化为i的下一个结点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;nextvex[i][j] = <span class="number">-1</span>; <span class="comment">//如果不存在该路径,则没有,置为-1</span></span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;a[i][j] = g-&gt;arcs[i][j]; <span class="comment">//距离初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; g-&gt;vexcount; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//k作为插入点,遍历 i,j</span></span><br><span class="line">                <span class="comment">//如果路径不存在,则继续</span></span><br><span class="line">                <span class="keyword">if</span> ((p-&gt;a[i][k] &gt;= MAX) || (p-&gt;a[k][j] &gt;= MAX))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果路径存在且比直接路径短</span></span><br><span class="line">                <span class="keyword">if</span>(p-&gt;a[i][j]&gt;(p-&gt;a[i][k]+p-&gt;a[k][j]))</span><br><span class="line">                &#123;</span><br><span class="line">                       p-&gt;a[i][j]=p-&gt;a[i][k]+p-&gt;a[k][j];</span><br><span class="line">                       p-&gt;nextvex[i][j] = p-&gt;nextvex[k][j];<span class="comment">//将插入的点作为i的下一个点</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;vexcount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210530155607.png" alt="image-20210530155607489" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_Node 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vex[MAX_Node];            <span class="comment">//顶点信息</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAX_Node][MAX_Node]; <span class="comment">//权值  邻接矩阵信息</span></span><br><span class="line">    <span class="keyword">int</span> arccount, vexcount;       <span class="comment">//顶点个数,边的个数</span></span><br><span class="line">&#125; Graph, *PGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ShortPath</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* 矩阵A，存放每对顶点间最短路径长度 */</span></span><br><span class="line">    <span class="keyword">int</span> a[MAX_Node][MAX_Node];</span><br><span class="line">    <span class="comment">/* nextvex[i][j]存放vi到vj最短路径上vi的后继顶点的下标值 */</span></span><br><span class="line">    <span class="keyword">int</span> nextvex[MAX_Node][MAX_Node];</span><br><span class="line">&#125; ShortPath, *path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph, path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(path, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    PGraph g = (PGraph)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">    path p = (path)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ShortPath));</span><br><span class="line">    initial(g);</span><br><span class="line">    find_minpath(g, p);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;count);</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x); <span class="comment">//先输出首节点</span></span><br><span class="line">        output(p, x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y); <span class="comment">//若不存在中间节点,则输出尾结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(path p, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid; <span class="comment">//中间节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;nextvex[x][y] != y) <span class="comment">//如果存在中间节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        mid = p-&gt;nextvex[x][y];</span><br><span class="line">        <span class="keyword">if</span> (mid != <span class="number">-1</span>) <span class="comment">//存在弧</span></span><br><span class="line">        &#123;</span><br><span class="line">            output(p, x, mid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;nextvex[x][y]);</span><br><span class="line">            output(p, mid, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_minpath</span><span class="params">(PGraph g, path p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g-&gt;arcs[i][j] &lt; MAX)  <span class="comment">//如果两点存在路径</span></span><br><span class="line">                p-&gt;nextvex[i][j] = j; <span class="comment">//先把j初始化为i的下一个结点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;nextvex[i][j] = <span class="number">-1</span>; <span class="comment">//如果不存在该路径,则没有,置为-1</span></span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;a[i][j] = g-&gt;arcs[i][j]; <span class="comment">//距离初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; g-&gt;vexcount; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//k作为插入点,遍历 i,j</span></span><br><span class="line">                <span class="comment">//如果路径不存在,则继续</span></span><br><span class="line">                <span class="keyword">if</span> ((p-&gt;a[i][k] &gt;= MAX) || (p-&gt;a[k][j] &gt;= MAX))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果路径存在且比直接路径短</span></span><br><span class="line">                <span class="keyword">if</span> (p-&gt;a[i][j] &gt; (p-&gt;a[i][k] + p-&gt;a[k][j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;a[i][j] = p-&gt;a[i][k] + p-&gt;a[k][j];</span><br><span class="line">                    p-&gt;nextvex[i][j] = p-&gt;nextvex[i][k]; <span class="comment">//将插入的点作为i的下一个点</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(PGraph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;vexcount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexcount; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g-&gt;vexcount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g-&gt;arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data_structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构noj_2</title>
      <link href="2021/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_2/"/>
      <url>2021/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构noj-2"><a href="#数据结构noj-2" class="headerlink" title="数据结构noj_2"></a>数据结构noj_2</h1><p>数据结构10-20</p><p>我太菜了,有几道题只是能勉强过一下,但没按照要求做</p><p><del>后面有时间看能不能改一下</del></p><span id="more"></span><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221006.png" alt="QQ截图20210517220735"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="comment">//int head;</span></span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;<span class="built_in">queue</span>,*pqueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(pqueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pqueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pqueue,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    pqueue q = (pqueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    initial(q,n);</span><br><span class="line">    <span class="keyword">while</span>(k--)</span><br><span class="line">    move(q);</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pqueue q,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;rear = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(pqueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = q-&gt;data[q-&gt;rear];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = q-&gt;rear;i&gt;=<span class="number">2</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;data[i] = q-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;data[<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pqueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=q-&gt;rear;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,q-&gt;data[i],(i==q-&gt;rear)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221211.png" alt="image-20210517221211318"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tripe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> col;</span><br><span class="line">&#125; Tripe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSmatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    Tripe Element[maxsize];</span><br><span class="line">&#125; TSmatrix, *pTsmatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix, pTsmatrix, pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pTsmatrix a = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix b = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix c = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a-&gt;num, &amp;b-&gt;num);</span><br><span class="line">    initial(a);</span><br><span class="line">    initial(b);</span><br><span class="line">    add(a, b, c);</span><br><span class="line">    print(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= result-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, result-&gt;Element[i].row, result-&gt;Element[i].col, result-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix a, pTsmatrix b, pTsmatrix c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= a-&gt;num) &amp;&amp; (j &lt;= b-&gt;num))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((a-&gt;Element[i].row == b-&gt;Element[j].row) &amp;&amp; (a-&gt;Element[i].col == b-&gt;Element[j].col))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((a-&gt;Element[i].data + b-&gt;Element[j].data) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                c-&gt;Element[k].data = a-&gt;Element[i].data + b-&gt;Element[j].data;</span><br><span class="line">                c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">                c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((a-&gt;Element[i].row &lt; b-&gt;Element[j].row) || (a-&gt;Element[i].row == b-&gt;Element[j].row &amp;&amp; (a-&gt;Element[i].col &lt; b-&gt;Element[j].col)))</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">            c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">            c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">            c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">            c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= a-&gt;num)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">        c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">        c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= b-&gt;num)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">        c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">        c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    c-&gt;num = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;p-&gt;Element[i].row, &amp;p-&gt;Element[i].col, &amp;p-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221236.png" alt="image-20210517221236404"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">down</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125; OLNode, *OLlink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    OLlink *rhead, *chead; <span class="comment">//指向行或列第一个非零元(指向结构体的指针),可以用数组rhead[row]表示第row行的数据</span></span><br><span class="line">    <span class="keyword">int</span> m, n, len;         <span class="comment">//行列数,非零元个数</span></span><br><span class="line">&#125; CrossList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *, CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CrossList *M = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    CrossList *N = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;m, &amp;M-&gt;n);</span><br><span class="line">    N-&gt;m = M-&gt;m;</span><br><span class="line">    N-&gt;n = M-&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;len, &amp;N-&gt;len);</span><br><span class="line">    initial(M);</span><br><span class="line">    initial(N);</span><br><span class="line">    plus(M, N);</span><br><span class="line">    print(M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink pa = M-&gt;rhead[row];</span><br><span class="line">        <span class="keyword">while</span> (pa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, pa-&gt;i, pa-&gt;j, pa-&gt;e);</span><br><span class="line">            pa = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *M, CrossList *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink pa, pb;</span><br><span class="line">    OLlink pre; <span class="comment">//指向前面一个节点,方便插入</span></span><br><span class="line">    OLlink *hl = (OLlink *)<span class="built_in">malloc</span>((M-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M-&gt;n; j++)</span><br><span class="line">        hl[j] = M-&gt;chead[j]; <span class="comment">//hl[]表示的是每列非零元的pre指向元素，与pre类似</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++) <span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        pa = M-&gt;rhead[row];</span><br><span class="line">        pb = N-&gt;rhead[row];</span><br><span class="line">        pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (pb) <span class="comment">//当pb有非零元素时进行处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa == <span class="literal">NULL</span> || pa-&gt;j &gt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                Insert(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa != <span class="literal">NULL</span> &amp;&amp; pa-&gt;j &lt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                pre = pa;</span><br><span class="line">                pa = pa-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa-&gt;j == pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                add(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> data = pa-&gt;e + pb-&gt;e;</span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;e = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OLlink temp = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">            M-&gt;rhead[pa-&gt;i] = pa-&gt;right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            (*pre)-&gt;right = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = pa;</span><br><span class="line">        pa = pa-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (M-&gt;chead[temp-&gt;j] == temp)</span><br><span class="line">            M-&gt;chead[temp-&gt;j] = hl[temp-&gt;j] = temp-&gt;down;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hl[temp-&gt;j]-&gt;down = temp-&gt;down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span> <span class="comment">//插入有两种情况，一种是pa该行无非零元素，另一种pb所在列小于pa所在列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink p = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    p-&gt;i = pb-&gt;i;</span><br><span class="line">    p-&gt;j = pb-&gt;j;</span><br><span class="line">    p-&gt;e = pb-&gt;e;</span><br><span class="line">    p-&gt;down = p-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        M-&gt;rhead[p-&gt;i] = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*pre)-&gt;right = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;right = pa;</span><br><span class="line">    </span><br><span class="line">    (*pre) = p;</span><br><span class="line">    pa = (*pre)-&gt;right;<span class="comment">//这一句可以不要</span></span><br><span class="line">    <span class="keyword">if</span> (!M-&gt;chead[p-&gt;j] || M-&gt;chead[p-&gt;j]-&gt;i &gt; p-&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = M-&gt;chead[p-&gt;j];</span><br><span class="line">        M-&gt;chead[p-&gt;j] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = hl[p-&gt;j]-&gt;down;</span><br><span class="line">        hl[p-&gt;j]-&gt;down = p;</span><br><span class="line">    &#125;</span><br><span class="line">    hl[p-&gt;j] = p;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *Clist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    Clist-&gt;rhead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    Clist-&gt;chead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    <span class="comment">// if(rhead||chead)</span></span><br><span class="line">    <span class="comment">// exit(1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;m; i++)</span><br><span class="line">        Clist-&gt;rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;n; i++)</span><br><span class="line">        Clist-&gt;chead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    OLlink s = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; Clist-&gt;len; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink cur = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        cur-&gt;down = <span class="literal">NULL</span>;</span><br><span class="line">        cur-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// if(cur==NULL)</span></span><br><span class="line">        <span class="comment">// exit(1);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;e);</span><br><span class="line">        cur-&gt;i = i;</span><br><span class="line">        cur-&gt;j = j;</span><br><span class="line">        cur-&gt;e = e;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;rhead[i] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Clist-&gt;rhead[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;rhead[i];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;right != <span class="literal">NULL</span> &amp;&amp; s-&gt;right-&gt;j &lt; j)</span><br><span class="line">                s = s-&gt;right;</span><br><span class="line">            cur-&gt;right = s-&gt;right;</span><br><span class="line">            s-&gt;right = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;chead[j] == <span class="literal">NULL</span>)</span><br><span class="line">            Clist-&gt;chead[j] = cur;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;chead[j];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;down != <span class="literal">NULL</span> &amp;&amp; s-&gt;down-&gt;i &lt; i)</span><br><span class="line">                s = s-&gt;down;</span><br><span class="line">            cur-&gt;down = s-&gt;down;</span><br><span class="line">            s-&gt;down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221259.png" alt="image-20210517221259788"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ATOM,</span><br><span class="line">    LIST</span><br><span class="line">&#125; ElemTag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode_1</span> //同层节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemTag tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">GLNode_1</span> *<span class="title">hp</span>;</span></span><br><span class="line">        <span class="keyword">char</span> data;</span><br><span class="line">    &#125; atom_hp;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GLNode_1</span> *<span class="title">tp</span>;</span></span><br><span class="line">&#125; GLNode_1, *GList_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode_2</span> //头尾节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemTag tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">GLNode_2</span> *<span class="title">hp</span>, *<span class="title">tp</span>;</span></span><br><span class="line">        <span class="keyword">char</span> data;</span><br><span class="line">    &#125; atom_htp;</span><br><span class="line">&#125; GLNode_2, *GList_2;</span><br><span class="line"></span><br><span class="line"><span class="function">GList_1 <span class="title">create_1</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function">GList_2 <span class="title">create_2</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth_1</span><span class="params">(GList_1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth_2</span><span class="params">(GList_2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> GList[MAXSIZE];</span><br><span class="line">    fgets(GList,<span class="keyword">sizeof</span>(GList),<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">char</span> *p = GList;</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    GList_1 s = create_1(p);</span><br><span class="line">    depth = Depth_1(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>,depth,depth);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GList_2 create_2(char *s)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     char ch = *s++;</span></span><br><span class="line"><span class="comment">//     GList_2 cur;</span></span><br><span class="line"><span class="comment">//     if(ch!=&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cur = (GList_2)malloc(sizeof(GLNode_2));</span></span><br><span class="line"><span class="comment">//         if(ch == &#x27;(&#x27;)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             cur-&gt;tag = LIST;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth_1</span><span class="params">(GList_1 L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d, max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;tag == ATOM)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    GList_1 s;</span><br><span class="line">    s = L-&gt;atom_hp.hp;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;tag == LIST)</span><br><span class="line">        &#123;</span><br><span class="line">            d = Depth_1(s);</span><br><span class="line">            <span class="keyword">if</span> (d &gt; max)</span><br><span class="line">                max = d;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s-&gt;tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (max + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">GList_1 <span class="title">create_1</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = *s++;</span><br><span class="line">    GList_1 cur;</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = (GList_1)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GLNode_1));</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) <span class="comment">//字符为(时,创建表头</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;tag = LIST;</span><br><span class="line">            cur-&gt;atom_hp.hp = create_1(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) <span class="comment">//字符尾)时,子表结束</span></span><br><span class="line">            cur = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;tag = ATOM;</span><br><span class="line">            cur-&gt;atom_hp.data = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cur = <span class="literal">NULL</span>;</span><br><span class="line">    ch = *s++;</span><br><span class="line">    <span class="keyword">if</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;tp = create_1(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur-&gt;tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221509.png" alt="image-20210517221509727"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="comment">//在栈中分配堆（heap）空间时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiNode, *Bitree;</span><br><span class="line"></span><br><span class="line"><span class="function">Bitree <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preNode</span><span class="params">(Bitree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// char data[MAXSIZE];</span></span><br><span class="line">    <span class="comment">// fgets(data, sizeof(data), stdin);</span></span><br><span class="line">    Bitree r;</span><br><span class="line">    r = create();</span><br><span class="line">    preNode(r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Bitree <span class="title">create</span><span class="params">()</span> <span class="comment">//字符数组,参数是指向字符的指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">char</span> fir_data,sec_data;</span><br><span class="line">    Bitree root = (Bitree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    fir_data = getchar();</span><br><span class="line">    sec_data = getchar();</span><br><span class="line">    root-&gt;rchild = root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(fir_data == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;data = sec_data;</span><br><span class="line">        fir_data = getchar();</span><br><span class="line">        <span class="keyword">if</span>(fir_data == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;lchild = create();</span><br><span class="line">            root-&gt;rchild = create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;data = fir_data;</span><br><span class="line">        <span class="keyword">if</span>(sec_data == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             root-&gt;lchild = create();</span><br><span class="line">            root-&gt;rchild = create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preNode</span><span class="params">(Bitree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">        preNode(root-&gt;lchild);</span><br><span class="line">        preNode(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221532.png" alt="image-20210517221532633"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTree <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_node</span><span class="params">(BiTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree r;</span><br><span class="line">    r = create();</span><br><span class="line">    <span class="keyword">int</span> num = cal_node(r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BiTree <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s;</span><br><span class="line">    s = getchar();</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    BiTree root = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    root-&gt;data = s;</span><br><span class="line">    root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    root-&gt;lchild = create();</span><br><span class="line">    root-&gt;rchild = create();</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_node</span><span class="params">(BiTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">0</span>,n2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;root-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;lchild)</span><br><span class="line">    n1 = cal_node(root-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;rchild)</span><br><span class="line">    n2 = cal_node(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> (n1+n2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221556.png" alt="image-20210517221555933"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125; BiNode, *Bitree;</span><br><span class="line"></span><br><span class="line"><span class="function">Bitree <span class="title">initial</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">midtree</span><span class="params">(Bitree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bitree root = <span class="built_in">initial</span>();</span><br><span class="line">    <span class="built_in">midtree</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bitree <span class="title">initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    data = <span class="built_in">getchar</span>();</span><br><span class="line">    Bitree root;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//if(data != &#x27;\n&#x27;)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitree root = (Bitree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiNode));</span><br><span class="line">        root-&gt;data = data;</span><br><span class="line">        root-&gt;lchild = <span class="built_in">initial</span>();</span><br><span class="line">        root-&gt;rchild = <span class="built_in">initial</span>();</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">midtree</span><span class="params">(Bitree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild)</span><br><span class="line">        <span class="built_in">midtree</span>(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, root-&gt;data);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild)</span><br><span class="line">        <span class="built_in">midtree</span>(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221619.png" alt="image-20210517221619298"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">BiNode</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> data; </span><br><span class="line">&#125;BiNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postNode</span><span class="params">(BiTree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PreFindMid</span><span class="params">(<span class="keyword">char</span>*,<span class="keyword">char</span>*,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">BiTree <span class="title">Create</span><span class="params">(<span class="keyword">char</span>*,<span class="keyword">char</span>*,<span class="keyword">int</span>*,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> pre[<span class="number">100</span>],mid[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,pre,mid);</span><br><span class="line">    len = <span class="built_in">strlen</span>(pre);</span><br><span class="line">    BiTree root;</span><br><span class="line">    <span class="keyword">int</span> pos_p = <span class="number">0</span>;</span><br><span class="line">    root = Create(pre,mid,&amp;pos_p,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">    postNode(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTree <span class="title">Create</span><span class="params">(<span class="keyword">char</span> *pre,<span class="keyword">char</span>* mid,<span class="keyword">int</span> *pos_p,<span class="keyword">int</span> pos_le,<span class="keyword">int</span> pos_ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree temp;</span><br><span class="line">    temp = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    temp-&gt;data = pre[*pos_p];</span><br><span class="line">    temp-&gt;lchild = temp-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    (*pos_p)++;</span><br><span class="line">    <span class="keyword">int</span> pos_m;</span><br><span class="line">    pos_m = PreFindMid(pre,mid,*pos_p<span class="number">-1</span>,pos_le,pos_ri);</span><br><span class="line">    <span class="keyword">if</span>(pos_m&gt;pos_le)</span><br><span class="line">    temp-&gt;lchild = Create(pre,mid,pos_p,pos_le,pos_m<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(pos_m&lt;pos_ri)</span><br><span class="line">    temp-&gt;rchild = Create(pre,mid,pos_p,pos_m+<span class="number">1</span>,pos_ri);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PreFindMid</span><span class="params">(<span class="keyword">char</span>* pre,<span class="keyword">char</span>* mid,<span class="keyword">int</span> pos_p,<span class="keyword">int</span> pos_le,<span class="keyword">int</span> pos_ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pos_le;i&lt;=pos_ri;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pre[pos_p] == mid[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postNode</span><span class="params">(BiTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    postNode(root-&gt;lchild);</span><br><span class="line">    postNode(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221728.png" alt="image-20210517221728217"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;              <span class="comment">//邻接点的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span> <span class="comment">//指向与顶点相邻的其他邻接点</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;        <span class="comment">//储存顶点的位置值</span></span><br><span class="line">    ArcNode *firstarc; <span class="comment">//用于指向链表的第一个顶点</span></span><br><span class="line">&#125; VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexNode vertex[MAX_NUM]; <span class="comment">//头接点表</span></span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;         <span class="comment">//节点个数，连线个数</span></span><br><span class="line">&#125; AdjList;</span><br><span class="line"></span><br><span class="line"><span class="function">AdjList <span class="title">initial_adjList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(AdjList)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList al;</span><br><span class="line">    al = initial_adjList();</span><br><span class="line">    test(al);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AdjList <span class="title">initial_adjList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList adj_list;</span><br><span class="line">    ArcNode *node = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">    ArcNode *node_2 = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">    <span class="keyword">int</span> vex, arc;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;vex, &amp;arc);</span><br><span class="line">    adj_list.vexnum = vex;</span><br><span class="line">    adj_list.arcnum = arc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vex; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;adj_list.vertex[i].adjvex);</span><br><span class="line">        adj_list.vertex[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="comment">//进行初始化，将每个头接点赋值，并置firstarcNULL</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">while</span> (arc--)<span class="comment">//为每条边给信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;i, &amp;j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">1</span>; ix &lt;= vex; ix++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == adj_list.vertex[ix].adjvex)<span class="comment">//找到头接点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (adj_list.vertex[ix].firstarc == <span class="literal">NULL</span>)<span class="comment">//如果为空,即没有连接点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    node-&gt;adjvex = j;</span><br><span class="line">                    node-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line">                    adj_list.vertex[ix].firstarc = node;</span><br><span class="line">                    <span class="comment">// adj_list.vertex[ix].firstarc-&gt;adjvex = j;</span></span><br><span class="line">                    <span class="comment">// adj_list.vertex[ix].firstarc-&gt;nextarc = NULL;</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// else</span></span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//     node.adjvex = j;</span></span><br><span class="line">                <span class="comment">//     node.nextarc = NULL;</span></span><br><span class="line">                <span class="comment">//     adj_list.vertex[ix].firstarc-&gt;nextarc = &amp;node;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                node_2-&gt;adjvex = j;</span><br><span class="line">                node_2-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line">                node = adj_list.vertex[ix].firstarc;</span><br><span class="line">                <span class="keyword">while</span> (node-&gt;nextarc)</span><br><span class="line">                &#123;</span><br><span class="line">                    node = node-&gt;nextarc;</span><br><span class="line">                &#125;</span><br><span class="line">                node-&gt;nextarc = node_2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adj_list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(AdjList adj_list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ix, jx;</span><br><span class="line">    ArcNode *node;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ix, &amp;jx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= adj_list.arcnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ix == adj_list.vertex[i].adjvex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (node = adj_list.vertex[i].firstarc; node != <span class="literal">NULL</span>; node = node-&gt;nextarc)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (jx == node-&gt;adjvex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="20"><a href="#20" class="headerlink" title="20"></a>20</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210517221747.png" alt="image-20210517221747666"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">///邻节点 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span></span><br><span class="line">&#125; ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头接点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">//头接点的第一个节点域</span></span><br><span class="line">    ArcNode *firstarc;</span><br><span class="line">&#125; VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    VertexNode vertex[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum; <span class="comment">//节点数与弧数</span></span><br><span class="line">&#125; AdjList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">AdjList <span class="title">initial</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找有无邻接点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(AdjList)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList al;</span><br><span class="line">    al = initial();</span><br><span class="line">    search(al);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AdjList <span class="title">initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList adj_list;</span><br><span class="line">    <span class="keyword">int</span> vex, arc;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;vex, &amp;arc);</span><br><span class="line">    adj_list.vexnum = vex; <span class="comment">//输入顶点数与边数</span></span><br><span class="line">    adj_list.arcnum = arc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化节点的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vex; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;adj_list.vertex[i].data);</span><br><span class="line">        adj_list.vertex[i].firstarc = <span class="literal">NULL</span>;<span class="comment">//头节点第一个连接点初始化为NULL</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode *node = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">    ArcNode *node_2 = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">    <span class="keyword">while</span> (arc--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;i, &amp;j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; vex; ix++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (adj_list.vertex[ix].data == i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (adj_list.vertex[ix].firstarc == <span class="literal">NULL</span>)<span class="comment">//检查头节点第一个是否为空</span></span><br><span class="line">                <span class="comment">//若为空,意味着第一个节点为空,则加入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    node-&gt;data = j;</span><br><span class="line">                    node-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line">                    adj_list.vertex[ix].firstarc = node;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//否则加到最后面</span></span><br><span class="line">                &#123;</span><br><span class="line">                    node = adj_list.vertex[ix].firstarc;</span><br><span class="line">                    <span class="keyword">while</span> (node-&gt;nextarc)<span class="comment">//遍历走到最后</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        node = node-&gt;nextarc;</span><br><span class="line">                    &#125;</span><br><span class="line">                    node_2-&gt;data = j;</span><br><span class="line">                    node_2-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line">                    node-&gt;nextarc = node_2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adj_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(AdjList adj_list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> src, dst;</span><br><span class="line">    ArcNode *node = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;src, &amp;dst);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; adj_list.vexnum; ix++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (src == adj_list.vertex[ix].data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (node = adj_list.vertex[ix].firstarc;node!=<span class="literal">NULL</span>;node = node-&gt;nextarc)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;data == dst)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
            <tag> noj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编/译码</title>
      <link href="2021/05/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96-%E8%AF%91%E7%A0%81/"/>
      <url>2021/05/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96-%E8%AF%91%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>预备知识</p><p><strong>1、路径和路径长度</strong></p><p>从树中一个结点到另一个结点之间的分支构成两个结点的路径，路径上的分支数目叫做路径长度。树的路径长度是从树根到每一个结点的路径长度之和。<br><span id="more"></span><br><strong>2、带权路径长度</strong></p><p>结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有<strong>叶子结点</strong>的带权路径长度之和，通常记作WPL。</p><p>若有n个权值为w1,w2,…,wn的结点构成一棵有n个叶子结点的二叉树，则树的带权路径最小的二叉树叫做哈夫曼树或最优二叉树。</p><p>哈夫曼树是由n个带权叶子节点构成的所有二叉树中带权路径长度最短的二叉树.</p><p>树的带权路径长度</p><script type="math/tex; mode=display">WPL = \sum_{i=1}^{n}w_i*l_i</script><p>哈夫曼树，又称最优树，是一类带权路径长度最短的树。首先有几个概念需要清楚：</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>一颗有n个叶子的哈夫曼树共有2n-1个结点，每个结点包含其双亲信息和孩子结点的信息,构成一个静态三链表</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210508151242.png" alt="2021-5-8"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M (2*(N)-1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> weight;<span class="comment">//权值</span></span><br><span class="line"><span class="keyword">int</span> parent;<span class="comment">//双亲结点</span></span><br><span class="line"><span class="keyword">int</span> Lchild;<span class="comment">//左孩子结点</span></span><br><span class="line"><span class="keyword">int</span> rchild;<span class="comment">//右孩子结点</span></span><br><span class="line">&#125;HTNode,HuffmanTree[M+<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>哈夫曼树的存储结构</p><h2 id="创建哈夫曼树"><a href="#创建哈夫曼树" class="headerlink" title="创建哈夫曼树"></a>创建哈夫曼树</h2><p>1.根据给定的n个权值{w1,w2,…,wn}构成二叉树集合F={T1,T2,…,Tn},其中每棵二叉树Ti中只有一个带权为wi的根结点,其左右子树为空.</p><p>2.在F中选取两棵根结点权值最小的树作为左右子树构造一棵新的二叉树,且置新的二叉树的根结点的权值为左右子树根结点的权值之和.</p><p>3.在F中删除这两棵树,同时将新的二叉树加入F中.</p><p>4.重复2、3,直到F只含有一棵树为止.(得到哈夫曼树)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HufmanTree ht,<span class="keyword">int</span> w[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ht[i] = &#123;w[i],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//叶子节点n个</span></span><br><span class="line"><span class="comment">//初始化每个叶子结点</span></span><br><span class="line">m = <span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">ht[i] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//初始化n-1个非叶子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">select(ht,i<span class="number">-1</span>,&amp;s1,&amp;s2);</span><br><span class="line"><span class="comment">//在叶子节点中选取两个parent=0且weight最小的两个结点</span></span><br><span class="line">ht[i].weight = ht[s1].weight+ht[s2].weight;</span><br><span class="line">ht[s1].parent = ht[s2].parent = i;</span><br><span class="line">ht[i].lchild = s1;</span><br><span class="line">ht[i].rchild = s2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、满二叉树不一定是哈夫曼树 </p><p>2、哈夫曼树中权越大的叶子离根越近  （很好理解，WPL最小的二叉树）</p><p>3、具有相同带权结点的哈夫曼树不惟一</p><p>4、哈夫曼树的结点的度数为 0 或 2， 没有度为 1 的结点。</p><p>5、包含 n 个叶子结点的哈夫曼树中共有 2n – 1 个结点。</p><p>6、包含 n 棵树的森林要经过 n–1 次合并才能形成哈夫曼树，共产生 n–1 个新结点</p><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>对一颗具有n个叶子的哈夫曼树,若对树中的每个左分支赋予0,右分支赋予1,从根到每个叶子的通路上,各分支的赋值分别构成一个二进制串,该二进制串就称为哈夫曼编码.</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210508155846.png" alt="QQ截图20210508155705"></p><p>哈夫曼编码是前缀编码,以使用频度作为权值构造哈夫曼树,这样编码得到的二进制串平均值最短.</p><p>（1）创建长度为2n-1的哈夫曼树数组，含有n个叶子节点</p><p>（2）<strong>创建长度为n的string数组，用于存放n个叶子节点的哈夫曼码</strong></p><p>（3）从某叶子节点开始，不断寻找其父节点，直到寻找到根节点，并对此路径上每个分支进行编码，左孩子为0，右孩子为1</p><p><strong>算法实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* HuffmanCode[N+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht,HuffmanCode hc,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *cd;</span><br><span class="line">cd = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">cd[n<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">start = n<span class="number">-1</span>;</span><br><span class="line">c = i;</span><br><span class="line">p = ht[i].parent;<span class="comment">//找到叶子结点的父亲节点</span></span><br><span class="line"><span class="keyword">while</span>(p)<span class="comment">//如果存在父亲节点.即parent不为0</span></span><br><span class="line">&#123;</span><br><span class="line">--start;</span><br><span class="line"><span class="keyword">if</span>(ht[p].lchild==c)</span><br><span class="line">cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">c = p;</span><br><span class="line">p = ht[p].parent;<span class="comment">//继续搜索父亲节点</span></span><br><span class="line">&#125;</span><br><span class="line">hc[i] = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n-start)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(hc[i],&amp;cd[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从任意叶子X节点（数组前n项中的某一项）开始，根据X的parent值（即X的父节点在数组中的位置）找到其父节点。</p><p><strong>找到X的父节点后，根据父节点的left和right值判断X和父节点的关系。如果X是父节点的左子树，则编码为1；如果X是父节点的右子树，则编码为0</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M (2 * N - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *HuffmanCode[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">int</span> parent; <span class="comment">//父节点在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Lchild; <span class="comment">//左孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> Rchild; <span class="comment">//右孩子在ht数组中的位置</span></span><br><span class="line">    <span class="keyword">char</span> c;     <span class="comment">//字符</span></span><br><span class="line">&#125; HTNode, HuffmanTree[M + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree, <span class="keyword">int</span>)</span></span>;       <span class="comment">//构造哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree, <span class="keyword">int</span>, <span class="keyword">int</span> *, <span class="keyword">int</span> *)</span></span>; <span class="comment">//用于寻找最小的两个值</span></span><br><span class="line"><span class="comment">//hc[N+1]为相应节点的编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>)</span></span>; <span class="comment">//根据哈夫曼树得到相应编码</span></span><br><span class="line"><span class="comment">//解码得到明文</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//编码得到二进制串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree, HuffmanCode, <span class="keyword">int</span>, <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="comment">//根据HuffmanTree得到HuffmanCode</span></span><br><span class="line"><span class="comment">//HuffmanCode储存的是每个字符对应的编码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    getchar();</span><br><span class="line">    HuffmanTree ht;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ht[i].c); <span class="comment">//输入n个叶子节点的字符</span></span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    CrtHuffmanTree(ht, size);</span><br><span class="line">    HuffmanCode hc;</span><br><span class="line">    CrtHuffmanCode(ht, hc, size);</span><br><span class="line">    <span class="keyword">char</span> encoding_text[<span class="number">100</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    encode(ht, hc, size, encoding_text);</span><br><span class="line">    decode(ht, hc, size, encoding_text);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int w[N + 1];</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">//     scanf(&quot;%d&quot;, &amp;w[i]); //输入n个叶子节点的权值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ht[i].weight); <span class="comment">//输入n个叶子节点的权值</span></span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight = <span class="number">0</span>;</span><br><span class="line">        ht[i].parent = ht[i].Rchild = ht[i].Lchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s1, s2; <span class="comment">//s1,s2为两个值最小的无父结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        select(ht, i - <span class="number">1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[s1].parent = ht[s2].parent = i;</span><br><span class="line">        ht[i].Lchild = s1;</span><br><span class="line">        ht[i].Rchild = s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> *s1, <span class="keyword">int</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_1_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min_2_w = <span class="number">10000</span>; <span class="comment">//用来找最小值</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[i].weight &lt; min_1_w)</span><br><span class="line">            &#123;</span><br><span class="line">                min_1_w = ht[i].weight;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//找到第一个最小值</span></span><br><span class="line">    *s1 = min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[j].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != *s1 &amp;&amp; ht[j].weight &lt; min_2_w) <span class="comment">//倒数第二小的值大于等于最小的值,小于其余值</span></span><br><span class="line">            &#123;</span><br><span class="line">                min_2_w = ht[j].weight;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//最小的第二个值</span></span><br><span class="line">    *s2 = min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span> <span class="comment">//建立好哈夫曼树后,得到哈夫曼编码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *cd;                              <span class="comment">//cd是指向字符的指针,用来存储字符串</span></span><br><span class="line">    cd = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//开辟n个单元,因为共有n个结点,最多只有n-1个编码位</span></span><br><span class="line">    cd[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;                      <span class="comment">//因为存储字符串,最后一位为空字符</span></span><br><span class="line">    <span class="keyword">int</span> start, c;                          <span class="comment">//start为cd数组开始存储的起点,c用来标记每次往上找到的双亲的位置</span></span><br><span class="line">    <span class="keyword">int</span> p;                                 <span class="comment">//p为双亲的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        start = n - <span class="number">1</span>;    <span class="comment">//这是cd数组的最后一位,是&#x27;/0&#x27;，因为储存字符串</span></span><br><span class="line">        c = i;            <span class="comment">//c为第一个结点,得到第一个结点的编码</span></span><br><span class="line">        p = ht[i].parent; <span class="comment">//寻找结点父亲</span></span><br><span class="line">        <span class="keyword">while</span> (p)         <span class="comment">//若有父亲结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            --start;               <span class="comment">//每次递减,从后向前得到编码</span></span><br><span class="line">            <span class="keyword">if</span> (ht[p].Lchild == c) <span class="comment">//若子节点为左孩子,则为0</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = p;</span><br><span class="line">            p = ht[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        while循环可改为</span></span><br><span class="line"><span class="comment">        for(c=i,p=ht[i].parent;p!=0;c=p,p=ht[p].parent)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">             --start;</span></span><br><span class="line"><span class="comment">            if (ht[p].Lchild == c)</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                cd[start] = &#x27;1&#x27;;</span></span><br><span class="line"><span class="comment">            c = p;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        hc[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//为hc[i]分配空间,空间大小为编码的位数+1,最后一位为&#x27;\0&#x27;</span></span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i], &amp;cd[start]);                          <span class="comment">//注意这里取地址符不可以去掉,因为本身cd是一个数组(指针),但复制时应该从start开始,所以取数组start位的元素地址</span></span><br><span class="line">                                                            <span class="comment">//   printf(&quot;%d:%s\n&quot;,i,hc[i]);//hc 存储的是n个字符分别的编码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *text = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(text));</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (encoding_text[pos] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text[t_pos++] = encoding_text[pos++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(text, hc[i])==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[i].c);</span><br><span class="line">                <span class="built_in">memset</span>(text, <span class="string">&#x27;\0&#x27;</span>, n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">                t_pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// text[t_pos++] = encoding_text[pos++];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n, <span class="keyword">char</span> *encoding_text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//得到了哈夫曼编码,因为知道了每个字符相应的编码,解码就很简单了</span></span><br><span class="line">    <span class="comment">//进行编码</span></span><br><span class="line">    getchar();<span class="comment">//这里接受一个空格,避免下面fgets直接接受一个空格了</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">1000</span>]; <span class="comment">//进行编码的文本</span></span><br><span class="line">    fgets(text, <span class="number">1000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; text[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = text[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[j].c == c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, hc[j]);</span><br><span class="line">                <span class="built_in">strcat</span>(encoding_text, hc[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Young_IT/article/details/106730343">哈夫曼编码详解——图解真能看了秒懂_Young_IT的博客-CSDN博客</a></p><p><a href="http://data.biancheng.net/view/101.html">哈夫曼（赫夫曼，哈弗曼）编码算法（带源码+解析） (biancheng.net)</a></p><p><a href="https://www.cnblogs.com/kubixuesheng/p/4397798.html">哈夫曼（huffman）树和哈夫曼编码 - dashuai的博客 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于指针和函数</title>
      <link href="2021/04/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关于函数和指针"><a href="#关于函数和指针" class="headerlink" title="关于函数和指针"></a>关于函数和指针</h1><p>这几天瞎写的时候关于指针以及malloc产生了一些问题。</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">initial</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">    p = initial(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">initial</span><span class="params">(<span class="keyword">int</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//在函数中，指针p的地址变了</span></span><br><span class="line">    *p = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,p,&amp;p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void initial(int* p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">      p = (int*)malloc(sizeof(int));//在函数中，指针p的地址变了</span></span><br><span class="line"><span class="comment">    //为p分配地址,但退栈后p的地址没了（找不到了）</span></span><br><span class="line"><span class="comment">    *p = 5;</span></span><br><span class="line"><span class="comment">    printf(&quot;%p %p\n&quot;,p,&amp;p);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>运行截图</p><p>如果用return返回在函数中用malloc分配得到的指针</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429195130.png" alt="QQ截图20210429195130"></p><p>p是一个指向int类型的指针,其值一开始设置为NULL,指针的地址是61fe18,但在函数中利用malloc分配后得到的新值为6b1640,并且指针本身的地址也不一样。</p><p>这是因为调用函数时,生成栈,参数只是一层浅拷贝,值相同,但地址不同，这就是函数的机制吧.</p><p>再举个例子,比如说</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;n);</span><br><span class="line">func(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429200528.png" alt="QQ截图20210429200528"></p><p>可以发现地址并不同,这也说明了地址的变化.</p><p>如果不用return返回,运行截图所示,根据刚才函数机制可知,指针的值(即所指向值的地址)并不会变化。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/QQ%E6%88%AA%E5%9B%BE20210429195214.png" alt="QQ截图20210429195214"></p><p>所以可以得到第一个结论了。</p><p><strong>指针也是一个变量，我们如果要改变它，必须找到它在内存中的地址，也就是指针的地址。也就是说，对于函数中，如果对指针的地址进行赋值，事实上是改变不了原指针的！</strong></p><p>所以解决方法主要两个,在c中利用二级指针改变指针的地址.</p><p>如果在cpp中即可利用引用类型&amp;比较方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*Bitree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(Bitree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Bitree t = (Bitree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,t);</span><br><span class="line">    initial(t);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子孩子结点为空k\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,t-&gt;lchild);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,t-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t-&gt;lchild-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(Bitree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,root);</span><br><span class="line">    <span class="comment">// scanf(&quot;%c&quot;,&amp;root-&gt;data);</span></span><br><span class="line">    root-&gt;lchild = (Bitree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,root-&gt;lchild);   <span class="comment">//this pointer&#x27;s value ,means pointed object addres</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/04/29/EBN1HXtmY8DLRMT.png" alt="20214291"></p><p>可知,指针传入函数后,其值(即指向值的地址)未变,在函数中为子节点申请了空间,在函数外也能通过其访问。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/20210429205005.png" alt="QQ截图20210429204704"></p><p>内存分配的知识：</p><p>1、参数、局部变量分配在栈区中。编译器自动回收<br>2、malloc申请的内存分配在堆上，由程序结束OS回收3、全局（静态区），全局变量和静态变量，由程序结束OS回收</p><p>在函数中利用malloc分配空间或为指针赋值需要注意：</p><ol><li>函数的参数是浅拷贝,地址与实参不同,如果要相同,在cpp中用&amp;引用参数</li><li>在函数内为指针分配地址时,栈退后会使得这个分配得到的地址无法引用,指针的地址依然是调用前,值没有改变</li></ol>]]></content>
      
      
      <categories>
          
          <category> 误区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 指针 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广义表简介</title>
      <link href="2021/04/23/%E5%B9%BF%E4%B9%89%E8%A1%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2021/04/23/%E5%B9%BF%E4%B9%89%E8%A1%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="广义表简介"><a href="#广义表简介" class="headerlink" title="广义表简介"></a>广义表简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>广义表是n个数据元素组成的有限序列</p><script type="math/tex; mode=display">GL =  (d_1,d_2,d_3,...,d_n)</script><p>GL是广义表的名字,n是广义表的长度.</p><span id="more"></span><p>广义表中的元素既可以是单个元素,也可以是广义表.</p><p>若d<sub>i</sub>为广义表,则可称为是GL的子表.<br>广义表的表头:d<sub>1</sub>是广义表的表头,即广义表的第一个元素</p><p>通常，广义表中存储的单个元素称为 “原子”，而存储的广义表称为 “子表”。</p><p>广义表的表尾:广义表的GL其余部分组成的表,即(d<sub>2</sub>,d<sub>3</sub>,…,d<sub>n</sub>)为表尾</p><p><strong>除非广义表为空表，否则广义表一定具有表头和表尾，且广义表的表尾一定是一个广义表。</strong></p><p>广义表是递归定义的.</p><ul><li>A = ()：A 表示一个广义表，只不过表是空的。</li><li>B = (e)：广义表 B 中只有一个原子 e。</li><li>C = (a,(b,c,d)) ：广义表 C 中有两个元素，原子 a 和子表 (b,c,d)。</li><li>D = (A,B,C)：广义表 D 中存有 3 个子表，分别是A、B和C。这种表示方式等同于 D = ((),(e),(b,c,d)) 。</li><li>E = (a,E)：广义表 E 中有两个元素，原子 a 和它本身。这是一个递归广义表，等同于：E = (a,(a,(a,…)))。</li></ul><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>由于<a href="http://data.biancheng.net/view/189.html">广义表</a>中既可存储原子（不可再分的数据元素），也可以存储子表，因此很难使用顺序存储结构表示，通常情况下广义表结构采用<a href="http://data.biancheng.net/view/160.html">链表</a>实现.</p><h3 id="头尾链表存储结构"><a href="#头尾链表存储结构" class="headerlink" title="头尾链表存储结构"></a>头尾链表存储结构</h3><p>表中每个元素用一个结点表示,表中有两类结点:</p><ol><li>单个元素结点 </li><li>子表节点</li></ol><p>任何非空的子表都可以分成表头和表尾两部分</p><p>元素节点需要值域和标志域,表结点由标志域和指向表头,表尾的指针组成</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/4_23_%E5%B9%BF%E4%B9%89%E8%A1%A8.png" alt="4_23_广义表"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>ATOM,LIST&#125; ElemTag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span>&#123;</span></span><br><span class="line">    ElemTag tag;<span class="comment">//标志域</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        AtomType atom;<span class="comment">//原子结点的值域</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">hp</span>,*<span class="title">tp</span>;</span><span class="comment">//表头结点指针与表尾结点</span></span><br><span class="line">        &#125;htp;<span class="comment">//子表结点的指针域，hp指向表头；tp指向表尾</span></span><br><span class="line">    &#125;atom_htp;<span class="comment">//原子值域与表结点指针域的联合体</span></span><br><span class="line">&#125;GLNode,*Glist;</span><br></pre></td></tr></table></figure><h3 id="广义表同层节点链存储结构"><a href="#广义表同层节点链存储结构" class="headerlink" title="广义表同层节点链存储结构"></a>广义表同层节点链存储结构</h3><p>在这种结构中,无论是原子结点还是表结点都由三个域构成</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/4_12_%E5%B9%BF%E4%B9%89%E8%A1%A8(2).png" alt="4_12_广义表(2)"  /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>ATOM,LIST&#125; ElemTag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span>&#123;</span></span><br><span class="line">    ElemTag tag;<span class="comment">//标志域</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        AtomType atom;<span class="comment">//原子结点的值域</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> *<span class="title">hp</span>;</span><span class="comment">//子表结点的指针域，hp指向表头</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">tp</span>;</span><span class="comment">//同层下一个结点的指针域</span></span><br><span class="line">    <span class="comment">//这里的tp相当于链表的next指针，用于指向下一个数据元素</span></span><br><span class="line">&#125;GLNode,*Glist;</span><br></pre></td></tr></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    <span class="comment">//tag = 0为原子</span></span><br><span class="line">    <span class="comment">//tag =1 为子表</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">hp</span>,*<span class="title">tp</span>;</span></span><br><span class="line">        &#125;htp;</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">    &#125;atom_htp;</span><br><span class="line">&#125;GLNode,*GList;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Head</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function">GList <span class="title">Tail</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountAtom</span><span class="params">(GList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CopyGList</span><span class="params">(GList,GList*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Head</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Head(L-&gt;atom_htp.htp.hp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GList <span class="title">Tail</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Tail(L-&gt;atom_htp.htp.tp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    GList s;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    s = L;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        s = s-&gt;atom_htp.htp.tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d,max;</span><br><span class="line">    GList s;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag ==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s = L;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        d = Depth(s-&gt;atom_htp.htp.hp);</span><br><span class="line">        <span class="keyword">if</span>(d&gt;max)</span><br><span class="line">        max =d;</span><br><span class="line">        s = s-&gt;atom_htp.htp.tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountAtom</span><span class="params">(GList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1,n2;</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    n1 = CountAtom(L-&gt;atom_htp.htp.hp);</span><br><span class="line">    n2 = CountAtom(L-&gt;atom_htp.htp.tp);</span><br><span class="line">    <span class="keyword">return</span> (n1+n2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CopyGList</span><span class="params">(GList S,GList *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;*T == <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;tag == <span class="number">0</span>)</span><br><span class="line">    (*T)-&gt;atom_htp.data = S-&gt;atom_htp.data;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CopyGList(S-&gt;atom_htp.htp.hp,&amp;((*T)-&gt;atom_htp.htp.hp));</span><br><span class="line">        CopyGList(S-&gt;atom_htp.htp.tp,&amp;((*T)-&gt;atom_htp.htp.tp));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏矩阵</title>
      <link href="2021/04/20/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>2021/04/20/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>概念：矩阵中大多数元素为0。</p><p>直观上讲非零元素低于5%。</p><p>零元素代表着没有意义的值，所以零元素较多情况下，用链表代替存储比二维数组要好很多。</p><p>下面介绍三种表示方法</p><span id="more"></span><h2 id="2-三元组表示"><a href="#2-三元组表示" class="headerlink" title="2.三元组表示"></a>2.三元组表示</h2><p>只存储非零元素，由于非零元素位置不存在概率，则利用行，列，值的信息进行存储，这是容易想到的。</p><script type="math/tex; mode=display">\left\{\begin{matrix}0 & 4 & 0 \\1 & 2 & 0 \\0 & 0 & 6 \end{matrix}\right\}\tag{1}</script><p>随便写个例子(虽然不满足稀疏矩阵定义)</p><p>三元组表示法可以写为（假设起始行与列为1）一维数组。</p><p>TSMatrix[0],TSMatrix[1],TSMatrix[2]</p><p>数组元素为结构体Triple,结构体包含行列与值的信息</p><p>三元组表中的元素是有序排列的。(按照行优先、行相同列大小方式)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 20000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="keyword">int</span>  i, j;<span class="comment">/* 行号和列号 */</span></span><br><span class="line">        ElemType  elem;<span class="comment">/* 元素值 */</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        Triple  data[MaxSize];</span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">/* 行数、列数和非零元个数*/</span></span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种表示法节省了空间</p><h3 id="1-三元组表示法转置"><a href="#1-三元组表示法转置" class="headerlink" title="1.三元组表示法转置"></a>1.三元组表示法转置</h3><p>矩阵转置是将行(列)上的元素换到列(行)上</p><p>不用三元组表示的话，利用两层for循环，效率O(m*n)</p><p><strong>列序递增转置法</strong></p><p>采用被转置矩阵三元组表A的列序递增进行转置，这样转置后的矩阵三元组表是以行序递增的。</p><p>所以，先以被转置矩阵A的列为主序,内层为每个A矩阵的非零元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TransposeSMatrix</span> <span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//M为被转置矩阵，T为转置后的矩阵</span></span><br><span class="line">    <span class="keyword">int</span>  p, q, col;</span><br><span class="line">    T-&gt;mu = M.nu;  T-&gt;nu = M.mu;  T-&gt;tu = M.tu;<span class="comment">//T的行数为M的列数</span></span><br><span class="line">    <span class="keyword">if</span> (T-&gt;tu)&#123;</span><br><span class="line">        q = <span class="number">0</span>;<span class="comment">//q可以计数,当转置一个后q+1</span></span><br><span class="line">        <span class="keyword">for</span> (col = <span class="number">0</span>; col&lt; M.nu; ++col)</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p&lt; M.tu; ++p)<span class="comment">//p为三元组表元素的位置，for循环不断扫描三元组表,查看是否有元素的列数为col，若有则转置</span></span><br><span class="line">                <span class="keyword">if</span> (M.data[p].j == col) &#123;</span><br><span class="line">                    T-&gt;data[q].i = M.data[p].j;</span><br><span class="line">                    T-&gt;data[q].j = M.data[p].i;</span><br><span class="line">                    T-&gt;data[q].elem = M.data[p].elem;</span><br><span class="line">                    q++;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法时间效率O(M.nu×M.tu),for两层循环</p><p>当矩阵中非零元个数tu和mu<em>nu同数量级时，则该算法的时间复杂度为O(M.mu</em>M.nu2）。因此该算法只适用于M.tu &lt;&lt; M.mu*M.nu的情况。</p><p><strong>一次定位快速转置法</strong></p><p>刚才的算法效率并不是很高，想要提高可以通过减少for循环</p><p>如果能预先确定矩阵M中每一列（即T中的每一行）的第一个非零元素在T中的合适位置，那么在对M进行转置时就可以直接放到T中的恰当位置上去。为了确定这些位置，应先求得M的每一列中非零元的个数，进而求得每一列的第一个非零元在T中的位置。(M为被转置矩阵，T为转置后的矩阵)</p><p>为了”一次定位”，需要知道</p><ol><li>待转置矩阵A中的每一列非零元素总数</li><li>A中的每一列第一个非零元素在三元组表中位置</li></ol><p>对于第一个,就是转制后矩阵B每一行的非零元个数，设数组num[],则num[col]表示A的第col列非零元素个数;对于第二点,设pos[]，pos[col]表示A的第col列第一个非零元在<strong>B三元组表</strong>的位置。</p><p>num[]比较好算，扫一遍三元组表，遇到col值便+1(数组下标法)</p><p>pos[]要麻烦一点，它是三元组表中元素的位置,可以通过迭加计算</p><p>pos[1] = 1（假设,这里也可以是0，随意了）</p><p>pos[col] = pos[col-1] + num[col-1]</p><p>具体做法是pos[col]是第col列第一个非零元在三元组表的顺序，当有一个元素加入到B时，则pos[col] = pos[col]+1,使pos[col]始终指向A中第col列中下一个非零元在B的正确存放位置。</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418161823660.png" alt="image-20210418161823660" style="zoom:80%;" /></p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418161944713.png" alt="image-20210418161944713" style="zoom:80%;" /></p><p>如上图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">FastTransposeSMatrix</span> <span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">int</span>   col, p, q, t;</span><br><span class="line">      T-&gt;mu = M.nu; T-&gt;nu = M.mu; T-&gt;tu = M.tu;</span><br><span class="line">      <span class="keyword">if</span> (T-&gt;tu) &#123;</span><br><span class="line">            <span class="keyword">for</span> (col=<span class="number">0</span>; col&lt; M.nu; ++col)  num[col] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; M.tu; ++t) <span class="comment">/*统计每列的非零元个数*/</span></span><br><span class="line">                  ++num[M.data[t].j];</span><br><span class="line">            cpot[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">/*计算每列第一个非零元转置后的位置*/</span></span><br><span class="line">          <span class="keyword">for</span> (col = <span class="number">1</span>; col &lt; M.nu; ++col)</span><br><span class="line">     cpot[col] = cpot[col<span class="number">-1</span>] +num[col<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; M.tu; ++p)&#123;</span><br><span class="line">                  col = M.data[p].j; q = cpot[col];</span><br><span class="line">           T-&gt;data[q].i =M.data[p].j; </span><br><span class="line">          T-&gt;data[q].j = M.data[p].i;</span><br><span class="line">          T-&gt;data[q].elem =M.data[p].elem;</span><br><span class="line">              ++cpot[col];<span class="comment">//当一列有一个元素转置后，位置+1指向下一个该列非零元素</span></span><br><span class="line">            &#125;  <span class="comment">/* for */</span></span><br><span class="line">      &#125;  <span class="comment">/* if */</span></span><br><span class="line">      <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(M.nu+M.tu)。<br>即使非零元个数与mu<em>nu同数量级，其时间复杂度为O(M.mu </em> M.nu)，与经典算法时间复杂度相同</p><p><strong>总结</strong></p><p>三元组顺序表（有序的双下标法）的特点：<br>（1）便于进行以行顺序处理的矩阵运算。<br>（2）若需按行号存取某一行的非零元，需从开始进行查找。</p><h3 id="2-三元组表示法加法"><a href="#2-三元组表示法加法" class="headerlink" title="2.三元组表示法加法"></a>2.三元组表示法加法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tripe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> col;</span><br><span class="line">&#125; Tripe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSmatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    Tripe Element[maxsize];</span><br><span class="line">&#125; TSmatrix, *pTsmatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix, pTsmatrix, pTsmatrix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pTsmatrix a = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix b = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    pTsmatrix c = (pTsmatrix)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSmatrix));</span><br><span class="line">    <span class="keyword">int</span> r,col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;r,&amp;col);</span><br><span class="line">    a-&gt;row = b-&gt;row = c-&gt;row = r;</span><br><span class="line">    a-&gt;col = b-&gt;col = c-&gt;col = col;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a-&gt;num, &amp;b-&gt;num);</span><br><span class="line">    initial(a);</span><br><span class="line">    initial(b);</span><br><span class="line">    add(a, b, c);</span><br><span class="line">    print(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pTsmatrix result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= result-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, result-&gt;Element[i].row, result-&gt;Element[i].col, result-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pTsmatrix a, pTsmatrix b, pTsmatrix c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= a-&gt;num) &amp;&amp; (j &lt;= b-&gt;num))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((a-&gt;Element[i].row == b-&gt;Element[j].row) &amp;&amp; (a-&gt;Element[i].col == b-&gt;Element[j].col))</span><br><span class="line">        &#123;<span class="comment">//两个非零元行相同列相同，则进行相加并判断值是否为0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((a-&gt;Element[i].data + b-&gt;Element[j].data) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值为0则不管，i,j递增</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                c-&gt;Element[k].data = a-&gt;Element[i].data + b-&gt;Element[j].data;</span><br><span class="line">                c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">                c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">                i++;</span><br><span class="line">                j++;<span class="comment">//值不为0,则赋值并递增i,j,k</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((a-&gt;Element[i].row &lt; b-&gt;Element[j].row) || (a-&gt;Element[i].row == b-&gt;Element[j].row &amp;&amp; (a-&gt;Element[i].col &lt; b-&gt;Element[j].col)))</span><br><span class="line">        &#123;<span class="comment">//若a的非零元行数小于b的非零元,意味着c = a+0 则直接将a的值赋给c</span></span><br><span class="line">        <span class="comment">//后面同理，因为a元素对应在b矩阵处值为0</span></span><br><span class="line">        <span class="comment">//i,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">            c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">            c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//剩下的情况就是b矩阵的值的位置对应在a矩阵中的值为0</span></span><br><span class="line">        <span class="comment">//即 c = 0+b</span></span><br><span class="line">        <span class="comment">//j,k递增</span></span><br><span class="line">            k++;</span><br><span class="line">            c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">            c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">            c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= a-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//若a矩阵中还有未处理完的非零元，则直接加上</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = a-&gt;Element[i].row;</span><br><span class="line">        c-&gt;Element[k].col = a-&gt;Element[i].col;</span><br><span class="line">        c-&gt;Element[k].data = a-&gt;Element[i].data;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= b-&gt;num)</span><br><span class="line">    &#123;<span class="comment">//道理同上,b矩阵的值直接赋给c</span></span><br><span class="line">        k++;</span><br><span class="line">        c-&gt;Element[k].row = b-&gt;Element[j].row;</span><br><span class="line">        c-&gt;Element[k].col = b-&gt;Element[j].col;</span><br><span class="line">        c-&gt;Element[k].data = b-&gt;Element[j].data;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    c-&gt;num = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pTsmatrix p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p-&gt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;p-&gt;Element[i].row, &amp;p-&gt;Element[i].col, &amp;p-&gt;Element[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-行逻辑连接的顺序表"><a href="#3-行逻辑连接的顺序表" class="headerlink" title="3.行逻辑连接的顺序表"></a>3.行逻辑连接的顺序表</h2><p>由上题快速转置，我们可以想到将pos[]数组放在结构体里，得到行逻辑连接顺序表</p><p>概念:为了便于随机存取任意一行的非零元，则需知道每一行的第一个非零元在三元组表中的位置。为此，可将快速转置矩阵的算法中创建的辅助数组cpot，rpos固定在稀疏矩阵的存储结构中。这种带“行链接信息”的三元组表称为行逻辑链接的顺序表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        Triple  data[MaxSize];</span><br><span class="line">        <span class="keyword">int</span>  rpos[MaxRC+<span class="number">1</span>];<span class="comment">//数组起始下标为1</span></span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">//分别为行数，列数，非零元个数</span></span><br><span class="line">&#125;RLSMatrix;</span><br></pre></td></tr></table></figure><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><p>以上述结构进行矩阵乘法，可以体现出其优越性</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418163820144.png" alt="image-20210418163820144"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C=AxB</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++) </span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;l; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">            C[i][j] += A[i][k]*B[k][j]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>矩阵的乘法，当两个值其中一个为0，则乘积为0，因此，应免去这种无效操作。</p><p>例如矩阵元素(1,2,4)与(2,3,6)则可以算出(1,3,24)</p><p>但是若没有相对应的元素(即左乘数的列==右乘数的行),则乘积为0.</p><p>因此,只需在右乘数中寻找符合的非零值，利用上述数据结构特点。</p><p>rpos[row]为第row行第一个非零元素在三元组表中的位置</p><p><strong>基本操作</strong></p><p>M×N</p><p>对于M中每个元素，找到N中满足条件的值，求的乘积。</p><p>矩阵相应位置的值为几个乘积的和，所以设置一个累计和的变量，初值为0.</p><p><strong>易忽略点</strong></p><p>两个稀疏矩阵相乘的值不一定是稀疏矩阵。</p><p>因为几个乘积的和不一定非零，所以算出值后需要检验。</p><p>若为0则跳过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">MultiSMatrix</span><span class="params">(RLSMatrix M, RLSMatrix N, RLSMatrix *Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arow, brow, ccol, p, q, t;</span><br><span class="line">    <span class="keyword">float</span> ctemp[];</span><br><span class="line">    <span class="keyword">if</span> (M.mu != N.nu)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    Q-&gt;mu = M.mu;</span><br><span class="line">    Q-&gt;nu = N.nu;</span><br><span class="line">    Q-&gt;tu = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (M.tu * N.tu != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (arow = <span class="number">0</span>; arow &lt; M.mu; ++arow)</span><br><span class="line">        &#123;</span><br><span class="line">            ctemp[] = <span class="number">0</span>; <span class="comment">//memset(ctemp,0,n*sizeof(float));</span></span><br><span class="line">            Q-&gt;rpos[arow] = Q-&gt;tu;</span><br><span class="line">            <span class="keyword">for</span> (p = M.rpos[arow]; p &lt; M.rpos[arow + <span class="number">1</span>]; ++p)</span><br><span class="line">            &#123;</span><br><span class="line">                brow = M.data[p].j;</span><br><span class="line">                <span class="keyword">for</span> (q = N.rpos[brow]; q &lt; N.rpos[brow + <span class="number">1</span>]; ++q)</span><br><span class="line">                &#123;</span><br><span class="line">                    ccol = N.data[q].j;</span><br><span class="line">                    ctemp[ccol] += M.data[p].elem * N.data[q].elem;</span><br><span class="line">                &#125; <span class="comment">//for q</span></span><br><span class="line">            &#125;     <span class="comment">// for p</span></span><br><span class="line"> <span class="keyword">for</span> (ccol = <span class="number">0</span>; ccol &lt; Q.nu; ++ccol)</span><br><span class="line">            &#123;</span><br><span class="line">       <span class="keyword">if</span> (ctemp[ccol] &#123;</span><br><span class="line">          <span class="keyword">if</span> (++Q-&gt;tu &gt; MAXSIZE)</span><br><span class="line">                     <span class="keyword">return</span> ERROR;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                 Q-&gt;data[Q-&gt;tu].i = arow;</span><br><span class="line">                 Q-&gt;data[Q-&gt;tu].j =ccol;</span><br><span class="line">          Q-&gt;data[Q-&gt;tu].elem=ctemp[ccol];</span><br><span class="line">                    &#125; <span class="comment">//else</span></span><br><span class="line">                   &#125; <span class="comment">//if</span></span><br><span class="line">            &#125;  <span class="comment">//for ccol</span></span><br><span class="line">      &#125; <span class="comment">//for arrow</span></span><br><span class="line">   &#125;  <span class="comment">//if</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度    O(M.mu×N.nu+M.tu×N.tu/N.mu)</p><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210418181608401.png" alt="image-20210418181608401" style="zoom:80%;" /></p><h2 id="4-十字链表"><a href="#4-十字链表" class="headerlink" title="4.十字链表"></a>4.十字链表</h2><p>当需要进行矩阵加法,减法,乘法时，矩阵中非零元素个数和位置会发生变化，若用三元组表表示会移动大量元素,相对较麻烦.</p><p>十字链表能够灵活插入因运算产生的新的非零元素,删除因运算产生的新的零元素.</p><p>由于矩阵有行和列，所以一个结点除了数据域(i, j, elem)之外，还应该用两个方向的指针(right, down)，分别指向行和列。这样整个矩阵构成了一个十字交叉的链表，因此称十字链表。每一行或每一列的头指针，可以用两个一维指针数组来存放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="keyword">int</span>  i, j;</span><br><span class="line">        ElemType  elem;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">right</span>, *<span class="title">down</span>;</span></span><br><span class="line">&#125;OLNode, *OLink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        OLink  *rHead, *cHead;</span><br><span class="line">        <span class="keyword">int</span>  mu, nu, tu;<span class="comment">//行数，列数，非零元个数</span></span><br><span class="line">&#125;CrossList;</span><br></pre></td></tr></table></figure><p>初始化十字链表</p><p><strong>算法实现</strong></p><ol><li>读入稀疏矩阵行数列数，非零元个数</li><li>动态申请行链表,列链表头指针向量</li><li>逐个读入非零元，分别插入行链表,列链表</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">CreateOLSMatrix</span> <span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (M) <span class="built_in">free</span>(M); <span class="built_in">scanf</span>(&amp;m, &amp;n, &amp;t);</span><br><span class="line">    M.mu=m; M.nu=n; M.tu=t;</span><br><span class="line">    <span class="keyword">if</span> (!(M.rhead=(OLink *) <span class="built_in">malloc</span> ((m+<span class="number">1</span>)*<span class="keyword">sizeof</span>(OLink)))) </span><br><span class="line">        <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">    <span class="keyword">if</span> (!(M.chead=(OLink *) <span class="built_in">malloc</span> ((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(OLink)))) </span><br><span class="line">        <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">scanf</span>(&amp;i, &amp;j, &amp;e); i!=<span class="number">0</span>; <span class="built_in">scanf</span>(&amp;i, &amp;j, &amp;e))  &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(p=(OLink*) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(OLNode))) <span class="built_in">exit</span> (OVERFLOW);</span><br><span class="line">        p-&gt;i=i; p-&gt;j=j; p-&gt;elem=e;</span><br><span class="line">        <span class="keyword">if</span> (M.rhead[i]==<span class="literal">NULL</span> || M.rhead[i]-&gt;j &gt; j)  &#123;</span><br><span class="line">            p-&gt;right=M.rhead[i]; M.rhead[i]=p; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (q=M.rhead[i]; (q-&gt;right) &amp;&amp; q-&gt;right-&gt;j &lt; j; q=q-&gt;right);</span><br><span class="line">            p-&gt;right=q-&gt;right; q-&gt;right=p;</span><br><span class="line">        &#125;  <span class="comment">//完成行插入</span></span><br><span class="line"><span class="keyword">if</span> (M.chead[j]==<span class="literal">NULL</span> || M.chead[j]-&gt;i &gt; i)  &#123;</span><br><span class="line">            p-&gt;down=M.chead[j]; M.chead[j]=p; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (q=M.chead[j]; (q-&gt;down) &amp;&amp; q-&gt;down-&gt;i &lt; i; q=q-&gt;down);</span><br><span class="line">            p-&gt;down=q-&gt;down; q-&gt;down=p;</span><br><span class="line">        &#125;  <span class="comment">//完成列插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h3><p><strong>算法原理</strong></p><p>​       对每一行都用行表头出发分别找到A和B在该行中的第一个非零元，假设非空指针pa和pb分别指向矩阵A和B中行值相同的两个结点，</p><p>将B加到A上去时，对A矩阵的十字链表来说,要么改变值(!=0),或者不变(b=0),或者插入一个节点(a=0),或者相加和为0，操作时删除这个节点.</p><p>整个运算从从矩阵第一行逐行进行,对每一行都从行表头出发分别找到A和B在该行的第一个非零元节点后开始比较</p><p>（1）若pa==NULL或pa-&gt;j&gt;pb-&gt;j，则需要在A中插入B结点；<br>（2）若pa-&gt;j==pb-&gt;j，且pa-&gt;elem+pb-&gt;elem!=0，则A结点改值；<br>（3）若pa-&gt;j==pb-&gt;j，且pa-&gt;elem+pb-&gt;elem==0，则需要删除A结点；<br>（4）若pa-&gt;j<pb->j，则只要将pa指针往右推进。<br>        为了便于插入和删除结点，需要设立一些辅助指针，比如pre指针指示pa所指结点的前驱结点，每一列也要设立一个指针hl[j]，初始值和列链表的头指针相同chead[j]。</p><ol><li>若pa ==NULL或pa-&gt;j&gt;pb-&gt;j,表明当前行元素已处理完,需要在A矩阵的链表中插入一个B的节点，也就是要改变pa前一个节点的right域同时改变添加节点所在列上一节点的down域</li><li>若pa-&gt;j<pb->j,使pa节点后移即可，注意改变pre</li><li>若pa-&gt;j == pb-&gt;j，两值相加，注意值是否为0，若为0删除该节点，不为0改变值即可</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">down</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125; OLNode, *OLlink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    OLlink *rhead, *chead; <span class="comment">//指向行或列第一个非零元(指向结构体的指针),可以用数组rhead[row]表示第row行的数据</span></span><br><span class="line">    <span class="keyword">int</span> m, n, len;         <span class="comment">//行列数,非零元个数</span></span><br><span class="line">&#125; CrossList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *, CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *, OLlink, OLlink, OLlink *, OLlink *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CrossList *M = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    CrossList *N = (CrossList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CrossList));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;m, &amp;M-&gt;n);</span><br><span class="line">    N-&gt;m = M-&gt;m;</span><br><span class="line">    N-&gt;n = M-&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M-&gt;len, &amp;N-&gt;len);</span><br><span class="line">    initial(M);</span><br><span class="line">    initial(N);</span><br><span class="line">    plus(M, N);</span><br><span class="line">    print(M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(CrossList *M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink pa = M-&gt;rhead[row];</span><br><span class="line">        <span class="keyword">while</span> (pa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, pa-&gt;i, pa-&gt;j, pa-&gt;e);</span><br><span class="line">            pa = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plus</span><span class="params">(CrossList *M, CrossList *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink pa, pb;</span><br><span class="line">    OLlink pre; <span class="comment">//指向前面一个节点,方便插入</span></span><br><span class="line">    OLlink *hl = (OLlink *)<span class="built_in">malloc</span>((M-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M-&gt;n; j++)</span><br><span class="line">        hl[j] = M-&gt;chead[j]; <span class="comment">//hl[]表示的是每列非零元的pre指向元素，与pre类似</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= M-&gt;m; row++) <span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        pa = M-&gt;rhead[row];</span><br><span class="line">        pb = N-&gt;rhead[row];</span><br><span class="line">        pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (pb) <span class="comment">//当pb有非零元素时进行处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa == <span class="literal">NULL</span> || pa-&gt;j &gt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                Insert(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa != <span class="literal">NULL</span> &amp;&amp; pa-&gt;j &lt; pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                pre = pa;</span><br><span class="line">                pa = pa-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pa-&gt;j == pb-&gt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                add(M, pa, pb, &amp;pre, hl);</span><br><span class="line">                pb = pb-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = pa-&gt;e + pb-&gt;e;</span><br><span class="line">    <span class="keyword">if</span> (data)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;e = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OLlink temp = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">            M-&gt;rhead[pa-&gt;i] = pa-&gt;right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            (*pre)-&gt;right = pa-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = pa;</span><br><span class="line">        pa = pa-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (M-&gt;chead[temp-&gt;j] == temp)</span><br><span class="line">            M-&gt;chead[temp-&gt;j] = hl[temp-&gt;j] = temp-&gt;down;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hl[temp-&gt;j]-&gt;down = temp-&gt;down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(CrossList *M, OLlink pa, OLlink pb, OLlink *pre, OLlink *hl)</span> <span class="comment">//插入有两种情况，一种是pa该行无非零元素，另一种pb所在列小于pa所在列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OLlink p = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    p-&gt;i = pb-&gt;i;</span><br><span class="line">    p-&gt;j = pb-&gt;j;</span><br><span class="line">    p-&gt;e = pb-&gt;e;</span><br><span class="line">    p-&gt;down = p-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*pre) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        M-&gt;rhead[p-&gt;i] = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*pre)-&gt;right = p;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;right = pa;</span><br><span class="line">    </span><br><span class="line">    (*pre) = p;</span><br><span class="line">    pa = (*pre)-&gt;right;<span class="comment">//这一句可以不要</span></span><br><span class="line">    <span class="keyword">if</span> (!M-&gt;chead[p-&gt;j] || M-&gt;chead[p-&gt;j]-&gt;i &gt; p-&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = M-&gt;chead[p-&gt;j];</span><br><span class="line">        M-&gt;chead[p-&gt;j] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;down = hl[p-&gt;j]-&gt;down;</span><br><span class="line">        hl[p-&gt;j]-&gt;down = p;</span><br><span class="line">    &#125;</span><br><span class="line">    hl[p-&gt;j] = p;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(CrossList *Clist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, e;</span><br><span class="line">    Clist-&gt;rhead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    Clist-&gt;chead = (OLlink *)<span class="built_in">malloc</span>((Clist-&gt;n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLlink));</span><br><span class="line">    <span class="comment">// if(rhead||chead)</span></span><br><span class="line">    <span class="comment">// exit(1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;m; i++)</span><br><span class="line">        Clist-&gt;rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Clist-&gt;n; i++)</span><br><span class="line">        Clist-&gt;chead[i] = <span class="literal">NULL</span>;</span><br><span class="line">    OLlink s = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; Clist-&gt;len; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLlink cur = (OLlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode));</span><br><span class="line">        cur-&gt;down = <span class="literal">NULL</span>;</span><br><span class="line">        cur-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// if(cur==NULL)</span></span><br><span class="line">        <span class="comment">// exit(1);</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;e);</span><br><span class="line">        cur-&gt;i = i;</span><br><span class="line">        cur-&gt;j = j;</span><br><span class="line">        cur-&gt;e = e;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;rhead[i] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Clist-&gt;rhead[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;rhead[i];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;right != <span class="literal">NULL</span> &amp;&amp; s-&gt;right-&gt;j &lt; j)</span><br><span class="line">                s = s-&gt;right;</span><br><span class="line">            cur-&gt;right = s-&gt;right;</span><br><span class="line">            s-&gt;right = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Clist-&gt;chead[j] == <span class="literal">NULL</span>)</span><br><span class="line">            Clist-&gt;chead[j] = cur;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = Clist-&gt;chead[j];</span><br><span class="line">            <span class="keyword">while</span> (s-&gt;down != <span class="literal">NULL</span> &amp;&amp; s-&gt;down-&gt;i &lt; i)</span><br><span class="line">                s = s-&gt;down;</span><br><span class="line">            cur-&gt;down = s-&gt;down;</span><br><span class="line">            s-&gt;down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-4-15-数据结构noj_1</title>
      <link href="2021/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_1/"/>
      <url>2021/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84noj_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构noj-1"><a href="#数据结构noj-1" class="headerlink" title="数据结构noj_1"></a>数据结构noj_1</h1><p>个人做的，不当之处欢迎提出，希望一起改进。</p><p>先发前10题  <del>因为后面我也没做</del></p><span id="more"></span><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000331032.png" alt="image-20210416000331032"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elenum;</span><br><span class="line">    <span class="keyword">int</span> element[maxsize];</span><br><span class="line">&#125;<span class="built_in">list</span>,* plist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> insert_num;</span><br><span class="line">    <span class="keyword">int</span> i,j;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;size);</span><br><span class="line">    plist l = (plist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line"> </span><br><span class="line">        l-&gt;elenum=size;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;l-&gt;elenum ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">            l-&gt;element[i] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;insert_num);      </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;l-&gt;elenum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l-&gt;element[i]&gt;=insert_num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>( j = size;j&gt;i;j--)</span><br><span class="line">                &#123;</span><br><span class="line">                l-&gt;element[j] = l-&gt;element[j<span class="number">-1</span>];      </span><br><span class="line">                &#125;</span><br><span class="line">                l-&gt;element[j] = insert_num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==l-&gt;elenum)</span><br><span class="line">        l-&gt;element[i] = insert_num;</span><br><span class="line">        l-&gt;elenum++;   </span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l-&gt;elenum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,l-&gt;element[i],(i==l-&gt;elenum<span class="number">-1</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000434268.png" alt="image-20210416000434268"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sequence_List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> element[maxsize];</span><br><span class="line">    <span class="keyword">int</span> elenum;</span><br><span class="line">&#125; List, *pList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *pLinkList;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList pa = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pLinkList pb, s, r;</span><br><span class="line">    <span class="keyword">int</span> size, i, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    pa-&gt;elenum = size;</span><br><span class="line">    pb = (pLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    s = pb;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        pa-&gt;element[i] = num;</span><br><span class="line">        r = (pLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        r-&gt;num = num;</span><br><span class="line">        s-&gt;next = r;</span><br><span class="line">        s = r;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= (size - <span class="number">1</span>) / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = pa-&gt;element[i];</span><br><span class="line">        pa-&gt;element[i] = pa-&gt;element[size - <span class="number">1</span> - i];</span><br><span class="line">        pa-&gt;element[size - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125; <span class="comment">//顺序表逆序</span></span><br><span class="line">    s = pb-&gt;next;</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Node *p;</span><br><span class="line">    <span class="keyword">while</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        p = s;</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">        p-&gt;next = pb-&gt;next;</span><br><span class="line">        pb-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;element[i], (i == size - <span class="number">1</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, p-&gt;num, (p-&gt;next == <span class="literal">NULL</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pa);</span><br><span class="line">    <span class="built_in">free</span>(pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000510643.png" alt="image-20210416000510643"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">&#125; List, *pList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(pList)</span></span>;</span><br><span class="line"><span class="function">pList <span class="title">cross_list</span><span class="params">(pList, pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(pList, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_num</span><span class="params">(pList, pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    pList pa ;</span><br><span class="line">    pa = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pList pb = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    pList pc = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;pa-&gt;length, &amp;pb-&gt;length, &amp;pc-&gt;length);</span><br><span class="line">    give_value(pa);</span><br><span class="line">    give_value(pb);</span><br><span class="line">    give_value(pc);</span><br><span class="line">    pb = cross_list(pb, pc);</span><br><span class="line">    delete_num(pa, pb);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pa-&gt;length; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;data[i], (i == pa-&gt;length - <span class="number">1</span>) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pa);</span><br><span class="line">    <span class="built_in">free</span>(pb);</span><br><span class="line">    <span class="built_in">free</span>(pc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(pList p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; p-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        p-&gt;data[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pList <span class="title">cross_list</span><span class="params">(pList p, pList q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pList result = (pList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    t =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; p-&gt;length &amp;&amp; j &lt; q-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data[i] &gt; q-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j++;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data[i] &lt; q-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result-&gt;data[t] = p-&gt;data[i];</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result-&gt;length = t+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_num</span><span class="params">(pList pa, pList pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">int</span> j ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pb-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pa-&gt;length;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pb-&gt;data[i] &lt; pa-&gt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pb-&gt;data[i] &gt; pa-&gt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                delete_list (pa, j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(pList p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &lt; p-&gt;length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;data[i] = p-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000602232.png" alt="image-20210416000602232"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*Linklist;</span><br><span class="line"><span class="function">Linklist <span class="title">initial_list</span><span class="params">(Linklist,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(Linklist,Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist L,M;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    L = initial_list(L,n);</span><br><span class="line">    M = initial_list(M,m);</span><br><span class="line">    merge(L,M);</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,L-&gt;data,(L-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(Linklist pa,Linklist pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist p=pa-&gt;next,q=pb-&gt;next;</span><br><span class="line">    pb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&gt;q-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pa-&gt;next = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pa-&gt;next = q;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p<span class="comment">/* condition */</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;next = p;</span><br><span class="line">        pa = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q)</span><br><span class="line">    &#123;</span><br><span class="line">        pa-&gt;next = q;</span><br><span class="line">        pa = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pa-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Linklist <span class="title">initial_list</span><span class="params">(Linklist L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    Linklist s = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        s-&gt;data = num;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000639344.png" alt="image-20210416000639344"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *Linklist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(Linklist, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_list</span><span class="params">(Linklist, Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(Linklist, Linklist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist pa = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Linklist pb = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Linklist pc = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">int</span> num_1, num_2, num_3;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;num_1, &amp;num_2, &amp;num_3);</span><br><span class="line">    give_value(pa, num_1);</span><br><span class="line">    give_value(pb, num_2);</span><br><span class="line">    give_value(pc, num_3);</span><br><span class="line">    cross_list(pb, pc);</span><br><span class="line">    delete_list(pa, pb);</span><br><span class="line">    <span class="keyword">while</span> (pa-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, pa-&gt;next-&gt;data,(pa-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        pa = pa-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(Linklist pa, Linklist pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist tail = pa;</span><br><span class="line">    Linklist p = tail-&gt;next;</span><br><span class="line">    Linklist q;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        q = pb-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data == q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(tail-&gt;next);</span><br><span class="line">                tail-&gt;next = p;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            p = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">give_value</span><span class="params">(Linklist p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist s, r;</span><br><span class="line">    s = p;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        r = (Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r-&gt;data);</span><br><span class="line">        s-&gt;next = r;</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_list</span><span class="params">(Linklist p, Linklist q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linklist s, r, tail;</span><br><span class="line">    tail = p;</span><br><span class="line">    s = tail-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        r = q-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s-&gt;data == r-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">                s = tail-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = r-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(tail-&gt;next);</span><br><span class="line">            tail-&gt;next = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000713105.png" alt="image-20210416000713105"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">&#125; Node, *pNode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">const</span> pNode,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">const</span> pNode, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Locate_</span><span class="params">(<span class="keyword">const</span> pNode, <span class="keyword">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_List</span><span class="params">(<span class="keyword">const</span> pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode pa = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">int</span> size, l_size;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;size, &amp;l_size);</span><br><span class="line">    initial(pa, size);</span><br><span class="line">    <span class="keyword">while</span>(l_size--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;A&#x27;</span>||ch&gt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        &#125;</span><br><span class="line">        Locate_(pa,ch);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(pa,size);</span><br><span class="line">    print_List(pa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_List</span><span class="params">(pNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode r;</span><br><span class="line">    r = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(r != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,r-&gt;data,(r-&gt;next==<span class="literal">NULL</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        r = r-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">const</span> pNode p,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pNode head,pa,pb;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      head = p;</span><br><span class="line">      pa = head-&gt;next;</span><br><span class="line">      pb = pa-&gt;next;</span><br><span class="line">      j = size-i<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">while</span>(j--)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(pa-&gt;freq&lt;pb-&gt;freq)</span><br><span class="line">          &#123;</span><br><span class="line">              pa-&gt;next = pb-&gt;next;</span><br><span class="line">              pb-&gt;next = pa;</span><br><span class="line">              head-&gt;next = pb;</span><br><span class="line">          &#125;</span><br><span class="line">          head = head-&gt;next;</span><br><span class="line">          pa = head-&gt;next;</span><br><span class="line">          pb = pa-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Locate_</span><span class="params">(<span class="keyword">const</span> pNode p, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode r = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (r != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r-&gt;data == ch)</span><br><span class="line">        &#123;</span><br><span class="line">            (r-&gt;freq)++;</span><br><span class="line">            <span class="comment">// printf(&quot;%c++\n&quot;,r-&gt;data);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">const</span> pNode p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode s, r;</span><br><span class="line">    r = p;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (size--)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;A&#x27;</span>||ch&gt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;data = ch;</span><br><span class="line">        s-&gt;freq = <span class="number">0</span>;</span><br><span class="line">        s-&gt;pre = r;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        p-&gt;pre = s;</span><br><span class="line">        s-&gt;next = p;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000746427.png" alt="image-20210416000746427"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">stack</span>,*pStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_Pop</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    pStack op_stack = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">    op_stack-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch=getchar())!=EOF&amp;&amp;ch!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            push_(op_stack,ch);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span>(match(get_Pop(op_stack),ch))</span><br><span class="line">            &#123;</span><br><span class="line">                pop(op_stack);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack top,<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack s = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">    s-&gt;op = ch;</span><br><span class="line">    s-&gt;next = top-&gt;next;</span><br><span class="line">    top-&gt;next = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(pStack top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    pStack r = top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ret = r-&gt;op;</span><br><span class="line">    top-&gt;next = r-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(r);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_Pop</span><span class="params">(pStack top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    pStack r = top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ret = r-&gt;op;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> src,<span class="keyword">int</span> dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(src==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dst==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416000817929.png" alt="image-20210416000817929"></p><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack_</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Stack_, *pStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pStack)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_alpha</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_op</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bolan</span><span class="params">(pStack, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(pStack)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack opr = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack_));</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    opr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is_alpha(ch))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Bolan(opr, ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!is_empty(opr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, opr-&gt;next-&gt;data);</span><br><span class="line">        pop_(opr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(opr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(pStack pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pa-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_op</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_</span><span class="params">(pStack head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack pop_s = head-&gt;next;</span><br><span class="line">    head-&gt;next = pop_s-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pop_s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_</span><span class="params">(<span class="keyword">int</span> op_1, <span class="keyword">int</span> op_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op_1 == <span class="string">&#x27;*&#x27;</span> || op_1 == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (op_2 == <span class="string">&#x27;+&#x27;</span> || op_2 == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op_2 == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op_2 == <span class="number">0</span>)<span class="comment">//无元素，为空栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pStack head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty(head))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_</span><span class="params">(pStack head, <span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pStack r = (pStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack_));</span><br><span class="line">    r-&gt;data = ch;</span><br><span class="line">    r-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_alpha</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bolan</span><span class="params">(pStack opr, <span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top_ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((top_ch = get_top(opr)) != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, top_ch);</span><br><span class="line">            pop_(opr);</span><br><span class="line">        &#125;</span><br><span class="line">        pop_(opr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        top_ch = get_top(opr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (compare_(ch, top_ch)) <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pop_(opr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, top_ch);</span><br><span class="line">            push_(opr, ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h2><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416001130594.png" alt="image-20210416001130594"></p><p><strong>这个题系统设置有问题，不用太注意</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Element[maxsize];</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">&#125; Queue, *pQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="comment">// void push(pQueue, int);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pQueue <span class="built_in">queue</span> = (pQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initial(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="comment">// fflush(stdin);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;rear&lt;=<span class="built_in">queue</span>-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pop_date;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pop_date);</span><br><span class="line">    <span class="keyword">while</span>(get_top(<span class="built_in">queue</span>)!=pop_date)</span><br><span class="line">    &#123;</span><br><span class="line">        pop(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pop(<span class="built_in">queue</span>);</span><br><span class="line">    print(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> date;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q-&gt;length);</span><br><span class="line">    q-&gt;head = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;date);</span><br><span class="line">        q-&gt;Element[q-&gt;rear] = date;</span><br><span class="line">        (q-&gt;rear)++;</span><br><span class="line">    &#125;<span class="keyword">while</span>((q-&gt;rear&lt;q-&gt;length)&amp;&amp;getchar()!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (q-&gt;head)%q-&gt;length;i&lt;q-&gt;rear;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,q-&gt;Element[i],(i==q-&gt;rear<span class="number">-1</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head!=q-&gt;rear)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,get_top(q));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void push(pQueue q, int x)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     // if ((q-&gt;rear+1)%q-&gt;length==q-&gt;head)</span></span><br><span class="line"><span class="comment">//     // return false;</span></span><br><span class="line"><span class="comment">//     q-&gt;Element[q-&gt;rear] = x;</span></span><br><span class="line"><span class="comment">//     q-&gt;rear = (q-&gt;rear+1)%(q-&gt;length);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_top</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    x = q-&gt;Element[q-&gt;head];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(pQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if(q-&gt;head==q-&gt;rear)</span></span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line">    q-&gt;Element[q-&gt;head] = <span class="number">0</span>;</span><br><span class="line">    q-&gt;head = (q-&gt;head+<span class="number">1</span>)%q-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/the-helpless-beggar/mypics/raw/master/image-20210416001238359.png" alt="image-20210416001238359"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[Maxsize];</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">&#125; Queue, *pQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;        <span class="comment">//初始化队列，将前k项赋值，前k-1项为0，k项为1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fibonacci</span><span class="params">(pQueue, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//叠加，求得k的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;          <span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pQueue, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;max, &amp;k);</span><br><span class="line">    pQueue q = (pQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    initial(q, k);</span><br><span class="line">    fibonacci(q, max, k);</span><br><span class="line">    print(q, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(pQueue q, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = q-&gt;head; i &lt;= q-&gt;rear; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, q-&gt;data[i], (i == q-&gt;rear) ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(pQueue q, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k - <span class="number">1</span>; i++)</span><br><span class="line">        q-&gt;data[i] = <span class="number">0</span>;</span><br><span class="line">    q-&gt;head = <span class="number">1</span>;</span><br><span class="line">    q-&gt;data[k] = <span class="number">1</span>;</span><br><span class="line">    q-&gt;rear = (q-&gt;head) + k - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fibonacci</span><span class="params">(pQueue q, <span class="keyword">int</span> max, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!((q-&gt;data[q-&gt;rear] &lt;= max) &amp;&amp; (q-&gt;data[(q-&gt;rear) + <span class="number">1</span>] &gt; max)))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        add(q, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pQueue q, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q-&gt;head += <span class="number">1</span>;</span><br><span class="line">    q-&gt;rear = q-&gt;head + t - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = q-&gt;head; k &lt;= (q-&gt;rear) + <span class="number">1</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k &lt; t)</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k == t)</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;data[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k - t; i &lt; k; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                q-&gt;data[k] += q-&gt;data[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> data_structure </tag>
            
            <tag> noj </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
