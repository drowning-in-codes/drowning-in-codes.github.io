<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sekyoro的博客小屋</title>
  
  
  <link href="https://www.sekyoro.top/atom.xml" rel="self"/>
  
  <link href="https://www.sekyoro.top/"/>
  <updated>2024-06-03T09:00:46.449Z</updated>
  <id>https://www.sekyoro.top/</id>
  
  <author>
    <name>Sekyoro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>modern cpp learning</title>
    <link href="https://www.sekyoro.top/2024/06/02/modern-cpp-learning/"/>
    <id>https://www.sekyoro.top/2024/06/02/modern-cpp-learning/</id>
    <published>2024-06-02T14:31:56.000Z</published>
    <updated>2024-06-03T09:00:46.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>cpp,古老又传统的语言,但它依然是许多语言希望替代战胜的.这里介绍一些新特性.<br><span id="more"></span></p><p>由于cpp只有语言标准,不同编译器具体实现不同,这里使用的是clang.</p><h3 id="NULL与nullptr"><a href="#NULL与nullptr" class="headerlink" title="NULL与nullptr"></a>NULL与nullptr</h3><p>NULL在不同编译器中实现不同,通常是0或者((void<em>)0).但是:C++ <strong>不允许</strong>直接将 `void </em><code>隐式转换到其他类型，从而</code>((void*)0)<code>不是</code>NULL` 的合法实现。</p><p>没有了 <code>void *</code> 隐式转换的 C++ 只好将 <code>NULL</code> 定义为 <code>0</code>。而这依然会产生新的问题，将 <code>NULL</code> 定义成 <code>0</code> 将导致 <code>C++</code> 中重载特性发生混乱</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://changkun.de/modern-cpp/zh-cn/01-intro/">第 1 章 迈向现代 C++ 现代 C++ 教程: 高速上手 C++ 11/14/17/20 - Modern C++ Tutorial: C++ 11/14/17/20 On the Fly (changkun.de)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;cpp,古老又传统的语言,但它依然是许多语言希望替代战胜的.这里介绍一些新特性.&lt;br&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="https://www.sekyoro.top/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>深度学习可解释性分析</title>
    <link href="https://www.sekyoro.top/2024/05/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%AF%E8%A7%A3%E9%87%8A%E6%80%A7%E5%88%86%E6%9E%90/"/>
    <id>https://www.sekyoro.top/2024/05/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%AF%E8%A7%A3%E9%87%8A%E6%80%A7%E5%88%86%E6%9E%90/</id>
    <published>2024-05-29T07:37:15.000Z</published>
    <updated>2024-05-31T09:37:20.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这种分析貌似在大模型时代没有使用那么多了,所以这里大概了解一下.<br><span id="more"></span></p><p>主要了解CAM,Grad-CAM可视化方法以及Sillancy map的概念</p><h3 id="Learning-Deep-Features-for-Discriminative-Localization"><a href="#Learning-Deep-Features-for-Discriminative-Localization" class="headerlink" title="Learning Deep Features for Discriminative Localization"></a>Learning Deep Features for Discriminative Localization</h3><p><img data-src="https://s2.loli.net/2024/05/31/yOYfGdwV7c8JhmW.png" alt="image-20240531153653129" style="zoom:50%;" /></p><p>对于给定的图像,令f~k~( x , y)表示空间位置( x , y)处最后一个卷积层中单元k的激活值.然后,对于单元k,执行全局平均池化的结果F^k^为∑~x,y~ f~k~( x ,y).因此,对于给定的类c,softmax的输入S~c~=∑~k~ w^c^ ~k~F~k~,其中w^c^~k~是单位k对应于类c的权重.本质上,w^c^~k~表示F~k~对c类的重要性.</p><p>最后通过exp(S~c~ )/∑~c~ exp(S~c~ )给出类c,P~c~的softmax的输出.</p><p><img data-src="https://s2.loli.net/2024/05/31/1yp7RFxnXhuAbaN.png" alt="image-20240531154551531"></p><p>通过将F~k~ =∑~x,y~f~k~( x,y)插入类得分S~c~,得到</p><script type="math/tex; mode=display">\begin{aligned}S_{c}& =\sum_kw_k^c\sum_{x,y}f_k(x,y)  \\&=\sum_{x,y}\sum_{k}w_{k}^{c}f_{k}(x,y).\end{aligned}</script><p>将M~c~定义为c类的类激活映射,其中每个空间元素由S~c~ =∑~x,y~M~c~( x ,y),因此M~c~( x , y)直接表明空间网格( x , y)上的激活导致图像分类到c类的重要性.</p><p>所以这里的class activation map是根据卷积层特征来的,权重值计算依赖于global pooling.</p><h3 id="Grad-CAM-Visual-Explanations-from-Deep-Networks-via-Gradient-based-Localization"><a href="#Grad-CAM-Visual-Explanations-from-Deep-Networks-via-Gradient-based-Localization" class="headerlink" title="Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization"></a>Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization</h3><blockquote><p>CAM对于网络结构有要求，不采用GAP方法不能使用；且只能可视化最后一层的卷积</p></blockquote><p>提出了一种从基于卷积神经网络( Convolutional Neural Network，CNN )的一大类模型中为决策产生”视觉解释”的技术,使其更加透明和可解释.</p><p>我们的方法- -梯度加权类激活映射( Gradient-weighted Class Activation Mapping，Grad-CAM )，利用任意目标概念(在分类网络中说’狗’ ,或者在描述网络中说词序列)流入最终卷积层的梯度，产生一个粗略的定位图，突出图像中的重要区域，用于预测概念</p><p>与以前的方法不同，Grad - CAM适用于各种各样的CNN模型家族：( 1 )具有全连接层的CNN (例如. VGG ),( 2 )用于结构化输出的CNNs (如字幕),( 3 )用于具有多模态输入(例如,视觉问答)或强化学习的任务的CNNs，都没有架构变化或重新训练.</p><p><img data-src="https://s2.loli.net/2024/05/31/btfxHFEojOwuhAy.png" alt="image-20240531162540520"></p><script type="math/tex; mode=display">\alpha_k^c=\overbrace{\frac1Z\sum_i\sum_j}^{\text{global average pooling}}\underbrace{\frac{\partial y^c}{\partial A_{ij}^k}}_{\text{gradients via backprop}}</script><script type="math/tex; mode=display">L_{\text{Grad-CAM}}^c=ReLU\underbrace{\left(\sum\alpha_k^cA^k\right)}_{\text{linear combination}}</script><p>其中A^k^是特征图的值,权重由自己定变成了梯度.</p><p><img data-src="https://s2.loli.net/2024/05/31/rjbTCeuOVwna2h9.png" alt="image-20240531162743950"></p><p>为了得到对任意类c的宽u和高v的类判别局部化映射Grad - CAM Lc Grad-CAM∈R^u×v^，我们首先计算类c的得分y~c~ (在softmax之前)关于卷积层的特征图激活A~k~的梯度，即∑y~c~∑A~k~。</p><h3 id="Grad-CAM-Generalized-Gradient-based-Visual-Explanations-for-Deep-Convolutional-Networks"><a href="#Grad-CAM-Generalized-Gradient-based-Visual-Explanations-for-Deep-Convolutional-Networks" class="headerlink" title="Grad-CAM++: Generalized Gradient-based Visual Explanations for Deep Convolutional Networks"></a>Grad-CAM++: Generalized Gradient-based Visual Explanations for Deep Convolutional Networks</h3><p>本文的工作主要受到两种算法的启发，即CAM和Grad - CAM,这两种算法在当今被广泛使用.</p><p>CAM和Grad - CAM都基于一个基本假设,即<strong>对于特定类别c的最终得分Y~c~可以写成其全局平均池化最后一个卷积层特征图A~k~的线性组合</strong></p><p><img data-src="https://s2.loli.net/2024/05/31/yXqhk83Tb4KQIsR.png" alt="image-20240531170624521"></p><script type="math/tex; mode=display">Y^c=\sum_kw_k^c.\sum_i\sum_jA_{ij}^k</script><p>在Grad - CAM和CAM中基于梯度的可视化技术的基础上提出了一种广义的方法，称为Grad - CAM + +，它是通过显式地建模CNN特征图中每个像素对最终输出的贡献来制定的。</p><script type="math/tex; mode=display">w_k^c=\sum_i\sum_j\alpha_{ij}^{kc}.relu(\frac{\partial Y^c}{\partial A_{ij}^k})</script><p><img data-src="https://s2.loli.net/2024/05/31/HQbnsrTIEe8o7Gd.png" alt="image-20240531172032414"></p><script type="math/tex; mode=display">Y^{c}=\sum_{k}[\sum_{i}\sum_{j}\{\sum_{a}\sum_{b}\alpha_{ab}^{kc}.relu(\frac{\partial Y^{c}}{\partial A_{ab}^{k}})\}A_{ij}^{k}]</script><h3 id="Smooth-Grad-CAM-An-Enhanced-Inference-Level-Visualization-Technique-for-Deep-Convolutional-Neural-Network-Models"><a href="#Smooth-Grad-CAM-An-Enhanced-Inference-Level-Visualization-Technique-for-Deep-Convolutional-Neural-Network-Models" class="headerlink" title="Smooth Grad-CAM++: An Enhanced Inference Level Visualization Technique for Deep Convolutional Neural Network Models"></a>Smooth Grad-CAM++: An Enhanced Inference Level Visualization Technique for Deep Convolutional Neural Network Models</h3><p>加入噪声</p><script type="math/tex; mode=display">M_c(I)=\frac1n\sum_1^nM_c(I+\mathcal{N}(0,\sigma^2))</script><script type="math/tex; mode=display">M_c(x,y)=\sum_kw_c^kf^k(x,y)=\sum_kw_c^k\cdot\frac1n\sum_1^n(f_{x,y|I+\mathcal{N}(0,\sigma^2)}^k)</script><blockquote><p>由于添加了噪声，所以更能够突出特征图在噪声中robust的部分，这部分被认为更重要；此方法可以用来比较图片不同位置对神经元的激活强度，所以可以进行choosing neurons的操作</p></blockquote><h3 id="Saliency-map"><a href="#Saliency-map" class="headerlink" title="Saliency map"></a>Saliency map</h3><p>表示显著性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="keyword">return</span> (image - image.<span class="built_in">min</span>()) / (image.<span class="built_in">max</span>() - image.<span class="built_in">min</span>())</span><br><span class="line">  <span class="comment"># return torch.log(image)/torch.log(image.max())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_saliency_maps</span>(<span class="params">x, y, model</span>):</span></span><br><span class="line">  model.<span class="built_in">eval</span>()</span><br><span class="line">  x = x.cuda()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># we want the gradient of the input x</span></span><br><span class="line">  x.requires_grad_()</span><br><span class="line">  </span><br><span class="line">  y_pred = model(x)</span><br><span class="line">  loss_func = torch.nn.CrossEntropyLoss()</span><br><span class="line">  loss = loss_func(y_pred, y.cuda())</span><br><span class="line">  loss.backward()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># saliencies = x.grad.abs().detach().cpu()</span></span><br><span class="line">  saliencies, _ = torch.<span class="built_in">max</span>(x.grad.data.<span class="built_in">abs</span>().detach().cpu(),dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># We need to normalize each image, because their gradients might vary in scale</span></span><br><span class="line">  saliencies = torch.stack([normalize(item) <span class="keyword">for</span> item <span class="keyword">in</span> saliencies])</span><br><span class="line">  <span class="keyword">return</span> saliencies</span><br><span class="line">  <span class="comment"># images, labels = train_set.getbatch(img_indices)</span></span><br><span class="line">saliencies = compute_saliency_maps(images, labels, model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualize</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="built_in">len</span>(img_indices), figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> row, target <span class="keyword">in</span> <span class="built_in">enumerate</span>([images, saliencies]):</span><br><span class="line">  <span class="keyword">for</span> column, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(target):</span><br><span class="line">    <span class="keyword">if</span> row==<span class="number">0</span>:</span><br><span class="line">      axs[row][column].imshow(img.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).numpy())</span><br><span class="line">      <span class="comment"># What is permute?</span></span><br><span class="line">      <span class="comment"># In pytorch, the meaning of each dimension of image tensor is (channels, height, width)</span></span><br><span class="line">      <span class="comment"># In matplotlib, the meaning of each dimension of image tensor is (height, width, channels)</span></span><br><span class="line">      <span class="comment"># permute is a tool for permuting dimensions of tensors</span></span><br><span class="line">      <span class="comment"># For example, img.permute(1, 2, 0) means that,</span></span><br><span class="line">      <span class="comment"># - 0 dimension is the 1 dimension of the original tensor, which is height</span></span><br><span class="line">      <span class="comment"># - 1 dimension is the 2 dimension of the original tensor, which is width</span></span><br><span class="line">      <span class="comment"># - 2 dimension is the 0 dimension of the original tensor, which is channels</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      axs[row][column].imshow(img.numpy(), cmap=plt.cm.hot)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/inseq-team/inseq?tab=readme-ov-file">inseq-team/inseq: Interpretability for sequence generation models 🐛 🔍 (github.com)</a></li><li><a href="https://www.youtube.com/watch?v=WQY85vaQfTI&amp;ab_channel=Hung-yiLee">【機器學習2021】機器學習模型的可解釋性 (Explainable ML) (上) – 為什麼類神經網路可以正確分辨寶可夢和數碼寶貝呢？ (youtube.com)</a></li><li><a href="https://www.youtube.com/watch?v=RRGZs5qTeuQ&amp;ab_channel=Hung-yiLee">【機器學習2023】 HW9 - Explainable AI (youtube.com)</a></li><li><a href="https://weichengan.com/2020/11/30/paper_notes/cam_notes/">论文笔记：CAM、Grad-CAM、Grad-CAM++和Smooth Grad-CAM++ | CassiniWei’s Blog (weichengan.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;这种分析貌似在大模型时代没有使用那么多了,所以这里大概了解一下.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>协同感知数据集介绍</title>
    <link href="https://www.sekyoro.top/2024/05/23/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.sekyoro.top/2024/05/23/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-05-23T02:10:14.000Z</published>
    <updated>2024-05-28T10:11:56.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目前深度学习的方法都是数据驱动的,在协同感知方面,数据集目前不算特别多,主要存在1)真实数据较少2)不同数据集之间配置差异较大,需要自行修改等.</p><span id="more"></span><h2 id="协同感知数据集"><a href="#协同感知数据集" class="headerlink" title="协同感知数据集"></a>协同感知数据集</h2><p><img data-src="https://s2.loli.net/2024/05/28/XfzY8nQyI3adCNM.png" alt="image-20240528181153135"></p><p>目前找到的数据集还是不少的.</p><h3 id="OPV2V-2022"><a href="#OPV2V-2022" class="headerlink" title="OPV2V 2022"></a>OPV2V 2022</h3><p>推出了首个大规模开放式车对车感知模拟数据集。该数据集包含 <strong>70 多个场景、11,464 个帧和 232,913 个注释三维车辆边界框</strong>，<strong>收集自 CARLA 的 8 个城镇和洛杉矶卡尔弗城的一个数字城镇</strong>。然后构建了一个包含 16 个实施模型的综合基准，以评估几种信息融合策略（即早期、后期和中间融合）与最先进的激光雷达检测算法。</p><h3 id="V2XSet-2022"><a href="#V2XSet-2022" class="headerlink" title="V2XSet 2022"></a>V2XSet 2022</h3><p>研究了如何应用 “车对物”（V2X）通信来提高自动驾驶汽车的感知性能。我们利用新颖的视觉转换器（Vision Transformer）提出了一个具有 V2X 通信功能的稳健合作感知框架。具体来说，我们建立了一个整体注意力模型，即 V2X-ViT，以有效融合道路代理（即车辆和基础设施）之间的信息。V2X-ViT 由异构多代理自我注意和多尺度窗口自我注意交替层组成，可捕捉代理间的交互和每个代理的空间关系。这些关键模块采用统一的 Transformer 架构设计，以应对常见的 V2X 挑战，包括异步信息共享、姿势错误和 V2X 组件的异构性。</p><p><img data-src="https://s2.loli.net/2024/03/22/3dLmHN96vbuVBtY.png" alt="image-20240322144729411"></p><p>车与道路  CARLA和OPENCDA创建的模拟数据集</p><h3 id="DAIR-V2X-2022"><a href="#DAIR-V2X-2022" class="headerlink" title="DAIR-V2X 2022"></a>DAIR-V2X 2022</h3><p>为了加速车辆-基础设施协同自动驾驶（VICAD）的计算机视觉研究和创新，我们发布了 DAIR-V2X 数据集，这是<strong>首个用于 VICAD 的大规模、多模态、多视角真实场景数据集</strong>。</p><h3 id="V2X-Sim-2022"><a href="#V2X-Sim-2022" class="headerlink" title="V2X-Sim 2022"></a>V2X-Sim 2022</h3><p>车对物（V2X）通信技术实现了车辆与邻近环境中许多其他实体之间的协作，可以从根本上改善自动驾驶的感知系统。然而，公共数据集的缺乏极大地限制了协同感知的研究进展。为了填补这一空白，我们提出了 V2X-Sim—一个<strong>用于 V2X 辅助自动驾驶的综合模拟多代理感知数据集</strong>。V2XSim 提供：（1）来自路边装置（RSU）和多辆车的多代理传感器记录，可实现协同感知；（2）多模态传感器流，可促进多模态感知；以及（3）多种地面实况，可支持各种感知任务。同时，我们建立了一个开源测试平台，并在检测、跟踪和分割等三个任务上为最先进的协同感知算法提供了基准。V2X-Sim 试图在现实数据集广泛可用之前，促进自动驾驶的协同感知研究。</p><h3 id="V2V4Real-2023"><a href="#V2V4Real-2023" class="headerlink" title="V2V4Real 2023"></a>V2V4Real 2023</h3><p>最近的研究表明，车对车（V2V）协同感知系统在彻底改变自动驾驶行业方面具有巨大潜力。然而，真实世界数据集的缺乏阻碍了这一领域的发展。为了促进协同感知的发展，我们提出了 V2V4Real，这是首个<strong>大规模真实世界多模态 V2V 感知数据集</strong>。</p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>现代自动驾驶感知协同对于遮挡敏感并且缺乏长范围感知能力,这是阻碍五级自动驾驶的关键瓶颈之一.</p><p>最近的研究表明，<strong>车对车（V2V）协作感知系统具有彻底改变自动驾驶行业的巨大潜力</strong>。然而，<strong>缺乏真实世界的数据集阻碍了该领域的进步。为了促进合作感知的发展，我们提出了 V2V4Real</strong>，这是第一个用于 V2V 感知的大规模现实世界多模态数据集。这些数据是由两辆配备多模态传感器的车辆在不同场景中一起行驶收集的。我们的 V2V4Real 数据集覆盖了 <strong>410 公里的驾驶区域，包括 20K LiDAR 帧、40K RGB 帧、240K 5 个类别的带注释 3D 边界框以及覆盖所有驾驶路线的 HDMap</strong>。</p><blockquote><p>自动驾驶技术在国际上有一个严格的分级标准，而美国交通部选择的是美国汽车工程师学会(Society of Automotive Engineers)给出的评定标准，其主要内容是：</p><p>0级：无自动驾驶，由人类驾驶员全权操控汽车，可以得到警告或干预系统的辅助;</p><p>1级：驾驶支援，通过驾驶环境对方向盘和加减速中的一项操作提供驾驶支持，其他的驾驶动作都由人类驾驶员进行操作;</p><p>2级：部分自动化，通过驾驶环境对方向盘和加减速中的多项操作提供驾驶支持，其他的驾驶动作都由人类驾驶员进行操作。</p><p>3级：有条件自动化，由自动驾驶系统完成所有的驾驶操作。根据系统要求，人类驾驶者需要在适当的时候提供应答。</p><p>4级：高度自动化，由自动驾驶系统完成所有的驾驶操作。根据系统要求，人类驾驶者不一定需要对所有的系统请求做出应答，包括限定道路和环境条件等。</p><p>5级：完全自动化，在所有人类驾驶者可以应付的道路和环境条件下，均可以由自动驾驶系统自主完成所有的驾驶操作。</p></blockquote><p>V2V4Real 引入了三个感知任务，包括协作 3D 对象检测、协作 3D 对象跟踪和用于协作感知的 Sim2Real 域自适应。我们提供了近期协作感知算法在三个任务上的综合基准。 V2V4Real 数据集和代码库可以在 Research.seas.ucla.edu/mobility-lab/v2v4real 上找到。</p><p>我们收集了 19 个小时的 310K 帧的驾驶数据。我们手动选择最具代表性的 67 个场景，每个场景时长 10-20 秒。我们以 10Hz 的频率对帧进行采样，得到总共 20K 帧的 LiDAR 点云和 40K 帧的 RGB 图像。对于每个场景，我们确保两辆车传感器系统之间的异步小于 50 毫秒。所有场景都与包含可行驶区域、道路边界以及虚线的地图对齐。</p><ul><li>协作者的相对位姿存在不可避免的误差，这在将数据转换到统一坐标系时会产生全局错位。</li><li>协作者的传感器测量通常不同步，这是由不同传感器系统的异步以及数据传输过程中的通信延迟造成的</li><li>典型的V2V通信技术需要有限的带宽，这限制了传输数据的大小[31,40,49]。因此，协作检测算法必须考虑精度和带宽要求之间的权衡</li></ul><p><strong>训练细节.</strong>对于所有三个任务，数据集分为训练/验证/测试集，分别具有 <strong>14,210/2,000/3,986 帧</strong>。所有检测模型均采用 PointPillar  作为骨干从点云中提取 2D 特征。我们用 60 个 epoch 训练所有模型，每个 GPU (RTX3090) 的批量大小为 4，学习率为 0.001，并通过余弦退火来衰减学习率。早期停止用于寻找最佳时期。我们还为所有实验添加了正常的点云数据增强，包括缩放、旋转和翻转。我们使用权重衰减为 1×10−2 的 AdamW来优化我们的模型。对于跟踪任务，我们将前 3 帧和当前帧一起作为输入.</p><h3 id="RCooper-A-Real-world-Large-scale-Dataset-for-Roadside-Cooperative-Perception-2024"><a href="#RCooper-A-Real-world-Large-scale-Dataset-for-Roadside-Cooperative-Perception-2024" class="headerlink" title="RCooper: A Real-world Large-scale Dataset for Roadside Cooperative Perception 2024"></a>RCooper: A Real-world Large-scale Dataset for Roadside Cooperative Perception 2024</h3><p>近年来，路侧感知的价值逐渐凸显并得到认可，它可以延伸自动驾驶和交通管理的边界。</p><p>然而，现有的路侧感知方法仅针对单一基础设施的传感器系统，由于感知范围和盲区的限制，无法实现对交通区域的全面理解。面向高质量的路侧感知，我们需要路侧协同感知( Roadside Cooperative Perception，RCooper )来实现面向受限交通区域的实际区域覆盖路侧感知。Rcooper有其特定领域的挑战，但由于缺乏数据集而阻碍了进一步的探索。</p><p><img data-src="https://s2.loli.net/2024/05/24/43wQjzbeqUEdXTs.png" alt="image-20240524101039784"></p><p>因此，我们发布了第一个真实世界的大规模RCooper数据集，以启动对实际路边协作感知的研究，包括检测和跟踪。人工标注的数据集包括50k幅图像和30k个点云，其中包含两个具有代表性的交通场景(即,交叉口和走廊)。所构建的基准证明了路侧合作感知的有效性，并展示了进一步研究的方向。</p><h3 id="TUMTraf-V2X-2024"><a href="#TUMTraf-V2X-2024" class="headerlink" title="TUMTraf-V2X 2024"></a>TUMTraf-V2X 2024</h3><p>协作感知为增强自动驾驶车辆的能力和改善道路安全提供了许多好处。除了车载传感器外，使用路边传感器增加了可靠性，并扩展了传感器的范围。</p><p>数据集包含2，000个标记点云和5，000张来自5个路侧和4个机载传感器的标记图像。它包括30k个带有轨道ID和精确的GPS和IMU数据的3D盒子。标注了八个类别，涵盖了具有挑战性的驾驶操作的遮挡场景，如交通违规、接近失误事件、超车和掉头。</p><h3 id="V2X-Real-2024"><a href="#V2X-Real-2024" class="headerlink" title="V2X-Real 2024"></a>V2X-Real 2024</h3><p>近年来，随着车联网( Vehicle-to-Ething，V2X )技术的发展，自动驾驶车辆能够共享感知信息以穿透遮挡，极大地提升了感知能力。</p><p>在本文中，我们提出了一个同时具有多种车辆和智能基础设施的混合数据集，以促进具有多模态感知数据的V2X协作感知开发。我们的V2X - Real使用两个连接的自动化车辆和两个智能基础设施进行采集，这些基础设施都配备了包括激光雷达传感器和多视角相机在内的多模态传感器。</p><p>整个数据集包含33K个LiDAR帧和171K个相机数据，在非常具有挑战性的城市场景中，有超过1.2 M的10个类别的注释边界框。根据协作模式和自我视角，我们推导出车辆中心、基础设施中心、车辆到车辆和基础设施到基础设施协作感知的四类数据集。 主要是包含了I2I的场景.</p><blockquote><p>上面三个数据集都是V2X的真实环境数据</p></blockquote><h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><ol><li>arXiv:2404.14022</li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前深度学习的方法都是数据驱动的,在协同感知方面,数据集目前不算特别多,主要存在1)真实数据较少2)不同数据集之间配置差异较大,需要自行修改等.&lt;/p&gt;</summary>
    
    
    
    
    <category term="collaborative perception" scheme="https://www.sekyoro.top/tags/collaborative-perception/"/>
    
  </entry>
  
  <entry>
    <title>Domain Adaptation Method</title>
    <link href="https://www.sekyoro.top/2024/05/21/Domain-Adaptation-Method/"/>
    <id>https://www.sekyoro.top/2024/05/21/Domain-Adaptation-Method/</id>
    <published>2024-05-21T01:47:55.000Z</published>
    <updated>2024-05-23T03:38:56.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这个方向的技术目前没有那么火了,但是能应用的场景非常之多.<br><span id="more"></span></p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><h3 id="Deep-Unsupervised-Domain-Adaptation-A-Review-of-Recent-Advances-and-Perspectives"><a href="#Deep-Unsupervised-Domain-Adaptation-A-Review-of-Recent-Advances-and-Perspectives" class="headerlink" title="Deep Unsupervised Domain Adaptation: A Review of Recent Advances and Perspectives"></a>Deep Unsupervised Domain Adaptation: A Review of Recent Advances and Perspectives</h3><p>深度学习已经成为解决不同领域现实问题的首选方法，部分原因是它能够从数据中学习,并在广泛的应用中取得了令人印象深刻的性能。</p><p>然而，它的成功通常依赖于两个假设：( i )<strong>精确的模型拟合需要大量有标签的数据集</strong>,( ii )<strong>训练和测试数据是独立同分布的.因此,它在看不见的目标域上的性能得不到保证,特别是在适应阶段遇到分布外数据时</strong>。</p><p>在目标域数据上的性能下降是部署在源域数据上成功训练的深度神经网络的一个关键问题.</p><p>无监督域适应( Unsupervised Domain Adaptation，UDA )正是针对这一问题提出的,通过同时利用已标记的源域数据和未标记的目标域数据,在目标域中执行各种任务</p><p><img data-src="https://s2.loli.net/2024/05/21/yksHCLQcPdOrERa.png" alt="image-20240521102852946"></p><blockquote><p>Although supervised deep learning is the most prevalent and successful approach for a variety of tasks, its success hinges on (i) vast troves of labeled training data and (ii) the assumption of independent and identically distributed (i.i.d.) training and testing datasets.</p></blockquote><p>Because reliable labeling of massive datasets for various application domains is often expensive and prohibitive, for a task without sufficient labeled datasets in a target domain, there is strong demand to apply trained models, by leveraging rich labeled data from a source domain</p><p><img data-src="https://s2.loli.net/2024/05/21/R2xdyXHQJp38nNj.png" alt="image-20240521110351381"></p><script type="math/tex; mode=display">\begin{aligned}&\mathcal{L}_t(h)\leq\mathcal{L}_s(h)+d[p_\mathcal{S},p_\mathcal{T}]+\\&\min[\mathbb{E}_{x\sim p_s}|p_s(y|x)-p_t(y|x)|,\mathbb{E}_{x\sim p_t}|p_s(y|x)-p_t(y|x)|]\end{aligned}</script><p><img data-src="https://s2.loli.net/2024/05/23/ZAvaHCuiyK78RpW.png" alt="image-20240523110706500"></p><p>常用的方法分类如图.</p><h4 id="Statistic-Divergence-Alignment"><a href="#Statistic-Divergence-Alignment" class="headerlink" title="Statistic Divergence Alignment"></a>Statistic Divergence Alignment</h4><p>学习领域不变特征表示是许多深度UDA方法中应用最广泛的思想,其关键在于最小化潜在特征空间中的领域差异.<strong>为了实现这一目标,选择合适的divergence measure是这些方法的核心</strong>。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://github.com/thuml/Transfer-Learning-Library">thuml/Transfer-Learning-Library: Transfer Learning Library for Domain Adaptation, Task Adaptation, and Domain Generalization (github.com)</a></li><li><a href="https://arxiv.org/pdf/2208.07422">2208.07422 (arxiv.org)</a></li><li><a href="https://www.youtube.com/watch?v=gvfLq4sPW4k&amp;ab_channel=Hung-yiLee">[TA 補充課] More about Domain Adaptation (1/2) (由助教趙崇皓同學講授) (youtube.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个方向的技术目前没有那么火了,但是能应用的场景非常之多.&lt;br&gt;</summary>
    
    
    
    
    <category term="domain adaptation" scheme="https://www.sekyoro.top/tags/domain-adaptation/"/>
    
  </entry>
  
  <entry>
    <title>协同感知学习(二)</title>
    <link href="https://www.sekyoro.top/2024/05/17/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E7%AE%97%E6%B3%95-%E4%BA%8C/"/>
    <id>https://www.sekyoro.top/2024/05/17/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E7%AE%97%E6%B3%95-%E4%BA%8C/</id>
    <published>2024-05-17T14:42:49.000Z</published>
    <updated>2024-06-04T01:32:09.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>随着大模型时代的到来,原先通过修改模型结构提升性能写论文的方式已经有点out of date了,同时写文章的倾向已经从改架构成SOTA慢慢转变为回归任务背景以及讲好一个完整故事并给出自己的findings和insight了.也因此,在协作感知方面,论文方向也逐渐在转变,这里看看最近的文章整理一下思路.</p><span id="more"></span><h2 id="Domain-gap"><a href="#Domain-gap" class="headerlink" title="Domain gap"></a>Domain gap</h2><h3 id="Bridging-the-Domain-Gap-for-Multi-Agent-Perception"><a href="#Bridging-the-Domain-Gap-for-Multi-Agent-Perception" class="headerlink" title="Bridging the Domain Gap for Multi-Agent Perception"></a>Bridging the Domain Gap for Multi-Agent Perception</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>现有的多智能体感知算法通常选择在智能体之间共享从原始感知数据中提取的深度神经特征，以实现精度和通信带宽限制之间的权衡.然而,<strong>这些方法假设所有智能体具有相同的神经网络，这在现实世界中可能是不实用的</strong>。</p><p>当模型不同时,传递的特征可能存在较大的<strong>领域差距</strong>(domain gap)，导致多智能体感知性能急剧下降.</p><p>在本文中，我们提出了第一个轻量级框架来为多智能体感知弥合这种领域鸿沟,它可以作为大多数现有系统的插件模块,同时保持机密性.</p><p>我们的框架包括一个可学习的特征成形模来对齐多个维度的特征,以及一个用于领域自适应的稀疏跨域转换器.在公开的多智能体感知数据集V2XSet上的大量实验表明,对于基于点云的三维目标检测,我们的方法可以有效地弥合不同领域特征之间的差距,并显著优于其他基线方法至少8%。</p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>最近的研究表明，通过利用车联网( Vehicle-to- Everything，V2X )通信技术共享视觉信息，多智能体感知系统可以通过透视遮挡和感知更远的范围来显著提高单智能体系统的性能.</p><p>现有方法通常不共享原始感知数据或检测输出,而是共享由传感器数据计算得到的中间神经特征,因为它们可以在精度和带宽需求之间实现最佳权衡.</p><p>此外,传递的中间特征对GPS噪声和通信延迟的鲁棒性更强.</p><p>这忽略了一个关键的事实<strong>:为所有智能体部署相同的模型是不现实的,特别是对于连接的自动驾驶</strong>.</p><p>不同公司的网联自动驾驶汽车( CAV )和基础设施产品的检测模型通常是不同的。即使对于同一公司,由于车载软件版本的不同,也可能存在不同的检测模型.当共享特征来自不同的骨干时,存在一个明显的域间隙,这很容易削弱协作的好处。</p><p>在本文中,我们深入研究了多智能体感知中,特别是自动驾驶中这一尚未解决的实际问题.我们首先仔细<strong>研究了不同特征图的领域差距</strong>,然后在分析的基础上提出了我们的框架.</p><p><img data-src="https://s2.loli.net/2024/05/17/R4nUZOVyzfJCTcw.png" alt="image-20240517150815672"></p><h4 id="Related-works"><a href="#Related-works" class="headerlink" title="Related works"></a>Related works</h4><p>由于<strong>数据标注的时间消耗</strong>和<strong>不同域之间的域差距</strong>,域适应被用来解决这些问题,通过适应在有标签的源域上训练的模型来解决无标签的目标域.</p><p>最近的领域自适应工作主要针对不同的计算机视觉任务</p><p>在领域自适应中,为了最小化不同领域之间的领域偏移,特征分布可以在共同的层次上对齐：领域层次和类别层次。</p><p>领域级对齐通常涉及最小化源和目标特征分布之间的某种距离度量，如最大均值差异.</p><h4 id="Learnable-Feature-Resizer"><a href="#Learnable-Feature-Resizer" class="headerlink" title="Learnable Feature Resizer"></a>Learnable Feature Resizer</h4><p>在ego代理上计算特征图作为source domain,接受其他代理的特征作为target domain.</p><p>特征缩放器Φ的目标是以可学习的方式将源域特征的维度与目标域进行对齐</p><script type="math/tex; mode=display">F_T^{'}=\Phi(F_T),\mathrm{~s.t.~}F_T^{'}\in\mathbb{R}^{N\times H_S\times W_S\times C_S}</script><p>我们将Φ与多智能体检测模型联合训练，使其能够智能地学习调整特征尺寸的最优方法，这与双线性插值等简单的尺寸调整方法有根本的不同。</p><p>可学习特征成形模的体系结构设计所示,它包括四个主要组件:通道对齐器，FAX成形模，跳跃连接和res - block。</p><p><strong>Channel Aligner</strong>:使用一个简单的1 × 1卷积层对齐通道维度,其输入通道数为$C_{in}$ = 2$C_S$,输出CS通道。当$C^T &gt; C^{in}$时,随机丢弃$C^{in} - C^{T}$通道,应用1 × 1卷积层得到新的特征.我们在$F^T$上重复这个过程n次,得到$n×H^T×W^T×C^S$维度的特征，并沿第一个维度进行平均。</p><p>通过这种方式,我们改善了由于信道衰落造成的信息丢失.当$C<em>T$ &lt; $C</em>{in}$时，我们从FT中随机选择通道进行填充,以满足1 × 1卷积所需的输入通道数。</p><p><strong>FAX Resizer</strong></p><p>由于LiDAR特征通常由于空体素而具有稀疏性,应用大核卷积获取全局信息可能会将无意义的信息扩散到重要区域.因此,我们在双线性缩放之前应用了融合的轴向( FAX )注意力块,以获得更好的特征表示.</p><p><strong>跳跃连接</strong>:在跳跃连接中,使用了双线性特征调整方法,以使学习更容易。</p><p><strong>残差块</strong>( Res-Block ):在重新调整特征图大小后执行标准残差块r次,以进一步细化特征图.</p><h4 id="Sparse-Cross-Domain-Transformer"><a href="#Sparse-Cross-Domain-Transformer" class="headerlink" title="Sparse Cross-Domain Transformer"></a>Sparse Cross-Domain Transformer</h4><p>在检索到缩放后的特征$F^′_{T}$后,需要将其模式从domain classifier中转换为不可区分的模式,以获得领域不变特征.为了达到这个目的,我们需要有效地从局部和全局两个方面来推理$F^{′}_T$和$F_S$之间的相关性.因此,我们提出了稀疏跨域变压器,在避免昂贵计算的同时,享受了变压器架构带来的动态和全局关注的好处.</p><script type="math/tex; mode=display">Q=W_{Q}(F_{T}^{'}),\quad K=W_{K}(F_{S}),\quad V=W_{V}(F_{S}),\\\hat{F_{T}^{'}}=Q+LN(FAX(Q,K,V)),\\F_{T}^{''}=\hat{F_{T}^{'}}+LN(FFN(\hat{F_{T}^{'}})),</script><p>其中LN是层标准化,Q是查询,K是键,V是值.然后,我们将$F^{′′}_T$和$F_S$配对在一起，并将它们送入域分类器和多智能体融合模块.</p><h4 id="Domain-Classifier"><a href="#Domain-Classifier" class="headerlink" title="Domain Classifier"></a>Domain Classifier</h4><p>设X为可能来自源域或目标域的特征图,h:X→{ 0,1 }为域分类器,试图预测源域样本$X_S$为0,目标域样本$X_T$为1</p><script type="math/tex; mode=display">\max_G\min_{h\in H}\left(\mathbf{E}_S(h(X))+\mathbf{E}_T(h(X))\right.</script><h4 id="Multi-Agent-Fusion"><a href="#Multi-Agent-Fusion" class="headerlink" title="Multi-Agent Fusion"></a>Multi-Agent Fusion</h4><p>在这项工作中，我们选择了一个最先进的模型V2X - ViT作为我们的多智能体融合算法。V2X - ViT依次采用异构多智能体自注意力块和多尺度窗口注意力块,对不同智能体的特征进行智能融合。</p><script type="math/tex; mode=display">\min_{G,M}(\mathbf{E}_D(V)),\quad V=M(F_S,F_T^{''})</script><h3 id="MACP-Efficient-Model-Adaptation-for-Cooperative-Perception"><a href="#MACP-Efficient-Model-Adaptation-for-Cooperative-Perception" class="headerlink" title="MACP: Efficient Model Adaptation for Cooperative Perception"></a>MACP: Efficient Model Adaptation for Cooperative Perception</h3><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p>车对车（V2V）通信通过信息共享实现了 “看穿遮挡物”，极大地增强了联网和自动驾驶车辆（CAV）的感知能力，从而显著提高了性能。然而，当现有的单个代理模型显示出卓越的泛化能力时，从头开始开发和训练复杂的多代理感知模型可能既昂贵又没有必要。在本文中，我们提出了一个名为 MACP 的新框架，它能使预先训练好的单个代理模型具备合作能力。为了实现这一目标，我们<strong>确定了从单一代理转向合作设置所面临的关键挑战，并通过冻结大部分参数和添加一些轻量级模块来调整模型</strong>。我们在实验中证明，所提出的框架可以有效地利用合作观察，并在模拟和真实世界合作感知基准中优于其他最先进的方法，同时所需的可调参数大大减少，通信成本也降低了。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>我们的目标是求解一个最佳模型 $f^{∗}$，该模型能够检测和划定周围物体的边界框，并分配适当的标签.</p><p>为了简化符号，我们用一个 d′维向量 $y_j∈R^{d′}$ 来表示每个边界框及其类别标签。</p><p>在不失一般性的前提下，物体检测模型 f 是一个从点云空间到边界框及其标签的联合空间 f : X → Y 的映射，经过训练的模型理想地描述了以观测点云集 x 为条件观测边界框集 y 的概率，其值为</p><script type="math/tex; mode=display">p(\mathbf{y}|\mathbf{x};f)=\frac{p(\mathbf{x},\mathbf{y})}{p(\mathbf{x})}</script><p>如果我们用 pS (x) 表示在单个代理感知中观察到点云集的边际概率，用 pC(x) 表示在合作感知中观察到精确点云集的概率，由于 V2V 通信共享了额外的点云，这两个概率可能不同，即 pS (x) ̸= pC(x) 。</p><p>预训练模型给出的点云和边界框的联合分布偏离合作环境下的地面实况联合分布</p><script type="math/tex; mode=display">\hat{p}_{\mathcal{C}}(\mathbf{x},\mathbf{y};f)=\frac{p_{\mathcal{S}}(\mathbf{x},\mathbf{y})}{p_{\mathcal{S}}(\mathbf{x})}\cdot p_{\mathcal{C}}(\mathbf{x})\neq p_{\mathcal{C}}(\mathbf{x},\mathbf{y}) \\g^*=\underset{g\in\mathcal{G}}{\text{argmin}\mathcal{L}}\left(p_{\mathcal{C}}(\mathbf{x},\mathbf{y}),\hat{p}_{\mathcal{C}}(\mathbf{x},\mathbf{y};f\cdot g)\right) \\p(\mathbf{y}|\mathbf{x};f\cdot g)=g\left\lfloor\frac{p_{\mathcal{S}}(\mathbf{x},\mathbf{y})}{p_{\mathcal{S}}(\mathbf{x})}\right\rfloor</script><p><img data-src="https://s2.loli.net/2024/05/08/GZMfEleua21jYVv.png" alt="image-20240508151535055"></p><h4 id="Convolution-Adapter"><a href="#Convolution-Adapter" class="headerlink" title="Convolution Adapter"></a>Convolution Adapter</h4><p>ConAda 模块是特征编码器的关键组件。特征编码器网络是卷积块的级联，其中卷积层的输出经过 ConAda 模块，并通过残差连接加回自身。我们只在训练过程中训练 ConAda 参数，并在卷积层和 ConAda 模块之后的其他层中冻结预训练参数。</p><p>同时，ConAda 还充当车辆之间的通信通道。在通信过程中，ConAda 模块中的下卷积层和激活层帮助压缩和加密编码特征，以便进行广播，而上卷积层则用于解压缩接收信号，以便进行特征融合。</p><h4 id="SSF-Operator-for-Fused-Feature"><a href="#SSF-Operator-for-Fused-Feature" class="headerlink" title="SSF Operator for Fused Feature"></a>SSF Operator for Fused Feature</h4><p>我们在连续的神经网络层中执行 SSF 算子，以考虑域偏移.</p><p>假设卷积层的输出特征图由 $X^{output}_{i,j}$ ∈ $R^{H′×W ′×C′}$ 给出，我们使用缩放因子 $\gamma$∈ $R^{C′}$和移动因子 β ∈ $R^{C′}$更新特征图</p><script type="math/tex; mode=display">X_{i,j}^{\mathrm{output}}=\gamma\odot X_{i,j}^{\mathrm{output}}+\beta</script><p>最后,基于 ConAda 的通信信道可以灵活压缩信号传输,从而缓解通信瓶颈.</p><p><img data-src="https://s2.loli.net/2024/05/08/AjeXstVr2Ih6E5g.png" alt="image-20240508165439383"></p><p>这篇文章主要基于微调的方法和思想,使用的是Adapter,此外还有LoRA等.关于大模型压缩技术还有剪枝、蒸馏以及量化等等,感觉都可以试试.</p><h3 id="DI-V2X-Learning-Domain-Invariant-Representation-for-Vehicle-Infrastructure-Collaborative-3D-Object-Detection"><a href="#DI-V2X-Learning-Domain-Invariant-Representation-for-Vehicle-Infrastructure-Collaborative-3D-Object-Detection" class="headerlink" title="DI-V2X: Learning Domain-Invariant Representation for Vehicle-Infrastructure Collaborative 3D Object Detection"></a>DI-V2X: Learning Domain-Invariant Representation for Vehicle-Infrastructure Collaborative 3D Object Detection</h3><p><strong>Task</strong> Collaborative 3D Object Detection</p><p><strong>method</strong> learn domain-invariant representation</p><p><strong>inner thoughts</strong>  distillation</p><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><p>车对物（V2X）协同感知最近获得了极大关注，因为它能够通过整合来自不同代理（如车辆和基础设施）的信息来增强场景理解能力。<strong>然而，目前的研究通常对来自每个代理的信息一视同仁，忽略了每个代理使用不同激光雷达传感器所造成的固有领域差距，从而导致性能不尽如人意</strong>。</p><blockquote><p>也就是不同的LiDAR传感器本身的不同会导致一种domain gap,会使性能下降.这种说法看起来make sense,但加上一些示意图补充可能更好.这篇文章就加了一张.</p></blockquote><p>提出了 DI-V2X,旨在通过一个<strong>新的蒸馏框架来学习领域不变表征</strong>,以减轻 V2X 3D 物体检测中的领域差异。</p><p>DI-V2X 包括三个基本组件：域混合实例增强（DMA）模块、渐进式域不变性蒸馏（PDD）模块和域自适应融合（DAF）模块.</p><p>具体来说,DMA 在训练过程中为教师模型和学生模型建立了一个领域混合三维实例库，从而形成对齐的数据表示.接下来,PDD 鼓励来自不同领域的学生模型逐步学习与教师领域无关的特征表示,并利用代理之间的重叠区域作为指导,促进提炼过程.</p><p>此外,DAF 通过校准感知领域自适应注意力,缩小了学生之间的领域差距.在具有挑战性的 DAIR-V2X 和 V2XSet 基准数据集上进行的大量实验表明,DI-V2X 性能卓越,超过了之前所有的 V2X 模型.</p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>它充分利用从不同代理（即车辆和路边基础设施）收集到的传感器数据，精确感知复杂的驾驶场景.例如,在车辆视线可能受阻的情况下,由于基础设施的视角不同,它们提供的信息可以作为重要的冗余.</p><p>与以往的单车自动驾驶系统相比,这种合作从根本上扩大了感知范围,减少了盲点,提高了整体感知能力.</p><p>为了有效融合来自不同代理的信息,领先的 V2X 方法倾向于采用基于特征的中间协作,即中间融合）。这种方法在特征层保留了每个代理的基本信息，然后对其进行压缩以提高效率。因此，中间融合确保了性能与带宽的权衡，优于早期融合或后期融合方法，前者需要在代理之间传输原始点云数据，而后者则容易受到每个模型产生的不完整结果的影响。</p><p>然而，当前的中间融合模型主要集中在增强来自不同代理的特征之间的交互。</p><p>如图 1(a)所示，<strong>车辆和基础设施可能拥有不同类型的激光雷达传感器，因此直接融合不同来源的点云数据或中间特征难免会影响最终性能</strong>。因此，在这种情况下，如何从多源数据中明确学习域不变表示仍有待探索。</p><p><img data-src="https://s2.loli.net/2024/05/13/D38nvIVKNeUi6xB.png" alt="image-20240513150627484"></p><p>为此，DI-V2X 引入了一种新的师生提炼模型.<strong>在训练过程中，我们强制要求学生模型（即车辆和基础设施）学习与早期融合的教师模型一致的领域不变表示法</strong>,即把来自多个视角的点云整合为一个整体视图来训练教师。<strong>在推理过程中，只保留学生模型</strong>。具体来说，DI-V2X 由三个必要组件组成：领域混合实例增强（DMA）模块、渐进式领域不变性提炼（PDD）模块和领域自适应融合（DAF）模块</p><blockquote><p>其实基础思想就是蒸馏,搞一个结构相似但参数量更小的模型替代原本较大的模型. 关键是让小模型学会大模型的”知识”</p></blockquote><p>DMA 的目的是在训练过程中建立一个mixed ground-truth instance bank，以对齐教师和学生的点云输入，其中的实例来自车侧、路侧或融合侧。</p><p>之后，PDD 的目标是在不同阶段，即在领域适应性融合之前和之后，逐步将信息从教师传递给学生.例如,在融合之前,引导学生在<strong>非重叠区域分别学习领域不变的表征</strong>。而在融合之后，我们将重点放在重叠区域内的提炼上，因为信息已经得到了很好的汇总.</p><p>在 DAF 模块中，来自不同领域的特征会根据其空间重要性进行自适应融合。此外，DAF 还通过整合校准偏移来增强模型对姿态误差的适应能力，从而确保 V2X 检测性能的稳健性。</p><p><img data-src="https://s2.loli.net/2024/05/13/kZdD3lKJYPfWLue.png" alt="image-20240513214314409"></p><p>在DMA中,对于教师模型,使用车端数据,路端数据以及早期融合后的数据(就是转换到统一坐标系后的点云结果)利用PointPillars的decoder进行增强,使用增强后的$P_e$,再使用VoxelNet处理成BEV的二维特征图$B_t$.</p><p>学生模型结构跟教师模型类似,处理$P_v$和$P_i$提取得到对应特征图.然后使用DAF进行融合得到$B_f$</p><p>在训练的时候,在DAF融合之前和之后会有一个PDD模型将学生模型得到的特征和老师模型得到的特征利用overlapping area进行对齐.</p><p>DMA本是类似一个数据增强模块,首先将 $P<em>i$ 投影到自我车辆的坐标系上，这样 $P^T_i$ =$T(i→v)$$P^T_i$,其中 $T(i→v)$ ∈ $R^{4×4} $是基础设施到车辆系统的变换矩阵.然后,我们利用地面实况边界框 $B</em>{gt}$ = {$b<em>k$} 从 $P_v$ 和 $P_i$ 获取实例.来自不同domain、对应于同一地面实况对象的实例将被合并，得到一个早期融合实例 pk = Concat($p^v_k$, $p^i_k$) ∈ $R^{N</em>{k}×4}$，其中 $p^v_k$∈ Pv 和 $p^i_k$∈ Pi 是来自两个领域、以 $b_k$为索引的实例点。由于代理之间的相对位置会随着自我车辆的运动而发生动态变化，因此有些实例可能仅来自单个域，而另一些实例则可能直接来自早期融合的重叠区域。为了确定每个实例的域来源，我们通过计算来自每个域的点比例，将这些实例分为三类：</p><script type="math/tex; mode=display">\begin{aligned}&D_{i} =\{\mathbf{p}_k|N_k^v/(N_k^v+N_k^i)<\tau_l\}  \\&D_{f} =\{\mathbf{p}_k|\tau_l<N_k^v/(N_k^v+N_k^i)<\tau_h\}  \\&D_{v} =\{\mathbf{p}_k|N_k^v/(N_k^v+N_k^i)>\tau_h\} \end{aligned}</script><p>$N^{v}<em>{k}$ 和 $N^{i}</em>{k}$ 分别代表车辆侧和基础设施侧的点数，τl、τh 表示阈值.然后，得到一个实例库$D<em>{mixed}$ = $D_i$ ∪ $D_f$ ∪ $D_v$，其中包含来自所有领域（即包括融合领域）的混合实例。在训练过程中，我们按照一定的概率从$D</em>{mixed}$中随机抽取实例，并将这些实例添加给教师和学生.</p><p>通过涉及不同领域的实例<strong>增强了训练数据的多样性</strong>.此外,从每个学生的角度来看,来自其他领域的信息也会通过实例级混合被纳入其中（Zhang 等人，2018 年）.这种方法从根本上调整了教师模型和学生模型之间的数据分布,从而在随后的知识提炼过程中产生了更具普适性的特征。</p><p>为了获得跟域无关的特征,采用了两阶段蒸馏策略，即在领域自适应融合（DAF）模块之前和之后进行蒸馏。第一个蒸馏阶段是将学生的分布与教师模型相一致，作为 DAF 的输入，这对准确的信息融合至关重要。</p><p>然而，根据经验发现，直接对学生和教师之间的整个特征图进行蒸馏会产生次优性能.为此选择在第一阶段对非重叠区域进行蒸馏.在第二阶段,由于学生特征已通过 DAF 得到很好的融合,我们可以集中精力对重叠区域进行蒸馏.这种两阶段的提炼过程可使学生模型与来自不同区域的教师模型的特征表示相匹配,从而缩小学生之间的差距.</p><p>在融合之前的蒸馏,首先需要计算重叠掩码,以确定重叠区域.</p><p>将基础设施一侧的感知区域转换到车辆一侧，得到一个新的矩形 $A<em>i$ = ($x_i,y_i,2R_x, 2R_y, θ_i$)。然后我们可以计算 $A_v$ 和 $A_i$ 之间的重叠区域，即 $P</em>{overlap}$ = Intersection($A<em>v$，$A_i$)。然后对得到的 $P</em>{overlap}$（即多边形）进行下采样,以匹配特征地图 $B_v$ ∈ $R^{H×W ×C}$ 的大小.</p><script type="math/tex; mode=display">\left.\mathbf{M}(i,j)=\left\{\begin{array}{cc}1&,&\mathrm{if~}(i,j)\in\mathbf{P}_{overlap}\\0&,&\mathrm{otherwise}\end{array}\right.\right.</script><p>M(i, j) ∈ 0, 1 表示（i, j）坐标处的二进制值。通过只对非重叠区域 进行提炼,我们允许每个学生集中学习与各自领域一致的表征。这就避免了强制要求不完整的学生特征向教师的完整特征学习的严格约束</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{da}& =\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_v\odot\tilde{\mathbf{M}}_v)+\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_i\odot\tilde{\mathbf{M}}_i)  \\&=\frac1{HW}\sum_m^H\sum_m^W|\mathbf{B}_t(m,n)-\mathbf{B}_v(m,n)|\times\tilde{\mathbf{M}}_v(m,n) \\&+\frac1{HW}\sum_m^H\sum_n^W|\mathbf{B}_t(m,n)-\mathbf{B}_i(m,n)|\times\tilde{\mathbf{M}}_i(m,n)\end{aligned}</script><p>在融合后的蒸馏,使用 DAF 模块有效地合并了来自不同领域的学生特征.因此,我们得到了一个能力很强的融合表征,用 Bf 表示,它可以与教师的特征表征 $B_t$ 配对.</p><p>直观地说,Bt 是通过混合点云数据的早期协作获得的,其本质上涉及最小的信息损失.通过强制中间融合特征 $B_f$ 逐步与$B_t$ 保持一致,可以有效地确保在整个学习过程中始终整合通过早期融合阶段获得的基本知识,从而形成与领域无关的特征表征.</p><p>此外，我们还可以超越特征级对齐，扩展到预测级对齐.由于我们的最终目标是从两个 $B_f$ 解码出最终的三维边界框，确保预测层面的对齐将进一步提高结果的一致性和准确性.</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{f}& =\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_f\odot\mathbf{M}_v)  \\&=\frac1{HW}\sum_m^H\sum_m^W|\mathbf{B}_t(m,n)-\mathbf{B}_f(m,n)|\times\tilde{\mathbf{M}}_v(m,n)\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{p}& =\mathcal{L}_{class}+\mathcal{L}_{regression}  \\&=\frac1K\sum_k^K(|\mathbf{c}_k-\mathbf{c}_k^s|+|\mathbf{r}_k-\mathbf{r}_k^s|)\end{aligned}</script><script type="math/tex; mode=display">\mathcal{L}=\mathcal{L}_{detect}+\lambda_{kd}(\mathcal{L}_{da}+\mathcal{L}_f+\mathcal{L}_p)</script><p>DAF 模块的目标是聚合车辆和基础设施的特征,创建一个包含各领域有价值信息的增强表示.然而,这一融合过程面临着两大挑战:双方姿势的潜在错位和设计合适的特征交互策略.</p><p><img data-src="https://s2.loli.net/2024/05/14/s9KUC8vfEXOgTNb.png" alt="image-20240514152437112"></p><p>由于<strong>传感器噪声</strong>、<strong>动态运动</strong>和不同时间戳的不一致性等原因，现实世界中车辆和基础设施的相对姿态很容易受到影响，这将影响 V2X 感知的准确性.为了解决这个问题,利用校准偏移来动态纠正潜在的姿势误差.</p><p>首先用卷积层预测校准偏移,使$B_i$与$B_v$更好地对齐,记为</p><script type="math/tex; mode=display">\Delta_{(i\to v)}=\text{Conv}(\text{Concat}(\mathbf{B}_v,\mathbf{B}_i))\in\mathbb{R}^{H\times W\times2}</script><script type="math/tex; mode=display">\mathbf{B}_i^{^{\prime}}(p_k)=\mathbf{B}_i(p_k+\mathbf{\Delta}_{(i\to v)}(p_k)),0\leq k<HW</script><script type="math/tex; mode=display">\mathbf{A}_d=\mathrm{Softmax}(\mathrm{Conv}(\mathbf{B}_{cat}))\in\mathbb{R}^{H\times W\times C\times2}\\\mathbf{A}_s=\mathrm{Conv}(\mathbf{B}_{cat})+\max(\mathbf{B}_{cat})\\\mathbf{B}_f=\mathrm{Conv}(\mathbf{A}_d\odot\mathbf{A}_s\cdot\mathbf{B}_{cat})\in\mathbb{R}^{H\times W\times C}</script><p>空间自适应注意力可以通过聚合多粒度特征,提供稳健而灵活的注意力图</p><p>最后结果展示包括在两个数据集上与No fusion,early和late fusion以及一些列经典中期融合模型对比.</p><p>然后证明domain generalization实验证明模型学到了域不变的特征.此外还有消融实验,证明提出的每个组件的作用.</p><p><img data-src="https://s2.loli.net/2024/05/14/v4PD6HNOp1ercGx.png" alt="image-20240514172721623"></p><p><img data-src="https://s2.loli.net/2024/05/14/MA5Ia4qDBscdp1L.png" alt="image-20240514172919650"></p><h3 id="Model-Agnostic-Multi-Agent-Perception-Framework"><a href="#Model-Agnostic-Multi-Agent-Perception-Framework" class="headerlink" title="Model-Agnostic Multi-Agent Perception Framework"></a>Model-Agnostic Multi-Agent Perception Framework</h3><h3 id="Abs"><a href="#Abs" class="headerlink" title="Abs"></a>Abs</h3><p>现有的多智能体感知系统假设每个智能体使用相同的模型，具有相同的参数和结构，这在现实世界中往往是不切实际的.当感知<strong>模型存在明显差异时,多智能体系统带来的显著性能提升会显著降低</strong>.</p><p>在这项工作中,我们提出了一个model-agnostic的多Agent框架,<strong>以减少模型差异带来的负面影响</strong>，并保持机密性(隐私?).具体来说,我们通过集成一个新颖的不确定性校准器来考虑智能体之间的感知异质性,<strong>该校准器可以消除智能体预测置信度评分之间的偏差</strong>.每个代理在一个标准的公共数据库上独立地执行这种校准,因此知识产权可以得到保护。</p><p>为了进一步细化检测精度,我们还提出了一种新的算法,称为”促进-抑制聚合” ( Promotion-Suppression Aggregation，PSA ),该算法<strong>不仅考虑了proposals的置信度评分,还考虑了其邻居的空间一致性</strong>.</p><p>我们的实验强调了跨不同代理进行模型校准的必要性,结果表明我们提出的方法在开放的OPV2V数据集上的3D目标检测性能优于最先进的基线方法.</p><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>深度学习的最新进展提高了现代感知系统在许多任务上的性能，如目标检测[ 1-3 ]、语义分割[ 4、5]和视觉导航[ 6、7 ]。尽管取得了令人瞩目的进展，但由于单视角的限制，单智能体感知系统仍然存在许多局限性。例如，自动驾驶车辆( Autonomous Vehicles，AVs )通常会遭受遮挡[ 8 ]，由于缺乏对遮挡区域的感官观察，这种情况很难处理。为了解决这一问题，<strong>最近的研究[ 9-15 ]探索了无线通信技术，使附近的智能体能够共享感知信息并协同感知周围环境</strong>。</p><p>尽管现有方法获得了显著的3D目标检测性能提升，但它们假设所有协作智能体共享相同的模型，且具有相同的参数，这在实际中往往不成立，特别是在自动驾驶中。在AV之间分配模型参数可能会引起隐私和保密问题，特别是对于来自不同汽车公司的车辆。对同步良好的检测器的依赖是不可靠的，因为AV可能具有不同的更新频率</p><p>如果不妥善处理不一致性挑战，共享的感知信息可能存在较大的领域鸿沟，多智能体感知带来的优势将迅速减弱。</p><p>由于不同主体使用的模型不同，不同主体提供的置信度得分可能存在系统性偏差，即不同主体具有不同的置信度估计偏差。</p><p>一些代理置信度更高另一些较低,忽略这种偏见并通过非极大值抑制( NMS )直接融合来自相邻代理的边界框建议，可能会由于存在过度自信但低质量的建议而导致较差的检测精度。</p><p><img data-src="https://s2.loli.net/2024/05/29/CBp764zMDr8Ooil.png" alt="image-20240529212209574"></p><p>一些代理的信心分数系统性地大于其他代理人,例如,蓝色分数相对于橙色分数,然而,他们可能过度自信并提供误导性建议.根据置信度得分对建议进行融合,而不进行适当的校准可能会删除正确的建议.置信度得分稍低(橙色)但与邻近框具有较高空间一致性的提议可以优于置信度得分较高的单个提议.</p><p>在我们的框架中,我们集成了一个灵活而简单的不确定性校准器,称为双边界校准( Doubly Bounded Scaling，DBS ),以减轻失调。</p><p>此外,在bbox aggregation阶段，我们还提出了一个新的模块- -促进-抑制聚合( Promotion-Suppression Aggregation，PSA ),以替代经典的NMS,并利用box proposals在Agent之间的空间相关性和一致性,进一步细化最终结果.</p><p>我们在一个开源的大规模多智能体感知数据集OPV2V [ 12 ]上评估了我们的方法。实验表明，当涉及到智能体之间的模型差异时，我们的框架显著提高了基于多智能体LiDAR的三维目标检测性能，在平均精度( Average Precision，AP )方面比现有方法至少提高了6 %。</p><h4 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h4><p>在本文中，我们考虑了异构多智能体系统中的协作感知，其中智能体通信以共享来自不同感知模型的感知信息，而不泄露模型信息，即模型不可知协作。</p><p>我们专注于自动驾驶中的3D LiDAR检测任务，但该方法也可以定制并用于其他协同感知应用中。我们的目标是开发一个健壮的框架来处理代理之间的异质性，同时保持机密性。</p><p>因此，我们提出了一个模型不可知的集体感知框架，可以分为两个阶段。<strong>在离线阶段，我们训练了一个模型特定的校准器。在在线阶段，对实时的道路传感信息进行校准和汇总。</strong></p><p><img data-src="https://s2.loli.net/2024/05/29/mRenpvsdrHfqyih.png" alt="image-20240529215358768"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>在合作感知情境下，来自不同的代理人具有异质性模式。由于机密性的考虑，与模型和参数相关的信息不应该被透露给其他代理。</p><p>由于机密性的考虑，与模型和参数相关的信息不应该被透露给其他代理。在这项工作中，我们<strong>提出了一个模型无关的协作框架,解决了纯晚期融合策略的两个关键挑战.</strong>首先，我们提出了一个Doubly Bounded Scaling不确定性校准器来对齐不同智能体的置信度得分分布。其次，新的提升抑制聚合算法通过充分利用共享信息(bounding box spatial congruence and confidence score propagation.)，进一步提高了检测精度。</p><p>在大规模协作感知数据集上的实验表明了跨异构代理进行模型校准的必要性。结果表明，当不同的智能体使用不同的感知模型时，结合所提出的两种技术可以提高协作3D目标检测的</p><h2 id="Sim2Real"><a href="#Sim2Real" class="headerlink" title="Sim2Real"></a>Sim2Real</h2><h3 id="S2R-ViT-for-Multi-Agent-Cooperative-Perception-Bridging-the-Gap-from-Simulation-to-Reality"><a href="#S2R-ViT-for-Multi-Agent-Cooperative-Perception-Bridging-the-Gap-from-Simulation-to-Reality" class="headerlink" title="S2R-ViT for Multi-Agent Cooperative Perception: Bridging the Gap from Simulation to Reality"></a>S2R-ViT for Multi-Agent Cooperative Perception: Bridging the Gap from Simulation to Reality</h3><h4 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h4><p>由于缺乏足够的真实多智能体数据且标注耗时，现有的多智能体协同感知算法通常选取模拟的传感器数据进行训练和验证。<strong>然而，当这些经过仿真训练的模型被部署到真实世界时，由于仿真数据和真实数据之间存在显著的领域差距，感知性能会下降</strong>。</p><p>在本文中，我们提出了第一个使用新型视觉转换器的多智能体协作感知的仿真到现实迁移学习框架，命名为S2R - ViT，它同时考虑了模拟数据和真实数据之间的部署差距和特征差距。</p><p>我们研究了这两种类型的域间隙的影响，并提出了一种新的不确定感知视觉转换器来有效地缓解部署间隙，并提出了一种基于代理的特征自适应模块，通过代理间和代理间的鉴别器来减小特征间隙。</p><p>在公开的多智能体协同感知数据集OPV2V和V2V4Real上的大量实验表明，本文提出的S2R - ViT方法能够有效地弥补仿真与现实之间的差距，在基于点云的三维目标检测中显著优于其他方法。</p><h4 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h4><p>多智能体协作感知的最新进展显示出克服单智能体感知受感知范围和遮挡挑战的局限性的潜力.多智能体协作感知系统通过利用智能体之间的通信技术共享信息，相比于单智能体感知，能够显著提升感知性能</p><p>由于在真实世界中收集具有通信的多智能体数据的困难，<strong>在多样化和复杂的真实世界环境中收集足够多的真实数据是昂贵且不容易的。此外，多智能体协同感知系统的地面真值数据标注和统一坐标投影尤为耗时。</strong>因此，现有的许多多智能体协同感知研究工作通常选取模拟数据进行模型训练和验证</p><p>然而，<strong>当我们将用模拟数据训练的模型应用于真实世界时，感知性能通常会下降。这种现象是由于模拟数据和真实数据之间存在显著的域差距</strong>。</p><p>在本文中，我们的研究重点是<strong>利用有标记的模拟数据和无标记的真实世界数据作为迁移学习，以减少多智能体协作感知的领域差距</strong>。</p><p><img data-src="https://s2.loli.net/2024/05/17/DbfYtlhCnFSpTE7.png" alt="image-20240517203347621"></p><p>我们观察到，多智能体协作感知从模拟到现实的领域差距包括以下两个角度</p><p><strong>部署差距</strong>( Deployment Gap ):与理想的仿真环境不同,<strong>在现实世界的智能体通信过程中，由于不可避免的GPS误差和通信延迟(时间延迟),多个智能体可能存在定位(位置和航向)错误</strong></p><p><strong>特征差距</strong>( Feature Gap ):<strong>现实世界的点云特征分布可能与仿真数据有显著差异,例如更复杂的驾驶场景、不同的激光雷达通道数、混合交通流、各种点云变化等。</strong></p><p>在本文中，我们提出了第一个使用新型视觉转换器( ViT )的多智能体协作感知的仿真到现实( S2R )迁移学习框架，命名为S2R - ViT，同时考虑了部署间隙和特征间隙。我们选择车辆到车辆( Vehicle-to-Vehicle，V2V )协同感知任务作为基于点云的三维目标检测的算法开发。具体来说，我们的框架将来自模拟的有标记点云数据和来自真实世界的无标记数据作为输入，从而大量地利用模拟数据。在机器学习研究中，这种设置被广泛称为从源域(模拟)到目标域(现实)的无监督域适应。</p><p>S2R - ViT包括两个关键部分：( 1 ) <strong>S2R-UViT：一种新型的S2R不确定感知视觉转换器，可以有效地缓解develomment gap带来的不确定性</strong>。具体来说，S2R - UViT包括一个<strong>局部和全局的多头自注意力( LG-MSA )模块</strong>，以<strong>增强所有智能体空间位置上的特征交互，以容忍不确定性的缺陷</strong>；<strong>还包括一个不确定性感知模块( UAM )，通过考虑不同不确定性水平的共享其他智能体特征来增强自我智能体的特征</strong>.(2)S2R-AFA：基于<strong>S2R Agent的特征自适应以缩小特征差距</strong>。<strong>S2RAFA利用智能体间和自我代理的判别器提取领域不变特征</strong>,以弥合feature gap。</p><blockquote><p>Uncertainty-aware vision Transformer,可有效缓解development gap带来的不确定性.</p><p>通过一个S2R agent-based feature adaptation利用代理间和自我代理判别器提取domain-invariant features. 注意这里domain-invariant features已经被之前的2024的DI-V2X文章提到了,但这里更偏重虚拟到显示,而DI-V2X偏重代理的不同.</p></blockquote><h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><p>Multi-Agent Perception.多智能体感知系统通过智能体之间的通信技术,能够克服遮挡和短距离感知的挑战,实现大范围感知,引起了众多研究者的关注.与交换原始传感数据或检测输出相比,当代方法通常共享由神经网络提取的中间特征.该策略在精度和带宽需求之间提供了一个最佳的平衡.</p><p>Challenges in Multi-Agent Perception:多Agent感知系统也引入了一些新的挑战，如定位误差、通信延迟、对抗攻击等。这些挑战可能会减少合作的好处.</p><p>Domain Adaptation for Perception:领域自适应是指将源领域训练的机器学习模型自适应到目标领域。许多领域自适应工作主要集中在RGB相机数据，而在LiDAR数据中提出了更多的领域自适应工作来解决这一问题.</p><p><img data-src="https://s2.loli.net/2024/05/20/TyuX2Zsjb19mcvL.png" alt="image-20240520100453017"></p><p>与交换原始传感数据或检测输出相比,当代方法通常共享由神经网络提取的中间特征.</p><p>这种策略在精度和带宽需求之间提供了一个最佳的平衡.</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><img data-src="https://s2.loli.net/2024/05/28/KQvBeL8JiAk1tRE.png" alt="image-20240528161118892"></p><p>S2R-ViT。从其他周围CAV聚合的中间特征被输入到我们的主要组件S2R - ViT中，该组件由S2R - UViT和S2R - AFA模块组成。在接收到最终的融合特征后，我们利用预测头进行3D物体分类和定位</p><p>从仿真到现实的部署差距给自我和邻居智能体带来了不同的不确定性，例如GPS误差导致的空间偏差，通信延迟导致的坐标投影中的空间错位</p><p>在本文中提出从两个角度来回答这个问题：不确定性可以通过增强( 1 )所有智能体空间位置上的特征交互来更全面地缓解；( 2 )通过考虑不同不确定性水平的共享其他智能体特征来缓解自我-智能体特征。</p><p>这两个视角促使我们分别开发了新颖的局部-全局多头自注意力( LG-MSA )模块和不确定性感知模块( UAM )。</p><p>局部和全局多磁头自注意力机制( Local-and-Global多头Self Attention，LGMSA )：为了更全面地增强所有智能体空间位置上的特征交互，我们提出了LG - MSA来促进所有智能体空间位置上的局部和全局特征交互。在提出的LGMSA中，基于局部特征的注意力用于关注空间特征的局部细节，而基于全局特征的注意力用于关注空间特征的广泛范围。就是一个融合模块,使用不同窗口大小的类似swin-transformer模型.</p><p>以h = 8为头数，n = 2为窗口类型数，将标准多头自注意力模块( MSA ) [ 24 ]的多头h均匀划分为2组不同窗口大小，即局部分支为4 × 4，全局分支为8 × 8。在局部分支中，将分割后的特征F^l^~e,o~∈R^h/n×H×W×kC/h^以4 × 4的小窗口尺寸输入MSAL，以增强空间特征的局部细节。在全局分支中，另一个分裂特征F^g^~e,o~∈R^h/n×H×W×kC/h^以8 × 8的大窗口尺寸输入MSAG以捕获全局空间特征信息</p><script type="math/tex; mode=display">F_{e,o}^p=\mathrm{SA}(\mathrm{Concat}(\mathrm{MSA}_L(F_{e,o}^l),\mathrm{MSA}_G(F_{e,o}^g)))</script><p><strong>Uncertainty-Aware Module (UAM).</strong></p><p>不确定性图,说白了得到一个跟特征图大小一样的map对除了ego代理的特征进行选择,这种设计在其他很多方法中都涉及.</p><p>以中位数为阈值，将具有高不确定度等级(即,低置信度)的预测不确定度等级图M中的特征值重置为1.</p><p>UPN是由简化而来的基于编码器-解码器的神经网络,可以在我们整个架构的端到端训练过程中学习.</p><p>受进化机制中自然选择的启发,以中位数为阈值,将具有高不确定性水平(即,低置信度)的预测不确定性水平图M中的特征值重置为1.它产生了一个新的不确定性等级图M~t~ .</p><p>基于共享的他者-施动者特征来增强自我-施动者特征,不应忽视其不同的不确定性水平.</p><script type="math/tex; mode=display">F_{e,o}^h=\mathrm{Concat}(\Delta[\mathrm{UPN}(F_o^p)]\otimes F_e^p,F_o^p)</script><p>Δ [ · ]表示阈值过程,⊛表示矩阵点积。</p><script type="math/tex; mode=display">F_{e,o}^h=\mathrm{S2RAttn}(\mathrm{LN}(F_{e,o}))+F_{e,o},\\\hat{F_{e,o}^h}=\mathrm{MLP}(\mathrm{LN}(F_{e,o}^h))+F_{e,o}^h,</script><p><strong>S2R-AFA: simultaion-to-Reality Agent-based Feature Adaptation.</strong></p><p>为了缩小仿真特征Fs与真实特征Fr之间的特征差距,在融合前和融合后分别设计了两个领域判别器/分类器,使用BCE损失用于二分类.</p><script type="math/tex; mode=display">\min_{G_m}\max_{D_i,D_e}\mathcal{L}_{AFA}=\mathbb{E}_{s,r}[D_i(F_s,F_r)]+\mathbb{E}_{s,r}[D_e(F_s^e,F_r^e)]</script><p>E~s,r~分别表示仿真和现实中的领域分类误差，G~m~是我们的整体模型(主干网、S2R - UViT和检测头)，可以认为是生成对抗网络的生成器.</p><p>由于S2R - AFA,我们的生成模型G~m~将具有提取模拟和现实的域不变特征的能力. 损失包含目标检测损失和Agent-based Feature Adaptation损失.</p><script type="math/tex; mode=display">\mathcal{L}_{total}=w_1\mathcal{L}_{det}+w_2\mathcal{L}_{AFA}</script><h3 id="DUSA-Decoupled-Unsupervised-Sim2Real-Adaptation-for-Vehicle-to-Everything-Collaborative-Perception"><a href="#DUSA-Decoupled-Unsupervised-Sim2Real-Adaptation-for-Vehicle-to-Everything-Collaborative-Perception" class="headerlink" title="DUSA: Decoupled Unsupervised Sim2Real Adaptation for Vehicle-to-Everything Collaborative Perception"></a>DUSA: Decoupled Unsupervised Sim2Real Adaptation for Vehicle-to-Everything Collaborative Perception</h3><h4 id="相关工作-1"><a href="#相关工作-1" class="headerlink" title="相关工作"></a>相关工作</h4><p><strong>Collaborative 3D Object Detection</strong></p><p><strong>Unsupervised Domain Adaptation</strong></p><p>无监督领域自适应( UDA )旨在利用有标签的源数据和无标签的目标数据，生成一个能够有效泛化到目标领域的鲁棒模型。许多工作<strong>利用对抗学习</strong>，通过<strong>最小化两个域之间的H -散度</strong>或<strong>Jensen - Shannon散度</strong>来对齐不同域之间的特征分布。另一类方法针对未标记的目标域开发多种伪标签，实现自训练</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着大模型时代的到来,原先通过修改模型结构提升性能写论文的方式已经有点out of date了,同时写文章的倾向已经从改架构成SOTA慢慢转变为回归任务背景以及讲好一个完整故事并给出自己的findings和insight了.也因此,在协作感知方面,论文方向也逐渐在转变,这里看看最近的文章整理一下思路.&lt;/p&gt;</summary>
    
    
    
    
    <category term="collaborative perception" scheme="https://www.sekyoro.top/tags/collaborative-perception/"/>
    
  </entry>
  
  <entry>
    <title>computer graphics:计算机图形学学习</title>
    <link href="https://www.sekyoro.top/2024/05/07/computer-graphics-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/05/07/computer-graphics-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-07T10:46:32.000Z</published>
    <updated>2024-06-02T15:28:22.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>简简单单学个概念.<br><span id="more"></span></p><p>早期的OpenGL使用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少有控制OpenGL如何进行计算的自由。而开发者迫切希望能有更多的灵活性。随着时间推移，规范越来越灵活，开发者对绘图细节有了更多的掌控。立即渲染模式确实容易使用和理解，但是效率太低。<strong>因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式(Core-profile)下进行开发</strong>，这个分支的规范完全移除了旧的特性。</p><p>当使用OpenGL的核心模式时，OpenGL迫使我们使用现代的函数。当我们试图使用一个已废弃的函数时，OpenGL会抛出一个错误并终止绘图。现代函数的优势是更高的灵活性和效率，然而也更难于学习。立即渲染模式从OpenGL<strong>实际</strong>运作中抽象掉了很多细节，因此它在易于学习的同时，也很难让人去把握OpenGL具体是如何运作的。现代函数要求使用者真正理解OpenGL和图形编程，它有一些难度，然而提供了更多的灵活性，更高的效率，更重要的是可以更深入的理解图形编程</p><p>使用GLAD和GLFW作为版本和窗口管理库.</p><ul><li><p>glfwWindowShouldClose函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回<code>true</code>，渲染循环将停止运行，之后我们就可以关闭应用程序。</p></li><li><p>glfwPollEvents函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</p></li><li><p>glfwSwapBuffers函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</p></li></ul><p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，<strong>实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的</strong>。图形渲染管线可以被划分为两个主要部分：<strong>第一部分把你的3D坐标转换为2D坐标</strong>，<strong>第二部分是把2D坐标转变为实际的有颜色的像素</strong>。</p><p><strong>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出</strong>。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，<strong>它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)</strong>。</p><p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。<strong>OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的</strong></p><p><img data-src="https://learnopengl-cn.github.io/img/01/04/pipeline.png" alt="img" style="zoom: 67%;" /></p><p><strong>图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段</strong></p><p>图形渲染管线的第一个部分是<strong>顶点着色器</strong>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标，同时顶点着色器允许我们对顶点属性进行一些基本处理</p><p>顶点着色器阶段的输出可以选择性地传递给<strong>几何着色器</strong>(Geometry Shader)。几何着色器将一组顶点作为输入，<strong>这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状</strong>。在这个例子中，它从给定的形状中生成第二个三角形。</p><blockquote><p>为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？<strong>做出的这些提示叫做图元(Primitive)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：GL_POINTS、GL_TRIANGLES、GL_LINE_STRIP</strong>。</p></blockquote><p><strong>图元装配</strong>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是GL_POINTS，那么就是一个顶点），并将所有的点装配成指定图元的形状</p><p>图元装配阶段的输出会被传入光栅化阶段(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p><p>片段着色器的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色</p><p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同</p><p><strong>然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</strong></p><p>在现代OpenGL中，我们<strong>必须</strong>定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p><p>OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把<strong>所有的</strong>3D坐标变换为屏幕上的2D像素；<strong>OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它</strong>。所有在这个范围内的坐标叫做标准化设备坐标(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p><p>通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</p><p>通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，标准化设备坐标(Normalized Device Coordinates)会变换为屏幕空间坐标(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p><p>我们通过顶点缓冲对象(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure><p>现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。。</p><p>顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个<strong>顶点和一个片段着色器</strong>。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">in</span> <span class="type">vec3</span> aPos;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_Position</span> = <span class="type">vec4</span>(aPos.x, aPos.y, aPos.z, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个<code>float</code>分量，包含的数量可以从它的后缀数字看出来</p><p>每个顶点都有一个3D坐标，我们就创建一个<code>vec3</code>输入变量aPos。我们同样也通过<code>layout (location = 0)</code>设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值.</p><p>写好glsl后,首先创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用glCreateShader创建这个着色器</p><h3 id="GAMES101"><a href="#GAMES101" class="headerlink" title="GAMES101"></a>GAMES101</h3><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>使用homegeneous coordinates,因为<strong>Translation cannot be represented in matrix form</strong></p><p><img data-src="https://s2.loli.net/2024/05/12/36b2pEjwCWGf7N8.png" alt="image-20240512215001385"></p><p><img data-src="https://s2.loli.net/2024/05/12/rA39m7M5WTFwQRD.png" alt="image-20240512223828687"></p><p><img data-src="https://s2.loli.net/2024/05/12/OxDF2GB7sUk8iRt.png" alt="image-20240512225758095"></p><p><img data-src="https://s2.loli.net/2024/05/12/yNZU6TEMkJw8vS5.png" alt="image-20240512231120803"></p><p><img data-src="https://s2.loli.net/2024/05/12/LjWzDSbx2McfVpa.png" alt="image-20240512231103788"></p><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><h5 id="HW0"><a href="#HW0" class="headerlink" title="HW0"></a>HW0</h5><p>学习Eigen库,二维和三维的空间变换,都可以拆成旋转,放缩和平移,但是平移无法使用与坐标维数相同的转换矩阵,可以通过homogeneous coordinates.</p><h5 id="HW1"><a href="#HW1" class="headerlink" title="HW1"></a>HW1</h5><p>观测转换,视图和投影转换. 投影转换又可以分为正交和透视投影.</p><p>view transformation就是相机的摆放,包括位置,朝向和向上的方向.</p><p><img data-src="https://s2.loli.net/2024/05/19/yApJSIKMls4CZzF.png" alt="image-20240519160531237"></p><p> 又叫做ModelView Transformation.</p><p>相当于将相机连着物体一起做变换,使得相机朝着-Z,位置在原点,向上方向在Y.</p><p><img data-src="https://s2.loli.net/2024/05/19/U5DBHQOvcAd2wqp.png" alt="image-20240519163320086"></p><p>一般做view transformation就是先平移后旋转.</p><p><img data-src="https://s2.loli.net/2024/05/19/9EodBgHcTr5J874.png" alt="image-20240519164238487"></p><p>然后做投影,也就是将3D变为2D,先做透视再做正交. 做透视因为符合视觉系统,做正交将物体归一化并放在中心.</p><p><img data-src="https://s2.loli.net/2024/05/19/niHmVGBdhUIR2qv.png" alt="image-20240519164611669"></p><p>做正交矩阵如下.</p><p><img data-src="https://s2.loli.net/2024/05/19/ucndILDTHwEMpmW.png" alt="image-20240519164927743"></p><p><img data-src="https://s2.loli.net/2024/05/19/t85cSLD7JZ6Vaep.png" alt="image-20240519164732598"></p><p>做投影如下,</p><p><img data-src="https://s2.loli.net/2024/05/19/Hl7XgyvkEi8Gen9.png" alt="image-20240519164510132"></p><p>重点是关于透视矩阵的推理,首先因为等比例的坐标缩放,</p><p><img data-src="https://s2.loli.net/2024/05/19/Rv2IMdrlYDpk9Tq.png" alt="image-20240519181537968"></p><script type="math/tex; mode=display">\begin{pmatrix}x\\y\\z\\1\end{pmatrix}\Rightarrow\begin{pmatrix}nx/z\\ny/z\\\text{unknown}\\1\end{pmatrix}\overset{\text{mult by z}}{\operatorname*{==}}\begin{pmatrix}nx\\ny\\\text{still unknown}\\z\end{pmatrix}</script><p>这样就知道透视投影矩阵的三行信息</p><script type="math/tex; mode=display">M_{persp\to ortho}^{(4\times4)}\begin{pmatrix}x\\y\\z\\1\end{pmatrix}=\begin{pmatrix}nx\\ny\\\text{unknown}\\z\end{pmatrix} \\M_{persp\to ortho}=\begin{pmatrix}n&0&0&0\\0&n&0&0\\?&?&?&?\\0&0&1&0\end{pmatrix}</script><p>此外,有两点:在near plane也就是投影到的平面上的坐标经过这个矩阵转换后依然不变,而far plane上的坐标经过透视投影后z坐标不变.</p><p>对于near plane(x,y,n,1),由于转换后坐标相同得到(nx,ny,n^2^,n).</p><script type="math/tex; mode=display">\begin{pmatrix}0&0&A&B\end{pmatrix}\begin{pmatrix}x\\y\\n\\1\end{pmatrix}=n^2</script><p>所以第三行的值必须是(0,0,A,B).即有An+B=n^2^.</p><p>假设far plane上的一个点坐标是(x,y,f,1),也有Af+B=f^2^.解得</p><script type="math/tex; mode=display">\begin{aligned}An+B&=n^2\\Af+B&=f^2\end{aligned}\quad\begin{array}{c}A=n+f\\B=-nf\end{array}</script><p>所以透视矩阵如下,其中n是near plane上的点的z坐标,f是随便一个点的z坐标.</p><script type="math/tex; mode=display">M_{persp\to ortho}=\begin{pmatrix}n&0&0&0\\0&n&0&0\\0&0&n+f&-nf\\0&0&1&0\end{pmatrix}</script><p>有了透视矩阵后,正交矩阵比较简单.在进行投影时先透视后正交就得到投影矩阵了. 如果有了near plane的四个点坐标就方便进行视口变换,或者通过fovY和aspect ratio,前者是一个角度,可以通过这个角度知道视点与near plane平面的距离,aspect ratio是平面宽度/高度.</p><p><img data-src="https://s2.loli.net/2024/05/19/N5qEdQ7yZGDzgKn.png" alt="image-20240519231541738"></p><p><img data-src="https://s2.loli.net/2024/05/19/V6DlLH2M4jmpgXZ.png" alt="image-20240519224805373"></p><script type="math/tex; mode=display">\tan\frac{fovY}2=\frac t{|n|}\\aspect=\frac rt</script><p><img data-src="https://s2.loli.net/2024/05/19/PLHMImvQDRfVTUW.png" alt="image-20240519224814121"></p><p>在图形学的MVP(model transformation,view transformation,project transformation)之后,得到了规范的2D投影.然后需要将规范的cube转到screen上(视口转换),screen就是一个pixel的数组,大小是分辨率.raster就是screen.</p><p>因为坐标已经归一到[-1,1],再转到[0,width]x[0,height],线性转换即可.z坐标不用管</p><p><img data-src="https://s2.loli.net/2024/05/19/vuFnfNzxKCAotEl.png" alt="image-20240519225110452"></p><p><img data-src="https://s2.loli.net/2024/05/19/rasPKwzLBvY7SUk.png" alt="image-20240519225120720"></p><p><img data-src="https://s2.loli.net/2024/05/24/f5SoqHvmld8UpDV.png" alt="image-20240524111542315"></p><p>提升题</p><p>绕任意过原点的轴的旋转变换矩阵。</p><p><img data-src="https://s2.loli.net/2024/05/24/LCIpUV8lKBtJRAD.png" alt="image-20240524171158093"></p><h5 id="HW2"><a href="#HW2" class="headerlink" title="HW2"></a>HW2</h5><p>上面的就画出了一个线框,但是为了画出完整三角形,线框里的值还需要光栅化.首先需要判定点是否在线框内,涉及到cross products和使用bounding box. 如果在内部,还需要判断内部点的深度.如果当前点更靠近相机,设置像素颜色并更新depth buffer.</p><p><img data-src="https://s2.loli.net/2024/05/24/zsNxrbOg79kwHAy.png" alt="image-20240524213309445"></p><p><img data-src="https://s2.loli.net/2024/05/24/8nHkRoxrWDL7QTK.png" alt="image-20240524213330256"></p><p>首先bounding box比较简单,直接获得x,y的最小值最大值即可 .</p><p>判定点是否在三角形内,在三角形内还需要使用重心插值得到z-buffering,这里越小表示越近,如果更小就设置颜色.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="built_in">floor</span>(lb_x); x &lt; <span class="built_in">ceil</span>(rt_x); x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="built_in">floor</span>(lb_y); y &lt; <span class="built_in">ceil</span>(rt_y); y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">insideTriangle</span>(x+<span class="number">0.5</span>, y+<span class="number">0.5</span>, t.v)) &#123;</span><br><span class="line">                <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>(x, y, t.v);</span><br><span class="line">                <span class="keyword">float</span> w_reciprocal = <span class="number">1.0</span>/(alpha / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma / v[<span class="number">2</span>].<span class="built_in">w</span>());</span><br><span class="line">                <span class="keyword">float</span> z_interpolated = alpha * v[<span class="number">0</span>].<span class="built_in">z</span>() / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta * v[<span class="number">1</span>].<span class="built_in">z</span>() / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma * v[<span class="number">2</span>].<span class="built_in">z</span>() / v[<span class="number">2</span>].<span class="built_in">w</span>();</span><br><span class="line">                z_interpolated *= w_reciprocal;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="built_in">get_index</span>(x, y);</span><br><span class="line">                <span class="keyword">if</span> (z_interpolated &lt; depth_buf[index]) &#123;</span><br><span class="line">                    depth_buf[index] = z_interpolated;</span><br><span class="line">                    <span class="built_in">set_pixel</span>(<span class="built_in">Vector3f</span>(x, y, <span class="number">1.0f</span>), t.<span class="built_in">getColor</span>());</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/24/HT3ogl5RuJWtbLz.png" alt="image-20240524175457757"></p><p><img data-src="https://s2.loli.net/2024/05/24/xp6UaqQC7lscWmV.png" alt="image-20240524202223373" style="zoom:50%;" /></p><p>为了解决锯齿问题(antialiasing),可以先进行卷积,也可以进行supersamping,这里使用super-samping,对每个像素进行2x2采样.</p><p>方法是</p><ol><li>Take NxN samples in each pixel.</li><li>Average the NxN samples “inside” each pixel</li></ol><p>具体做的时候针对每个pixel,需要保存两个 sample list里面存着周围几个元素的颜色与depth. 然后算color的均值.</p><p>super-sampling时,会对一个像素结合多个强度(颜色),也就是均值.采样的值太大图像会变糊.</p><p><img data-src="https://s2.loli.net/2024/05/24/IXzWOyn49Y5JpVE.png" alt="image-20240524212850965"></p><h5 id="HW3"><a href="#HW3" class="headerlink" title="HW3"></a>HW3</h5><p>之前涉及到了MVP,视口转换以及Raster、=-Z-buffer. 现在到了shading</p><p>Shading:The process of applying a material to an object.The darkening or coloring of an illustration or  diagram with parallel lines or a block of color</p><p>这里Shading介绍了Blinn-Phong反射模型,包括漫反射,高光反射和环境光.</p><p><img data-src="https://s2.loli.net/2024/05/25/3ZsDz6MlRxehIfP.png" alt="image-20240525212040023"></p><p><img data-src="https://s2.loli.net/2024/05/24/elFT8BIydC3XLEw.png" alt="image-20240524220535971"></p><p><strong>漫反射</strong></p><p><img data-src="https://s2.loli.net/2024/05/24/PIprAbJe1HD9SvE.png" alt="image-20240524215603681">与看的方向无关,与距离和入射角度有关. kd对漫反射影响如下.</p><p><img data-src="https://s2.loli.net/2024/05/24/3fKa4mPENFXgz9o.png" alt="image-20240524221426912"></p><p><strong>高光反射</strong></p><p><img data-src="https://s2.loli.net/2024/05/24/LpxJqyRU2u7rd19.png" alt="image-20240524220408626"></p><p>与看的角度有关,角度跟入射角相等时最大.</p><p><img data-src="https://s2.loli.net/2024/05/24/oFExtZaYjLsqD7I.png" alt="image-20240524220506998"></p><p>半程向量就是以l和v向量为边的中线,而p叫做cosine power plots,越大相同角度下越小.</p><p>ks和p对高光反射影响如下</p><p><img data-src="https://s2.loli.net/2024/05/24/i47jFfRGB3t9Lx8.png" alt="image-20240524221457998"></p><p><strong>环境光</strong></p><p><img data-src="https://s2.loli.net/2024/05/24/XnR9HyYvdjcSpox.png" alt="image-20240524221924122"></p><p>不依赖于任何东西,相当于加点环境噪音</p><p>所以最后在Blinn-Phong反射模型中,着色如下</p><p><img data-src="https://s2.loli.net/2024/05/24/QhGcYsCd1ny8e3D.png" alt="image-20240524222152219"></p><p>此外shading还跟着色频率有关,分为三种类型,包括flat shading,gouraud shading,Phong shading</p><p><strong>flat shading</strong></p><ul><li>Triangle face is  flat — one normal  vector  </li><li>Not good for  smooth surfaces</li></ul><p>对于每个三角形做shading,每个三角形就一个normal vector</p><p><strong>gouraud shading</strong></p><ul><li>Interpolate colors  from vertices across  triangle </li><li>Each vertex has a  normal vector</li></ul><p>对于每个vertex做,每个vertex搞出来一个normal vector.</p><p><strong>Phong shading</strong></p><ul><li>Interpolate normal  vectors across each  triangle </li><li>Compute full shading  model at each pixel </li></ul><p>对于每个pixel做.</p><p><img data-src="https://s2.loli.net/2024/05/24/PpGrA8hL17vcmBF.png" alt="image-20240524230245562"></p><p><strong>重心插值</strong></p><p><img data-src="https://s2.loli.net/2024/05/24/SMDGjIbdVWiUFYa.png" alt="image-20240524230332105"></p><p><img data-src="https://s2.loli.net/2024/05/25/YLGaUhMpVnyrTSE.png" alt="image-20240525114414968"></p><p><img data-src="https://s2.loli.net/2024/05/25/39j5Q6aWqIZr87X.png" alt="image-20240525200857191"></p><p>重心坐标系是指平面上任意一点可以用三角形的三个顶点的坐标的线性组合表示,其中三个系数的和为1。</p><p><strong>Texture mapping</strong></p><p>apply textures = sampling</p><p><img data-src="https://s2.loli.net/2024/05/25/ZwzPhiv72LuEHJp.png" alt="image-20240525134129545"></p><p>应用texture的方法,对于每个screen的点,得到对应的texture coords(u,v)然后sample出一个颜色,设置这个颜色为点的颜色,常作为漫反射的系数kd</p><p><img data-src="https://s2.loli.net/2024/05/25/D5L4jirsAwNCfI7.png" alt="image-20240525114612818"></p><p>每个vertex rasterize之后坐标与贴图上某个坐标对应</p><p><img data-src="https://s2.loli.net/2024/05/25/R8Uj61yvnXmoIbc.png" alt="image-20240525112721794"></p><p><img data-src="https://s2.loli.net/2024/05/25/ysCe1ApBbnlkqZR.png" alt="image-20240525112703661"></p><p><strong>Texture magnification</strong></p><blockquote><p>当纹理图像的分辨率低于显示屏上需要的分辨率时，就会出现纹理放大的情况。例如，当你将一个小纹理贴图拉伸到一个较大的表面上时，就会遇到纹理放大。这个过程需要决定如何在纹理中插值以生成更多的像素</p></blockquote><p>如果texture分辨率太小的解决方法.</p><p>放大纹理时常用的插值方法有：</p><ol><li><strong>最近邻插值（Nearest Neighbor Interpolation）</strong>：这种方法简单高效，但通常会产生锯齿状的边缘，因为它只是选择最接近的纹理像素。</li><li><strong>双线性插值（Bilinear Interpolation）</strong>：这种方法通过对周围的四个纹理像素进行加权平均，可以生成较为平滑的结果。</li><li><strong>三线性插值（Trilinear Interpolation）</strong>：在双线性插值的基础上，加入了对不同MIP贴图层次的线性插值，以进一步提高质量。</li></ol><p><img data-src="https://s2.loli.net/2024/05/25/OWIxDR7yqBC5uen.png" alt="image-20240525115208103"></p><p><img data-src="https://s2.loli.net/2024/05/25/YhmLPEoxGZjJ7wn.png" alt="image-20240525124210774"></p><p><img data-src="https://s2.loli.net/2024/05/25/Tm2kfgzHxyO1b5S.png" alt="image-20240525131324085"></p><p>如果texture太大,需要将多个texel取均值分给一个pixel.</p><p><img data-src="https://s2.loli.net/2024/05/25/XkthROUmr3TzDaq.png" alt="image-20240525141722341"></p><p><strong>Texture minification</strong></p><blockquote><p>纹理缩小发生在纹理图像的分辨率高于显示屏上需要的分辨率时。例如，当你将一个大纹理贴图缩小到一个较小的表面上时，就会遇到纹理缩小。这个过程需要决定如何对纹理进行采样，以避免混叠效应（aliasing）</p></blockquote><p>缩小纹理时常用的方法有：</p><ol><li><strong>MIP贴图（Mipmapping）</strong>：这是最常用的方法，它预先生成一系列缩小分辨率的纹理图像（MIP层），在渲染时根据需要选择合适的层进行采样，以减少混叠效应。MIP贴图通常与三线性插值结合使用。</li><li><strong>各向异性过滤（Anisotropic Filtering）</strong>：在MIP贴图的基础上，这种方法进一步提高了纹理在不同角度下的清晰度，特别是在视角较大时效果明显。</li></ol><p><strong>Mipmap</strong></p><p>mipmap是一种多级纹理映射技术.它通过预先生成并存储一系列逐渐降低分辨率的纹理图像来实现.每个降低分辨率的纹理图像称为一个MIP层</p><p><img data-src="https://s2.loli.net/2024/05/25/vVYOIxGN6bmPuow.png" alt="image-20240525145752235"></p><p><img data-src="https://s2.loli.net/2024/05/25/UIFbenyzPNkY782.png" alt="image-20240525152604833"></p><p>将得到的D四舍五入</p><p>在mipmap上再进行插值,</p><p><img data-src="https://s2.loli.net/2024/05/25/M6kJeFrKCiPWYd9.png" alt="image-20240525152427773"></p><p>作业要求实现normal_fragment_shader,利用了(法向量+1)/2作为颜色.还有Blinn-Phong反射模型,以及纹理.</p><p><strong>normal_fragment_shader</strong>比较简单,直接穿法向量即可.</p><p><strong>Blinn-Phong反射模型</strong>按照公式写即可.</p><p>纹理模型主要需要使用对应uv位置的颜色,将原本使用的颜色替换用来算diffuse light.</p><p>实现纹理时可以考虑texture magnification的双线性插值,以及minification的mipmap.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">getColorBilinear</span><span class="params">(<span class="keyword">float</span> u, <span class="keyword">float</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> u_img = u * width;</span><br><span class="line">  <span class="keyword">auto</span> v_img = (<span class="number">1</span> - v) * height;</span><br><span class="line">  <span class="keyword">float</span> v11 = <span class="built_in">ceil</span>(v_img);</span><br><span class="line">  <span class="keyword">float</span> v01 = <span class="built_in">floor</span>(v_img);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">float</span> u01 = <span class="built_in">floor</span>(u_img);</span><br><span class="line">  <span class="keyword">float</span> u11 = <span class="built_in">ceil</span>(u_img);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> rightBottomColor = image_data.at&lt;cv::Vec3b&gt;(v01, u11);</span><br><span class="line">  <span class="keyword">auto</span> leftBottomColor = image_data.at&lt;cv::Vec3b&gt;(v01, u01);</span><br><span class="line">  <span class="keyword">auto</span> rightTopColor = image_data.at&lt;cv::Vec3b&gt;(v11, u11);</span><br><span class="line">  <span class="keyword">auto</span> leftTopColor = image_data.at&lt;cv::Vec3b&gt;(v11, u01);</span><br><span class="line">  <span class="keyword">float</span> s = (u_img - u01) / (u11 - u01);</span><br><span class="line">  <span class="keyword">float</span> t = (v_img - v01) / (v11 - v01);</span><br><span class="line">  <span class="keyword">auto</span> topColor = leftTopColor + s * (rightTopColor - leftTopColor);</span><br><span class="line">  <span class="keyword">auto</span> bottomColor =</span><br><span class="line">      leftBottomColor + s * (rightBottomColor - leftBottomColor);</span><br><span class="line">  <span class="keyword">auto</span> final_color = bottomColor + t * (topColor - bottomColor);</span><br><span class="line">  <span class="keyword">return</span> Eigen::<span class="built_in">Vector3f</span>(final_color[<span class="number">0</span>], final_color[<span class="number">1</span>], final_color[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进阶方法包括Bump mapping,有了凹凸效果,还有displacement mapping.</p><p><img data-src="https://s2.loli.net/2024/05/26/hAqye8oJLWr2RI3.png" alt="image-20240526161155111"></p><p>Bump mapping算法</p><h5 id="HW4"><a href="#HW4" class="headerlink" title="HW4"></a><img data-src="https://s2.loli.net/2024/05/26/GEkQeCXYNxbMqJ7.png" alt="image-20240526164218979">HW4</h5><p>Geometry 表示几何形状的几种方法,包括显示和隐式.</p><p><img data-src="https://s2.loli.net/2024/05/26/sYHdUhBcTq5tw17.png" alt="image-20240526193619807"></p><p>隐式描述优点:</p><ul><li>描述简洁（如函数） </li><li>便于某些查询（物体内部、与表面的距离） </li><li>适用于射线与曲面的交叉（稍后详述） </li><li>对于简单形状，可精确描述/无采样误差 </li><li>易于处理拓扑结构的变化（如流体</li></ul><p>缺点</p><ul><li>难以模拟复杂形状</li></ul><p>显示模型包括点云,多边形网格(polygon mesh),</p><p>点云</p><ul><li>最简单的表示方法：点列表（x,y,z） </li><li>可轻松表示任何几何图形 </li><li>适用于大型数据集（&gt;&gt;1 点/像素） </li><li>通常转换为多边形网格 </li><li>难以绘制采样不足的区域</li></ul><p>多边形网格</p><ul><li>存储顶点和多边形（通常为三角形或四边形） </li><li>更易于处理/模拟、自适应采样 </li><li>数据结构更复杂 </li><li>可能是图形中最常见的表示法</li></ul><p><strong>曲线</strong></p><p>Bézier Curves</p><p><img data-src="https://s2.loli.net/2024/05/26/rhK4ZOqMtGzNu2X.png" alt="image-20240526213851885" style="zoom:67%;" /></p><p>还有cubic贝塞尔曲线,其实就是order更高.</p><p>这些曲线都可以归结为多项式.de Casteljau算法</p><p><img data-src="https://s2.loli.net/2024/05/26/O8xQhoubFZafzD9.png" alt="image-20240526220606516" style="zoom:50%;" /></p><p><img data-src="https://s2.loli.net/2024/05/26/t6yMUePEfpdZ25w.png" alt="image-20240526221101195"></p><p><img data-src="https://s2.loli.net/2024/05/28/FdiBq6fVnyUm7wg.png" alt="image-20240528205956947"></p><p>贝塞尔曲线特点</p><p>内插端点<br>与端点相切<br>仿射变换特性 </p><ul><li>通过变换控制点来变换曲线<br>convex hull property </li><li>曲线位于控制点的凸边内</li></ul><p>利用Piecewise Bézier Curves,将连续的低阶贝塞尔曲线连在一起.</p><p>曲线除了贝塞尔曲线,还有splines和B-splines.</p><p><strong>Bézier Surfaces</strong></p><p><img data-src="https://s2.loli.net/2024/05/26/bISzRwqsTp3BhAj.png" alt="image-20240526225234591" style="zoom:50%;" /></p><p><img data-src="https://s2.loli.net/2024/05/26/93tqJlgfBMupFIC.png" alt="image-20240526230516215"></p><p><strong>Mesh</strong></p><p>对mesh的操作包括subdivision,simplification以及regularization.</p><p>subdivision就是将三角形split然后根据一些权重重新分配三角形位置.</p><p>此外还有catmull-clark subdivison.</p><p>simplification</p><p><img data-src="https://s2.loli.net/2024/05/26/HvDeG2loYQ6E4Kf.png" alt="image-20240526231621354"></p><p>shadow mapping</p><p>不在阴影中的点必须同时被灯光和摄像机看到</p><p>作业就是画贝塞尔曲线并反走样.通过[0,1]的t值确定曲线点。naive的方法就是使用多项式直接算,更好的方法是,根据四个点反复的插值得到曲线点. 反走样就是antialiasing,将曲线点的附近点的值赋值,可以根据距离.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Point2f <span class="title">recursive_bezier</span><span class="params">(<span class="keyword">const</span> std::vector&lt;cv::Point2f&gt; &amp;control_points,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Implement de Casteljau&#x27;s algorithm</span></span><br><span class="line">  <span class="comment">// 首先，将相邻的点连接起来以形成线段</span></span><br><span class="line">  <span class="keyword">if</span> (control_points.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> control_points[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  std::vector&lt;cv::Point2f&gt; points;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; control_points.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> point = t * control_points[i] + (<span class="number">1</span> - t) * control_points[i + <span class="number">1</span>];</span><br><span class="line">    points.<span class="built_in">push_back</span>(point);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">recursive_bezier</span>(points, t);</span><br><span class="line">  <span class="comment">//  用 t : (1 − t) 的比例细分每个线段，并找到该分割点</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到的分割点作为新的控制点序列，新序列的长度会减少一。</span></span><br><span class="line">  <span class="comment">// 如果序列只包含一个点，则返回该点并终止。否则，使用新的控制点序列并</span></span><br><span class="line">  <span class="comment">// 转到步骤 1。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bezier</span><span class="params">(<span class="keyword">const</span> std::vector&lt;cv::Point2f&gt; &amp;control_points, cv::Mat &amp;window)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Iterate through all t = 0 to t = 1 with small steps, and call de</span></span><br><span class="line">  <span class="comment">// Casteljau&#x27;s recursive Bezier algorithm.</span></span><br><span class="line">  <span class="keyword">float</span> max_dist = <span class="number">1.5f</span> * <span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">float</span> t = <span class="number">0</span>; t &lt;= <span class="number">1.0f</span>; t += <span class="number">0.001</span>) &#123;</span><br><span class="line">    <span class="keyword">auto</span> point = <span class="built_in">recursive_bezier</span>(control_points, t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">round</span>(point.x) - <span class="number">1</span>; i &lt; <span class="built_in">round</span>(point.x) + <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">round</span>(point.y) - <span class="number">1</span>; j &lt; <span class="built_in">round</span>(point.y) + <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> samplePoint = cv::<span class="built_in">Point2f</span>(i, j);</span><br><span class="line">        <span class="keyword">float</span> d = cv::<span class="built_in">norm</span>(samplePoint - point);</span><br><span class="line">        <span class="keyword">float</span> color = <span class="number">255.0f</span> * (<span class="number">1</span> - d / max_dist);</span><br><span class="line">        window.at&lt;cv::Vec3b&gt;(samplePoint.y, samplePoint.x)[<span class="number">2</span>] =</span><br><span class="line">            std::<span class="built_in">max</span>(window.at&lt;cv::Vec3b&gt;(samplePoint.y, samplePoint.x)[<span class="number">2</span>],</span><br><span class="line">                     (uchar)color);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// window.at&lt;cv::Vec3b&gt;(point.y, point.x)[1] = 255;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HW5"><a href="#HW5" class="headerlink" title="HW5"></a>HW5</h5><p>走过了Rasterization和Geometry,终于到了也令人激动的Ray tracing.</p><p>在计算机图形学渲染中,我们通常会模拟Light Rays的传播过程,以计算光照效果。主要方法包括:</p><ol><li>光线追踪(Ray Tracing): 从观察者视角发射光线,模拟其在场景中的传播过程。</li><li>光栅化(Rasterization): 直接计算每个像素的颜色,不追踪光线的具体传播过程。</li><li>辐射度函数(Radiance Function): 利用数学模型描述Light Rays在空间中的传播特性。</li></ol><p>光栅化的缺点:不能处理全局的效果,光反射会超过一次.</p><p>Ray tracing is accurate, but is very slow</p><p>Ray-Tracing的算法</p><p><strong>Light Rays</strong></p><p>Light Rays的主要特点如下:</p><ol><li>传播方向: Light Rays沿直线传播,遵循光线传播的直线性质。</li><li>强度衰减: Light Rays的强度随着传播距离的增加而衰减,遵循逆平方定律。</li><li>反射和折射: 当Light Rays遇到物体表面时,可能会发生反射或折射,遵循光学定律。</li></ol><p><img data-src="https://s2.loli.net/2024/05/28/DRq8BcZVJI9OeaM.png" alt="image-20240528211704213"></p><p><strong>Ray Casting</strong></p><p><img data-src="https://s2.loli.net/2024/05/28/SjqaQ59pxYfIH2E.png" alt="image-20240528212212368"></p><p><img data-src="https://s2.loli.net/2024/05/28/IZsbODHYcXngwt6.png" alt="image-20240528212339608"></p><p>Shadow Rays是光线追踪算法中一个非常重要的技术,它用于计算物体在三维场景中投射出的阴影.</p><p><img data-src="https://s2.loli.net/2024/05/28/EI7yp4GToHrVsXb.png" alt="image-20240528213753449"></p><p>在光线追踪渲染过程中,<strong>当一条光线与场景中的物体发生相交时,通常需要判断该点是否位于阴影中。为此,我们会发射一条从交点出发指向光源的shadow ray.</strong></p><p>如果这条shadow ray在到达光源之前与任何其他物体相交,那么该交点就位于阴影中.</p><p><strong>Ray-Surface Intersection</strong></p><p>Ray is defined by its origin and a direction vector</p><p><img data-src="https://s2.loli.net/2024/05/28/bZOxpmvrok3MQeV.png" alt="image-20240528213710912" style="zoom:67%;" /></p><p><img data-src="https://s2.loli.net/2024/05/28/jltgudeDTN9mQzs.png" alt="image-20240528213858434"></p><p><img data-src="https://s2.loli.net/2024/05/28/mR8edIxybTEYkBU.png" alt="image-20240528214148744"></p><p>与隐式表示的surface相交的ray计算.</p><p><img data-src="https://s2.loli.net/2024/05/28/qL38YXn9dE1WiUK.png" alt="image-20240528214431784"></p><p>与三角形mesh交叉</p><p><img data-src="https://s2.loli.net/2024/05/28/o51pJvBfFK9zDeZ.png" alt="image-20240528214803254"></p><p>简单的想法是让ray与每一个triangle交叉,ray-plane交叉,看点是否在三角形内部.</p><p>平面由法向量和面上的一个点定义.</p><p><img data-src="https://s2.loli.net/2024/05/28/EAhgOXmBbc2l5yW.png" alt="image-20240528215109831"></p><p><img data-src="https://s2.loli.net/2024/05/28/e1MHiZQhqJW4jow.png" alt="image-20240528215650898"></p><p><strong>Möller Trumbore Algorithm</strong></p><p><img data-src="https://s2.loli.net/2024/05/28/yGVeQkYPOg3j6zs.png" alt="image-20240528220838253"></p><p><strong>Bounding Volumes</strong></p><p>使用这东西来看有没有相交.</p><p><strong>box is the intersection of 3 pairs of slabs</strong></p><p><img data-src="https://s2.loli.net/2024/05/28/Rgu7eK4kMxSHI2L.png" alt="image-20240528222129198"></p><p>这样做的好处</p><p>简单的光线-场景交点求解</p><ul><li>穷尽地测试每个三角形与光线的交点</li><li>找到最近的交点(即最小的t值)</li></ul><p>问题:</p><ul><li>朴素算法 = #像素 ⨉ # 三角形 (⨉ #反射次数)</li><li>非常慢!</li></ul><p>快速避免交点的方法:<strong>用简单的体积包围复杂物体</strong></p><ul><li>物体完全包含在该体积中</li><li>如果光线没有击中该体积,就不会击中该物体</li><li>所以先测试包围体积,如果击中了,再测试物体本身</li></ul><p><img data-src="https://s2.loli.net/2024/05/28/L235usfSm9aliGZ.png" alt="image-20240528230330356"></p><p>Render的方法,其实就是坐标系的一个变换以及castRay算反射以及阴影等.</p><p>计算Render的过程:</p><ol><li>首先需要使用帧的尺寸来对像素位置进行归一化。</li><li>归一化后的像素坐标被称为NDC空间(Normalized Device Coordinates)。</li><li>在将像素坐标转换到NDC空间时,我们需要在原始坐标上加上0.5的偏移量。这是为了确保最终的相机光线穿过像素的中心。</li><li>NDC空间中的像素坐标范围是[0, 1]。这与光栅化领域中NDC空间的范围[-1, 1]不同。</li><li>由于成像平面是以世界坐标系的原点为中心的,因此我们需要进一步将[0, 1]范围的NDC坐标映射到[-1, 1]的范围内。这样做可以确保左侧像素有负的x坐标,右侧像素有正的x坐标,上面的像素有正的y坐标,下面的像素有负的y坐标。</li><li>当图像的长宽比不是1:1时,我们需要考虑图像的宽高比。</li><li>对于一个7x5像素的图像,宽高比是1.4。</li><li>在屏幕空间(NDC空间)中,像素坐标范围仍然是[-1, 1]。但由于横向有更多像素,所以像素会被拉伸变形。</li><li>为了让像素保持正方形,我们需要将x坐标乘以图像的宽高比1.4。这样可以将x坐标范围拉伸到[-1.4, 1.4]。</li><li>这个操作不会影响y坐标,它仍然在[-1, 1]范围内。</li></ol><p>rayTriangleIntersect判断是否相交以及是否在三角形内部,公式如下:</p><p><img data-src="https://s2.loli.net/2024/05/31/elBK7zRus5wXCE4.png" alt="image-20240531232626151"></p><h5 id="HW6"><a href="#HW6" class="headerlink" title="HW6"></a>HW6</h5><p>主要是为了加速ray-tracing的rayTriangle intersection. 进行分割.</p><p>包括uniform grid和spatial partitions,前者就是均匀分块,后者包括Oct-Tree,KD-Tree,BSP-Tree多种,还有Bounding Volume Hierarchy的方法.</p><p><img data-src="https://s2.loli.net/2024/06/01/PYjBZp936Kq2QVl.png" alt="image-20240601202540887"></p><p><img data-src="https://s2.loli.net/2024/06/01/8D2tV9AEnzIh3mH.png" alt="image-20240601174238696"></p><p><img data-src="https://s2.loli.net/2024/06/01/WCjEBS4LIXgKYhk.png" alt="image-20240601174248719"></p><p><img data-src="https://s2.loli.net/2024/06/01/nDaNxQ2GTb3iUfW.png" alt="image-20240601174312126"></p><p><img data-src="https://s2.loli.net/2024/06/01/ZCQs6uEma59rGJx.png" alt="image-20240601174320918"></p><p><img data-src="https://s2.loli.net/2024/06/01/cBWnDoLRqmEM1rs.png" alt="image-20240601174336245"></p><p>确定ray是否与AABB相交</p><p><img data-src="https://s2.loli.net/2024/06/01/F6riHxW9OvYPB52.png" alt="image-20240601224405331" style="zoom:50%;" /></p><p>再确定ray是否与三角形相交,与上一次作业类似.在判断,判断是否与box相交,不相交则没有交点,如果相交,看是否是叶子节点,如果是叶子节点,看是否与其中的object相交,如果不是在分别判断.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Intersection <span class="title">BVHAccel::getIntersection</span><span class="params">(BVHBuildNode* node,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">const</span> Ray&amp; ray)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Traverse the BVH to find intersection</span></span><br><span class="line">  Intersection isect;</span><br><span class="line">  <span class="keyword">if</span> (!node || !node-&gt;bounds.<span class="built_in">IntersectP</span>(ray, ray.direction_inv, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)) &#123;</span><br><span class="line">    <span class="keyword">return</span> isect;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;left == <span class="literal">nullptr</span> &amp;&amp; node-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node-&gt;object-&gt;<span class="built_in">getIntersection</span>(ray);</span><br><span class="line">  &#125;</span><br><span class="line">  Intersection left = <span class="built_in">getIntersection</span>(node-&gt;left, ray);</span><br><span class="line">  Intersection right = <span class="built_in">getIntersection</span>(node-&gt;right, ray);</span><br><span class="line">  <span class="keyword">if</span> (left.distance &lt; right.distance) &#123;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BVH的构造如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BVHAccel::<span class="built_in">BVHAccel</span>(std::vector&lt;Object*&gt; p, <span class="keyword">int</span> maxPrimsInNode,</span><br><span class="line">                   SplitMethod splitMethod)</span><br><span class="line">    : <span class="built_in">maxPrimsInNode</span>(std::<span class="built_in">min</span>(<span class="number">255</span>, maxPrimsInNode)),</span><br><span class="line">      <span class="built_in">splitMethod</span>(splitMethod),</span><br><span class="line">      <span class="built_in">primitives</span>(std::<span class="built_in">move</span>(p)) &#123;</span><br><span class="line">  <span class="keyword">time_t</span> start, stop;</span><br><span class="line">  <span class="built_in">time</span>(&amp;start);</span><br><span class="line">  <span class="keyword">if</span> (primitives.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  root = <span class="built_in">recursiveBuild</span>(primitives);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">time</span>(&amp;stop);</span><br><span class="line">  <span class="keyword">double</span> diff = <span class="built_in">difftime</span>(stop, start);</span><br><span class="line">  <span class="keyword">int</span> hrs = (<span class="keyword">int</span>)diff / <span class="number">3600</span>;</span><br><span class="line">  <span class="keyword">int</span> mins = ((<span class="keyword">int</span>)diff / <span class="number">60</span>) - (hrs * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">int</span> secs = (<span class="keyword">int</span>)diff - (hrs * <span class="number">3600</span>) - (mins * <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">&quot;\rBVH Generation complete: \nTime Taken: %i hrs, %i mins, %i secs\n\n&quot;</span>,</span><br><span class="line">      hrs, mins, secs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BVHBuildNode* <span class="title">BVHAccel::recursiveBuild</span><span class="params">(std::vector&lt;Object*&gt; objects)</span> </span>&#123;</span><br><span class="line">  BVHBuildNode* node = <span class="keyword">new</span> <span class="built_in">BVHBuildNode</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compute bounds of all primitives in BVH node</span></span><br><span class="line">  Bounds3 bounds;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    bounds = <span class="built_in">Union</span>(bounds, objects[i]-&gt;<span class="built_in">getBounds</span>());</span><br><span class="line">  <span class="keyword">if</span> (objects.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Create leaf _BVHBuildNode_</span></span><br><span class="line">    node-&gt;bounds = objects[<span class="number">0</span>]-&gt;<span class="built_in">getBounds</span>();</span><br><span class="line">    node-&gt;object = objects[<span class="number">0</span>];</span><br><span class="line">    node-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objects.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">    node-&gt;left = <span class="built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="number">0</span>]&#125;);</span><br><span class="line">    node-&gt;right = <span class="built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="number">1</span>]&#125;);</span><br><span class="line"></span><br><span class="line">    node-&gt;bounds = <span class="built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Bounds3 centroidBounds;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.<span class="built_in">size</span>(); ++i)</span><br><span class="line">      centroidBounds =</span><br><span class="line">          <span class="built_in">Union</span>(centroidBounds, objects[i]-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>());</span><br><span class="line">    <span class="keyword">int</span> dim = centroidBounds.<span class="built_in">maxExtent</span>();</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (dim) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">          <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().x &lt; f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().x;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">          <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().y &lt; f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().y;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">          <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().z &lt; f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().z;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> beginning = objects.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">auto</span> middling = objects.<span class="built_in">begin</span>() + (objects.<span class="built_in">size</span>() / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> ending = objects.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> leftshapes = std::vector&lt;Object*&gt;(beginning, middling);</span><br><span class="line">    <span class="keyword">auto</span> rightshapes = std::vector&lt;Object*&gt;(middling, ending);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(objects.<span class="built_in">size</span>() == (leftshapes.<span class="built_in">size</span>() + rightshapes.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line">    node-&gt;left = <span class="built_in">recursiveBuild</span>(leftshapes);</span><br><span class="line">    node-&gt;right = <span class="built_in">recursiveBuild</span>(rightshapes);</span><br><span class="line"></span><br><span class="line">    node-&gt;bounds = <span class="built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是BVH,再看SAH.</p><p><img data-src="https://s2.loli.net/2024/06/01/kQfWdLwKM8JEAO6.png" alt="image-20240601230318319"></p><p><img data-src="https://s2.loli.net/2024/06/01/SdR4eM9Lzmqx83u.png" alt="image-20240601225049873"></p><p><img data-src="https://s2.loli.net/2024/06/01/dEh2QYDNBZq4Gmw.png" alt="image-20240601230545159"></p><p><img data-src="https://s2.loli.net/2024/06/01/Lt8SdEIrph3s7wC.png" alt="image-20240601230754416"></p><h5 id="HW7"><a href="#HW7" class="headerlink" title="HW7"></a>HW7</h5><p><strong>radiometry</strong></p><p>Radiant flux, intensity, irradiance, radiance</p><p><strong>辐射能</strong>(Radiant energy)是电磁 辐射能。它以焦耳为单位</p><p>Q [J = Joule]</p><p> <strong>辐射通量</strong>（功率）是单位时间内发射、反射、传输或接收的能量、<br>单位时间内反射、传输或接收的能量</p><script type="math/tex; mode=display">\Phi\equiv\frac{\mathrm{d}Q}{\mathrm{d}t}\text{ [W=Watt] [lm=lumen]}</script><p><img data-src="https://s2.loli.net/2024/06/02/UHw3QStEyLeJvcg.png" alt="image-20240602161533270"></p><p>有三个衡量指标,包括intensiry,irradiance和radiance.</p><p><img data-src="https://s2.loli.net/2024/06/02/b2unaV1cI5EjAGO.png" alt="image-20240602161706417"></p><p>实心角：球面上被摄面积与半径平方的比值：球面面积与半径平方之比 ,球有4Π steradians</p><p><img data-src="https://s2.loli.net/2024/06/02/m6cLVeHiUGlbMfZ.png" alt="image-20240602163911047" style="zoom:67%;" /></p><p><img data-src="https://s2.loli.net/2024/06/02/xD2i9V1WznUTF4q.png" alt="image-20240602164606816"></p><p><img data-src="https://s2.loli.net/2024/06/02/OMtKHV5yo8TWziU.png" alt="image-20240602164655440"></p><p><img data-src="https://s2.loli.net/2024/06/02/NJcHQwevWK9ZO1z.png" alt="image-20240602165849277"></p><p>辐照度(irradiance)是入射到表面点的单位面积功率</p><p><img data-src="https://s2.loli.net/2024/06/02/2lu7SGBX5qcUTbr.png" alt="image-20240602170041748"></p><p>表面的辐照度与光照方向和表面法线之间夹角的余弦成正比。</p><p><img data-src="https://s2.loli.net/2024/06/02/hjSAJr1gxt7Bmep.png" alt="image-20240602170804889"></p><p><img data-src="https://s2.loli.net/2024/06/02/DofShqERXKj6wPJ.png" alt="image-20240602171113537" style="zoom:67%;" /></p><p> 辐射度(Radiance)是描述光在环境中分布的基本场量 </p><ul><li>辐照度是与光线相关的量 </li><li>渲染就是计算辐射度</li></ul><p><img data-src="https://s2.loli.net/2024/06/02/nSJchK5OdA4fpNt.png" alt="image-20240602172100181"></p><p><img data-src="https://s2.loli.net/2024/06/02/xv3qSwf4XlWAGQs.png" alt="image-20240602172146849"></p><p>Incident radiance:入射辐射度是到达表面的单位固角辐照度</p><p>Exiting Radiance:离开表面辐射度是离开表面的单位投影面积强度。</p><p><strong>Bidirectional Reflectance  Distribution Function</strong></p><p>双向反射分布函数（BRDF）表示从每个入射方向反射到每个出射方向的光量</p><p><img data-src="https://s2.loli.net/2024/06/02/gsSYMKUADz4Xp3b.png" alt="image-20240602173440574"></p><p><img data-src="https://s2.loli.net/2024/06/02/L1fjxdF4gEzKbpM.png" alt="image-20240602174423412"></p><p><img data-src="https://s2.loli.net/2024/06/02/snL4oXfVMKzmqxR.png" alt="image-20240602205209811"></p><p><img data-src="https://s2.loli.net/2024/06/02/BRbCeu6IHMSpiFL.png" alt="image-20240602174856955"></p><p><img data-src="https://pic3.zhimg.com/v2-c9128ac3f985a48f1c42ea7f12803f8e_b.jpg" alt="img"></p><p><img data-src="https://s2.loli.net/2024/06/02/FEoybKz31a5Mpc6.png" alt="image-20240602211917267"></p><p>将L~i~转为经过反射后的光L~r~再经过简化.</p><ul><li>此时我们令相机接受到的直接光照为：e(u)</li><li>最终接收到的光为:l(u)</li><li>其他表面弹过来的光为:l(v)</li><li>BRDF那些式子为：K（u，v）</li></ul><p><img data-src="https://pic3.zhimg.com/v2-1df15bb2a394315d869b916c594e1fb2_b.jpg" alt="img"></p><p><img data-src="https://s2.loli.net/2024/06/02/IAHsizpe86rmSCo.png" alt="image-20240602212016496"></p><p><strong>Monte Carlo Integration</strong></p><p><img data-src="https://s2.loli.net/2024/06/02/xKZpAtQFj8yimU4.png" alt="image-20240602214239624"></p><p><strong>Path Tracing</strong></p><p>光线追踪 </p><ul><li>始终执行镜面反射/折射 </li><li>在漫反射表面停止反弹 </li></ul><p>使用Monte Carlo Integration解决反射公式.</p><p><img data-src="https://s2.loli.net/2024/06/02/EhnZtXl7cMkPb2a.png" alt="image-20240602215544122"></p><p><img data-src="https://s2.loli.net/2024/06/02/NufB9EKD4wZOPU6.png" alt="image-20240602220952675"></p><p><img data-src="https://s2.loli.net/2024/06/02/Fowx9kp7sRbHdMY.png" alt="image-20240602222734803" style="zoom:67%;" /></p><p>存在的两个问题: </p><p><strong>Explosion of #rays as #bounces go up</strong></p><p>由于反射,在反射时需要通过蒙特卡洛方法计算多个值,这样多次反射计算量增加.</p><p>所以只取一个方向作为入射,但在每个pixel上采样多个值取平均.</p><p><img data-src="https://s2.loli.net/2024/06/02/li1ahLZm26DvMru.png" alt="image-20240602230032888"></p><p><strong>The recursive algorithm will never stop</strong></p><p>光会无数次反弹. 解决方法:俄罗斯轮盘赌 Russian Roulette (RR)</p><p><img data-src="https://s2.loli.net/2024/06/02/NugfonpHmWKzX1V.png" alt="image-20240602230335879"></p><p><img data-src="https://s2.loli.net/2024/06/02/CwaPL4fyJtV8uc7.png" alt="image-20240602230436474" style="zoom:50%;" /></p><p>此外N=1的采样还存在问题:即低采样率的问题，由于我们将平均放到了像素块处用接收到的光线来替代平均着色点的光线，但如果对于一个场景就没有或存在很少的间接光照，主要是直接光照的时候，那这个平均也无法消除误差噪声。</p><blockquote><p>如果光源面积很小，则均匀采样就需要很大的N才能保证采样到光源方向。也就是这里问题来自两个第一个是均匀抽样方法浪费了很多光源不存在的角度</p></blockquote><p>对光采样</p><p><img data-src="https://s2.loli.net/2024/06/02/t2TL8lFwkCp4XfK.png" alt="image-20240602232512769"></p><p><img data-src="https://s2.loli.net/2024/06/02/4vfesAZGRpgjChi.png" alt="z"></p><p><img data-src="https://s2.loli.net/2024/06/02/y8Wdgb4t2TJY9qZ.png" alt="image-20240602232751423"></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="缓冲对象"><a href="#缓冲对象" class="headerlink" title="缓冲对象"></a>缓冲对象</h4><p>比如顶点缓冲对象,顶点数组对象.</p><p>定义顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：<strong>顶点着色器</strong>。它<strong>会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡</strong>。顶点着色器接着会处理我们在内存中指定数量的顶点。</p><p>通过顶点缓冲对象(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p><h4 id="缓冲对象类型"><a href="#缓冲对象类型" class="headerlink" title="缓冲对象类型"></a>缓冲对象类型</h4><p>比如顶点缓冲对象类型,创建好的缓冲可以绑定到某种对象类型上.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br></pre></td></tr></table></figure><p>从这一刻起，我们使用的任何（在GL_ARRAY_BUFFER目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用glBufferData函数，它会把之前定义的顶点数据复制到缓冲的显存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure><h4 id="shader与GLSL"><a href="#shader与GLSL" class="headerlink" title="shader与GLSL"></a>shader与GLSL</h4><p><strong>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出</strong>。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，<strong>它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)</strong>。</p><p>包括顶点着色器等等</p><h4 id="VAO"><a href="#VAO" class="headerlink" title="VAO"></a>VAO</h4><p>顶点数组对象(又称 VAO)可以像顶点缓冲区对象一样绑定,此后的顶点属性调用都将存储在 VAO 中.</p><h3 id="书籍和网站推荐"><a href="#书籍和网站推荐" class="headerlink" title="书籍和网站推荐"></a>书籍和网站推荐</h3><p><strong>解题参考</strong></p><p><a href="https://www.cnblogs.com/lawliet12/p/17719365.html">Games101现代计算机图形学入门 - 作业1~8 集合含提高项总结 - lawliet9 - 博客园 (cnblogs.com)</a></p><p><strong>书籍</strong></p><ol><li>Fundamentals of Computer Graphics<a href="https://github.com/FCG-Translators/FundamentalsOfComputerGraphics-CN">FCG-Translators/FundamentalsOfComputerGraphics-CN: 计算机图形学基础（中文译本） (github.com)</a></li><li><a href="https://book.douban.com/subject/35221845/">OpenGL超级宝典（第7版） (豆瓣) (douban.com)</a></li></ol><p><strong>网站</strong></p><ol><li><a href="https://learnopengl.com/">Learn OpenGL, extensive tutorial resource for learning Modern OpenGL</a></li><li><a href="https://www.scratchapixel.com/">Scratchapixel 4.0, Learn Computer Graphics Programming</a></li><li><a href="https://ogldev.org/">OpenGL Step by Step - OpenGL Development (ogldev.org)</a></li><li><a href="https://cs184.eecs.berkeley.edu/">https://cs184.eecs.berkeley.edu/</a></li><li><a href="http://15462.courses.cs.cmu.edu/fall2022/">15-462/662 Fall 2022 (cmu.edu)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;简简单单学个概念.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器简单JS逆向Tricks</title>
    <link href="https://www.sekyoro.top/2024/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8D%95JS%E9%80%86%E5%90%91Tricks/"/>
    <id>https://www.sekyoro.top/2024/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8D%95JS%E9%80%86%E5%90%91Tricks/</id>
    <published>2024-05-03T12:10:56.000Z</published>
    <updated>2024-05-06T15:08:52.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>因为平常会接触一些Web逆向一些API啥的,学习一些基本的浏览器Debug能力以及一些实战.这些知识可能比较散碎不够系统.<br><span id="more"></span></p><p>目前浏览器JS逆向在国内的教程都太散了,而且很多人教的并不好.我这里分一些基础工具使用,常遇到的逆向问题和实战, 不定期更新.注意,这里的逆向并不是逆向可执行程序.</p><h2 id="浏览器开发工具基本使用"><a href="#浏览器开发工具基本使用" class="headerlink" title="浏览器开发工具基本使用"></a>浏览器开发工具基本使用</h2><p>F12开发者工具是Web逆向最常用的,用谷歌或者Edge浏览器的开发者工具都比较强大,功能很多.</p><p>主要关注XHR断点,手动断点debug,DOM事件,查看堆栈函数,以及使用自己代码进行覆盖操作.</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDI1NjUxMg%3D%3D&amp;chksm=8d314fc8ba46c6de5e29f6001a7a9a3fd7705a16ec37bd77cf0f975d323fe91ce36017f8ee65&amp;idx=2&amp;mid=2651261863&amp;scene=21&amp;sn=1b8045af007d91be759d11c13d3844f0#wechat_redirect">Chrome调试工具常用功能整理 (qq.com)</a></p><p>一些常用技巧<a href="https://www.52pojie.cn/thread-1160287-1-1.html">js逆向技巧分享 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://zhuanlan.zhihu.com/p/108207751#:~:text=js逆向技巧分享 1 1. 搜索 2 2. debug 3,写js代码 7 7. 打印windows对象的值 8 8. 勾子 更多项目">js逆向技巧分享 - 知乎 (zhihu.com)</a></p><h2 id="通常遇到的问题"><a href="#通常遇到的问题" class="headerlink" title="通常遇到的问题"></a>通常遇到的问题</h2><h3 id="无限Debugger"><a href="#无限Debugger" class="headerlink" title="无限Debugger"></a>无限Debugger</h3><p><a href="https://cloud.tencent.com/developer/article/1986399">原创丨JavaScript 逆向过程中无限 Debug 的绕过方案-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/116652656">JS 逆向 —- 过无限debugge、hook、js混淆还原、控制流混淆_hook无线debug-CSDN博客</a></p><p>打开开发者工具就卡住.</p><h3 id="AST解混淆"><a href="#AST解混淆" class="headerlink" title="AST解混淆"></a>AST解混淆</h3><p><a href="https://www.bilibili.com/video/BV1Jz4y1M799?p=2&amp;vd_source=177ef88aa6608bc3652c72d71b0aa098">AST基础知识_哔哩哔哩_bilibili</a></p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>只要知道加密方式就不难了,加密方式一般</p><ul><li>线性散列算法（签名算法)MD5</li><li>对称性加密算法AES DES</li><li>非对称性加密算法 RSA</li></ul><p><a href="https://blog.csdn.net/qq_44159028/article/details/121732881">js逆向之加密算法介绍_js加密逆向-CSDN博客</a></p><p><a href="https://blog.csdn.net/Ig_thehao/article/details/119104016">对于js逆向过程中对加密方式识别的小技巧_怎么看密文是否aes-CSDN博客</a></p><p><a href="http://littleshark.space/2023/07/08/JS逆向笔记/JS逆向学习---加密算法梳理/#摘要算法">JS逆向—-加密算法 | LittleShark’s Space</a></p><h3 id="Webpack打包后的网站"><a href="#Webpack打包后的网站" class="headerlink" title="Webpack打包后的网站"></a>Webpack打包后的网站</h3><p>目前打包有Vite,webpack等等,不同的打包框架得到的网站代码还不一样.</p><p><a href="http://littleshark.space/2023/07/09/JS逆向笔记/JS逆向学习---webpack技术/">JS逆向—-webpack技术 | LittleShark’s Space</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://scrapecrow.com/reverse-engineering-intro.html">Scrapecrow - Introduction To Reverse Engineering The Web</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为平常会接触一些Web逆向一些API啥的,学习一些基本的浏览器Debug能力以及一些实战.这些知识可能比较散碎不够系统.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从论文中看AI绘画</title>
    <link href="https://www.sekyoro.top/2024/05/02/%E4%BB%8E%E8%AE%BA%E6%96%87%E4%B8%AD%E7%9C%8BAI%E7%BB%98%E7%94%BB/"/>
    <id>https://www.sekyoro.top/2024/05/02/%E4%BB%8E%E8%AE%BA%E6%96%87%E4%B8%AD%E7%9C%8BAI%E7%BB%98%E7%94%BB/</id>
    <published>2024-05-02T12:25:08.000Z</published>
    <updated>2024-05-31T11:27:03.917Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要看是看Diffusion Models,CLIP,ControlNet,IP-Adapter这种经典论文,尝试总结论文写作的一些方式以及图像生成模型的一些内在思想. 对于其中的数学原理和代码不过深究.<br><span id="more"></span></p><h3 id="DDPM"><a href="#DDPM" class="headerlink" title="DDPM"></a>DDPM</h3><p>使用扩散模型得到高质量图像,证明了这种方法在训练时与多种噪声等级下的去噪分数等同,在采样时与退火朗文动力学等价.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503150540112.png" alt="image-20240503150540112"></p><p>有forward precess和reversed process,</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503152315412.png" alt="image-20240503152315412"></p><p>对于正向过程,就是对图像的一个加噪过程, 逆向过程需要通过神经网络拟合,论文中没有考虑方差.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503164248521.png" alt="image-20240503164248521"></p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503164900128.png" alt="image-20240503164900128"></p><p>使用了重参数化,类似VAE中的思想.在加噪声时,通过使用高斯噪声和均值、方差.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503174343480.png" alt="image-20240503174343480" style="zoom:67%;" /></p><p>这样只要知道x_0以及超参数α和β就能得到后面加噪的数据.计算概率密度函数</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503180338927.png" alt="image-20240503180338927" style="zoom: 80%;" /></p><p>对于优化目标,需要让p和q的分布尽量接近,相当于让均值和方差类似.</p><script type="math/tex; mode=display">\sum_{t=2}^TE_{q(x_t|x_0)}[D_{KL}(q(x_{t-1}|x_t,x_0)||p_\theta(x_{t-1}|x_t)]</script><p>而方差是定值,对于均值</p><script type="math/tex; mode=display">\begin{aligned}\mu_{q}& =\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_{t}x_{0}+\sqrt{\alpha_{t}}(1-\bar{\alpha}_{t-1})x_{t}}{1-\bar{\alpha}_{t}}  \\&=\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_{t}\frac{x_{t}-\sqrt{1-\bar{\alpha}_{t}}\epsilon}{\sqrt{\bar{\alpha}_{t}}}+\sqrt{\alpha_{t}}(1-\bar{\alpha}_{t-1})x_{t}}{1-\bar{\alpha}_{t}} \\&=\frac{1}{\sqrt{\alpha_{t}}}(x_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\epsilon)\end{aligned}</script><p>模型使用了Unet和attention,残差连接预测噪声.得到噪声后可以得到$p<em>\theta(x</em>{t-1}|x_t)$</p><script type="math/tex; mode=display">x_{t-1}=\frac{1}{\sqrt{\alpha_{t}}}(x_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\epsilon_{\theta})+\sigma_{q}z</script><p>论文<a href="http://arxiv.org/abs/2006.11239">http://arxiv.org/abs/2006.11239</a> <a href="https://zhuanlan.zhihu.com/p/650394311">深入浅出扩散模型(Diffusion Model)系列：基石DDPM（人人都能看懂的数学原理篇） - 知乎 (zhihu.com)</a></p><h3 id="Improved-DDPM"><a href="#Improved-DDPM" class="headerlink" title="Improved DDPM"></a>Improved DDPM</h3><p>对DDPM做了改进.</p><ul><li>学习方差会让生成效果更好（DDPM 中只学习了均值，方差是一个常数）</li><li>提出了余弦加噪方法，比线性加噪效果更好</li></ul><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503192352123.png" alt="image-20240503192352123"></p><h3 id="DDIM-2020"><a href="#DDIM-2020" class="headerlink" title="DDIM 2020"></a>DDIM 2020</h3><p>为了加快采样速度，提出了去噪扩散隐含模型（DDIMs），这是一类更有效的迭代隐含概率模型，其训练过程与 DDPMs 相同。在 DDPMs 中，生成过程被定义为特定马尔可夫扩散过程的反向。</p><p>我们通过一类能实现相同训练目标的非马尔可夫扩散过程来推广 DDPM。这些非马尔可夫过程可以对应于确定性的生成过程，从而产生能更快地生成高质量样本的隐式模型。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503193245982.png" alt="image-20240503193245982"></p><p><a href="https://zeqiang-lai.github.io/blog/posts/ai/ddim/">关于 DDIM 采样算法的推导 | Ze’s Blog (zeqiang-lai.github.io)</a></p><p>上面三个数学公式涉及比较多,比较偏学术,我的目的是想介绍一个脉络和抽象的概念和作用,使得使用一些开源AI绘画这类应用时更加得心应手,下面更多涉及到一些AI绘画功能层面上的东西.</p><p><img data-src="https://maciejdomagala.github.io/assets/images/Screenshot_2022-05-31_at_13.31.46.png" alt="img"></p><h3 id="Latent-Diffusion-Models-2022"><a href="#Latent-Diffusion-Models-2022" class="headerlink" title="Latent Diffusion Models 2022"></a>Latent Diffusion Models 2022</h3><blockquote><p>Stable Diffusion产品的背后模型</p></blockquote><p>将图像形成过程分解为一系列去噪自编码器的顺序应用，扩散模型（DMs）在图像数据及更广泛范围内实现了最先进的合成结果。此外，它们的表达允许一种引导机制来控制图像生成过程而无需重新训练。然而，由于这些模型通常直接在像素空间中操作，优化强大的DMs通常需要消耗数百个GPU天,论文提出的方法将它们在latent space中进行并使用预训练的autoencoder.并使用了cross-attention结构,现在看来也是非常经典了.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503210656442.png" alt="image-20240503210656442"></p><script type="math/tex; mode=display">\mathrm{Attention}(Q,K,V)=\mathrm{softmax}\left(\frac{QK^{T}}{\sqrt{d}}\right)\cdot V\\Q=W_Q^{(i)}\cdot\varphi_i(z_t),K=W_K^{(i)}\cdot\tau_\theta(y),V=W_V^{(i)}\cdot\tau_\theta(y)</script><script type="math/tex; mode=display">L_{DM}=\mathbb{E}_{x,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(x_t,t)\|_2^2\Big] \\L_{LDM}:=\mathbb{E}_{\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(z_t,t,\tau_\theta(y))\|_2^2\Big]</script><h3 id="CLIP-2021"><a href="#CLIP-2021" class="headerlink" title="CLIP 2021"></a>CLIP 2021</h3><blockquote><p>OpenAI用于DALLE的文字与图像匹配  利用不同的encoders将文字和图像联系了起来</p></blockquote><p>计算机视觉系统经过训练可以预测一组固定的预定对象类别。这种受限的监督形式限制了其通用性和可用性，因为要指定任何其他视觉概念，都需要额外的标记数据。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503203723416.png" alt="image-20240503203723416"  /></p><p>主要是解决利用文本信息监督图像,并实现zero-shot transfer.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503204548844.png" alt="image-20240503204548844" style="zoom:67%;" /></p><h3 id="ControlNet-2023"><a href="#ControlNet-2023" class="headerlink" title="ControlNet 2023"></a>ControlNet 2023</h3><blockquote><p>开创性的有价值的工作,使用pose,edge maps,segmentation map作为监督信息控制图像布局.  技术上利用微调技术并利用额外的pose等信息引导图像生成.</p></blockquote><p>Adding Conditional Control to Text-to-Image Diffusion Models</p><p>随着文字到图像扩散模型的出现，我们现在只需输入文字提示，就能创作出视觉效果极佳的图像。</p><p>然而，文本到图像模型对图像空间构成的控制能力有限；仅靠文本提示很难精确表达复杂的布局、姿势、形状和形态。要生成与我们的心理想象精确匹配的图像，往往需要反复编辑提示、检查生成的图像，然后重新编辑提示。</p><p>ControlNet利用了微调技术,冻结原始块,然后使用原本的权重处理额外信息c,c通过<strong>零卷积</strong>再加回去得到$y^{c}$</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503224707489.png" alt="image-20240503224707489"></p><p>为了给这样一个预训练的神经块添加一个controlnet网络，锁定(冻结)原始块的参数Θ，同时将该块克隆到一个参数为Θc的可训练拷贝</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503225434997.png" alt="image-20240503225434997"></p><p>可训练副本以外部条件向量c作为输入。当这种结构应用于诸如稳定扩散( Stable Diffusion )这样的大型模型时，锁定的参数保留了用数十亿张图像训练的生产就绪模型，而可训练的副本则重用了这种大规模预训练的模型，以建立处理各种输入条件的深度、鲁棒和强大的骨干。</p><script type="math/tex; mode=display">y_{\mathfrak{c}}=\mathcal{F}(x;\Theta)+\mathcal{Z}(\mathcal{F}(x+\mathcal{Z}(c;\Theta_{\mathfrak{z}1});\Theta_{\mathfrak{c}});\Theta_{\mathfrak{z}2})</script><p>训练目标</p><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{\boldsymbol{z}_0,\boldsymbol{t},\boldsymbol{c}_t,\boldsymbol{c}_\mathrm{f},\epsilon\sim\mathcal{N}(0,1)}\left[\|\epsilon-\epsilon_\theta(\boldsymbol{z}_t,t,\boldsymbol{c}_t,\boldsymbol{c}_\mathrm{f}))\|_2^2\right]</script><p>在训练过程中，我们用空字符串随机替换50 %的文本提示ct。这种方法增加了controlnet网络在输入条件图像(例如,边缘,姿态,深度等。)中直接识别语义的能力，作为提示的替代。在训练过程中，由于零卷积不会给网络添加噪声，所以模型应该始终能够预测高质量的图像。我们观察到，模型并没有逐步学习控制条件，而是突然成功地跟随输入条件图像；通常在小于10K的优化步数。</p><p>在inference部分介绍了CFG以及组合多个controlnet.</p><script type="math/tex; mode=display">\epsilon_{\mathrm{prd}}=\epsilon_{\mathrm{uc}}+\beta_{\mathrm{cfg}}(\epsilon_{\mathrm{c}}-\epsilon_{\mathrm{uc}})</script><h3 id="T2I-Adapter-2023"><a href="#T2I-Adapter-2023" class="headerlink" title="T2I-Adapter 2023"></a>T2I-Adapter 2023</h3><p>T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models</p><p>大规模文本到图像( T2I )模型令人难以置信的生成能力已经显示出强大的学习复杂结构和有意义语义的能力.</p><p>Motivation:然而,<strong>仅仅依靠文本提示并不能充分地利用模型学习到的知识</strong>,尤其是需要灵活准确地控制(例如,颜色和结构)时.</p><p>具体来说，提出<strong>学习简单轻量级的T2I - Adapters来将T2I模型中的内部知识与外部控制信号对齐,同时冻结原始的大型T2I模型</strong></p><p>在本文中探讨是否有可能通过<strong>某种方式”挖掘出” T2I模型隐含学习到的能力</strong>，特别是高层结构和语义能力，然后<strong>明确地使用它们来更精确地控制生成</strong>。作者认为一个小型的适配器模型可以达到这个目的，因为它不是学习新的生成能力，而是学习T2I模型中从控制信息到内部知识的映射。也就是说，这里的主要问题是”对齐”问题，即内部知识和外部控制信号应该对齐。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504225616342.png" alt="image-20240504225616342"></p><script type="math/tex; mode=display">\left.\left\{\begin{array}{l}\mathbf{Q}=\mathbf{W}_Q\phi(\mathbf{Z}_t);\mathbf{K}=\mathbf{W}_K\tau(\mathbf{y});\mathbf{V}=\mathbf{W}_V\tau(\mathbf{y})\\Attention(\mathbf{Q},\mathbf{K},\mathbf{V})=softmax(\frac{\mathbf{Q}\mathbf{K}^T}{\sqrt d})\cdot\mathbf{V}\end{array}\right.\right.</script><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{\mathbf{Z}_t,\mathbf{C},\epsilon,t}(||\epsilon-\epsilon_\theta(\mathbf{Z}_t,\mathbf{C})||_2^2)</script><p>C表示条件信息，θ表示UNet去噪器的函数。</p><p>在推理过程中，输入的隐映射$Z^{T}$由随机高斯分布生成。给定$Z^{T}$，$\epsilon_{\theta}$在每一步t预测一个噪声估计，条件为C。噪声特征图通过减去它变得越来越清晰.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504224247416.png" alt="image-20240504224247416"></p><p>在每个尺度下，利用一个卷积层和两个残差块( RB )来提取条件特征Fck.最终形成多尺度条件特征Fc = { F$^{1}<em>{c}$，F$^{2}</em>{c}$，F$^{3}<em>{c}$，F$^{4}</em>{c}$ }。注意到Fc的维度与UNet去噪器编码器中的中间特征$F<em>{enc}$= { F$^{1}</em>{enc}$，F$^{2}<em>{enc}$，F$^{3}</em>{enc}$，F$^{4}<em>{enc}$ }相同,然后在每个尺度下，F$</em>{c}$与$F_{enc}$相加。</p><script type="math/tex; mode=display">\begin{aligned}&\mathbf{F}_{c}=\mathcal{F}_{AD}(\mathbf{C})\\&\hat{\mathbf{F}}_{enc}^{i}=\mathbf{F}_{enc}^{i}+\mathbf{F}_{c}^{i},i\in\{1,2,3,4\}\end{aligned}</script><p>C为条件输入。F$_{AD}$是T2I的适配器</p><p>除了使用单个适配器作为条件外，提出的T2I适配器还支持多种条件。注意这个策略不需要额外的训练。</p><script type="math/tex; mode=display">\mathbf{F}_c=\sum_{k=1}^K\omega_k\mathcal{F}_{AD}^k(\mathbf{C}_k)</script><h3 id="IP-Adapter-2023"><a href="#IP-Adapter-2023" class="headerlink" title="IP-Adapter 2023"></a>IP-Adapter 2023</h3><p>IP-Adapter:Text Compatible Image Prompt Adapter for Text-to-Image Diffusion Models</p><p>背景目的与结论:近年来，大型文本到图像扩散模型因其出色的生成能力创造出高保真度的图像而表现出强大的能力。然而，仅使用文本提示生成想要的图像是非常困难的，因为它往往涉及复杂的提示工程。文字提示的一种替代方式是图像提示，俗话说：”一张图像值一千个字”。虽然现有的从预训练模型直接微调的方法是有效的，但它们需要较大的计算资源，并且与其他基础模型、文本提示和结构控制不兼容</p><p>在本文中提出了IP - Adapter，一种有效的、轻量级的适配器，<strong>以实现预训练的文本到图像扩散模型的图像提示能力</strong>。我们的IP - Adapter的<strong>关键设计是解耦的交叉注意力机制，将文本特征和图像特征的交叉注意力层分离</strong>。</p><p>得益于解耦的交叉注意力策略，图像提示也可以很好地与文本提示协同工作，实现多模态图像生成。</p><blockquote><p>也是使用图像作为提示信息的工作</p></blockquote><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504191157767.png" alt="image-20240504191157767"></p><p>以往的工作通过替换text-encoder为image-encoder,本作强调在不修改原始模型的情况下实现图像提示功能.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504204508024.png" alt="image-20240504204508024"></p><p>文章认为,上述方法的主要问题在于文本到图像扩散模型的交叉注意力模块.对预训练扩散模型中的交叉注意力层的key和value投影权重进行训练,使其适应文本特征.</p><p>因此,将图像特征和文本特征融合到交叉注意力层只完成了图像特征到文本特征的对齐,但这可能会遗漏一些图像特有的信息,最终导致仅与参考图像进行粗粒度可控生成(例如,图像风格)。</p><script type="math/tex; mode=display">L_{\mathrm{simple}}=\mathbb{E}_{\boldsymbol{x}_0,\boldsymbol{\epsilon}\sim\mathcal{N}(\mathbf{0},\mathbf{I}),\boldsymbol{c},t}\|\epsilon-\epsilon_\theta(\boldsymbol{x}_t,\boldsymbol{c},t)\|^2</script><p>在CFG下</p><script type="math/tex; mode=display">\hat{\epsilon}_\theta(x_t,c,t)=w\epsilon_\theta(x_t,c,t)+(1-w)\epsilon_\theta(x_t,t)</script><p>目前的适配器很难匹配微调的图像提示模型或从零开始训练的模型的性能。主要原因是<strong>图像特征不能有效地嵌入到预训练模型</strong>中。大多数方法只是简单地将串联的特征输入到冻结的交叉注意力层中，阻止了扩散模型从图像提示中捕获细粒度的特征。为了解决这个问题，提出了一种<strong>解耦的交叉注意力策略，通过新增加的交叉注意力层来嵌入图像特征</strong>。</p><p>插入图像特征的一种直接方法是将图像特征和文本特征进行拼接，然后将其输入到交叉注意力层中.然而,我们发现这种方法的有效性不足.相反提出了一种解耦的交叉注意力机制,其中文本特征和图像特征的交叉注意力层是分开的。</p><script type="math/tex; mode=display">\mathbf{Z}''=\text{Attention}(\mathbf{Q},\mathbf{K}',\mathbf{V}')=\text{Softmax}(\frac{\mathbf{Q}(\mathbf{K}')^\top}{\sqrt{d}})\mathbf{V}'</script><script type="math/tex; mode=display">\mathbf{Z}^{new}=\mathrm{Softmax}(\frac{\mathbf{Q}\mathbf{K}^{\top}}{\sqrt{d}})\mathbf{V}+\mathrm{Softmax}(\frac{\mathbf{Q}(\mathbf{K}^{\prime})^{\top}}{\sqrt{d}})\mathbf{V}^{\prime}\\\mathrm{where~}\mathbf{Q}=\mathbf{Z}\mathbf{W}_q,\mathbf{K}=c_t\mathbf{W}_k,\mathbf{V}=c_t\mathbf{W}_v,\mathbf{K}^{\prime}=c_i\mathbf{W}_k^{\prime},\mathbf{V}^{\prime}=c_i\mathbf{W}_v^{\prime}</script><p>由于冻结了原始的UNet模型，在上述解耦的交叉注意力中，只有W′k和W′v是可训练的.</p><script type="math/tex; mode=display">L_{\mathrm{simple}}=\mathbb{E}_{\boldsymbol{x}_0,\boldsymbol{\epsilon},\boldsymbol{c}_t,\boldsymbol{c}_i,t}\|\epsilon-\epsilon_\theta(x_t,c_t,c_i,t)\|^2 \\\hat{\epsilon}_\theta(x_t,c_t,c_i,t)=w\epsilon_\theta(x_t,c_t,c_i,t)+(1-w)\epsilon_\theta(x_t,t)</script><p>我们还在训练阶段随机丢弃图像条件,以便在推理阶段实现无分类器指导.</p><p>由于文本交叉注意力和图像交叉注意力是分离的，我们还可以在推断阶段调整图像条件的权重</p><script type="math/tex; mode=display">\mathbf{Z}^{new}=\text{Attention}(\mathbf{Q},\mathbf{K},\mathbf{V})+\lambda\cdot\text{Attention}(\mathbf{Q},\mathbf{K}',\mathbf{V}')</script><p>为了训练IP - Adapter，从两个开源数据集LAION - 2B和COYO - 700M中构建了一个包含约1000万个文本-图像对的多模态数据集</p><h3 id="InstantID-2024"><a href="#InstantID-2024" class="headerlink" title="InstantID 2024"></a>InstantID 2024</h3><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504230014174.png" alt="image-20240504230014174"></p><p>利用Textual Inversion、DreamBooth、LoRA等方法进行个性化图像合成已经取得了显著的进展。然而，它们的实际应用受到<strong>高存储需求、长时间微调过程以及需要多个参考图像的限制</strong>。相反，现有的基于ID嵌入的方法，虽然只需要单一的前向推断，但面临挑战：它们要么需要在众多模型参数之间进行广泛的微调，缺乏与社区预训练模型的兼容性，要么不能保持高的人脸保真度</p><p>我InstantID，这是一个的基于扩散模型的解决方案,即插即用模块只使用一张人脸图像就能很好地处理各种风格的图像个性化，同时保证了高保真度。</p><p>为了实现这一点,设计了一个新颖的IdentityNet，通过强语义和弱空间条件，将面部和地标图像与文本提示相结合,以引导图像生成.</p><p><strong>生成精确保留人类主体错综复杂的身份细节的定制图像</strong>。</p><p>它包含三个关键部分：( 1 )能够捕获鲁棒语义人脸信息的ID嵌入；( 2 )一个轻量级的自适应模块，具有解耦的交叉注意力，便于使用图像作为视觉提示；( 3 )提出了一种基于额外空间控制的编码参考人脸图像细节特征的IdentityNet。</p><p>首先采用<strong>人脸编码器代替CLIP提取语义人脸特征</strong>,并使用可训练的投影层将其投影到文本特征空间.</p><p>然后，引入解耦交叉注意力的轻量级自适应模块，以支持图像作为提示。</p><p>在IdentityNet中,生成过程完全由人脸嵌入引导,无需任何文本信息.只更新新增加的模块,而预训练的文本到图像模型保持冻结,以确保灵活性.</p><p>在训练过程中，<strong>只对Image Adapter和Identity Net的参数进行优化</strong>，而对预训练的扩散模型的参数保持冻结。我们在具有人类主题的图像-文本对上训练整个InstantID流水线，采用了类似于原始稳定扩散工作中使用的训练目标</p><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{z_t,t,C,C_i,\epsilon\sim\mathcal{N}(0,1)}[\|\epsilon-\epsilon_\theta(z_t,t,C,C_i)\|_2^2]</script><p>$C_{i}$​为IdentityNet上的任务特定图像条件。值得注意的是，在训练过程中，我们不会随意丢弃文本或图片条件，因为我们已经去掉了IdentityNet中的文本提示条件。</p><h3 id="PhotoMaker-Customizing-Realistic-Human-Photos-via-Stacked-ID-Embedding"><a href="#PhotoMaker-Customizing-Realistic-Human-Photos-via-Stacked-ID-Embedding" class="headerlink" title="PhotoMaker:Customizing Realistic Human Photos via Stacked ID Embedding"></a>PhotoMaker:Customizing Realistic Human Photos via Stacked ID Embedding</h3><p>Background and Task:</p><p>Motivation:</p><p>Method:</p><p>Results and findings:</p><p>文本生成高清图像的最新进展在合成基于给定文本提示的真实感人类照片方面取得了显著的进展.</p><p>然而,现有的个性化生成方法无法同时满足高效率、高身份保真度和灵活的文本可控性等要求.在这项工作中,我们引入了一种高效的个性化文本到图像生成方法PhotoMaker,它主要将任意数量的输入ID图像编码成堆栈ID嵌入,以保留ID信息.</p><p>在这项工作中,我们引入了一种高效的个性化文本到图像生成方法PhotoMaker,它主要将任意数量的输入ID图像编码成堆栈ID嵌入,以保留ID信息.</p><p><img data-src="https://s2.loli.net/2024/05/16/djRDKObakQW3wm4.png" alt="image-20240516204600628"></p><p>对于所提出的PhotoMaker,首先分别从文本编码器和图像编码器中获得文本嵌入和图像嵌入.然后,通过合并相应的类嵌入(例如,男人和女人)和每个图像嵌入来提取融合嵌入.接下来,我们将所有的融合嵌入沿着长度维度进行拼接,形成堆叠的ID嵌入.最后将堆叠的ID嵌入反馈给所有的交叉注意力层,用于自适应地合并扩散模型中的ID内容.</p><p>在给定少量待定制ID图像的情况下,PhotoMaker的目标是生成一个新的具有照片真实感的人体图像,该图像保留了输入ID的特征,并在文本提示的控制下改变生成ID的内容或属性.</p><p>们使用CLIP 图像编码器$E<em>{img}$来提取图像嵌入,以使其与扩散模型中的原始文本表示空间对齐。在将每幅输入图像输入到图像编码器之前，我们用随机噪声填充特定ID的主体部分以外的图像区域，以消除其他ID和背景的影响。对于给定的文本提示T，我们使用预训练的CLIP文本编码器$E</em>{text}$提取文本嵌入$t∈R^{L × D}$，其中L表示嵌入的长度。</p><p>在输入中标注对应的类词(例如,男人和女人)。然后我们在文本嵌入中提取类词对应位置的特征向量。该特征向量将与每个图像嵌入$e_i$进行融合.</p><p>融合嵌入可以表示为{ ( $\hat{e}^{i}∈R^{D}$ | i = 1 . . . . N }。通过结合类别词的特征向量，该嵌入可以更全面地表示当前输入的ID图像。</p><p>在获得融合嵌入之后，我们将它们沿着长度维度进行拼接，形成堆叠的id嵌入</p><script type="math/tex; mode=display">s^*=\text{Concat}([\hat{e}^1,\ldots,\hat{e}^N])\quad s^*\in\mathbb{R}^{N\times D}</script><script type="math/tex; mode=display">\left.\left\{\begin{array}{l}\mathbf{Q}=\mathbf{W}_Q\cdot\phi(z_t);\mathbf{K}=\mathbf{W}_K\cdot t^*;\mathbf{V}=\mathbf{W}_V\cdot t^*\\\text{Attention}(\mathbf{Q},\mathbf{K},\mathbf{V})=\text{softmax}(\frac{\mathbf{Q}\mathbf{K}^T}{\sqrt d})\cdot\mathbf{V},\end{array}\right.\right.</script><p>我们利用扩散模型中固有的交叉注意力机制，自适应地合并堆叠ID嵌入中包含的ID信息。首先将原始文本嵌入t中类词对应位置的特征向量替换为堆叠的id嵌入$s^{ <em>}$得到更新的文本嵌入$t^{ </em>}∈R^{( L + N-1 ) × D}$</p><blockquote><p>上面五篇工作都是类似的,利用额外控制信息和改进一些模型进行微调使得捕获输入的图像.下面几篇工作是OPenAI与Google的文生图模型,已经作为产品级模型.</p></blockquote><h3 id="GLIDE-2021"><a href="#GLIDE-2021" class="headerlink" title="GLIDE 2021"></a>GLIDE 2021</h3><p>GLIDE能够根据自然语言描述生成图像，这意味着用户可以用文本提示来生成相应的视觉内容。</p><p>论文比较了两种引导扩散模型的技术——CLIP引导和无分类器引导（classifier-free guidance）。研究发现，无分类器引导在照片真实感和标题相似性方面更受人类评估者的青睐。GLIDE不仅能够进行零样本（zero-shot）图像生成，还能通过图像修复（inpainting）进行细粒度的图像编辑，使得用户可以迭代改进模型样本以匹配更复杂的文本提示。</p><p>Ho &amp; Salimans 提出了无分类器引导，一种用于引导扩散模型的技术，它不需要单独的分类器模型来进行训练。对于无分类器指导，在训练过程中，类条件扩散模型θ ( xt | y )中的标签y被一个固定概率的零标签∑所代替。为了用通用文本提示实现无分类器的指导，我们有时在训练过程中用空序列(其中,我们也称之为:)替换文本。</p><script type="math/tex; mode=display">\hat{\epsilon}_\theta(x_t|c)=\epsilon_\theta(x_t|\emptyset)+s\cdot(\epsilon_\theta(x_t|c)-\epsilon_\theta(x_t|\emptyset))</script><h3 id="DALLE2-2022"><a href="#DALLE2-2022" class="headerlink" title="DALLE2 2022"></a>DALLE2 2022</h3><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504230111721.png" alt="image-20240504230111721"></p><p>像CLIP这样的对比模型已经被证明可以学习到同时捕获语义和风格的图像的鲁棒表示。</p><p>为了利用这些表示进行图像生成,文中提出了一个两阶段模型：一个先验生成给定文本描述的CLIP图像嵌入，一个解码器生成以图像嵌入为条件的图像。</p><p>我们证明了显式地生成图像表示以最小的损失在照片真实性和字幕相似性中提高了图像的多样性。我们的解码器在图像表示的条件下也可以产生图像的变化，以保留其语义和风格，同时改变图像表示中不存在的非基本细节。此外，CLIP的联合嵌入空间可以在a z中实现语言引导的图像操作</p><h3 id="Imagen-2022"><a href="#Imagen-2022" class="headerlink" title="Imagen 2022"></a>Imagen 2022</h3><p>我们提出了Imagen，我们的关键发现是，通用的大语言模型(如：T5 )，在纯文本语料上进行预训练，在编码图像合成的文本时取得了惊人的效果：增加Imagen中语言模型的大小比增加图像扩散模型的大小更能提高样本保真度和图像文本对齐度。Imagen在COCO数据集上取得了7.27的最新FID得分，而没有对COCO进行过训练，人类评分员发现Imagen样本处于标准状态</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504235247964.png" alt="image-20240504235247964" style="zoom:67%;" /></p><p>Imagen使用冻结的文本编码器将输入文本编码成文本嵌入。条件扩散模型将文本嵌入映射成一个64×64的图像。Imagen进一步利用文本条件的超分辨率扩散模型对图像进行上采样，先是64×64→256×256，然后是256×256→1024×1024。</p><p><strong>基模型</strong>采用IPPDMU - Net架构，用于我们的64 × 64文本到图像扩散模型。该网络通过池化嵌入向量对文本嵌入进行条件化，并加入类嵌入条件化方法的扩散时间步嵌入。我们进一步通过在多个分辨率的文本嵌入上添加交叉注意力来限定整个文本嵌入序列。</p><p><strong>超分辨率模型</strong>：对于64 × 64→256 × 256的超分辨率，采用改编自PPDMU的U - Net模型。为了提高内存效率、推理时间和收敛速度(我们的变体比文献[ 40,58 ]中使用的U - Net快2 - 3倍步数/秒)，我们对该U - Net模型进行了多次修改。我们称这种变体为Efficient U-Net </p><p>总结一下,关于DDPM的论文本身的数学理论还是挺强的,而相关的CLIP,Adapter作为某种辅助改进既是一种创新型的工作也很有价值,理论性研究起来也没有那么困难,这种工作做起来还是很舒服的.</p><h3 id="An-Image-is-Worth-One-Word-Personalizing-Text-to-Image-Generation-using-Textual-Inversion"><a href="#An-Image-is-Worth-One-Word-Personalizing-Text-to-Image-Generation-using-Textual-Inversion" class="headerlink" title="An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion"></a>An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion</h3><p>Task:Text-to-image models </p><p>Motivation: Yet, it is unclear how such freedom can be exercised to generate images of specific unique concepts, modify their appearance, or compose them in new roles and novel scenes</p><p>Method:Using only 3-5 images of a user-provided concept, like an object or a style, we learn to represent it through new “words” in the embedding space of a frozen text-to-image model. These “words” can be composed into natural language sentences, guiding personalized creation in an intuitive way.</p><p>Results and findings:Notably, we find evidence that a single word embedding is sufficient for capturing unique and varied concepts. We compare our approach to a wide range of baselines, and demonstrate that it can more faithfully portray the concepts across a range of applications and tasks.</p><p>作为用户,我们怎样才能要求文本到图像的模型来设计一个包含珍贵童年玩具的新奇场景.</p><p>在大规模模型中引入新的概念往往是困难的.为每个新概念重新训练一个具有扩展数据集的模型是非常昂贵的,<strong>在少数例子上进行微调通常会导致灾难性的遗忘</strong>.当面对新概念时,更多的测量方法冻结模型并训练转换模块以适应其输出.然而,这些方法仍然容易遗忘先验知识,或者在与新学习的概念同时访问时面临困难.</p><p>提出通过在预训练的T2I模型的textual embedding中寻找新词来克服这些挑战.</p><p>我们考虑文本编码过程的第一阶段.在这里,一个输入字符串首先被转换为一组令牌.然后将每个令牌替换为自己的嵌入向量,这些向量通过下游模型进行反馈.我们的目标是寻找新的嵌入向量来表示新的、特定的概念.</p><p>我们用一个新的pseudo-word表示一个新的嵌入向量，记为S <em>。然后，这个伪单词被当作其他单词一样对待，并且可以用来为生成模型组成新的文本查询。因此，人们可以要求”一幅S </em>在海滩上的照片”，”一幅S <em>挂在墙上的油画”，甚至可以组成两个概念，如”一幅S1 </em>在S2 *风格的绘画”。重要的是，这一过程没有触及生成模型。</p><p>这样，我们保留了在新任务上微调视觉和语言模型时通常会丢失的丰富的文本理解和泛化能力。</p><p>我们给出了一个固定的,经过预训练的文本到图像模型和一个小的图像集来描述这个概念.我们的目标是找到一个单词嵌入,使得形式为’ A photo of S * ‘的句子将导致从我们的小集合中重建图像。这种嵌入是通过一个优化过程发现的,称之为”文本反转” ( Textual Inversion )</p><p><img data-src="https://s2.loli.net/2024/05/16/NJi3nmBfztA9xwe.png" alt="image-20240516154802746"></p><p>为了找到这些新的嵌入使用了一组图像(一般为3 - 5个)，它描述了我们的目标概念,比如不同的背景或姿势.</p><p>设$c θ ( y )$是将一个条件输入y映射为一个条件向量的模型</p><script type="math/tex; mode=display">L_{LDM}:=\mathbb{E}_{z\sim\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(z_t,t,c_\theta(y))\|_2^2\Big]</script><p>通过直接优化,最小化从小集合中采样的图像上式(的LDM损失找到v *。</p><p>为了限制生成，我们从CLIP ImageNet模板中随机抽取中性上下文文本,</p><p>其中包含’ A photo of S <em> ‘,’ A rendition of S </em> ‘等形式的提示。在补充材料中提供了模板的完整列表</p><script type="math/tex; mode=display">v_{*}=\arg\min_{v}\mathbb{E}_{z\sim\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_{\theta}(z_{t},t,c_{\theta}(y))\|_{2}^{2}\Big]</script><p>通过复用与原LDM模型相同的训练方案来实现，同时保持$c_θ$和θ都固定不变。值得注意的是，这是一个重建任务。因此，我们期望它能够激励学习到的嵌入来捕获概念所特有的精细视觉细节.</p><blockquote><p>说白了利用新的训练集数据对重新训练一个embedding层将想要的concept通过一个trigger word 文本S^*^嵌入生成的图像中.</p></blockquote><h3 id="DreamBooth-Fine-Tuning-Text-to-Image-Diffusion-Models-for-Subject-Driven-Generation"><a href="#DreamBooth-Fine-Tuning-Text-to-Image-Diffusion-Models-for-Subject-Driven-Generation" class="headerlink" title="DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation"></a>DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation</h3><p>Background and task:大型文本到图像模型在人工智能的演进中实现了令人瞩目的飞跃,能够从给定的文本提示中高质量和多样化地合成图像</p><p>Motivation:然而,这些模型缺乏在给定的参考集中模仿subjects的外观并在不同的上下文中合成他们的新版本的能力。</p><p>Method:在本文中,提出了一种新的方法来实现文本到图像扩散模型的”个性化”.给定一个主题的少量图像作为输入,我们微调一个预训练的文本到图像模型,使其学会将一个唯一的标识符与该特定主题绑定。通过利用嵌入在模型中的语义先验和新的自适应类特定先验保持损失，我们的技术能够在参考图像中没有出现的不同场景、姿势、视图和光照条件下合成主题</p><p>Results and findings:我们将我们的技术应用到几个以前无法解决的任务中，包括主题语境化、文本引导的视图合成和艺术渲染，同时保留了主题的关键特征。我们也为课题驱动式代这一新任务提供了新的数据集和评估方案.</p><p>最近开发的大型文本到图像模型显示出前所未有的能力，通过实现基于自然语言[编写的文本提示的高质量和多样化的图像合成。这类模型的主要优点之一是从大量的图像-字幕对集合中学习到的强语义先验。例如，这种先验学习将”狗”这个词与图像中可以出现在不同姿势和上下文中的各种狗的实例绑定在一起。虽然这些模型的综合能力是前所未有的，但它们<strong>缺乏在给定的参考集合中模仿受试者的外观，并在不同的上下文中合成相同受试者的新版本的能力。</strong>主要原因是它们的<strong>输出域表达能力有限；即使是对一个对象最详细的文字描述，也可能产生不同外观的实例</strong>.一旦新的字典嵌入到模型中，它就可以使用这些单词来合成新的主题真实感图像，在不同的场景中进行语境化，同时保留它们的关键识别特征.</p><p>更正式地说,给定一个主体的几幅图像,我们的目标是将主体植入模型的输出域,使其能够用<strong>唯一的标识符</strong>进行合成.为此提出一种技术,用少有的identifier表示给定的主题,并微调一个预训练的、基于扩散的文本到图像框架.</p><p>我们用输入的图像和文本提示微调文本到图像的模型,其中包含一个惟一的标识符,后面跟着主体的类名.</p><p>我们的方法是在词汇中找到稀有的标记,然后将这些标记转换到文本空间,以最小化标识符具有强先验的概率.</p><p><img data-src="https://s2.loli.net/2024/05/16/XByeJxlZGNnv7ER.png" alt="image-20240516162142224"></p><script type="math/tex; mode=display">\mathbb{E}_{\mathbf{x},\mathbf{c},\boldsymbol{\epsilon},\boldsymbol{\epsilon}^{\prime},t}[w_t\|\hat{\mathbf{x}}_\theta(\alpha_t\mathbf{x}+\sigma_t\boldsymbol{\epsilon},\mathbf{c})-\mathbf{x}\|_2^2+\\\lambda w_{t^{\prime}}\|\hat{\mathbf{x}}_\theta(\alpha_{t^{\prime}}\mathbf{x}_{\mathbf{pr}}+\sigma_{t^{\prime}}\boldsymbol{\epsilon}^{\prime},\mathbf{c}_{\mathbf{pr}})-\mathbf{x}_{\mathbf{pr}}\|_2^2]</script><p>两个关键问题:在小数据集上微调可能出现language drift或者灾难性遗忘.此外还有可能出现的多样性降低.</p><p>具体来说，在带有随机初始噪声$z<em>{t1}~N(0,I)$和条件向量$c</em>{pr}:=Γ (f(‘a[类名词]’))$的冷冻预训练扩散模型上使用祖先采样器生成数据$x<em>{pr} = [\hat{x}(z</em>{t1},c_{pr})]$.</p><p>前半部分让模型学习特定物品的表示,后半通过生成图片的监督防止模型忘记先验知识.</p><h3 id="Hypernetworks"><a href="#Hypernetworks" class="headerlink" title="Hypernetworks"></a>Hypernetworks</h3><p>这项工作探讨了超网络：一种使用一个网络(也称为超网络)为另一个网络生成权重的方法。超网络提供了一种类似于自然界中发现的抽象：基因型-超网络-和表型-主网络之间的关系。</p><h3 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h3><p>本身是一种微调技术,我在大模型一节中涉及到了,这里不赘述.</p><h3 id="Samplers-in-Stable-Diffusion"><a href="#Samplers-in-Stable-Diffusion" class="headerlink" title="Samplers in Stable Diffusion"></a>Samplers in Stable Diffusion</h3><p>在使用Stable Diffusion应用时想到的,采样器是什么,能起到多大的作用.</p><p>要生成图像，模型首先要在潜空间生成一个完全随机的图像.然后,噪声预测器估算图像的噪声。从图像中减去预测的噪声.这个过程要重复十几次.</p><p>这个去噪过程被称为采样,因为稳定扩散技术每一步都会生成一个新的样本图像.采样中使用的方法称为采样器或采样方法.</p><p>噪声图像是每步减去模型预测出的噪声，一点一点变成干净图像的。noise schedule 就是用来控制在每个采样步中噪声的强度的。噪声在第一步最大，慢慢降低，直到最后一步降为0。</p><p>在每一步中，采样器的工作就是根据 noise schedule 中对应的该步的噪声强度，减去对应的噪声，来产生该步的去噪图像。如果我们增大采样步数会有什么影响呢？每一步噪声下降的会更少，这有助于减少采样过程中的截断误差。</p><p>采样器可以分为经典基于微分公式,祖先采样器,Karras,</p><ul><li><strong>Euler</strong> – The simplest possible solver.</li><li><strong>Heun</strong> – A more accurate but slower version of Euler.</li><li><strong>LMS</strong> (Linear multi-step method) – Same speed as Euler but (supposedly) more accurate.</li></ul><p>祖先采样器在每个采样步骤中都会给图像添加噪声.它们是随机取样器,因为取样结果具有一定的随机性</p><ul><li>Euler a</li><li>DPM2 a</li><li>DPM++ 2S a</li><li>DPM++ 2S a Karras</li></ul><p>DPM（扩散概率模型求解器）和 DPM++ 是 2022 年发布的专为扩散模型设计的新型采样器.它们代表了结构相似的求解器系列。</p><p>DPM 和 DPM2 相似,只是 DPM2 是二阶的(更精确但更慢).DPM++ 是 DPM 的改进版。</p><p>UniPC(Unified Predictor-Corrector)是 2023年的一种新型采样器。它受到传统sampler中预测器-校正器方法的启发,可在 5-10 步内实现高质量图像生成。</p><p>一些代码实现可以在<a href="https://github.com/crowsonkb/k-diffusion">crowsonkb/k-diffusion: Karras et al. (2022) diffusion models for PyTorch (github.com)</a>找到.</p><p>可以利用一些语义分割和prompt分割实例更方便地做inpainting.</p><h3 id="SegmentAnything-Model"><a href="#SegmentAnything-Model" class="headerlink" title="SegmentAnything Model"></a>SegmentAnything Model</h3><p><a href="https://www.comet.com/site/blog/sam-stable-diffusion-for-text-to-image-inpainting/">SAM + Stable Diffusion for Text-to-Image Inpainting - Comet</a></p><p><img data-src="https://s2.loli.net/2024/05/16/vipLYs8BIod6S5y.png" alt="image-20240516145103520"></p><p><img data-src="https://s2.loli.net/2024/05/16/p64VkA97Lsy2mdK.png" alt="image-20240516145131501"></p><p><img data-src="https://s2.loli.net/2024/05/16/cWSidGqjVaNDI3R.png" alt="image-20240516145825637"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/mli/paper-reading?tab=readme-ov-file">mli/paper-reading: 深度学习经典、新论文逐段精读 (github.com)</a></li><li><a href="https://maciejdomagala.github.io/generative_models/2022/06/06/The-recent-rise-of-diffusion-based-models.html">The recent rise of diffusion-based models | Maciej Domagała (maciejdomagala.github.io)</a></li><li><a href="https://stable-diffusion-art.com/">Stable Diffusion Art - Tutorials, prompts and resources (stable-diffusion-art.com)</a></li><li><a href="https://jalammar.github.io/illustrated-stable-diffusion/">The Illustrated Stable Diffusion – Jay Alammar – Visualizing machine learning one concept at a time. (jalammar.github.io)</a></li><li><a href="https://arxiv.org/pdf/2206.00927">arxiv.org/pdf/2206.00927</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要看是看Diffusion Models,CLIP,ControlNet,IP-Adapter这种经典论文,尝试总结论文写作的一些方式以及图像生成模型的一些内在思想. 对于其中的数学原理和代码不过深究.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>编程语言的一些特性</title>
    <link href="https://www.sekyoro.top/2024/05/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/"/>
    <id>https://www.sekyoro.top/2024/05/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/</id>
    <published>2024-05-02T08:30:27.000Z</published>
    <updated>2024-05-02T09:19:26.277Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>学习到C#,Kotlin或者Dart这种特性多、语法糖不少的编程语言之后,就会出现一些新的问题,这里不定期更新一下学到的语法糖.特别说一下,在某些开发者眼里,C#,Kotlin,Go,Rust,Dart是 <strong>Most Popular New Programming Languages</strong>,都在不同程度上提升了开发效率和性能.<br><span id="more"></span></p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托Delegation本来算是一种设计思想,在C#和Kotlin这些语言里有专门的实现方式.</p><p>.NET 中,委托具有以下特点。</p><ul><li>委托类似于 C++函数指针,但与指针不同的是,委托是完全面向对象的、安全的数据类型。</li><li>委托允许将方法作为参数进行传递。</li><li>委托可用于定义回调方法。</li><li>委托可以把多个方法连接在一起,这样在触发事件时,可同时启动多个事件处理程序。</li></ul><blockquote><p>有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。委托模式使得我们可以用聚合来替代继承，它还使我们可以模拟mixin。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPrinter</span> </span>&#123; <span class="comment">// the &quot;delegate&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      System.out.print(<span class="string">&quot;something&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123; <span class="comment">// the &quot;delegator&quot;</span></span><br><span class="line">    RealPrinter p = <span class="keyword">new</span> RealPrinter(); <span class="comment">// create the delegate </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      p.print(); <span class="comment">// delegation</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// to the outside world it looks like Printer actually prints.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Printer printer = <span class="keyword">new</span> Printer();</span><br><span class="line">        printer.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;A: doing f()&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;A: doing g()&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;B: doing f()&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;B: doing g()&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="comment">// delegation</span></span><br><span class="line">    I i = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; i.f(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; i.g(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// normal attributes</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toA</span><span class="params">()</span> </span>&#123; i = <span class="keyword">new</span> A(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toB</span><span class="params">()</span> </span>&#123; i = <span class="keyword">new</span> B(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.f();     <span class="comment">// output: A: doing f()</span></span><br><span class="line">        c.g();     <span class="comment">// output: A: doing g()</span></span><br><span class="line">        c.toB();</span><br><span class="line">        c.f();     <span class="comment">// output: B: doing f()</span></span><br><span class="line">        c.g();     <span class="comment">// output: B: doing g()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java本身没有委托设计.而在C#中使用delegate可以使用定义委托赋值方法,作为参数或者多播、匿名委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">// 定义一个委托类型</span><br><span class="line">delegate void PrintDelegate(string message);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建委托实例并关联一个方法</span><br><span class="line">        PrintDelegate printDelegate = PrintMessage;</span><br><span class="line">        </span><br><span class="line">        // 使用委托调用方法</span><br><span class="line">        printDelegate(&quot;Hello, C#!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate int CalculationDelegate(int x, int y);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 调用方法，传递委托作为参数</span><br><span class="line">        int result = Calculate(5, 3, AddNumbers);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static int Calculate(int x, int y, CalculationDelegate calculation)</span><br><span class="line">    &#123;</span><br><span class="line">        return calculation(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static int AddNumbers(int x, int y)</span><br><span class="line">    &#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate void PrintDelegate(string message);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建多播委托</span><br><span class="line">        PrintDelegate printDelegate = PrintMessage1;</span><br><span class="line">        printDelegate += PrintMessage2;</span><br><span class="line">        </span><br><span class="line">        // 调用多播委托，会依次执行所有关联的方法</span><br><span class="line">        printDelegate(&quot;Hello, C#!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage1(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Message 1: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage2(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Message 2: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate int CalculationDelegate(int x, int y);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 使用匿名委托定义和调用方法</span><br><span class="line">        CalculationDelegate calculation = delegate(int x, int y)</span><br><span class="line">        &#123;</span><br><span class="line">            return x + y;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        int result = calculation(5, 3);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">        </span><br><span class="line">        // 使用 Lambda 表达式定义和调用方法</span><br><span class="line">        CalculationDelegate calculation2 = (x, y) =&gt; x + y;</span><br><span class="line">        </span><br><span class="line">        int result2 = calculation2(5, 3);</span><br><span class="line">        Console.WriteLine(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码类似定义方法的原型.</p><p>而在Kotlin中有类委托和属性委托.</p><p>类委托允许一个类将其接口的实现委托给另一个类。通过在类定义中使用 <code>by</code> 关键字，可以将接口的实现委托给另一个对象。被委托的对象必须实现相应的接口。</p><p>属性委托允许我们将属性的读取和写入操作委托给其他对象。Kotlin 提供了一些内置的委托，例如 <code>Lazy</code>、<code>Observable</code> 和 <code>NotNull</code> 等。此外，我们还可以自定义属性委托.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sound</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatSound</span> : <span class="type">Sound &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Meow!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(sound: Sound) : Sound <span class="keyword">by</span> sound</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> catSound = CatSound()</span><br><span class="line">    <span class="keyword">val</span> animal = Animal(catSound)</span><br><span class="line">    animal.makeSound() <span class="comment">// 输出 &quot;Meow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> property: String <span class="keyword">by</span> CustomDelegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">        println(<span class="string">&quot;Getting property value: <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, newValue: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Setting property value: <span class="variable">$newValue</span>&quot;</span>)</span><br><span class="line">        value = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = Example()</span><br><span class="line">    example.property = <span class="string">&quot;Hello, Kotlin!&quot;</span> <span class="comment">// 输出 &quot;Setting property value: Hello, Kotlin!&quot;</span></span><br><span class="line">    println(example.property) <span class="comment">// 输出 &quot;Getting property value: Hello, Kotlin!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习到C#,Kotlin或者Dart这种特性多、语法糖不少的编程语言之后,就会出现一些新的问题,这里不定期更新一下学到的语法糖.特别说一下,在某些开发者眼里,C#,Kotlin,Go,Rust,Dart是 &lt;strong&gt;Most Popular New Programming Languages&lt;/strong&gt;,都在不同程度上提升了开发效率和性能.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LLM论文阅读</title>
    <link href="https://www.sekyoro.top/2024/05/01/LLM%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <id>https://www.sekyoro.top/2024/05/01/LLM%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</id>
    <published>2024-05-01T07:39:46.000Z</published>
    <updated>2024-05-15T08:29:31.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近大语言模型及其相关应用实在是太火了,可以在一些公司或者个人博客查看最前沿进展,也可以通过代码项目、课程学习,还可以看看经典论文.这里就看看一些LLM的论文学习学习.<br><span id="more"></span></p><p>下面论文都可以在Arxiv上找到.</p><h2 id="A-Survey-of-Large-Language-Models"><a href="#A-Survey-of-Large-Language-Models" class="headerlink" title="A Survey of Large Language Models"></a>A Survey of Large Language Models</h2><p>这篇文章有80多页,引用有40页.</p><h4 id="Scaling-laws"><a href="#Scaling-laws" class="headerlink" title="Scaling laws"></a>Scaling laws</h4><script type="math/tex; mode=display">\begin{aligned}&L(N)&&=\quad\left(\frac{N_c}N\right)^{\alpha_N},\quad\alpha_N\sim0.076,N_c\sim8.8\times10^{13}\\&L(D)&&=\quad\left(\frac{D_c}D\right)^{\alpha_D},\quad\alpha_D\sim0.095,D_c\sim5.4\times10^{13}\\&L(C)&&=\quad\left(\frac{C_c}C\right)^{\alpha_C},\quad\alpha_C\sim0.050,C_c\sim3.1\times10^8\end{aligned}</script><p><strong>KM scaling law</strong> </p><p>Scaling laws for neural language models首次提出了神经语言模型的模型性能与<strong>模型大小</strong>（N）、<strong>数据集大小</strong>（D）和<strong>训练计算量</strong>（C）三大因素的幂律关系模型。</p><p>$N<em>{c}$、$D</em>{c}$ 和 Cc 分别以非嵌入参数数、训练标记数和 FP 日数来衡量。</p><p>L(-) 表示 nats 中的交叉熵损失，OpenAI 的后续研究 表明，语言建模损失可分解为两部分，即不可还原损失（真实数据分布的熵）和可还原损失（真实分布和模型分布之间 KL 分歧的估计值）。</p><p>在一些假设条件下(如一个因素的分析不应受到其他两个因素的瓶颈限制),通过拟合不同数据量(2200 万到 2300 亿个 token)、模型大小(768 万到 1500 亿个非嵌入参数)和训练计算的模型性能,得出了这三个定律.他们的研究表明,模型性能与三个因素有很强的依赖关系.</p><p><strong>Chinchilla scaling law</strong></p><p>霍夫曼等人提出了另一种缩放定律形式，用于指导 LLM 的计算优化训练.其中E = 1.69, A = 406.4, B = 410.7, α = 0.34 and β = 0.28</p><script type="math/tex; mode=display">L(N,D)=E+\frac{A}{N^\alpha}+\frac{B}{D^\beta}</script><p>通过优化 C ≈ 6N D 约束条件下的损失 L(N，D),他们证明了计算预算对模型大小和数据大小的最优分配如下</p><script type="math/tex; mode=display">N_{opt}(C)=G{\left(\frac C6\right)}^a,\quad D_{opt}(C)=G^{-1}{\left(\frac C6\right)}^b</script><p>a = α/(α+β) , b = β/(α+β) ,G 是一个缩放系数,可由 A、B、α 和 β 计算得出。</p><h4 id="涌现能力"><a href="#涌现能力" class="headerlink" title="涌现能力"></a>涌现能力</h4><p>在Emergent abilities of large language models中LLMs 的涌现能力被正式定义为 “在小型模型中不存在而在大型模型中出现的能力”，这是 LLMs 区别于以往 PLMs 的最显著特征之一。它进一步引入了出现突发性能力时的一个显著特征：<strong>当规模达到一定程度时，性能会明显高于随机水平。通过类比，这种突现模式与物理学中的相变现象有着密切联系</strong>。原则上，新兴能力可以根据某些复杂任务来定义，而我们更关注的是可用于解决各种任务的一般能力。</p><p>简要介绍 LLMs 的三种典型涌现能力以及具备这种能力的代表性模型: 1)In-context learning 2) Instruction following 3)step-by-step reasoning</p><p>GPT-3正式引入了语境中学习（ICL）能力：假设语言模型已经获得了自然语言指令和/或多个任务演示，那么它就可以<strong>通过完成输入文本的词序来生成测试实例的预期输出，而无需额外的训练或梯度更新</strong>。</p><p>通过对自然语言描述格式的多任务数据集进行微调（称为指令微调）,LLM 在同样以指令形式描述的未见任务上表现出色。<strong>通过指令调整，LLMs 可以在不使用明确示例的情况下，根据任务指令完成新任务，从而提高泛化能力</strong>.</p><p>对于小型语言模型而言，通常很难解决涉及多个推理步骤的复杂任务，例如数学文字问题.相比之下,使用思维链（CoT）提示策略,LLM 可以利用提示机制来解决此类任务,这种机制涉及到推导最终答案的中间推理步骤.</p><p><img data-src="https://s2.loli.net/2024/05/06/F5zWu6VldQqDBjs.png" alt="image-20240506105955822"></p><p>LLM 经过漫长的发展才达到了目前的状态：通用的、有能力的学习者。在发展过程中，人们提出了许多重要技术，这些技术在很大程度上提高了 LLM 的能力,包括scaling,training,ability eliciting,Alignment tuning等等.</p><p><img data-src="https://s2.loli.net/2024/05/06/hFNoCHDY23OmxiR.png" alt="image-20240506110530834"></p><p><img data-src="https://s2.loli.net/2024/05/06/FcjiyX4oesVva2B.png" alt="image-20240506110409299"></p><h3 id="PEFT方法"><a href="#PEFT方法" class="headerlink" title="PEFT方法"></a>PEFT方法</h3><p><img data-src="https://s2.loli.net/2024/05/14/JQUyVlr7xCc4I2m.png" alt="image-20240514232554910"></p><h4 id="Prefix-Tuning"><a href="#Prefix-Tuning" class="headerlink" title="Prefix Tuning"></a>Prefix Tuning</h4><p>Prefix Tuning在语言模型的每个transformer层中预置一系列前缀,这些前缀是一组可训练的连续向量.这些前缀向量是针对特定任务的,可视为虚拟标记嵌入。为了优化前缀向量，有人提出了一种重参数化技巧 ,即学习一个 MLP 函数，将一个较小的矩阵映射到前缀的参数矩阵，而不是直接优化前缀。</p><h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>在本文中,我们提出了前缀调整技术,它是自然语言生成任务中微调技术的轻量级替代方案,可<strong>保持语言模型参数不变,但会优化一个小的连续任务特定向量</strong>(称为前缀).</p><p><strong>Prefix-tuning draws inspiration from prompting, allowing subsequent tokens to attend to this prefix as if it were “virtual tokens”</strong>.</p><p>相当于让模型参数不变,优化连续的任务相关数据,让模型关注增加的前缀.</p><p>我们发现,只需学习 0.1% 的参数,前缀调整就能在全数据环境下获得与之相当的性能,在低数据环境下优于微调,并能更好地推断出训练期间未见过主题的示例.</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>我们认为适当的语境<strong>可以在不改变 LM 参数的情况下引导 LM</strong>。例如，如果我们希望 LM 生成一个单词（如 Obama），我们可以将其常见搭配作为上下文（如 Barack）的前置词，这样 LM 就会为所需单词分配更高的概率。</p><p>我们可以将指令优化为连续的单词嵌入，而不是对离散的标记进行优化，其效果将向上传播到所有转换器激活层，并向右传播到后续标记。</p><p>前缀调整为自回归 LM 预置前缀,得到 z = [PREFIX;x;y],或为编码器和编码器预置前缀,得到 z = [PREFIX;x;PREFIX′;y]。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505224532005.png" alt="image-20240505224532005"></p><script type="math/tex; mode=display">h_i=\begin{cases}P_\theta[i,:],&\text{if }i\in\mathsf{P_{idx}},\\\mathsf{LM}_\phi(z_i,h_{<i}),&\text{otherwise.}\end{cases}</script><p>前缀调整初始化一个维度为 |$P<em>{idx}$| × dim($h</em>{i}$) 的可训练矩阵 $P<em>{θ}$（参数为 θ）,用于存储前缀参数.$P</em>{idx}$ 表示前缀索引序列,我们用 |$P_{idx}$| 表示前缀长度.语言模型参数 φ 是固定的,前缀参数 θ 是唯一可训练的参数.</p><p>$h<em>{i}$（对于所有 i）是可训练 $P</em>{θ}$ 的函数。</p><p>Prefix Tuning<code>是</code>PEFT<code>方法之一，</code>Prefix Tuning<code>之前的工作主要是人工设计模板或者自动化搜索模板，也是</code>prompt<code>范式的第一阶段，就是在输入上加上</code>prompt<code>文本，再对输出进行映射。这种离散模板对模型的鲁棒性很差。所以后续的研究都将离散的方式转成连续。</code>Prefix Tuning在<strong>模型输入前添加一个连续的且任务特定的向量序列称之为prefix</strong><code>，固定</code>PLM(预训练模型)<code>的所有参数，只更新优化特定任务的</code>prefix</p><h4 id="P-tuning-V1-amp-amp-V2"><a href="#P-tuning-V1-amp-amp-V2" class="headerlink" title="P-tuning V1&amp;&amp;V2"></a>P-tuning V1&amp;&amp;V2</h4><p>提示调整只对使用冻结语言模型的连续提示进行调整,从而大大减少了训练时每个任务的存储和内存使用量.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505223449790.png" alt="image-20240505223449790"></p><p>在情感分析中,我们可以将样本（如 “了不起的电影！”）与提示语 “这部电影是[MASK]”连接起来，然后要求预先训练好的语言模型预测屏蔽标记为 “好 “和 “坏 “的概率,从而决定样本的标签.</p><p>提示法完全不需要训练,只需存储一份模型参数。</p><p>Prompt tuning2 是一种只对连续提示进行调整的想法.在原始输入词嵌入序列中添加可训练的连续嵌入(也称为连续提示)</p><p><code>P-Tuning v2</code>（论文： <strong>P-Tuning v2: Prompt Tuning Can Be Comparable to Fine-tuning Universally Across Scales and Tasks</strong>）,该方法在<strong>每一层</strong>都加入了<code>Prompts tokens</code>作为输入，而不是仅仅加在输入层，这带来两个方面的好处：</p><ul><li>更多可学习的参数（从<code>P-Tuning</code>和<code>Prompt Tuning</code>的0.01%增加到0.1%-3%），同时也足够参数高效。</li><li>加入到更深层结构中的<code>Promp</code>能给模型预测带来更直接的影响</li></ul><p>大模型的<code>Prompt</code>构造方式严重影响下游任务的效果。比如：<code>GPT-3</code>采用人工构造的模版来做上下文学习<code>(in-context learning)</code>，但人工设计的模版的变化特别敏感，加一个词或者少一个词，或者变动位置都会造成比较大的变化</p><h4 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h4><p>自然语言处理的一个重要范式是在一般领域数据上进行大规模预训练，然后适应特定任务或领域。随着我们预训练的模型越来越大，重新训练所有模型参数的全面微调就变得不那么可行了。以 GPT-3 175B 为例，部署微调模型的独立实例（每个实例有 175B 个参数）的成本过高。我们提出了（Low-Rank Adaptation，简称 LoRA）技术，它<strong>可以冻结预训练模型权重，并将可训练的等级分解矩阵注入 Transformer 架构的每一层(injects trainable rank decomposition matrices into each layer of the Transformer architecture)，从而大大减少下游任务的可训练参数数量</strong>.</p><p>LoRA 允许我们通过优化密集层在适应过程中的变化的秩分解矩阵来间接训练神经网络中的某些密集层,同时保持预先训练的权重不变.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505231432035.png" alt="image-20240505231432035" style="zoom:67%;" /></p><p>神经网络包含许多执行矩阵乘法的密集层.这些层中的<strong>权重矩阵通常具有全秩</strong>。Aghajanyan 等人（2020）的研究表明,在适应特定任务时,<strong>预训练的语言模型具有较低的 “本征维度”，即使随机投影到较小的子空间，仍能高效学习</strong>.受此启发，我们假设权重更新在适应过程中也具有较低的 “本征等级”。</p><p>对于一个预先训练好的权重矩阵 $W<em>{0}∈R^{d×k}$, d是满秩,r是低秩.我们用一个低秩分解 $W</em>{0} + ∆W = W<em>{0} + BA$ 来表示后者,其中 B∈$R</em>{d×r}$, A∈$R_{r×k}$, 秩为 r&lt;&lt; min(d,k).</p><p>在训练过程中,$W_{0}$被冻结,不会接收梯度更新,而 A 和 B 则包含可训练参数.</p><p>注意,$W_{0}$ 和 ∆W = BA 都与相同的输入相乘.它们各自的输出向量按坐标相加.</p><p>对 A 使用随机高斯初始化,对 B 使用零初始化,因此训练开始时 ∆W = BA 为零.然后，我们用 α/r 对 $∆Wx$​ 进行缩放,其中 α 是 r 中的一个常数.在使用Adam进行优化时,如果我们适当缩放初始化,调整 α 与调整学习率大致相同.因此,我们只需将 α 设为我们尝试的第一个 r,而无需调整.</p><script type="math/tex; mode=display">h=W_0x+\Delta Wx=W_0x+BAx</script><p>1、选择目标层</p><p>2、初始化映射矩阵和逆映射矩阵</p><p>为目标层创建两个较小的矩阵<code>A</code>和<code>B</code>，然后进行变换</p><p><code>A</code>是映射矩阵(一般用随机高斯分布初始化，维度上是降维）</p><p><code>B</code>是逆映射矩阵(用0矩阵初始化)，维度上是升维</p><p>之后做参数变换：将目标层的原始参数矩阵W通过映射矩阵<code>A</code>和逆映射矩阵<code>B</code>进行变换，计算公式为：<code>W&#39; = W + A * B</code>，这里<code>W&#39;</code>是变换后的参数矩阵</p><p>3、微调模型</p><p>使用新的参数矩阵<code>W&#39;</code>替换目标层的原始参数矩阵<code>W</code>，然后在特定任务的训练数据上对模型进行微调</p><p>4、梯度更新</p><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>适配器调整将小型神经网络模块（称为适配器）纳入transformer模型 .为了实现适配器模块,中提出了一种瓶颈架构,它首先将原始特征向量压缩到较小的维度（然后进行非线性变换）,然后将其恢复到原始维度.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505231734946.png" alt="image-20240505231734946" style="zoom:67%;" /></p><p>在 NLP 中，微调大型预训练模型是一种有效的传输机制。然而，在有许多下游任务的情况下，微调的参数效率很低：每个任务都需要一个全新的模型。作为替代方案，我们建议<strong>使用适配器模块进行转移。适配器模块产生了一个紧凑且可扩展的模型；它们只为每个任务添加少量可训练参数，并且可以添加新任务，而无需重新检查之前的任务</strong>。原始网络的参数保持不变，从而实现了高度的参数共享。</p><h3 id="Prompt-Tuning"><a href="#Prompt-Tuning" class="headerlink" title="Prompt Tuning"></a>Prompt Tuning</h3><p>Prompt Tuning主要侧重于在输入层加入可训练的提示向量.</p><p>在离散提示的情况下（Schick 和 Schütze, 2020）,提示标记 {“它”、”是”、”[MASK]”} ⊂ V 可用来对电影评论进行分类。</p><p>Lester 等人引入了可训练连续提示,作为自然语言提示的替代,用于冻结预训练语言模型的参数的 NLU。给定可训练连续嵌入[h0, …, hi],输入嵌入序列被写成[e(x), h0, …, hi, e(“[MASK]”)], 事实证明,在简单的分类任务中,即时调整的效果与对百亿参数模型进行微调的效果相当.</p><p><img data-src="https://limokii.github.io/2023/12/24/Parameter%20Efficient%20Fine-Tuning(PEFT" alt="image-20240107102116261">%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20240107102116261.png)</p><p>在这项工作中，我们探索了 “提示调整”，这是一种简单而有效的机制，用于学习 “软提示”，使冻结语言模型能够执行特定的下游任务。与 GPT-3 使用的离散文本提示不同，软提示是通过反向传播学习的，可以进行调整，以纳入来自任意数量标注示例的信号</p><h3 id="Quantization方法"><a href="#Quantization方法" class="headerlink" title="Quantization方法"></a>Quantization方法</h3><p>在模型压缩领域,量化已成为一种广受欢迎的技术，可减轻深度学习模型的存储和计算开销.<strong>传统表示法采用浮点数，而量化则将其转换为整数或其他离散形式</strong>.这种转换大大降低了存储要求和计算复杂度。虽然会有一些固有的精度损失,但仔细的量化技术可以在实现大量模型压缩的同时，将精度降低到最低程度.目前量化方法主要分为PTQ和QAT,前者不需要训练,后者需要数据重新训练,LLMs包含大量的参数,PTQ方法的计算成本远低于QAT方法,因而更受青睐。</p><p>这方面可以看看<a href="https://www.deeplearning.ai/short-courses/">Short Courses | Learn Generative AI from DeepLearning.AI</a>上的视频,质量很高.</p><p>在神经网络压缩中,量化通常指从浮点数到整数的映射过程,尤其是 8 位整数量化(即 INT8 量化).对于神经网络模型，通常有两类数据需要量化，即权重（模型参数）和激活（隐藏激活），这两类数据最初用浮点数表示。</p><p>为了说明模型量化的基本思想，介绍一个简单但常用的量化函数：$x<em>{q} = R(x/S)-Z$，它将浮点数 x 转换为量化值 $x</em>{q}$。在这个函数中,S 和 Z 分别表示缩放因子（涉及两个参数 α 和 β,决定clipping range和zero-point factor(决定对称或不对称量化),R(-) 表示四舍五入运算,将缩放浮动值转换为近似整数。作为逆过程，去量化相应地从量化值中恢复出原始值: x= S - (xq + Z)。量化误差计算为原始值 x 与恢复值 ̃ x 之间的数值差。范围参数 α 和 β 对量化性能有很大影响，通常需要根据实际数据分布进行静态（离线）或动态（运行时）校准。</p><p>经常使用的线性quantizaiton,</p><p><img data-src="https://s2.loli.net/2024/05/11/XQ7vgiNjn9oLkAc.png" alt="image-20240511194833581"></p><p>q=int(round(r/s+z))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_with_scale_and_zero_point</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    tensor, scale, zero_point, dtype = torch.int8</span>):</span></span><br><span class="line"></span><br><span class="line">    scaled_and_shifted_tensor = tensor / scale + zero_point</span><br><span class="line"></span><br><span class="line">    rounded_tensor = torch.<span class="built_in">round</span>(scaled_and_shifted_tensor)</span><br><span class="line"></span><br><span class="line">    q_min = torch.iinfo(dtype).<span class="built_in">min</span></span><br><span class="line">    q_max = torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    q_tensor = rounded_tensor.clamp(q_min,q_max).to(dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> q_tensor</span><br></pre></td></tr></table></figure><p>这样得到量化后的结果再转回去与原本的差距,就是quantizaiton error.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### a dummy tensor to test the implementation</span></span><br><span class="line">test_tensor=torch.tensor(</span><br><span class="line">    [[<span class="number">191.6</span>, -<span class="number">13.5</span>, <span class="number">728.6</span>],</span><br><span class="line">     [<span class="number">92.14</span>, <span class="number">295.5</span>,  -<span class="number">184</span>],</span><br><span class="line">     [<span class="number">0</span>,     <span class="number">684.6</span>, <span class="number">245.5</span>]]</span><br><span class="line">)</span><br><span class="line"><span class="comment">### these are random values for &quot;scale&quot; and &quot;zero_point&quot;</span></span><br><span class="line"><span class="comment">### to test the implementation</span></span><br><span class="line">scale = <span class="number">3.5</span></span><br><span class="line">zero_point = -<span class="number">70</span></span><br><span class="line">quantized_tensor = linear_q_with_scale_and_zero_point(</span><br><span class="line">    test_tensor, scale, zero_point)</span><br><span class="line">dequantized_tensor = scale * (quantized_tensor.<span class="built_in">float</span>() - zero_point)</span><br><span class="line">(dequantized_tensor - test_tensor).square().mean()</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/11/FRJflki8SWwLBN4.png" alt="image-20240511211342622"></p><p>要计算s和z,首先我们知道r_min,r_max以及q_min,q_max,由此得到s,再通过s,q_min和r_min计算得到z.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q_scale_and_zero_point</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    q_min, q_max = torch.iinfo(dtype).<span class="built_in">min</span>, torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line">    r_min, r_max = tensor.<span class="built_in">min</span>().item(), tensor.<span class="built_in">max</span>().item()</span><br><span class="line"></span><br><span class="line">    scale = (r_max - r_min) / (q_max - q_min)</span><br><span class="line"></span><br><span class="line">    zero_point = q_min - (r_min / scale)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clip the zero_point to fall in [quantized_min, quantized_max]</span></span><br><span class="line">    <span class="keyword">if</span> zero_point &lt; q_min:</span><br><span class="line">        zero_point = q_min</span><br><span class="line">    <span class="keyword">elif</span> zero_point &gt; q_max:</span><br><span class="line">        zero_point = q_max</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># round and cast to int</span></span><br><span class="line">        zero_point = <span class="built_in">int</span>(<span class="built_in">round</span>(zero_point))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scale, zero_point</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/11/Ui7bAhFEXkIqLQs.png" alt="image-20240511211741798"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_quantization</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    scale, zero_point = get_q_scale_and_zero_point(tensor, </span><br><span class="line">                                                   dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(tensor,</span><br><span class="line">                                                          scale, </span><br><span class="line">                                                          zero_point, </span><br><span class="line">                                                          dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale , zero_point</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_dequantization</span>(<span class="params">q_tensor,scale,zero_point</span>):</span></span><br><span class="line">    tensor = (q_tensor.<span class="built_in">float</span>()-zero_point)*scale</span><br><span class="line">    <span class="keyword">return</span> tensor</span><br></pre></td></tr></table></figure><p>在线性量化中有对称和非对称模式,非对称就是上面的方式.对称模式将[-$r<em>{max}$,$r</em>{max}$]投影到[-$q<em>{max}$,$q</em>{max}$],$r<em>{max}$是max(|$r</em>{tensor}$|)</p><p>计算公式是</p><script type="math/tex; mode=display">\begin{cases}q=int(round(r/s))\\s=r_{\max}/q_{\max}\end{cases}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q_scale_symmetric</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    r_max = tensor.<span class="built_in">abs</span>().<span class="built_in">max</span>().item()</span><br><span class="line">    q_max = torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return the scale</span></span><br><span class="line">    <span class="keyword">return</span> r_max/q_max</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    scale = get_q_scale_symmetric(tensor)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(tensor,</span><br><span class="line">                                                     scale=scale,</span><br><span class="line">                   <span class="comment"># in symmetric quantization zero point is = 0    </span></span><br><span class="line">                                                    zero_point=<span class="number">0</span>,</span><br><span class="line">                                                      dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比,对称模式会导致有些量化范围的值用不上,但是它比较简单而且不用存0值. 在量化到更低位时考虑使用非对称模式。</p><p>量化的不同粒度,包括per tensor,per channel,per group.</p><p>对于通道来说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(output_dim):</span><br><span class="line">    sub_tensor = test_tensor.select(dim,index)</span><br><span class="line">    <span class="comment"># print(sub_tensor)</span></span><br><span class="line">    scale[index] = get_q_scale_symmetric(sub_tensor)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric_per_channel</span>(<span class="params">r_tensor, dim, dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    output_dim = r_tensor.shape[dim]</span><br><span class="line">    <span class="comment"># store the scales</span></span><br><span class="line">    scale = torch.zeros(output_dim)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(output_dim):</span><br><span class="line">        sub_tensor = r_tensor.select(dim, index)</span><br><span class="line">        scale[index] = get_q_scale_symmetric(sub_tensor, dtype=dtype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># reshape the scale</span></span><br><span class="line">    scale_shape = [<span class="number">1</span>] * r_tensor.dim()</span><br><span class="line">    scale_shape[dim] = -<span class="number">1</span></span><br><span class="line">    scale = scale.view(scale_shape)</span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(</span><br><span class="line">        r_tensor, scale=scale, zero_point=<span class="number">0</span>, dtype=dtype)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line">dequantized_tensor_0 = linear_dequantization(</span><br><span class="line">    quantized_tensor_0, scale_0, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plot_quantization_errors(</span><br><span class="line">    test_tensor, quantized_tensor_0, dequantized_tensor_0)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric_per_group</span>(<span class="params">tensor, group_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    t_shape = tensor.shape</span><br><span class="line">    <span class="keyword">assert</span> t_shape[<span class="number">1</span>] % group_size == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> tensor.dim() == <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    tensor = tensor.view(-<span class="number">1</span>, group_size)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor, scale = linear_q_symmetric_per_channel(</span><br><span class="line">                                tensor, dim=<span class="number">0</span>, dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = quantized_tensor.view(t_shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_dequantization_per_group</span>(<span class="params">quantized_tensor, scale, </span></span></span><br><span class="line"><span class="params"><span class="function">                                    group_size</span>):</span></span><br><span class="line">    </span><br><span class="line">    q_shape = quantized_tensor.shape</span><br><span class="line">    quantized_tensor = quantized_tensor.view(-<span class="number">1</span>, group_size)</span><br><span class="line">    </span><br><span class="line">    dequantized_tensor = linear_dequantization(quantized_tensor, </span><br><span class="line">                                               scale, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    dequantized_tensor = dequantized_tensor.view(q_shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dequantized_tensor</span><br></pre></td></tr></table></figure><p>量化权重和激活.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantized_linear_W8A32_without_bias</span>(<span class="params"><span class="built_in">input</span>, q_w, s_w, z_w</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">input</span>.dtype == torch.float32</span><br><span class="line">    <span class="keyword">assert</span> q_w.dtype == torch.int8</span><br><span class="line"></span><br><span class="line">    dequantized_weight = q_w.to(torch.float32) * s_w + z_w</span><br><span class="line">    output = torch.nn.functional.linear(<span class="built_in">input</span>, dequantized_weight)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/14/tz9cBO5UowfKvqg.png" alt="image-20240514215518321"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output = quantized_linear_W8A32_without_bias(<span class="built_in">input</span>,                                            q_w,                                            s_w,                                             <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">W8A16LinearLayer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,in_features,out_features,bias=<span class="literal">True</span>,dtype=torch.float32</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.register_buffer(</span><br><span class="line">            <span class="string">&quot;int8_weights&quot;</span>,</span><br><span class="line">            torch.randint(</span><br><span class="line">                -<span class="number">128</span>, <span class="number">127</span>, (out_features, in_features), dtype=torch.int8</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        self.register_buffer(<span class="string">&quot;scales&quot;</span>,</span><br><span class="line">                             torch.randn((out_features), dtype=dtype))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            self.register_buffer(<span class="string">&quot;bias&quot;</span>,</span><br><span class="line">                                 torch.randn((<span class="number">1</span>, out_features),</span><br><span class="line">                                             dtype=dtype))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bias = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quantize</span>(<span class="params">self, weights</span>):</span></span><br><span class="line">        w_fp32 = weights.clone().to(torch.float32)</span><br><span class="line"></span><br><span class="line">        scales = w_fp32.<span class="built_in">abs</span>().<span class="built_in">max</span>(dim=-<span class="number">1</span>).values / <span class="number">127</span></span><br><span class="line">        scales = scales.to(weights.dtype)</span><br><span class="line"></span><br><span class="line">        int8_weights = torch.<span class="built_in">round</span>(weights</span><br><span class="line">                                   / scales.unsqueeze(<span class="number">1</span>)).to(torch.int8)</span><br><span class="line">        self.int8_weights = int8_weights</span><br><span class="line">        self.scales = scales</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> w8_a16_forward(self.int8_weights,</span><br><span class="line">                              <span class="built_in">input</span>, self.scales, self.bias)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w8_a16_forward</span>(<span class="params">weight, <span class="built_in">input</span>, scales, bias=<span class="literal">None</span></span>):</span></span><br><span class="line">casted_weights = weight.to(<span class="built_in">input</span>.dtype)</span><br><span class="line">output = F.linear(<span class="built_in">input</span>, casted_weights) * scales</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">output = output + bias</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>量化线性层,可以替代一些模型的线性层,因为它自带quantize方法可以量化线性层的权重,这里的量化方法都是指的linear quantization,也就是通过原本值的范围和量化后的计算得到的scale和zero_point来将原本的矩阵进行量化.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_linear_with_target</span>(<span class="params">module,</span></span></span><br><span class="line"><span class="params"><span class="function">                               target_class, module_name_to_exclude</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name, child <span class="keyword">in</span> module.named_children():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(child, nn.Linear) <span class="keyword">and</span> <span class="keyword">not</span> \</span><br><span class="line">                <span class="built_in">any</span>([x == name <span class="keyword">for</span> x <span class="keyword">in</span> module_name_to_exclude]):</span><br><span class="line">            old_bias = child.bias</span><br><span class="line"></span><br><span class="line">            new_module = target_class(child.in_features,</span><br><span class="line">                                      child.out_features,</span><br><span class="line">                                      old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>,</span><br><span class="line">                                      child.weight.dtype)</span><br><span class="line">            <span class="built_in">setattr</span>(module, name, new_module)</span><br><span class="line">            <span class="keyword">if</span> old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">getattr</span>(module, name).bias = old_bias</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Recursively call the function for nested modules</span></span><br><span class="line">            replace_linear_with_target(</span><br><span class="line">                child, target_class, module_name_to_exclude)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_linear_with_target_and_quantize</span>(<span class="params">module, </span></span></span><br><span class="line"><span class="params"><span class="function">                               target_class, module_name_to_exclude</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name, child <span class="keyword">in</span> module.named_children():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(child, nn.Linear) <span class="keyword">and</span> <span class="keyword">not</span> \</span><br><span class="line">        <span class="built_in">any</span>([x == name <span class="keyword">for</span> x <span class="keyword">in</span> module_name_to_exclude]):</span><br><span class="line">            old_bias = child.bias</span><br><span class="line">            old_weight = child.weight</span><br><span class="line"></span><br><span class="line">            new_module = target_class(child.in_features, </span><br><span class="line">                                      child.out_features, </span><br><span class="line">                                      old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, </span><br><span class="line">                                      child.weight.dtype)</span><br><span class="line">            <span class="built_in">setattr</span>(module, name, new_module)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">getattr</span>(module, name).quantize(old_weight)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">              <span class="built_in">getattr</span>(module, name).bias = old_bias</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Recursively call the function for nested modules</span></span><br><span class="line">            replace_linear_with_target_and_quantize(child, </span><br><span class="line">                     target_class, module_name_to_exclude)</span><br></pre></td></tr></table></figure><p>搭配huggingface量化大模型.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer, pipeline</span><br><span class="line"></span><br><span class="line">model_id = <span class="string">&quot;./models/Salesforce/codegen-350M-mono&quot;</span></span><br><span class="line"></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(model_id, </span><br><span class="line">                                    torch_dtype=torch.bfloat16, </span><br><span class="line">                                             low_cpu_mem_usage=<span class="literal">True</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipe = pipeline(<span class="string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)</span><br><span class="line">replace_linear_with_target_and_quantize(model, </span><br><span class="line">                                        W8A16LinearLayer, [<span class="string">&quot;lm_head&quot;</span>])</span><br><span class="line">                                        <span class="built_in">print</span>(pipe(<span class="string">&quot;def hello_world():&quot;</span>, max_new_tokens=<span class="number">20</span>, </span><br><span class="line">           do_sample=<span class="literal">False</span>)[<span class="number">0</span>][<span class="string">&quot;generated_text&quot;</span>])</span><br></pre></td></tr></table></figure><h4 id="Weight-packing"><a href="#Weight-packing" class="headerlink" title="Weight packing"></a>Weight packing</h4><p>将可以使用int2,int4保存的多个数据使用一个或多个int8保存起来,也就是pack.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_weights</span>(<span class="params">uint8tensor, bits</span>):</span></span><br><span class="line">    <span class="keyword">if</span> uint8tensor.shape[<span class="number">0</span>] * bits % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;The input shape needs to be a mutiple \</span></span><br><span class="line"><span class="string">        of <span class="subst">&#123;<span class="number">8</span> / bits&#125;</span> - got <span class="subst">&#123;uint8tensor.shape[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    num_values = uint8tensor.shape[<span class="number">0</span>] * bits // <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    num_steps = <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    unpacked_idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    packed_tensor = torch.zeros((num_values), dtype=torch.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 0 3 2 - 01 00 11 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># [0000 0000] -&gt; 0000 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0000 - 0000 0000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0011 - 0011 0000 - 0011 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1011 0001</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_values):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">            packed_tensor[i] |= uint8tensor[unpacked_idx] &lt;&lt; (bits * j)</span><br><span class="line">            unpacked_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> packed_tensor</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_weights</span>(<span class="params">uint8tensor, bits</span>):</span></span><br><span class="line">    num_values = uint8tensor.shape[<span class="number">0</span>] * <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    num_steps = <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    unpacked_tensor = torch.zeros((num_values), dtype=torch.uint8)</span><br><span class="line"></span><br><span class="line">    unpacked_idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 0 3 2 - 01 00 11 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># [00000000 00000000 00000000 00000000]</span></span><br><span class="line">    <span class="comment"># [10110001 00101100 00001011 00000010]</span></span><br><span class="line">    <span class="comment"># [00000001 00000000 00000011 00000010]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10110001</span></span><br><span class="line">    <span class="comment"># 00000011</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 00000001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1: [10110001]</span></span><br><span class="line">    <span class="comment"># 2: [00101100]</span></span><br><span class="line">    <span class="comment"># 3: [00001011]</span></span><br><span class="line"></span><br><span class="line">    mask = <span class="number">2</span> ** bits - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(uint8tensor.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">            unpacked_tensor[unpacked_idx] |= uint8tensor[i] &gt;&gt; (bits * j)</span><br><span class="line">            unpacked_idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    unpacked_tensor &amp;= mask</span><br><span class="line">    <span class="keyword">return</span> unpacked_tensor</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/15/Q3Ax1eLJoGz42ZS.png" alt="image-20240515101338582"></p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>在收集大量文本数据后，必须对数据进行预处理，以构建预训练语料库，特别是去除噪声、冗余、不相关和潜在有毒的数据]，这些数据可能会在很大程度上影响 LLM 的容量和性能。为了方便数据处理,最近的一项研究为 LLMs 提出了一个有用的数据处理系统,名为 Data-Juicer<a href="https://github.com/modelscope/data-juicer">modelscope/data-juicer: A one-stop data processing system to make data higher-quality, juicier, and more digestible for LLMs! 🍎 🍋 🌽 ➡️ ➡️🍸 🍹 🍷为大语言模型提供更高质量、更丰富、更易”消化“的数据！ (github.com)</a>,它提供了 50 多个处理算子和工具.在这一部分将回顾详细的数据预处理策略,以提高所收集数据的质量。</p><h4 id="Quality-Filtering"><a href="#Quality-Filtering" class="headerlink" title="Quality Filtering"></a>Quality Filtering</h4><p>为了从收集到的语料库中剔除低质量数据,现有工作一般采用两种方法：(1) 基于分类器的方法；(2) 基于启发式的方法。前一种方法基于高质量文本训练选择分类器,并利用它来识别和过滤低质量数据。然而一些研究发现基于分类器的方法可能会导致方言、口语和社会方言语言中高质量文本的无意删除，这可能会导致预训练语料中的偏见，并减弱语料的多样性。</p><p>作为第二种方法，一些研究，如BLOOM 和Gopher，采用启发式方法，通过一组精心设计的规则来消除低质量文本，这些规则可以概括为：</p><p>·<strong>基于语言的过滤。</strong>如果LLM主要用于某些语言的任务，则可以过滤其他语言的文本。</p><p>·<strong>基于度量的过滤</strong>。生成文本的评价指标，例如困惑度，可以用来检测和去除不自然的句子。</p><p>·<strong>基于统计的过滤</strong>。语料库的统计特征，如标点符号分布，符词比和句子长度，可以用来衡量文本质量和过滤低质量数据。</p><p>·<strong>基于关键词的过滤</strong>。基于特定的关键字集合，噪声或无用的</p><h4 id="De-duplication"><a href="#De-duplication" class="headerlink" title="De-duplication"></a>De-duplication</h4><p><strong>现有工作发现语料库中的重复数据会降低语言模型的多样性，这可能会导致训练过程变得不稳定</strong>，从而影响模型性能。因此，有必要对重复数据删除语料进行预训练。特别地，重复数据删除可以在不同粒度下进行，包括句子级、文档级和数据集级重复数据删除。首先<strong>，应该去除包含重复单词和短语的低质量句子，因为它们可能会在语言建模中引入重复模式</strong>。在文档层面，现有研究<strong>大多依靠文档之间的表面特征重叠率</strong>(例如,单词和n元词串重叠)来检测和去除包含相似内容的重复文档。此外，为了避免数据污染问题，防止训练集和评估集之间的重叠也是至关重要的，通过从训练集中移除可能的重复文本。研究表明，这3个层次的去重对提高LLMs的训练是有益的，应该在实际中联合使用。</p><h4 id="Privacy-Reduction"><a href="#Privacy-Reduction" class="headerlink" title="Privacy Reduction"></a>Privacy Reduction</h4><p>大多数预训练文本数据是从Web来源获得的，包括用户生成的涉及敏感或个人信息的内容，这可能会增加隐私泄露的风险。因此，有必要从预训练语料中移除个人身份信息( PII )。一种直接而有效的方法是使用基于规则的方法，如关键字检测，来检测和去除PII，如名称，地址和电话号码。此外，研究人员还发现LLMs在隐私攻击下的脆弱性可以归因于预训练语料中存在重复的PII数据</p><h4 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h4><p>normalization是为了去除不需要的空白,小写以及口音.</p><p>pre-tokenization会生成每个word的偏移量.Model就是BPE等方法.</p><p><img data-src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter6/tokenization_pipeline.svg" alt="The tokenization pipeline."></p><p>标记化也是数据预处理的关键步骤。它的目的是将原始文本分割成一系列单独的令牌序列,然后将这些令牌序列作为LLMs的输入.在传统的NLP研究(例如,利用条件随机场进行序列标注)中,基于词的标记化是最主要的方法,它更符合人类的语言认知.主要有word-,character-以及<strong>subword</strong>-的分词方式.</p><blockquote><p>训练tokenizer是一个统计过程，它试图确定哪些子词是特定语料的最佳选择，而选择子词的具体规则取决于标记化算法。它是确定性的，这意味着在同一语料库上使用同一算法进行训练时，总会得到相同的结果。</p></blockquote><h5 id="Byte-Pair-encoding"><a href="#Byte-Pair-encoding" class="headerlink" title="Byte-Pair encoding"></a>Byte-Pair encoding</h5><p>它从一组基本符号(例如,字母和边界字符)开始,迭代地将语料库中频繁出现的连续两个token对组合为新的token (称为merge ).对于每一个合并,选择标准是基于两个连续标记的共现频率:选择最高的频繁对.合并过程一直持续到达到预定义的大小.</p><p>开始通过word分词得到类似下面的数据</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Vocabulary:</span> [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;ug&quot;</span>]</span><br><span class="line"><span class="symbol">Corpus:</span>(<span class="string">&quot;h&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;n&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;n&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span> <span class="string">&quot;s&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>在获得基本词汇后,会通过学习合并规则来添加新的标记词,直到达到所需的词汇量为止,合并规则就是将现有词汇中的两个元素合并成一个新词汇.因此,一开始这些合并会产生两个字符的词库,然后随着训练的进行,会产生更长的子词.</p><p>在标记符训练过程中的任何一步，BPE 算法都会搜索现有标记符中出现频率最高的一对（这里的 “一对 “指的是一个词中连续出现的两个标记符）。这对频率最高的词对将被合并，然后我们重复下一步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">word_freqs = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> corpus:</span><br><span class="line">    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)</span><br><span class="line">    new_words = [word <span class="keyword">for</span> word, offset <span class="keyword">in</span> words_with_offsets]</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> new_words:</span><br><span class="line">        word_freqs[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">alphabet = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> word_freqs.keys():</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> alphabet:</span><br><span class="line">            alphabet.append(letter)</span><br><span class="line">alphabet.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alphabet)</span><br><span class="line">vocab = [<span class="string">&quot;&lt;|endoftext|&gt;&quot;</span>] + alphabet.copy() <span class="comment"># 针对不同llm可能会有special tokens.</span></span><br><span class="line">splits = &#123;word: [c <span class="keyword">for</span> c <span class="keyword">in</span> word] <span class="keyword">for</span> word <span class="keyword">in</span> word_freqs.keys()&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_pair_freqs</span>(<span class="params">splits</span>):</span></span><br><span class="line">    pair_freqs = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> word, freq <span class="keyword">in</span> word_freqs.items():</span><br><span class="line">        split = splits[word]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(split) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(split) - <span class="number">1</span>):</span><br><span class="line">            pair = (split[i], split[i + <span class="number">1</span>])</span><br><span class="line">            pair_freqs[pair] += freq</span><br><span class="line">    <span class="keyword">return</span> pair_freqs</span><br><span class="line">pair_freqs = compute_pair_freqs(splits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(pair_freqs.keys()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;pair_freqs[key]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>      </span><br><span class="line">best_pair = <span class="string">&quot;&quot;</span></span><br><span class="line">max_freq = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pair, freq <span class="keyword">in</span> pair_freqs.items():</span><br><span class="line">    <span class="keyword">if</span> max_freq <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> max_freq &lt; freq:</span><br><span class="line">        best_pair = pair</span><br><span class="line">        max_freq = freq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_pair</span>(<span class="params">a, b, splits</span>):</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> word_freqs:</span><br><span class="line">        split = splits[word]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(split) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(split) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> split[i] == a <span class="keyword">and</span> split[i + <span class="number">1</span>] == b:</span><br><span class="line">                split = split[:i] + [a + b] + split[i + <span class="number">2</span> :]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        splits[word] = split</span><br><span class="line">    <span class="keyword">return</span> splits</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokenize</span>(<span class="params">text</span>):</span></span><br><span class="line">    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)</span><br><span class="line">    pre_tokenized_text = [word <span class="keyword">for</span> word, offset <span class="keyword">in</span> pre_tokenize_result]</span><br><span class="line">    splits = [[l <span class="keyword">for</span> l <span class="keyword">in</span> word] <span class="keyword">for</span> word <span class="keyword">in</span> pre_tokenized_text]</span><br><span class="line">    <span class="keyword">for</span> pair, merge <span class="keyword">in</span> merges.items():</span><br><span class="line">        <span class="keyword">for</span> idx, split <span class="keyword">in</span> <span class="built_in">enumerate</span>(splits):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(split) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> split[i] == pair[<span class="number">0</span>] <span class="keyword">and</span> split[i + <span class="number">1</span>] == pair[<span class="number">1</span>]:</span><br><span class="line">                    split = split[:i] + [merge] + split[i + <span class="number">2</span> :]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            splits[idx] = split</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(splits, [])</span><br></pre></td></tr></table></figure><h5 id="SentencePiece"><a href="#SentencePiece" class="headerlink" title="SentencePiece"></a>SentencePiece</h5><p>SentencePiece 是一种用于文本预处理的tokenization,它将文本视为 Unicode 字符序列，并用特殊字符 ▁ 替换空格.与 Unigram 算法结合使用，它甚至不需要预标记步骤,这对于不使用空格字符的语言（如中文或日文）非常有用</p><h5 id="WordPiece"><a href="#WordPiece" class="headerlink" title="WordPiece"></a>WordPiece</h5><p>与 BPE 类似,WordPiece 也是从一个小词库开始的,其中包括模型使用的特殊标记和初始字母表.由于它是通过添加前缀（如 BERT 的 ##）来识别子词的,因此每个词最初都是通过将前缀添加到词内的所有字符来分割的.</p><p>同样的例子.</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;hug&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;pug&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;pun&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;bun&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;hugs&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>拆开后有</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span> <span class="string">&quot;#<span class="subst">#s</span>&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>WordPiece 学习合并规则.主要区别在于选择要合并的词对的方式.它不是选择最频繁的词对.</p><p>通过将词对的频率除以各部分频率的乘积,该算法会优先合并词汇中各部分频率较低的词对.</p><p>初始词汇将是[“b”、”h”、”p”、”##g”、”##n”、”##s”、”##u”]（如果我们暂时不考虑特殊标记的话）。出现频率最高的词对是（”##u”，”##g”）（出现 20 次），但 “##u “的单个出现频率非常高，因此它的得分并不是最高的（1/36）。所有含有 “##u “的词对实际上都有相同的得分（1/36），因此得分最高的词对是（”##g”, “##s”）—唯一一个没有 “##u “的词对，得分是 1/20，第一次合并的结果是（”##g”, “##s”）-&gt;（”##gs”）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vocabulary: [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#s</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#u</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#gs</span>&quot;</span>]</span><br><span class="line">Corpus: (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#gs</span>&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="Unigram"><a href="#Unigram" class="headerlink" title="Unigram"></a>Unigram</h5><p>Unigram 算法常用于 SentencePiece，而 SentencePiece 是 AlBERT、T5、mBART、Big Bird 和 XLNet 等模型使用的tokenization算法。</p><p>与 BPE 和 WordPiece 相比,Unigram 的工作方向相反:它从一个大词汇量开始，然后从中删除词组,直到达到所需的词汇量.有几种方法可以用来建立基本词库:例如,我们可以在预先标注的单词中提取最常见的子串,或者在初始语料库中应用 BPE,以获得较大的词汇量.</p><p>有几种方法可以用来建立基础词汇:例如,我们可以从预先标注的单词中选取最常见的子串,或者在初始语料库中应用 BPE,使其具有较大的词汇量。</p><p>在训练的每一步,Unigram 算法都会根据当前的词汇量计算语料库的损失.然后,对于词汇表中的每个符号,算法都会计算如果删除该符号,整体损失会增加多少,并寻找损失增加最少的符号.这些符号对语料库总体损失的影响较小,因此从某种意义上说,它们 “不那么需要”,是删除的最佳候选。</p><h3 id="Retrieve-Augmented-Generation-RAG"><a href="#Retrieve-Augmented-Generation-RAG" class="headerlink" title="Retrieve Augmented Generation(RAG)"></a>Retrieve Augmented Generation(RAG)</h3><p>由 LLM 驱动的聊天机器人可处理用户提示并生成回复.该聊天机器人旨在与用户进行互动,并就广泛的主题与用户进行交流.</p><p>但是,它的回复仅限于所提供的上下文和基础培训数据.例如,GPT-4 的知识截止日期是 2021 年 9 月,这意味着它不了解这一时期之后发生的事件.此外,用于训练 LLM 的数据不包括个人笔记或公司产品手册等机密信息.<img data-src="https://github.com/microsoft/generative-ai-for-beginners/raw/main/15-rag-and-vector-databases/images/encoder-decode.png?WT.mc_id=academic-105485-koreyst" alt="drawing showing how RAGs architecture"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/luban-agi/Awesome-AIGC-Tutorials?tab=readme-ov-file#-multimodal">luban-agi/Awesome-AIGC-Tutorials: Curated tutorials and resources for Large Language Models, AI Painting, and more. (github.com)</a></li><li><a href="https://github.com/mlabonne/llm-course">mlabonne/llm-course: Course to get into Large Language Models (LLMs) with roadmaps and Colab notebooks. (github.com)</a></li><li><a href="https://github.com/BradyFU/Awesome-Multimodal-Large-Language-Models">BradyFU/Awesome-Multimodal-Large-Language-Models: :sparkles::sparkles:Latest Papers and Datasets on Multimodal Large Language Models, and Their Evaluation. (github.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近大语言模型及其相关应用实在是太火了,可以在一些公司或者个人博客查看最前沿进展,也可以通过代码项目、课程学习,还可以看看经典论文.这里就看看一些LLM的论文学习学习.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>论文引用转换小工具</title>
    <link href="https://www.sekyoro.top/2024/05/01/%E8%AE%BA%E6%96%87%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.sekyoro.top/2024/05/01/%E8%AE%BA%E6%96%87%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2024-05-01T05:47:06.000Z</published>
    <updated>2024-05-01T07:23:54.604Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>起因是最近写论文,引用参考文献时图方便直接用arxiv的citation了,但是貌似这样不太好,已经发表的论文依然显示publisher是arxiv,所以就想写个工具转换一下.<br><span id="more"></span></p><p>首先我在网上找了找类似的工具,出现比较多的是<a href="https://github.com/yuchenlin/rebiber">yuchenlin/rebiber: A simple tool to update bib entries with their official information (e.g., DBLP or the ACL anthology). (github.com)</a>,还有个在线体验地址<a href="https://huggingface.co/spaces/yuchenlin/Rebiber">Rebiber - a Hugging Face Space by yuchenlin</a>.</p><p>这个工具主要利用NLP会议的一些信息来转换,但是有些还是无法成功.</p><p>比如有一篇2023CVPR的论文我转换就失败了,依然显示arxiv的链接.</p><p>所以我就想了个办法(我之前也找到了其他人也用的类似这个方法,但我找不到链接了),使用谷歌学术上的引用.处理逻辑很简单,分析bib文件中的每个条目,看哪些是arxiv的然后就在谷歌学术上搜索并替换,当然不排除有的文章很牛但还是只有arxiv版本,特别是在深度学习中,一些大牛这样干.</p><p>上面的方法会出一些问题,比如爬着爬着就出现谷歌的验证,因为没有js,会提示不允许访问,需要进行验证,所以只能再变成selenium的方式,使用webdriver通过验证.</p><p>全部代码如下.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bibtexparser <span class="keyword">as</span> bp</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.compat <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.edge.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">scholar_site = <span class="string">&quot;https://scholar.google.com/scholar&quot;</span>  <span class="comment"># https://scholar.google.com/scholar</span></span><br><span class="line">bib_url = <span class="string">&quot;https://scholar.google.cz/scholar&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paser</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parse_type=<span class="string">&#x27;b&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> parse_type == <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            edge_ops = Options()</span><br><span class="line">            <span class="comment"># edge_ops.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">            self.driver = webdriver.Edge(options=edge_ops)</span><br><span class="line">            self.flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_thesis</span>(<span class="params">self, title: <span class="built_in">str</span></span>):</span></span><br><span class="line">        response = requests.get(scholar_site, params=&#123;<span class="string">&#x27;q&#x27;</span>: title, <span class="string">&#x27;hl&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>&#125;)</span><br><span class="line">        root = etree.HTML(response.text)</span><br><span class="line">        nodes = root.xpath(<span class="string">&#x27;//div[@id=&quot;gs_res_ccl_mid&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(nodes) == <span class="number">1</span>, <span class="string">&quot;No thesis found.&quot;</span></span><br><span class="line">        node = nodes[<span class="number">0</span>]</span><br><span class="line">        first_theis = node.xpath(<span class="string">&#x27;//div[contains(@class, &quot;gs_r&quot;) and contains(@class, &quot;gs_or&quot;) and contains(@class, &#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;gs_scl&quot;) and @data-cid]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(first_theis) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;No thesis found.&quot;</span>)</span><br><span class="line">        data_cid = first_theis[<span class="number">0</span>].get(<span class="string">&quot;data-cid&quot;</span>)</span><br><span class="line">        res = requests.get(bib_url,</span><br><span class="line">                           params=&#123;<span class="string">&#x27;q&#x27;</span>: <span class="string">f&quot;info:<span class="subst">&#123;data_cid&#125;</span>:scholar.google.com/&quot;</span>, <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;cite&#x27;</span>, <span class="string">&#x27;hl&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;scirp&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_bib_from_scholar(res.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bib_from_scholar</span>(<span class="params">self, res: <span class="built_in">str</span></span>):</span></span><br><span class="line">        root = etree.HTML(res)</span><br><span class="line">        bibtex_url = root.xpath(<span class="string">&#x27;//div[@id=&quot;gs_citi&quot;]&#x27;</span>)[<span class="number">0</span>].xpath(<span class="string">&#x27;//a&#x27;</span>)[<span class="number">0</span>].get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        bib_res = requests.get(bibtex_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> bib_res.text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_thesis_from_browser</span>(<span class="params">self, title: <span class="built_in">str</span></span>):</span></span><br><span class="line">        url_query = urljoin(scholar_site, <span class="string">f&quot;?q=<span class="subst">&#123;title&#125;</span>&amp;hl=&#x27;zh-CN&#x27;&quot;</span>)</span><br><span class="line">        self.driver.get(url_query)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Searching thesis information.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.flag:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                captcha = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;gs_captcha_c&quot;]&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> captcha:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Captcha detected.&quot;</span>)</span><br><span class="line">                    self.driver.implicitly_wait(<span class="number">100</span>)</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Please solve the captcha.&quot;</span>)</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> captcha.is_displayed():</span><br><span class="line">                            self.flag = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Retrieving thesis information.&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        ref = self.driver.find_element(By.XPATH, <span class="string">&#x27;//div[@id=&quot;gs_res_ccl_mid&quot;]/*[1]//div[@class=&quot;gs_fl gs_flb&quot;]/a[2]&#x27;</span>)</span><br><span class="line">        ref.click()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        bib_link = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;gs_citi&quot;]/a[1]&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        bib_link.click()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        bib_text = self.driver.find_element(By.TAG_NAME, <span class="string">&#x27;pre&#x27;</span>).text</span><br><span class="line">        <span class="keyword">return</span> bib_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_bib</span>(<span class="params">file_path: <span class="built_in">str</span>, output_file_path: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> archiveprefix</span><br><span class="line">    <span class="keyword">if</span> output_file_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        output_file_path = Path(file_path).stem + <span class="string">&quot;_parsed.bib&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Path(output_file_path).exists():</span><br><span class="line">        Path(output_file_path).touch()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    bib_content = bp.parse_file(file_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bib_content.failed_blocks) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(</span><br><span class="line">            <span class="string">&#x27;\033[92m&#x27;</span> + <span class="string">&quot;Some blocks failed to parse. Check the entries of `library.failed_blocks`.&quot;</span> + <span class="string">&#x27;\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;All blocks parsed successfully&quot;</span>)</span><br><span class="line">    parser = Paser()</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bib_content.entries)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            publisher = bib_content.entries[idx][<span class="string">&#x27;publisher&#x27;</span>]</span><br><span class="line">            publisher = publisher.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            publisher = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                archiveprefix = bib_content.entries[idx][<span class="string">&#x27;archiveprefix&#x27;</span>]</span><br><span class="line">                archiveprefix = archiveprefix.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                archiveprefix = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> publisher == <span class="string">&quot;arXiv&quot;</span> <span class="keyword">or</span> archiveprefix == <span class="string">&quot;arxiv&quot;</span>:</span><br><span class="line">            title = bib_content.entries[idx][<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">            title = title.replace(<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            key = bib_content.entries[idx].key</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                lib = bp.parse_string(parser.search_thesis_from_browser(title=title))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            lib.entries[<span class="number">0</span>].key = key</span><br><span class="line">            new_bibtex_str = bp.write_string(lib)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_bibtex_str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lib = bp.Library()</span><br><span class="line">            lib.add(bib_content.entries[idx])</span><br><span class="line">            lib_str = bp.write_string(lib)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(lib_str)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(bib_content.entries) == <span class="built_in">len</span>(bp.parse_file(output_file_path).entries), <span class="string">&quot;Some entries are missing.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;File saved to <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse_bib(<span class="string">&#x27;references.bib&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解析bib文件使用bibtexparser这个库.</p><p>这里我使用Edge浏览器,换成谷歌浏览器也可以,另外如果在国内,需要开全局代理.</p><p>处理完后建议检查一下.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://bibtexparser.readthedocs.io/en/main/bibtexparser.html#bibtexparser-library-the-class-containing-the-parsed-library">Full API — BibtexParser latest documentation</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是最近写论文,引用参考文献时图方便直接用arxiv的citation了,但是貌似这样不太好,已经发表的论文依然显示publisher是arxiv,所以就想写个工具转换一下.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>利用CF或Vercel部署应用</title>
    <link href="https://www.sekyoro.top/2024/04/26/CF-workers%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2024/04/26/CF-workers%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</id>
    <published>2024-04-26T02:22:53.000Z</published>
    <updated>2024-04-26T10:22:16.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前用过CloudFlare(以下简称CF)的一些服务,但是对于它具体一些应用还不太清楚.简单来说,它是一些云巨头的强力竞争者.专注于云与边缘计算.</p><p>之前我想部署一些API服务时,要么用VPS、服务器,在服务器上部署应用.</p><p>要么使用Vercel,Vercel也提供一些应用的运行时,但是serverless,有一定限制.</p><p>还可以使用render,heroku(Heroku已停止免费提供服务)或者Netlify.此外也推荐<a href="https://fly.io/">Deploy app servers close to your users · Fly</a>,这些服务都类似,可以提供数据库等比较集成的功能,看你喜欢哪个.</p><p>CF的workers更类似Vercel的serverless函数但更强大也更快(理论上).这里我先使用Hono.js与其搭配更方便地部署一些简单的应用.<br><span id="more"></span></p><h2 id="Hono-js"><a href="#Hono-js" class="headerlink" title="Hono.js"></a>Hono.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hono &#125; <span class="keyword">from</span> <span class="string">&#x27;hono&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Hono()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.text(<span class="string">&#x27;Hono!&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app</span><br></pre></td></tr></table></figure><blockquote><p>Hono—是为了边缘计算的一个小巧、简单、超快的网络框架。它适用于任何 JavaScript 运行时：<strong>Cloudflare Workers</strong>、Fastly Compute、Deno、Bun、<strong>Vercel</strong>、<strong>AWS Lambda</strong>、Lambda@Edge 和 <strong>Node.js</strong>。</p></blockquote><p>可以看到它比较现代,还适合Deno和Bun.也能与Vercel与CF搭配。</p><p>本身语法跟express类似,没有太大的学习压力.</p><h2 id="Cloudflare-Workers"><a href="#Cloudflare-Workers" class="headerlink" title="Cloudflare Workers"></a>Cloudflare Workers</h2><blockquote><p>Cloudflare Workers 提供serverless开放式外部链接执行环境，使您能够创建新应用程序或增强现有应用程序，而无需配置或维护基础设施。</p></blockquote><p>使用Wrangler作为命令行创建部署项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wrangler --save-dev</span><br></pre></td></tr></table></figure><p>Cloudflare Workers 在 Cloudflare 的全球网络上运行，外部链接遍布全球数百个城市，提供免费和付费计划。</p><p>有一篇文章将CF workers与Vercel的serverless function做了比较<a href="https://moiva.io/blog/vercel-serverless-functions-vs-cloudflare-workers/">Vercel Serverless Functions vs Cloudflare Workers | Moiva.io Blog</a></p><blockquote><p>Vercel 本质上是一种将<strong>静态网站自动部署</strong>到全球数据中心网络的解决方案。Vercel 不仅如此，它还为<strong>Serverless Functions</strong>提供了一个解决方案，该解决方案运行得非常出色和流畅。</p><p>Cloudflare Workers 基本上是一个将无服务器功能部署到全球数据中心网络的平台。他们的文档说，Workers 也可用于部署静态应用程序，但我还没有研究或评估过。我知道 Cloudflare 还在开发另一种部署/托管静态应用程序的解决方案—Cloudflare Pages。</p></blockquote><p>作者认为CF workers在serverless功能上比Vercel更强大,并且也有CF pages作为部署静态网站的服务.</p><p>免费plan中允许每天100k请求,我测试了一下国内也能访问.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426171159806.png" alt="image-20240426171159806"></p><p>创建worker或者pages都可以,我拿例子创建了一个<a href="https://worker-ancient-voice-b446.13227671027806.workers.dev/">worker-ancient-voice-b446.13227671027806.workers.dev</a>,适合拿来写点简单API.数据库这种需要搭配一些第三方云服务比如supabase,目前还是Beta阶段,此外也可以使用KV存储.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426171829887.png" alt="image-20240426171829887"></p><p>相比来说Vercel有自带的Pgsql,另外还有一堆付费的AI功能,比如文生图等.</p><p>CloudFlare相比Vercel部署优点貌似就是边缘节点多,访问可能要好一点. 但在使用上其实生态两者差别不大,甚至Vercel要好一些.这种serverless的部署方式(因为部署时的文件路径有要求). 不过我看到</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426173140993.png" alt="image-20240426173140993"></p><p>目前看我我最不爽的一点就是本地开发完之后又要改一些配置或者改一些数据库啥的然后上线继续测试.不过以后可以考虑使用CF而不是Vercel部署试试了.</p><h2 id="Vercel-Function"><a href="#Vercel-Function" class="headerlink" title="Vercel Function"></a>Vercel Function</h2><p>Vercel的文档看起来要舒服一些.支持serverless和Edge</p><blockquote><p>Vercel 功能的基础结构和能力由您选择的运行时决定：</p><p>Node.js 运行时（serverless）：让您可以访问所有 Node.js 应用程序接口，这是您在网络上编写程序所期望的，同时还能配置机器资源和依赖关系。<br>边缘运行时（Edge）：当您需要在用户附近执行轻量级 JavaScript 函数时，可选择这种经济高效的方法</p></blockquote><p>官网展示了使用Next的例子,运行时可以选择Edge或者Node.js.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dynamic = <span class="string">&quot;force-dynamic&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> runtime = <span class="string">&#x27;nodejs&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span>  <span class="function"><span class="keyword">function</span> <span class="title">GET</span>(<span class="params">request: Request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">`Hello from <span class="subst">$&#123;process.env.VERCEL_REGION&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还支持Go,Python,Ruby的运行时,不过都在Beta,</p><blockquote><p>Functions using the Edge Runtime, are ideal for a cost-effective option that use a limited set of Web Standard APIs that make sense on the server. The Edge runtime is built on top of the <a href="https://v8.dev/">V8 engine</a>, allowing it to run in isolated execution environments that don’t require a container or virtual machine.</p><p>Functions using the Edge runtime execute in the data center is closest to the user, <a href="https://vercel.com/docs/functions/concepts#functions-and-your-data-source">or in a region near your databases</a>. This can result in a much lower latency and allows you to provide personalization at speed.</p></blockquote><p>使用Hono如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hono &#125; <span class="keyword">from</span> <span class="string">&#x27;hono&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; handle &#125; <span class="keyword">from</span> <span class="string">&#x27;@hono/node-server/vercel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; PageConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config: PageConfig = &#123;</span><br><span class="line">  <span class="attr">api</span>: &#123;</span><br><span class="line">    <span class="attr">bodyParser</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Hono().basePath(<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/hello&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.json(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello from Hono!&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handle(app)</span><br></pre></td></tr></table></figure><p>当然Hono也可以用于其他很多地方,这里只是列举其优点.</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li><a href="https://www.youtube.com/watch?v=H7Qe96fqg1M&amp;ab_channel=CloudflareWorkers">(4) Learn Cloudflare Workers - Full Course for Beginners - YouTube</a></li><li><a href="https://github.com/honojs/hono">honojs/hono: Web Framework built on Web Standards (github.com)</a></li><li><a href="https://workers.cloudflare.com/">Cloudflare Workers®</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前用过CloudFlare(以下简称CF)的一些服务,但是对于它具体一些应用还不太清楚.简单来说,它是一些云巨头的强力竞争者.专注于云与边缘计算.&lt;/p&gt;
&lt;p&gt;之前我想部署一些API服务时,要么用VPS、服务器,在服务器上部署应用.&lt;/p&gt;
&lt;p&gt;要么使用Vercel,Vercel也提供一些应用的运行时,但是serverless,有一定限制.&lt;/p&gt;
&lt;p&gt;还可以使用render,heroku(Heroku已停止免费提供服务)或者Netlify.此外也推荐&lt;a href=&quot;https://fly.io/&quot;&gt;Deploy app servers close to your users · Fly&lt;/a&gt;,这些服务都类似,可以提供数据库等比较集成的功能,看你喜欢哪个.&lt;/p&gt;
&lt;p&gt;CF的workers更类似Vercel的serverless函数但更强大也更快(理论上).这里我先使用Hono.js与其搭配更方便地部署一些简单的应用.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Web开发目前的统治者:SpringMVC</title>
    <link href="https://www.sekyoro.top/2024/04/09/Web%E5%BC%80%E5%8F%91%E7%9B%AE%E5%89%8D%E7%9A%84%E7%BB%9F%E6%B2%BB%E8%80%85-SpringMVC/"/>
    <id>https://www.sekyoro.top/2024/04/09/Web%E5%BC%80%E5%8F%91%E7%9B%AE%E5%89%8D%E7%9A%84%E7%BB%9F%E6%B2%BB%E8%80%85-SpringMVC/</id>
    <published>2024-04-09T13:43:30.000Z</published>
    <updated>2024-04-11T09:05:09.354Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前我写过某些语言的Web框架分析,得出的结论是如果你面向工作或者当前高效的框架学习,那就直接向Java看齐,其他的类似C#或者Go都还差点(Go的web生态并没有想的那么好,C#本身很不错,它的很多框架也很不错.但是微软的一些举动会造成人员流失<a href="https://www.zhihu.com/question/377803052">为什么叫.NET？它和C#是什么关系？ - 知乎 (zhihu.com)</a>,而这些人员多半是相对独立的开发者),复古派(我随便取得名字)PHP或者Ruby(主要是ROR)本身语言的学习精力以及与所谓主流可能不太相容(我知道有很多人会力争PHP或者Ruby在web上的依然流行).</p><p>综合考虑,Java的Spring依然是主流,这里会对SpringMVC,或者说是SpringBoot写几个小例子,来显示其与其他语言的Web开发有什么差异.</p><span id="more"></span><p>Spring的核心是依赖注入(核心是IoC)与AOP.不要过于纠结这些概念.这些东西可以是框架设计和使用时的思想.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/helloworld&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greet&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Greetings from Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ol><li><a href="https://spring.io/">Spring | Home</a></li><li>或者你厌倦了Java和它的生态<a href="https://dotnet.microsoft.com/zh-cn/">.NET | 构建。测试。部署。 (microsoft.com)</a></li></ol><p><img data-src="https://dotnet.microsoft.com/static/images/redesign/shared/tech-empower-results.svg" alt="在 TechEmpower 基准检验中，.NET 每秒处理了 702 万个请求，Node.js 处理了 66 万个请求，Java Servlet 处理了 220 万个请求。" style="zoom: 33%;" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我写过某些语言的Web框架分析,得出的结论是如果你面向工作或者当前高效的框架学习,那就直接向Java看齐,其他的类似C#或者Go都还差点(Go的web生态并没有想的那么好,C#本身很不错,它的很多框架也很不错.但是微软的一些举动会造成人员流失&lt;a href=&quot;https://www.zhihu.com/question/377803052&quot;&gt;为什么叫.NET？它和C#是什么关系？ - 知乎 (zhihu.com)&lt;/a&gt;,而这些人员多半是相对独立的开发者),复古派(我随便取得名字)PHP或者Ruby(主要是ROR)本身语言的学习精力以及与所谓主流可能不太相容(我知道有很多人会力争PHP或者Ruby在web上的依然流行).&lt;/p&gt;
&lt;p&gt;综合考虑,Java的Spring依然是主流,这里会对SpringMVC,或者说是SpringBoot写几个小例子,来显示其与其他语言的Web开发有什么差异.&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://www.sekyoro.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>DiveintoCpp:from OpenGL</title>
    <link href="https://www.sekyoro.top/2024/04/03/DiveintoCpp-from-OpenGL/"/>
    <id>https://www.sekyoro.top/2024/04/03/DiveintoCpp-from-OpenGL/</id>
    <published>2024-04-03T12:12:23.000Z</published>
    <updated>2024-04-03T15:06:01.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>起因是看到有人在Reddit上推荐通过SDL这种库上手学习C/Cpp,我看了一下发现很不错,于是进一步看了看了解了SFML.最后决定通过写写openGL学习一下c/c++.<br><span id="more"></span></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>绘图API包括OpenGL,Vulkan,DirectX,Metal等等,其中</p><ul><li>DX11、<a href="https://www.nvidia.com/en-sg/geforce/technologies/dx12/">DX12</a>：<a href="https://zh.wikipedia.org/wiki/微軟">微软</a>公司在<a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Windows</a>系统上所开发的3D图形编程接口</li><li><a href="https://www.opengl.org/">OpenGL</a>：OpenGL是一套跨语言、跨平台的API，它的实现存在于Windows、部分UNIX和Mac OS，这些实现一般由显卡厂商提供，而且非常依赖于该厂商提供的硬件。</li><li><a href="https://www.vulkan.org/">Vulkan</a>：下一代的OpenGL，相比之下，Vulkan更接近底层，并且能很好地分配CPU核心来执行并行任务</li><li><a href="https://developer.apple.com/metal/">Metal</a>：Metal API 由苹果公司提供，它旨在为<a href="https://en.wikipedia.org/wiki/IOS">iOS</a>、<a href="https://en.wikipedia.org/wiki/IPadOS">iPadOS</a>、<a href="https://en.wikipedia.org/wiki/MacOS">macOS</a>和<a href="https://en.wikipedia.org/wiki/TvOS">tvOS</a>上的应用程序提供对GPU硬件的低级访问来提高性能，它与Vulkan、DX12都属于低级别的API</li></ul><p>此外的SDL与SFML是多媒体开发库,包含了绘图和网络,音频等功能,比较全面.</p><h3 id="SDL"><a href="#SDL" class="headerlink" title="SDL"></a>SDL</h3><p>SDL是一个跨平台的多媒体开发库，用于游戏开发和其他多媒体应用。以下是SDL的特点：</p><p>2D图形渲染： SDL提供了2D图形渲染的功能，虽然不如SFML那样高级，但仍然足够满足一般的2D游戏需求。<br>音频： SDL支持音频播放，但相较于SFML而言，其音频功能较为基础。<br>窗口和事件处理： 提供了创建窗口、处理鼠标、键盘事件的功能。<br>低级硬件访问： SDL也提供了对硬件的低级访问，使得开发者可以更灵活地操作硬件。</p><h3 id="SFML"><a href="#SFML" class="headerlink" title="SFML"></a>SFML</h3><p>SFML是一个现代、面向对象的多媒体库，专注于2D游戏开发和多媒体应用程序。以下是SFML的特点：</p><p>2D图形渲染： SFML提供了简单易用的2D图形渲染接口，使得创建2D游戏非常容易。<br>音频： SFML支持音频播放和音频捕获功能，可以用来添加音乐、音效等。<br>窗口和事件处理： 提供了创建窗口、处理鼠标、键盘事件的功能。<br>网络： SFML包含网络模块，允许游戏之间进行网络通信。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用C++开发,环境搭建不是小问题.Linux上配置makefile或者CMake添加lib和dll库,而windows还是使用vs添加lib和头文件即可.下面使用Windows搭建环境.</p><p>首先安装GLFW,它之前是freeglut和glut</p><blockquote><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它<strong>允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入</strong></p></blockquote><p>从官网下载<a href="https://www.glfw.org/download.html">Download | GLFW</a>,然后将头文件目录和lib库目录配置到vs的C++配置中,再将dll放到执行程序所在目录.</p><blockquote><p>如果你是Windows平台，<strong>opengl32.lib</strong>已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将<strong>opengl32.lib</strong>添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是<strong>opengl32.lib</strong>（和32位版本一样），虽然很奇怪但确实如此。</p></blockquote><p>事实上这样就能执行一些程序了.</p><blockquote><p>因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用</p></blockquote><p>静态链接和动态链接的相关介绍<a href="https://www.runoob.com/w3cnote/cpp-static-library-and-dynamic-library.html">C++静态库与动态库 | 菜鸟教程 (runoob.com)</a>,c++引入第三方库就是使用这些库.如果你想的是使用C++开发成熟的应用,那还是推荐使用Qt.这里的库更多的还是去造轮子或者是学习的,<del>毕竟c++就是干这个的</del></p><p>此外还需要其他工具,因为OpenGL只是一个标准/规范，<strong>具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询</strong>。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法<a href="https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions">因平台而异</a>，</p><p>OpenGL被认为是一个API(Application Programming Interface, 应用程序编程接口)，包含了一系列可以操作图形、图像的函数。然而，OpenGL本身并不是一个API，它仅仅是一个由<a href="http://www.khronos.org/">Khronos组织</a>制定并维护的规范(Specification)。</p><p>OpenGL规范严格规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现(Implement)的，将由OpenGL库的开发者自行决定（译注：这里开发者是指编写OpenGL库的人）。因为OpenGL规范并没有规定实现的细节，具体的OpenGL库允许使用不同的实现，只要其功能和结果与规范相匹配（亦即，作为用户不会感受到功能上的差异）。</p><p>早期的OpenGL使用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少有控制OpenGL如何进行计算的自由。而开发者迫切希望能有更多的灵活性。随着时间推移，规范越来越灵活，开发者对绘图细节有了更多的掌控。立即渲染模式确实容易使用和理解，但是效率太低。因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式(Core-profile)下进行开发，这个分支的规范完全移除了旧的特性</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是看到有人在Reddit上推荐通过SDL这种库上手学习C/Cpp,我看了一下发现很不错,于是进一步看了看了解了SFML.最后决定通过写写openGL学习一下c/c++.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Go Web框架小赏</title>
    <link href="https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-04-02T03:23:04.000Z</published>
    <updated>2024-04-02T04:31:41.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.</p><p><img data-src="https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png" alt="img" style="zoom: 33%;" /></p><span id="more"></span><p>Go的web框架生态依旧零零碎碎,没有一个大的统一框架,不过这也正常,目前除了Java,其他都难说.</p><p>目前Go管理包都使用mod了,不用去看网上老教程的什么GO PATH配一堆.</p><h2 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := gin.Default()</span><br><span class="line">  r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin应该是最常使用的了,star数目前75.1k,官方例子也比较多<a href="https://gin-gonic.com/zh-cn/docs/">文档 | Gin Web Framework (gin-gonic.com)</a></p><h2 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/labstack/echo/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">&quot;:1323&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁高性能扩展性强的web框架,看起来跟gin没有什么太大的差别.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.HTML(http.StatusOK, <span class="string">&quot;&lt;strong&gt;Hello, World!&lt;/strong&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iris"><a href="#Iris" class="headerlink" title="Iris"></a>Iris</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/kataras/iris/v12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  app := iris.New()</span><br><span class="line">  app.Use(iris.Compression)</span><br><span class="line">  app.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="string">&quot;Hello &lt;strong&gt;%s&lt;/strong&gt;!&quot;</span>, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := iris.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v1</span></span><br><span class="line">    v1 := app.Party(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v2</span></span><br><span class="line">    v2 := app.Party(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><p>号称是受express影响的框架,看代码还是不错的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := fiber.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /api/register</span></span><br><span class="line">    app.Get(<span class="string">&quot;/api/*&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;✋ %s&quot;</span>, c.Params(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; ✋ register</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /flights/LAX-SFO</span></span><br><span class="line">    app.Get(<span class="string">&quot;/flights/:from-:to&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;💸 From: %s, To: %s&quot;</span>, c.Params(<span class="string">&quot;from&quot;</span>), c.Params(<span class="string">&quot;to&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 💸 From: LAX, To: SFO</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /dictionary.txt</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:file.:ext&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;📃 %s.%s&quot;</span>, c.Params(<span class="string">&quot;file&quot;</span>), c.Params(<span class="string">&quot;ext&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 📃 dictionary.txt</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john/75</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name/:age/:gender?&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;👴 %s is %s years old&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>), c.Params(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 👴 john is 75 years old</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;Hello, %s 👋!&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; Hello john 👋!</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    log.Fatal(app.Listen(<span class="string">&quot;:3000&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后部署可以使用Render<a href="https://docs.render.com/">Docs + Quickstarts | Render Docs</a>,还有一些go的web框架,但感觉文档不是很好或者目前用的人还不多,所以就先不说了.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png&quot; alt=&quot;img&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vitepress:SSG框架使用</title>
    <link href="https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-01T12:34:30.000Z</published>
    <updated>2024-06-02T08:32:06.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro<a href="https://docs.astro.build/zh-cn/getting-started/">入门指南 | Docs (astro.build)</a>,这个框架默认服务端渲染.<br><span id="more"></span></p><p>对于前端,可选的文档框架还是很多的,我最推荐vitepress(这也是本篇文章主要讲的),或者你也可以使用vuepress.</p><h3 id="Vitepress"><a href="#Vitepress" class="headerlink" title="Vitepress"></a>Vitepress</h3><p>vue的团队打造,很好用.自带的样式不错,自定义性强.</p><p>配置文件配置主题的标题,描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vitepress/config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// site-level options</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;VitePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Just playing around.&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// theme-level options</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主题配置包括logo,nav,siderbar,footer等.我试用了一下,适合写<strong>产品文档</strong>,它本身的官网<a href="https://vitepress.dev/">VitePress | Vite &amp; Vue Powered Static Site Generator</a>就是vitepress写的.</p><p>可以在这个配置里写nav和sidebar的信息.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vitepress&quot;</span>;</span><br><span class="line"><span class="comment">// https://vitepress.dev/reference/site-config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;protools&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;tools which I learn and use&quot;</span>,</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// https://vitepress.dev/reference/default-theme-config</span></span><br><span class="line">    <span class="attr">search</span>: &#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">footer</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Released under the MIT License.&quot;</span>,</span><br><span class="line">      <span class="attr">copyright</span>: <span class="string">`Copyright ©<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()&#125;</span>.Made with ❤ &lt;a href=&quot;https://sekyoro.top&quot;&gt;Sekyoro&lt;/a&gt;`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">socialLinks</span>: [</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">&quot;github&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;https://github.com/drowning-in-codes&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Home page作为主页,layout设置为<code>home</code>,其他的可以设置为<code>doc</code></p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240401233049341.png" alt="image-20240401233049341"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section"># https://vitepress.dev/reference/default-theme-home-page</span></span><br><span class="line">layout: home</span><br><span class="line"></span><br><span class="line">hero:</span><br><span class="line">  name: &quot;protools&quot;</span><br><span class="line">  text: &quot;tools which I learn and use&quot;</span><br><span class="line">  tagline: Help me and others to learn and use.</span><br><span class="line">  image:</span><br><span class="line"><span class="code">    src: /logo.png</span></span><br><span class="line"><span class="code">    alt: protools</span></span><br><span class="line"><span class="code">  actions:</span></span><br><span class="line"><span class="code">    - theme: brand</span></span><br><span class="line"><span class="code">      text: &#x27;Web框架&#x27;</span></span><br><span class="line"><span class="code">      link: &#x27;/node_web&#x27; </span></span><br><span class="line"><span class="code">features:</span></span><br><span class="line"><span class="code">  - title: Learn </span></span><br><span class="line"><span class="code">    details: No features</span></span><br><span class="line"><span class="code">---</span></span><br></pre></td></tr></table></figure><p>在写markdown时可以多利用vitepress自带的一些特性,</p><p>写完之后build一下把.vitepress目录下的dist拿来部署就行.我就部署在了vercel上,整个过程很顺畅<a href="https://protool-ten.vercel.app/">protools (protool-ten.vercel.app)</a></p><p>但是也有缺点,比如markdown增加了一些东西增加学习成本.不过官方文档还是写得很清楚的.</p><h3 id="Docusaurus"><a href="#Docusaurus" class="headerlink" title="Docusaurus"></a>Docusaurus</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-docusaurus@latest my-website classic</span><br></pre></td></tr></table></figure><p>比较新的东西,使用react写界面</p><h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h3><p>也是js的静态网站生成器<a href="https://docsify.js.org/#/?id=docsify">docsify</a>.不过都有vitepress了,感觉必要性不是很大,这种东西没必要搞几个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p>启动完成后，你可以在 ./docs 子目录下看到文件列表。</p><ul><li>作为入口文件的 index.html</li><li>作为主页的 README.md</li><li>.nojekyll 阻止 GitHub 页面忽略以下划线开头的文件</li></ul><p>下面是Python的文档生成器.适合Python写的库</p><h3 id="Mkdocs"><a href="#Mkdocs" class="headerlink" title="Mkdocs"></a>Mkdocs</h3><p><a href="https://www.mkdocs.org/">mkdocs.org</a>看界面就有Python那种感觉了,毕竟Python的文档经常长这种样子.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install mkdocs</span><br><span class="line">mkdocs new my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p><img data-src="https://www.mkdocs.org/img/initial-layout.png" alt="The initial MkDocs layout"></p><p>在<code>mkdocs.yml</code>配置中加上网站信息和nav等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site_url:</span> <span class="string">https://example.com/</span></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">readthedocs</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs build</span><br></pre></td></tr></table></figure><p>这种网站可以部署在<a href="https://www.pythonanywhere.com/">Host, run, and code Python in the cloud: PythonAnywhere (www.pythonanywhere.com)</a>和github pages上,vercel上目前不太行.</p><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p><a href="https://zh-sphinx-doc.readthedocs.io/en/latest/tutorial.html">Sphinx初尝 — Sphinx 使用手册 (zh-sphinx-doc.readthedocs.io)</a></p><p>不推荐,本身不支持markdown,使用的是<code>reStructuredText</code>编写,界面也一般.</p><h3 id="Read-the-Docs"><a href="#Read-the-Docs" class="headerlink" title="Read the Docs"></a>Read the Docs</h3><p>免费托管项目,可以使用Sphinx或者Mkdocs.通过<a href="https://link.zhihu.com/?target=https%3A//recommonmark.readthedocs.io/en/latest/">recommonmark</a> 来支持markdown.</p><p>其他的相当于类似在线服务了,基本上不需要配置直接粘贴内容就行</p><h3 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h3><p>本身还是很不错的服务<a href="https://www.gitbook.com/">GitBook – Knowledge management for technical teams</a></p><p>很多人拿来制作电子书</p><h3 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h3><p><a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具 (yuque.com)</a>国内的平台,正如介绍一样,可以拿来写文档和提供知识</p><p>说到语雀,有必要提一下笔记类产品的比较和使用<a href="https://geekdaxue.co/read/u298697@uf1fda/mv6im8#:~:text=1 语雀，在线文档和云端知识库，笔记界的GitHub； 2 印象笔记，知识管理和效率工具，强调信息的剪藏和管理； 3 飞书，团队协作和办公利器，帮助B端用户全面激活生产力；,4 Notion，超酷的基于双链和数据库的知识系统，打破了传统的office逻辑，丰富了知识管理的可玩性； 5 Obsidian，基于markdown的双链笔记管理软件，构建你的知识网络； 6 flomo，小而美，强调自由、快速、持续地记录你的想法；">产品分析报告 - 笔记类产品比较)</a></p><blockquote><ul><li><strong>语雀</strong>，在线文档和云端知识库，笔记界的GitHub；</li><li>印象笔记，知识管理和效率工具，强调信息的剪藏和管理；</li><li><strong>飞书</strong>，团队协作和办公利器，帮助B端用户全面激活生产力；</li><li><strong>Notion</strong>，超酷的基于双链和数据库的知识系统，打破了传统的office逻辑，丰富了知识管理的可玩性；</li><li>Obsidian，基于markdown的双链笔记管理软件，构建你的知识网络；</li><li>flomo，小而美，强调自由、快速、持续地记录你的想法；</li></ul></blockquote><p>目前市面上笔记软件挺多的,大厂基本都有自己推出的笔记软件.如何选择合适好用的笔记软件还是挺重要的.个人觉得语雀用来撰写和分享,形成知识库. Notion功能比较强大,微软的OneNote可以用来记录随笔和生活.如果按办公和学习记录来分,飞书和Wolai偏向办公,语雀比较中立,Notion用来学习和分享都合适.</p><p>最后总结一下,如果写偏技术性文档,偏前端的技术或者产品使用vitepress,其他用read the docs或者mkdocs(也可以都是用vitepress,主要是前端的风格跟vitepress很搭)</p><p>如果面向大众的那种知识文档,用gitbook就行.</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ol><li><a href="https://blog.csdn.net/m0_46521785/article/details/119812280">几款文档框架：Mkdocs、Sphinx、Teadocs、docsify-CSDN博客</a></li><li><a href="https://vitepress.dev/guide/getting-started">Getting Started | VitePress</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro&lt;a href=&quot;https://docs.astro.build/zh-cn/getting-started/&quot;&gt;入门指南 | Docs (astro.build)&lt;/a&gt;,这个框架默认服务端渲染.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node后端框架小赏</title>
    <link href="https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-03-30T12:49:50.000Z</published>
    <updated>2024-04-01T15:12:51.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.<br><span id="more"></span><br>这里就写写Express,Koa,Fastify以及Nest这几个框架的介绍以及示例代码,以供后续技术选型使用.</p><p>首先完全可以不使用框架写一些api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> parsedURL = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">   <span class="keyword">if</span> (parsedURL.pathname === <span class="string">&#x27;/api&#x27;</span>) &#123;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class="line">      res.end(<span class="string">`Hey <span class="subst">$&#123;parsedURL.query.name&#125;</span> <span class="subst">$&#123;parsedURL.query.lastname&#125;</span>`</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>久经考验的node后端小框架,本身功能挺少的,感觉还不如Flask.没有特重载,需要使用nodemon.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.get(<span class="string">&#x27;/api/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params)</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: req.params.name,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>重要概念是Middleware,通过使用这个中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET method route</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;sddsaf&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/api/:name/:age&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params);</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    <span class="attr">name</span>: req.params.name,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST method route</span></span><br><span class="line">app.post(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;POST request to the homepage&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> myLogger = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;LOGGED&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line">app.use(myLogger);</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&quot;/secret&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Accessing the secret section ...&quot;</span>);</span><br><span class="line">  next(); <span class="comment">// pass control to the next handler</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>express的可魔改性挺高的,可以使用多种中间件以及重载express的API</p><p>中间件分为应用级,路由级以及一些自带的和第三方的.</p><h3 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h3><p>应用级直接使用app.use()也可以使用app.get等.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 使用use可以连续定义多个中间件</span><br><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"># 使用app.<span class="built_in">get</span>可以连续定义多个中间件</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOriginalUrl</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const logStuff = [logOriginalUrl, logMethod]</span><br><span class="line">app.<span class="built_in">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, logStuff, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">res</span>.send(<span class="string">&#x27;User Info&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要跳过一个路由的中间件中的其他中间件函数，可调用 next(‘route’) 将控制权传递给下一个路由。注意：next(‘route’) 只适用于通过 app.METHOD() 或 router.METHOD() 函数加载的中间件函数。</p><blockquote><p>注意区分对应路由的handler和middleware.(感觉差别其实不是很大)前者一般负责主要事务逻辑比较多,后者负责一些logging啥的.</p></blockquote><h3 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time:&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span></span><br><span class="line">router.use(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// handler for the /user/:id path, which renders a special page</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params.id)</span><br><span class="line">  res.render(<span class="string">&#x27;special&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mount the router on the app</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><p>使用 router.use() 和 router.METHOD() 函数加载路由器级中间件。相当于细分颗粒度了,使用一个router的中间件作为app级别的中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// predicate the router with a check and bail out when needed</span></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.headers[<span class="string">&#x27;x-auth&#x27;</span>]) <span class="keyword">return</span> next(<span class="string">&#x27;router&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello, user!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the router and 401 anything falling through</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, router, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendStatus(<span class="number">401</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码使用路由中间件,如果访问没有x-auth头,就跳过其他中间件直到handlers</p><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自带中间件</p><ul><li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static</a> serves static assets such as HTML files, images, and so on.</li><li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li><li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li></ul><p>第三方中间件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// load the cookie-parsing middleware</span></span><br><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure><h3 id="重写express-API"><a href="#重写express-API" class="headerlink" title="重写express API"></a>重写express API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.response.sendStatus = <span class="function"><span class="keyword">function</span> (<span class="params">statusCode, type, message</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code is intentionally kept simple for demonstration purpose</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.contentType(type)</span><br><span class="line">    .status(statusCode)</span><br><span class="line">    .send(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(app.request, <span class="string">&#x27;ip&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;Client-IP&#x27;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>express的模板引擎可以使用Pug,Mustache,Ejs等</p><p>错误处理函数,包括一个默认的,这个默认的错误处理中间件函数被添加到中间件函数栈的末尾,也可添加自定义的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa的中间件想法跟express不太一样,而且本身没有route.比如下面的输出依次是logger,res,start,1,Hello,GET / - 1ms</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;logger&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.get(<span class="string">&#x27;X-Response-Time&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;res&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  <span class="built_in">console</span>.log(ms)</span><br><span class="line">  ctx.set(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="comment">// html</span></span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">    <span class="comment">// json</span></span><br><span class="line">   <span class="comment">// ctx.body = &#123; foo: &#x27;bar&#x27; &#125;;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa中有个context,可以给它增加属性.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.context.db = db();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.db);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ctx里面包含了基本所有需要的东西,包括request和response.</p><ul><li><code>ctx.header</code></li><li><code>ctx.headers</code></li><li><code>ctx.method</code></li><li><code>ctx.method=</code></li><li><code>ctx.url</code></li><li><code>ctx.url=</code></li><li><code>ctx.originalUrl</code></li><li><code>ctx.origin</code></li><li><code>ctx.href</code></li><li><code>ctx.path</code></li><li><code>ctx.path=</code></li><li><code>ctx.query</code></li><li><code>ctx.query=</code></li><li><code>ctx.querystring</code></li><li><p><code>ctx.querystring=</code>等</p></li><li><p><code>ctx.body</code></p></li><li><code>ctx.body=</code></li><li><code>ctx.status</code></li><li><code>ctx.status=</code></li><li><code>ctx.message</code></li><li><code>ctx.message=</code></li><li><code>ctx.length=</code></li><li><code>ctx.length</code></li><li><code>ctx.type=</code></li><li><code>ctx.type</code></li><li><code>ctx.headerSent</code></li><li><code>ctx.redirect()</code></li><li><code>ctx.attachment()</code></li><li><code>ctx.set()</code></li><li><code>ctx.append()</code></li><li><code>ctx.remove()</code></li><li><code>ctx.lastModified=</code></li><li><code>ctx.etag=</code></li></ul><p>路由还需要下载<code>koa-router</code>,koa本身不包含中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Home Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;About Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server started on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  log.error(<span class="string">&#x27;server error&#x27;</span>, err, ctx)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>总价一下,koa本身比较简洁,使用中间件的逻辑有点怪,使用await会调用下一个中间件,如果没有其他中间件了再调用handler,然后再回去.没有自带路由,而且对模板引擎支持力度也不够,适合写API.</p><h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><p>特点就是快,而且github上star挺多的,一般表明生态不会太差.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p>fastify也有中间件这种叫做插件plugin的东西.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">logger</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">app, options</span>) </span>&#123;</span><br><span class="line">    app.get(<span class="string">&#x27;/hi&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;hi&#x27;</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.register(routes)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> app.listen(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        app.log.error(err)</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  start()</span><br></pre></td></tr></table></figure><p>此外还有数据验证和序列化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">someKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">someOtherKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.post(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">response</span>: &#123;</span><br><span class="line">      <span class="number">200</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;</span><br><span class="line">          <span class="attr">hello</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.get(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于数据验证,该路由接受一个schema键，该schema键包含body、querystring、params和标头。</p><p>对于序列化,可以将序列化速度提高 2-3 倍。这还有助于防止潜在敏感数据的泄漏，因为 Fastify 将只序列化响应模式中的数据。</p><p>感觉它的文档写的不是很好啊,不过如果有其他框架基础倒还是好写.</p><p>对这种精小的框架,有对比<a href="https://plainenglish.io/blog/fastify-express-benchmark-4c4aebb726d6">I Built the Same API With Fastify, Express &amp; Bare Node.js. Here Are the Differences (plainenglish.io)</a>表明express还是占大头,即使fastify性能好一些,毕竟现在性能并不是一个应用的全部.</p><h2 id="Nest-js"><a href="#Nest-js" class="headerlink" title="Nest.js"></a>Nest.js</h2><p>Nest是针对项目的,简单的几个api的话还是用express这种吧.Nest有controller,provider,interceptor这种东西了,还全面支持ts,相当于向spring MVC迈进.</p><blockquote><p>app.controller.ts 带有单一路由的基本控制器。<br>app.controller.spec.ts 控制器的单元测试。<br>app.module.ts 应用程序的根模块。<br>app.service.ts 带有单一方法的基本服务。<br>main.ts 应用程序的入口文件，使用核心函数 NestFactory 创建 Nest 应用程序实例。</p></blockquote><p>要创建 Nest 应用程序实例需要使用核心 NestFactory 类。NestFactory 提供了几个静态方法，用于创建应用程序实例。create() 方法会返回一个应用程序对象，该对象符合 INestApplication 接口。该对象提供了一系列方法.</p><h3 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h3><p>控制器负责处理接收到的请求，并将响应返回给客户端。</p><p><img data-src="https://docs.nestjs.com/assets/Controllers_1.png" alt="img"></p><p>控制器的作用是接收应用程序的特定请求。<strong>路由机制控制哪个控制器接收哪些请求</strong>。通常情况下，每个控制器都有不止一个路由，不同的路由可以执行不同的操作。</p><p><strong>为了创建基本控制器，我们使用类和装饰器。装饰器将类与所需的元数据关联起来，使 Nest 能够创建路由图</strong>（将请求绑定到相应的控制器）。</p><p>一个module下包括controller和provider(service).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Controller,</span><br><span class="line">  Get,</span><br><span class="line">  Req,</span><br><span class="line">  Post,</span><br><span class="line">  Res,</span><br><span class="line">  Param,</span><br><span class="line">  HttpCode,</span><br><span class="line">  Body,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  findAll(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action returns all cats&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  find(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> param.id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action adds a new cat&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以看到在modules.ts中写controller和provider,相当于把handler和route都写了.有很多修饰器可以使用</p><div class="table-container"><table><thead><tr><th>装饰器</th><th>方法</th></tr></thead><tbody><tr><td><code>@Request(), @Req()</code></td><td><code>req</code></td></tr><tr><td><code>@Response(), @Res()</code><strong>*</strong></td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(key?: string)</code></td><td><code>req.params</code> / <code>req.params[key]</code></td></tr><tr><td><code>@Body(key?: string)</code></td><td><code>req.body</code> / <code>req.body[key]</code></td></tr><tr><td><code>@Query(key?: string)</code></td><td><code>req.query</code> / <code>req.query[key]</code></td></tr><tr><td><code>@Headers(name?: string)</code></td><td><code>req.headers</code> / <code>req.headers[name]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table></div><h3 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h3><p>Nest 中的许多基本类都可以被视为提供者，如服services, repositories, factories, helpers等。提供者的主要理念是它可以作为依赖注入；这意味着对象之间可以创建各种关系，而 “连接 “这些对象的功能在很大程度上可以委托给 Nest 运行时系统。</p><p><img data-src="https://docs.nestjs.com/assets/Components_1.png" alt="img"></p><p>可以创建一个service作为provider,@Injectable() 装饰器附加了元数据，声明 CatsService 是一个可由 Nest IoC 容器管理的类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> cats: Cat[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params">cat: Cat</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cats.push(cat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findAll(): Cat[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cats;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Cat &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Post, Body &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;Cat[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CatsService 是通过类构造函数注入的。请注意 private 语法的使用。这种速记方法允许我们在同一位置立即声明和初始化 catsService 成员。</p><p>现在已经定义了一个提供者（CatsService），并且有了该服务的消费者（CatsController），我们需要向 Nest 注册该服务，以便它能执行注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>controller中访问provider利用<strong>依赖注入</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>模块是一个用 @Module() 装饰器注解的类。@Module() 装饰器提供了 Nest 用来组织应用程序结构的元数据</p><p><img data-src="https://docs.nestjs.com/assets/Modules_1.png" alt="img"></p><p>每个应用程序至少有一个模块，即根模块。根模块是 Nest 用来构建应用程序图的起点—Nest 用来解决模块和提供程序之间的关系和依赖关系的内部数据结构。</p><p>建议将模块作为组织组件的有效方式。因此，对于大多数应用程序而言，最终架构将采用多个模块，每个模块封装一组密切相关的功能。</p><div class="table-container"><table><thead><tr><th>模块中内容</th><th>作用</th></tr></thead><tbody><tr><td><code>providers</code></td><td>the providers that will be instantiated by the Nest injector and that may be shared at least across this module</td></tr><tr><td><code>controllers</code></td><td>the set of controllers defined in this module which have to be instantiated</td></tr><tr><td><code>imports</code></td><td>the list of imported modules that export the providers which are required in this module</td></tr><tr><td><code>exports</code></td><td>the subset of <code>providers</code> that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (<code>provide</code> value)</td></tr></tbody></table></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同一个modules中的不同controller可以共享provider,此外不同modules可以import还可以导出provider</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>每个模块都自动成为共享模块。一<strong>旦创建，任何模块都可以重复使用</strong>。假设我们想在其他几个模块之间共享一个 CatsService 实例。为此，我们首先需要导出 CatsService 提供者，将其添加到模块的导出数组中</p><p><img data-src="https://docs.nestjs.com/assets/Shared_Module_1.png" alt="img"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>现在，任何导入 CatsModule 的模块都可以访问 CatsService，并与所有导入该模块的其他模块共享同一个实例。此外还有全局modules和动态modules,</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, Global &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>中间件是在路由处理程序之前调用的函数。中间件函数可以访问请求和响应对象，以及应用程序请求-响应循环中的 next() 中间件函数。下一个中间件函数通常用名为 next 的变量来表示。</p><p>中间件功能可执行以下任务：</p><ul><li>执行任何代码。</li><li>更改请求和响应对象。</li><li>结束请求-响应循环。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前中间件函数没有结束请求-响应循环，则必须调用 next() 将控制权传递给下一个中间件函数。否则，请求将被挂起。</li></ul><p><img data-src="https://docs.nestjs.com/assets/Middlewares_1.png" alt="img"></p><p>创建中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerMiddleware</span> <span class="title">implements</span> <span class="title">NestMiddleware</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request...&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承<code>use</code>方法,使用req,res以及next方法.</p><p>使用中间件,使用模块类的 configure() 方法来设置它们。包含中间件的模块必须实现 NestModule 接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoggerMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/middleware/logger.middleware&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> <span class="title">implements</span> <span class="title">NestModule</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>)</span> &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(LoggerMiddleware)</span><br><span class="line">      .forRoutes(<span class="string">&#x27;cats&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现NestModule接口并继承configure方法,使用consumer类</p><p>它提供了多种内置方法来管理中间件。所有这些方法都能以流畅的方式简单地串联起来。forRoutes() 方法可以接受一个字符串、多个字符串、一个 RouteInfo 对象以及controller类.使用consumer应用中间件在路由和controller类上.</p><p>此外也有全局中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.use(logger);</span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="Exception-filtes"><a href="#Exception-filtes" class="headerlink" title="Exception filtes"></a>Exception filtes</h3><p>自带了一堆异常</p><ul><li><code>BadRequestException</code></li><li><code>UnauthorizedException</code></li><li><code>NotFoundException</code></li><li><code>ForbiddenException</code></li><li><code>NotAcceptableException</code></li><li><code>RequestTimeoutException</code></li><li><code>ConflictException</code></li><li><code>GoneException</code></li><li><code>HttpVersionNotSupportedException</code></li><li><code>PayloadTooLargeException</code></li><li><code>UnsupportedMediaTypeException</code></li><li><code>UnprocessableEntityException</code></li><li><code>InternalServerErrorException</code></li><li><code>NotImplementedException</code></li><li><code>ImATeapotException</code></li><li><code>MethodNotAllowedException</code></li><li><code>BadGatewayException</code></li><li><code>ServiceUnavailableException</code></li><li><code>GatewayTimeoutException</code></li><li><code>PreconditionFailedException</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.service.findAll()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(&#123;</span><br><span class="line">      <span class="attr">status</span>: HttpStatus.FORBIDDEN,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&#x27;This is a custom message&#x27;</span>,</span><br><span class="line">    &#125;, HttpStatus.FORBIDDEN, &#123;</span><br><span class="line">      <span class="attr">cause</span>: error</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自己继承HttpException.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ForbiddenException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&#x27;Forbidden&#x27;</span>, HttpStatus.FORBIDDEN);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要更好的控制,可以继承<code>ExceptionFilter</code>使用catch专门处理某些异常.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>(HttpException)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpExceptionFilter</span> <span class="title">implements</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">catch</span>(exception: HttpException, <span class="attr">host</span>: ArgumentsHost) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</span><br><span class="line">    <span class="keyword">const</span> status = exception.getStatus();</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">      .status(status)</span><br><span class="line">      .json(&#123;</span><br><span class="line">        <span class="attr">statusCode</span>: status,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">        <span class="attr">path</span>: request.url,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好filter后进行绑定到某个路由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UseFilters</span>(HttpExceptionFilter)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pipes-and-guards"><a href="#pipes-and-guards" class="headerlink" title="pipes and guards"></a>pipes and guards</h3><p>pipes 是一个使用 @Injectable() 装饰器注解的类，它实现了 PipeTransform 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Pipe_1.png" alt="img"></p><p>管道用于转换和校验数据.</p><ul><li><code>ValidationPipe</code></li><li><code>ParseIntPipe</code></li><li><code>ParseFloatPipe</code></li><li><code>ParseBoolPipe</code></li><li><code>ParseArrayPipe</code></li><li><code>ParseUUIDPipe</code></li><li><code>ParseEnumPipe</code></li><li><code>DefaultValuePipe</code></li><li><code>ParseFilePipe</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, ParseIntPipe) id: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findOne(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括做数据类型转换的默认值等的pipe,还可以自定义pipe</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个pipe管道都必须实现 transform() 方法以实现 PipeTransform 接口。该方法有两个参数：</p><ul><li>值</li><li>元数据</li></ul><p>数据校验也有很多种方法,下面是最简单的.创建数据类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCatDto</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还可以使用<code>zod</code>第三方库.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save zod</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; PipeTransform, ArgumentMetadata, BadRequestException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ZodSchema  &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ZodValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> schema: ZodSchema</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: unknown, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parsedValue = <span class="built_in">this</span>.schema.parse(value);</span><br><span class="line">      <span class="keyword">return</span> parsedValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&#x27;Validation failed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用 schema.parse() 方法，根据提供的模式验证输入的参数。</p><p>需要执行以下操作才能使用 ZodValidationPipe：</p><ul><li>创建一个 ZodValidationPipe 实例</li><li>在pipe的类构造函数中传递特定于上下文的 Zod 模式</li><li>将pipe绑定到方法</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCatSchema = z</span><br><span class="line">  .object(&#123;</span><br><span class="line">    <span class="attr">name</span>: z.string(),</span><br><span class="line">    <span class="attr">age</span>: z.number(),</span><br><span class="line">    <span class="attr">breed</span>: z.string(),</span><br><span class="line">  &#125;)</span><br><span class="line">  .required();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> CreateCatDto = z.infer&lt;<span class="keyword">typeof</span> createCatSchema&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用pipe</span></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UsePipes</span>(<span class="keyword">new</span> ZodValidationPipe(createCatSchema))</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guard 是一个使用 @Injectable() 装饰器注解的类，它实现了 CanActivate 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Guards_1.png" alt="img"></p><p>guard根据运行时存在的某些条件（如权限、角色、ACL 等），决定路由处理程序是否处理给定请求。这通常被称为授权.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> validateRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个guard都必须实现 canActivate() 函数。该函数应返回一个布尔值，表明当前请求是否被允许。它可以同步或异步（通过 Promise 或 Observable）返回响应。Nest 使用返回值来控制下一步操作.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RolesGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(RolesGuard)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局guard.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalGuards(<span class="keyword">new</span> RolesGuard());</span><br></pre></td></tr></table></figure><h3 id="interceptors"><a href="#interceptors" class="headerlink" title="interceptors"></a>interceptors</h3><p>拦截器是一个使用 @Injectable() 装饰器注解并实现 NestInterceptor 接口的类</p><p><img data-src="https://docs.nestjs.com/assets/Interceptors_1.png" alt="img"></p><p>受面向方面编程（AOP）技术的启发，拦截器具有一系列有用的功能。它们可以</p><ul><li>在方法执行前/后绑定额外逻辑</li><li>转换函数返回的结果</li><li>转换函数抛出的异常</li><li>扩展基本函数行为</li><li>根据特定条件（如缓存目的）完全重写函数</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="title">implements</span> <span class="title">NestInterceptor</span> </span>&#123;</span><br><span class="line">  intercept(context: ExecutionContext, <span class="attr">next</span>: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Before...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定interceptor.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UseInterceptors</span>(LoggingInterceptor)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局拦截器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor());</span><br></pre></td></tr></table></figure><p>自定义装饰器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> User = createParamDecorator(</span><br><span class="line">  <span class="function">(<span class="params">data: unknown, ctx: ExecutionContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> request.user;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@User</span>() user: UserEntity</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="websocket与socket-io"><a href="#websocket与socket-io" class="headerlink" title="websocket与socket.io"></a>websocket与socket.io</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="img"></p><blockquote><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</p><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection open ...&quot;</span>); </span><br><span class="line">  ws.send(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">&quot;Received Message: &quot;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>上面是客户端的写法,服务端可以利用ws<a href="https://github.com/websockets/ws">websockets/ws: Simple to use, blazing fast and thoroughly tested WebSocket client and server for Node.js (github.com)</a>或socket.io库<a href="https://github.com/socketio/socket.io">socketio/socket.io: Realtime application framework (Node.JS server) (github.com)</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入WebSocket模块:</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用Server类:</span></span><br><span class="line"><span class="keyword">const</span> WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化:</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[SERVER] connection()`</span>);</span><br><span class="line">    ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[SERVER] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">        ws.send(<span class="string">`ECHO: <span class="subst">$&#123;message&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`[SERVER] error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>客户端请求既可以在浏览器,也可以使用模块的客户端.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开WebSocket连接后立刻发送一条消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] open()`</span>);</span><br><span class="line">    ws.send(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应收到的消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>WebSocket协议本身不要求同源策略（Same-origin Policy），也就是某个地址为<code>http://a.com</code>的网页可以通过WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送<code>Origin</code>的HTTP头给服务器，服务器可以根据<code>Origin</code>拒绝这个WebSocket请求。所以，是否要求同源要看服务器端如何检查。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> httpServer = createServer();</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">    io.emit(<span class="string">&quot;message&quot;</span>, data); <span class="comment">// 广播消息给所有客户端</span></span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;event&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;receive:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;disconnet&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">httpServer.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 客户端</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.socket.io/4.7.5/socket.io.min.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> message = input.value;</span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">&quot;message&quot;</span>, message);</span></span><br><span class="line"><span class="javascript">        input.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter message&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取某个namespace(跟某个路由类似)下连接的客户端的数量</span></span><br><span class="line"><span class="keyword">const</span> socketCount = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Connected clients:&quot;</span>, socketCount);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(); <span class="comment">// or io(&quot;/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;https://example.com&quot;</span>); <span class="comment">// or io(&quot;https://example.com/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;https://example.com/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;https://example.com/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置cors</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;https://example.com&quot;</span>,</span><br><span class="line">    <span class="attr">allowedHeaders</span>: [<span class="string">&quot;my-custom-header&quot;</span>],</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>socket.io中server,socket都是重要概念,而且socket.io库本身与websocket并不相容.</p><blockquote><p>尽管 Socket.IO 在可能的情况下确实使用 WebSocket 进行传输，但它会在每个数据包中添加额外的元数据。这就是为什么 WebSocket 客户端无法成功连接到 Socket.IO 服务器，而 Socket.IO 客户端也无法连接到纯 WebSocket 服务器。</p></blockquote><p>server可以对应多个namespace和client,掌管多个sockets.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240331182812851.png" alt="image-20240331182812851"></p><p><code>io.of</code>与<code>`io.in</code>分别表示在某个namespace下和某个room或者id的socket</p><p>获取连接的客户端的数目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = io.engine.clientsCount;</span><br><span class="line"><span class="comment">// may or may not be similar to the count of Socket instances in the main namespace, depending on your usage</span></span><br><span class="line"><span class="keyword">const</span> count2 = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br></pre></td></tr></table></figure><p>此外server可以管理rooms,后者相当于隔离.比如下面代码是拉进房间与拉出房间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances join the &quot;room1&quot; room</span></span><br><span class="line">io.socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room join the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsJoin([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace join the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsJoin(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances leave the &quot;room1&quot; room</span></span><br><span class="line">io.socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room leave the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsLeave([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace leave the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsLeave(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><p>下面是关闭socket连接以及获取对应的socket.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances disconnect</span></span><br><span class="line">io.disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room disconnect (and discard the low-level connection)</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).disconnectSockets(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace disconnect</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(theSocketId).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(theSocketId).fetchSockets();</span><br></pre></td></tr></table></figure><p>serverSideEmit允许向集群中的其他 Socket.IO 服务器发出事件(多server中)(需要配置adapter)</p><p>socket可以<code>emit</code>,<code>join</code>,<code>leave</code>以及<code>disconnet</code>等操作,属性包括id,handshake(包含头,客户端地址等重要信息),rooms以及包含的数据. 它是与客户端交互的基本类。它继承了 Node.js EventEmitter 的所有方法，如 emit、on、once 或 removeListener。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: <span class="comment">/* the headers of the initial request */</span></span><br><span class="line">  query: <span class="comment">/* the query params of the initial request */</span></span><br><span class="line">  auth: <span class="comment">/* the authentication payload */</span></span><br><span class="line">  time: <span class="comment">/* the date of creation (as string) */</span></span><br><span class="line">  issued: <span class="comment">/* the date of creation (unix timestamp) */</span></span><br><span class="line">  url: <span class="comment">/* the request URL string */</span></span><br><span class="line">  address: <span class="comment">/* the ip of the client */</span></span><br><span class="line">  xdomain: <span class="comment">/* whether the connection is cross-domain */</span></span><br><span class="line">  secure: <span class="comment">/* whether the connection is secure */</span></span><br><span class="line">&#125;</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt; &#125;</span></span><br><span class="line">  socket.join(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt;, &quot;room1&quot; &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// server A</span></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.data.username = <span class="string">&quot;alice&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// server B</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"><span class="built_in">console</span>.log(sockets[<span class="number">0</span>].data.username); <span class="comment">// &quot;alice&quot;</span></span><br></pre></td></tr></table></figure><p>客户端使用对应的库<code>`socket.io-client</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span><br><span class="line">  socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = input.value;</span><br><span class="line">    socket.emit(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    input.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Hapi.js,Adonis.js,Egg.js等等,不过基本逻辑都一样了.让我推荐的话,还是express,大型的上nest.js. 还要说一句,js的后端框架中文文档质量还有待提升,其实包括英文文档看起来还是有点老旧.</p><p>Python的Web术语里面还是讲视图views,模型models,urls这种的(受Django,Flask的影响?),而Node这边后端框架还是在说路由这种.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题网站总结</title>
    <link href="https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-30T04:40:59.000Z</published>
    <updated>2024-03-31T07:34:08.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.<br><span id="more"></span></p><h2 id="工作刷题型"><a href="#工作刷题型" class="headerlink" title="工作刷题型"></a>工作刷题型</h2><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><p>用的最多,我个人感觉不用纠结用.cn还是.com的,也有周赛和企业题</p><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a>牛客网</h3><p>更加本土化,本地企业的题库更多吧</p><h2 id="学习型"><a href="#学习型" class="headerlink" title="学习型"></a>学习型</h2><h3 id="codewars"><a href="#codewars" class="headerlink" title="codewars"></a>codewars</h3><p>我个人比较喜欢的网站,适合练练手,题倒是不难.</p><p><img data-src="https://s2.loli.net/2024/03/30/ewEQhUAfYzPDgyi.png" alt="image-20240330160405991"></p><h3 id="hackerrank"><a href="#hackerrank" class="headerlink" title="hackerrank"></a>hackerrank</h3><p>有各种技能的练习,也有不同层次的练习题.看个人爱好了.</p><h2 id="竞赛型"><a href="#竞赛型" class="headerlink" title="竞赛型"></a>竞赛型</h2><p>下面就是动真格的了</p><h3 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h3><p><img data-src="https://s2.loli.net/2024/03/30/wK2Lj76fsRHQcNM.png" alt="image-20240330161209680"></p><h3 id="Topcoder"><a href="#Topcoder" class="headerlink" title="Topcoder"></a>Topcoder</h3><p>这个平台与其说拿来刷题,不如拿来赚钱.</p><p><img data-src="https://s2.loli.net/2024/03/30/PF2gaYGQUVqrdnD.png" alt="image-20240330161514807"></p><h3 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder"></a>Atcoder</h3><p><img data-src="https://s2.loli.net/2024/03/30/vjXfSmzR4l9QsKd.png" alt="image-20240330161747680" style="zoom:50%;" /></p><p>从难度上说相比cf更适合新手了.</p><p><a href="https://www.cnblogs.com/wawcac-blog/articles/12245307.html">一种程序设计竞赛的训练方法（译） - wawcac - 博客园 (cnblogs.com)</a></p><h2 id="练习语言"><a href="#练习语言" class="headerlink" title="练习语言"></a>练习语言</h2><h3 id="python-type-challenge"><a href="#python-type-challenge" class="headerlink" title="python-type-challenge"></a>python-type-challenge</h3><p><a href="https://github.com/laike9m/Python-Type-Challenges">laike9m/Python-Type-Challenges: Master Python typing (type hints) with interactive online exercises! (github.com)</a></p><p>python的typing不如ts,但是合适的使用一些效果还是不错的.</p><h3 id="type-challenges"><a href="#type-challenges" class="headerlink" title="type-challenges"></a>type-challenges</h3><p><img data-src="https://s2.loli.net/2024/03/30/f4CrVLp8lKYXjEi.png" alt="image-20240330160751891" style="zoom:50%;" /></p><p>练习ts的typing,</p><p>解析<a href="https://blog.maxiaobo.com.cn/type-challenge/dist/">关于本文档 | TS 类型挑战通关手册 (maxiaobo.com.cn)</a></p><h3 id="type-hero"><a href="#type-hero" class="headerlink" title="type-hero"></a>type-hero</h3><p>同上,练习ts的typing,但是题目不一样.</p><p>除了上面之外其实还有很多OJ网站,但是我想这么多也没必要一一列举.</p><p>目前我个人常用的就是Leetcode刷题,Codewars随便练练手以及Codeforces去观摩大佬.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python的Web框架比较</title>
    <link href="https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/"/>
    <id>https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/</id>
    <published>2024-03-27T14:22:39.000Z</published>
    <updated>2024-06-01T06:07:27.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把<strong>框架</strong>(framework)与<strong>库</strong>(library)区分一下.<br><span id="more"></span></p><p>之前我也写过(或者说想过)一些类似生态以及作用的框架进行比较,大多都是看看网上评价以及star数,现在我想大概使用以下感受一下氛围,毕竟现在找工作一般也不会强调用python的web(事实上python的web确实要比Java的生态啥的要差).</p><p>根据github的star与网上观察,我对Django,Flask,FastAPI,Tornado,Sanic上手浅尝一下,毕竟其他框架还不到10k star,未来可期.</p><p>首先使用Python开发web的主要目的还是开发效率高,可用的第三方库可以说是数一<del>数二</del>,而web框架本身很多时候就是在传参CRUD搞来搞去,所以相关生态和社区活跃度应该是最重要的因素之一了.这也是我选择star数高的框架原因,我看见有些推荐的某些框架已经几年没有新的commit了,所以现在趁着有空看看目前Python web情况.另外可以订阅<a href="https://pycoders.com/">PyCoder’s Weekly | A Weekly Python Email Newsletter (pycoders.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/28/1VRMny34mdt9b6f.png" alt="image-20240328234239085"></p><p><img data-src="https://i.imgur.com/7paYgeL.jpg" alt="img"></p><p>扎心了….2015年的回答,还是很领先的.所以Python的强项还是偏计算,做一些有效的上层的应用.或者去研究一下CPython做东西.</p><p>而目前Flask,Django都已支持异步网络模型,所以做个小项目应该是没啥差别的.以下使用poetry管理包环境.</p><p><img data-src="https://s2.loli.net/2024/03/29/PMb2aJfliZdmTH8.png" alt="image-20240329235216575"></p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p><a href="https://docs.djangoproject.com/zh-hans/5.0/intro/overview/">初识 Django | Django 文档 | Django (djangoproject.com)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry add django</span><br><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建项目,一个项目下有很多应用.</p><blockquote><p>一个 Python 包 —— 即一个代码目录 — 它包含 Django 的一个实例中所有的设置。这包括数据库配置，Django 的特定选项和特定应用程序设置</p></blockquote><p>文件结构如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.<span class="keyword">py</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">        settings.<span class="keyword">py</span></span><br><span class="line">        urls.<span class="keyword">py</span></span><br><span class="line">        asgi.<span class="keyword">py</span></span><br><span class="line">        wsgi.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>在<code>views.py</code>中创建<strong>视图</strong>,在创建<code>urls.py</code>作为url配置进行映射,然后在mysite/urls.py创建urlpatterns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>作为web框架需要思考的几个问题就是 数据库的CRUD,在Django的setting.py下修改相关配置.比如配置数据库的连接以及账户,密码等信息.此外这个文件中还有一些默认安装的应用,这些应用有些也会创建数据表在使用之前需要在数据库中创建一些表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p>许多web框架都强调这一点,然而模型到底是什么？<code>数据库结构设计和附加的其它元数据</code></p><blockquote><p>一个模型就是单个定义你的数据的信息源。模型中包含了不可缺少的数据区域和你存储数据的行为。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>创建好后就能直接使用django提供的工具,先创建python写的sql语句,再利用语句创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>我这里使用默认的sqlite数据库,还是很方便的.</p><p><img data-src="https://s2.loli.net/2024/03/29/HThLi4fXlgpUcsu.png" alt="image-20240329200022851"></p><p>当然定义里模型之后还要激活模型才能创建迁移语句.激活语句就是在setting.py中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;polls.apps.PollsConfig&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>还可以进shell,通过创建的models直接进行添加字段.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>也就是直接利用继承了models.Model的python对象操作数据库字段.</p><p>此外还可以创建超级用户通过web修改.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>还需要在admin.py中注册一下可以在管理员中查看.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>Django把对于request的相应叫做views,本身它也有个貌似叫做MVT的概念?其实跟MVC差不多,model,view以及template.这些概念其实早就在其它语言的web框架深深渗透了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;ans&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure><p>再在urls中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&quot;what&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>视图可以从数据库里读取记录，可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的），可以生成一个 PDF 文件，可以输出一个 XML，创建一个 ZIP 文件，你可以做任何你想做的事，使用任何你想用的 Python 库。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用一个模板作为视图的返回值.可以看到setting中的设置</p><p>在视图中,可以使用HttpResponse和template.render返回html,或者是直接使用render.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><blockquote><p>载入模板，填充上下文，再返回由它生成的 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 对象」是一个非常常用的操作流程。于是 Django 提供了一个快捷函数，用它来重写 <code>index()</code> 视图</p></blockquote><p>可以抛出404错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>传入参数可供模板调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还能使用urls.py中的name修改模板中的硬编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>这里模板中使用<code>&#123;% url 'detail'%&#125;</code>就表示</p><p>还可以给url名称添加命名空间.为了避免多个应用views冲突.在urls.py中添加app.name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>HttpResponseRedirect</code>的<code>`reverse()</code>的函数构造URL字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure><p>使用通用视图,通用视图将常见的模式抽象到了一个地步，以至于你甚至不需要编写 Python 代码来创建一个应用程序。例如，<a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.list.ListView"><code>ListView</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.detail.DetailView"><code>DetailView</code></a> 通用视图分别抽象了 “显示对象列表” 和 “显示特定类型对象的详细页面” 的概念。</p><blockquote><p>这些视图反映基本的网络开发中的一个常见情况：<strong>根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做 “通用视图” 系统</strong>。</p></blockquote><p>使用通用视图需要修改urlconf和视图.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = &quot;polls&quot;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&quot;&quot;, views.IndexView.as_view(), <span class="type">name</span>=&quot;index&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/&quot;, views.DetailView.as_view(), <span class="type">name</span>=&quot;detail&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/results/&quot;, views.ResultsView.as_view(), <span class="type">name</span>=&quot;results&quot;),</span><br><span class="line">    path(&quot;&lt;int:question_id&gt;/vote/&quot;, views.vote, <span class="type">name</span>=&quot;vote&quot;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是使用改好的通用视图跟url配对.对于ListView和DetailView不太一样,ListView的context命名是<model_name>_list,所以需要使用<code>context_object_name</code>,而DetailView默认是<model_name></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">generic.ListView</span>):</span></span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/results.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="comment"># same as above, no changes needed.</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>视图中配置好模板,模型还可以修改传入的context变量名字<code>context_object_name</code></p><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionModelTests</span>(<span class="params">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">        is in the future.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py test polls</span><br></pre></td></tr></table></figure><p>在模板中使用静态文件,默认目录是<code>static</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外我们还可以修改Django后台的表单和界面等.</p><p><a href="https://djangopackages.org/">Django Packages : Reusable apps, sites and tools directory for Django</a></p><p>可以看到django不愧是python内活跃度和生态数一数二的框架了,快速开发还是很方便的,内置了很多东西,不只是单纯的restfulAPI.当然Django也有个rest framework<a href="https://www.django-rest-framework.org/">Home - Django REST framework (django-rest-framework.org)</a>更加适合写API</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>相比于Django,Flask更偏向单纯写API,插件生态没有Django多,数据库一般使用sqlalchemy.</p><p>但是Flask包括了html模板,路由,静态文件,sessions应该有的功能.我也拿它写个小web程序,这里不赘述了.<a href="https://proanimer.com/arxiv/result">论文查 (proanimer.com)</a></p><p><a href="https://github.com/drowning-in-codes/paper-reader">drowning-in-codes/paper-reader (github.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/29/DEFAU7eBNqKTmnX.png" alt="image-20240329225756697"></p><p>上面这两个框架用于生产环境时还需要使用WSGI服务器,比如uWSGI,gunicorn等.</p><h3 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h3><p>很火的异步web框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install <span class="string">&quot;uvicorn[standard]&quot;</span></span><br></pre></td></tr></table></figure><p>看看下面基本示例,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>写法还是很朴素的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你的代码里会出现 async / await，请使用 async def：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>特点包括:异步(Starlette支持),数据验证Pydantic,交互式文档(使用swagger UI生成)</p><p>很容易上手学习,官方推荐数据库ORM也是SQLAlchemy.</p><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.Event().wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>也是异步框架,适合websockets等.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure><p>我看了一下文档,感觉不是很好上手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()    </span><br></pre></td></tr></table></figure><p>Tornado 大致可分为四个主要部分：</p><ul><li>Web框架（包括 <a href="https://www.osgeo.cn/tornado/web.html#tornado.web.RequestHandler"><code>RequestHandler</code></a> 它是创建Web应用程序和各种支持类的子类）。</li><li>HTTP的客户端和服务器端实现 (<a href="https://www.osgeo.cn/tornado/httpserver.html#tornado.httpserver.HTTPServer"><code>HTTPServer</code></a> 和 <a href="https://www.osgeo.cn/tornado/httpclient.html#tornado.httpclient.AsyncHTTPClient"><code>AsyncHTTPClient</code></a> ）</li><li>包含类的异步网络库 <a href="https://www.osgeo.cn/tornado/ioloop.html#tornado.ioloop.IOLoop"><code>IOLoop</code></a> 和 <a href="https://www.osgeo.cn/tornado/iostream.html#tornado.iostream.IOStream"><code>IOStream</code></a> 作为HTTP组件的构建块，也可以用于实现其他协议。</li><li>协作程序库 (<a href="https://www.osgeo.cn/tornado/gen.html#module-tornado.gen"><code>tornado.gen</code></a> ）它允许异步代码以比链接回调更简单的方式写入。这类似于Python3.5中引入的本地协同工作特性。</li></ul><h3 id="Sanic"><a href="#Sanic" class="headerlink" title="Sanic"></a>Sanic</h3><p>我第一次看到是一个开源项目再用,目前更新还是比较频繁的.可以说是除了FastAPI最有前途的了.</p><p><img data-src="https://s2.loli.net/2024/03/29/y8Uda4LGTKlDkXM.png" alt="image-20240329231255284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sanic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;MyHelloWorldApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官网的文档也强调了其关注performance,flexibility和易于使用.我觉得这些跟python比较契合.</p><p>连接数据库,app注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">attach_db</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    app.ctx.db = Database()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># app registry 相当于在一个地方给它挂Sanic上</span></span><br><span class="line"><span class="comment"># ./path/to/server.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/somewhere_else.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic.get_app(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">app = Sanic(<span class="string">&#x27;myapp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config.DB_NAME = <span class="string">&#x27;appdb&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;DB_USER&#x27;</span>] = <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line"></span><br><span class="line">db_settings = &#123;</span><br><span class="line">    <span class="string">&#x27;DB_HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_NAME&#x27;</span>: <span class="string">&#x27;appdb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_USER&#x27;</span>: <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">app.config.update(db_settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/server.py 工厂模式得到app并使用sanic path.to.server:create_app运行</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> .path.to.config <span class="keyword">import</span> MyConfig</span><br><span class="line"><span class="keyword">from</span> .path.to.some.blueprint <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">config=MyConfig</span>) -&gt; Sanic:</span></span><br><span class="line">    app = Sanic(<span class="string">&quot;MyApp&quot;</span>, config=config)</span><br><span class="line">    app.blueprint(bp)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>handlers,request,response等都是老话了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/foo&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo_handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;I said foo!&quot;</span>)</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/typed&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">typed_handler</span>(<span class="params">request: Request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&#x27;OK&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Sanic提供了Listener,看起来像在生命周期内添加hook.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.reload_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">reload_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; reload_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.main_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; main_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">before_start</span>(<span class="params">*_</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; before_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_1</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_2</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_3</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_4</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_5</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_6</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_7</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_8</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_8&quot;</span>)</span><br></pre></td></tr></table></figure><p>Sanic跟Flask一样提供了蓝图.</p><blockquote><p>蓝图是一种可用于应用程序内子路由的对象。蓝图定义了用于添加路由的类似方法，而不是将路由添加到应用程序实例中，然后以灵活和可插拔的方式将路由注册到应用程序中。</p><p>蓝图对大型应用程序尤其有用，因为在大型应用程序中，应用程序逻辑可被分解为多个组或责任区。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./my_blueprint.py</span></span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">bp = Blueprint(<span class="string">&quot;my_blueprint&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">bp_root</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> json(&#123;<span class="string">&quot;my&quot;</span>: <span class="string">&quot;blueprint&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> my_blueprint <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.blueprint(bp)</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Starlette,Quart,Falcon等异步网络框架(其实没必要这么强调异步).但鉴于还没有那么多生态就先不品鉴了.</p><p>后面有空应该还会品鉴一下Node的后端框架,比如koa,express,nest等.PHP框架还有Laravel,Sympfony,ThinkPHP以及基于Swoole,workerman的hyperf<a href="https://hyperf.wiki/2.0/#/">Hyperf</a>,webman框架等等,不过我可能更看好Laravel(不用太在意其性能).除了这些语言,Java,C#,Go就是Web常客了(不过.Net发展有点曲折),它们的web框架比较集中也成熟,工作上也用得很多.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把&lt;strong&gt;框架&lt;/strong&gt;(framework)与&lt;strong&gt;库&lt;/strong&gt;(library)区分一下.&lt;br&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://www.sekyoro.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt变天了?了解Qt6相关技术</title>
    <link href="https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</id>
    <published>2024-03-24T10:37:06.000Z</published>
    <updated>2024-03-27T12:14:10.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.<br><span id="more"></span></p><p>目前跨平台的解决方案还是琳琅满目,但其中比较成熟的开发效率不低的,网上教程多的又成了凤毛麟角.让我说的话,有Flutter,.Net MAUI以及Qt等等</p><p>Flutter就不多提了,我是最推荐这个的.</p><p>.Net相关项目在微软操持下,生不如死.最成熟的是WPF本身不支持跨平台,此外的Avalonia,Uno等跨平台并不是微软首推. 微软目前首推MAUI与Blazor,后者是Web框架,此外还有UWP的继任者WinUI3目前也不成熟(其目的应该是占据WPF的部分市场).<a href="https://www.cnblogs.com/duwenlong/p/17462010.html">聊聊MAUI、WinUI3和WPF的优势及劣势 - 杜文龙 - 博客园 (cnblogs.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/25/6WmE12y9JhZRXaO.png" alt="image-20240325123001580"></p><p><img data-src="https://github.com/robloo/PublicDocs/raw/master/XAMLFrameworkEvolution.png?raw=true" alt="img"></p><p>此外还有移动端跨平台的React Native,Jetpack Compose(Compose Multiplatform)等等,桌面应用还有Electron,Tauri(目前也能在移动端使用)等,国内生态下还有微信小程序,Uniapp,Taro等.</p><p><img data-src="https://s2.loli.net/2024/03/25/V3DjN1wpYhmUSZF.png" alt="image-20240325123020037"></p><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose?hl=zh-cn">Jetpack Compose</a> 是一款新型工具包，旨在帮助简化界面开发。该工具包将响应式编程模型与简洁易用的 Kotlin 编程语言相结合，并采用完全声明式的代码编写方式，让您可以通过调用一系列函数来描述界面，这些函数会将数据转换为界面层次结构。当底层数据发生变化时，框架会自动重新执行这些函数，为您更新界面层次结构。简单来说,包括Flutter,这些都是使用代码声明UI的,而.Net下许多UI框架使用xaml,这与之前的安卓开发类似.</p></blockquote><p>上面说了这么多,做技术选型来个总结的话,当然首先需要顾及团队人员,最好结合工期和团队技术栈选择.如果是个人开发者,由于目前Flutter对web和桌面支持还是不太成熟,我个人其实想推荐.Net的技术,或者你也可以考虑Electron做桌面(强调软件性能或者容错性考虑WPF,Qt等),移动端用Flutter或React Native(Compose目前跨平台也不太成熟,如果只考虑安卓可以试试)</p><p>而今天要谈到的Qt,在工业领域用得多,感觉还是因为历史沉淀.这几天看了Qt官网,其推出了Design Studio软件,Qt Creator貌似也支持了AI辅助编码,说明还是跟上了潮流,而Qt6的优势就是跟Qt quick更好结合了.目前下载Qt也不像之前那么麻烦,现在用一个unified-downloader联网下载以及后续更新就行了.</p><h2 id="新的Qt"><a href="#新的Qt" class="headerlink" title="新的Qt"></a>新的Qt</h2><p>Qt主要还是在桌面、嵌入式多,但其实移动端也可以,相信其跨平台能力.Qt6与Qt5基本可以无缝转换.</p><blockquote><p>Qt 6 is highly compatible with <a href="https://doc.qt.io/qt-5.15/">Qt 5</a>. Developers of Qt 5 applications can move seamlessly to Qt 6 while retaining the applications’ functionality.</p></blockquote><p><img data-src="https://s2.loli.net/2024/03/25/b8UsBofHexM9gZ6.png" alt="image-20240325132130083"></p><p>Qt目前提供了设计,开发,测试和优化的工具,主要使用前两者即可.</p><h3 id="对于UI设计"><a href="#对于UI设计" class="headerlink" title="对于UI设计"></a>对于UI设计</h3><p><img data-src="https://doc.qt.io/qtcreator/images/qtcreator-project-qt-quick.webp" alt="{New Project dialog}"></p><p>如果想要在移动端或者需要丝滑的动画,那就用Qt Quick.可以使用Qt Design Studio辅助设计.</p><p><img data-src="https://s2.loli.net/2024/03/25/9nFhjdfoMGsXUyV.png" alt="image-20240325143557948"></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="title">Rectangle</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> page</span></span><br><span class="line">    <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="string">&quot;#ffffff&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用qml描述界面</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> todayTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> thisWeekTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> laterTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">Column</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> column</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">spacing</span>: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> todayTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: <span class="number">180</span></span><br><span class="line">            <span class="attribute">listModel</span>: todayTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Today&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: todayTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> thisWeekTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y - <span class="number">60</span></span><br><span class="line">            <span class="attribute">listModel</span>: thisWeekTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;This week&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: thisWeekTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> laterTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y</span><br><span class="line">            <span class="attribute">listModel</span>: laterTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Later&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: laterTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我在使用的时候感觉很像安卓的compose或者WPF的xaml开发,也是声明式,Flutter也是声明式,这可能就是趋势吧.类似js通过findelementById再到React,Vue的声明式UI.</p><h3 id="使用QtWidget"><a href="#使用QtWidget" class="headerlink" title="使用QtWidget"></a>使用QtWidget</h3><p><img data-src="https://doc.qt.io/qt-6/images/notepad2.png" alt="&quot;Qt Creator New Project dialog&quot;"></p><p><img data-src="https://doc.qt.io/qt-6/images/qtdesigner.png" alt="&quot;Qt Designer opened from Qt Creator&quot;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;notepad.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Notepad w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用QtWidget是传统开发方式,这里就不赘述了.</p><p>目前我在Qt官网以及开发工具上找到了一堆tutorial,可惜目前没多少时间学习,可以预见的是,虽然Qt在互联网以及开源软件领域基本没什么市场占有率(目前被Web技术占着,要么就是Flutter或者.Net),但是在使用c++比较多的工业领域或是使用Python进行Qt开发应该是一个技术上不错的选择了.比如下面代码就是用python执行qml.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtGui <span class="keyword">import</span> QGuiApplication</span><br><span class="line"><span class="keyword">from</span> PySide6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line">QML = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import QtQuick</span></span><br><span class="line"><span class="string">import QtQuick.Controls</span></span><br><span class="line"><span class="string">import QtQuick.Layouts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Window &#123;</span></span><br><span class="line"><span class="string">    width: 300</span></span><br><span class="line"><span class="string">    height: 200</span></span><br><span class="line"><span class="string">    visible: true</span></span><br><span class="line"><span class="string">    title: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    readonly property list&lt;string&gt; texts: [&quot;Hallo Welt&quot;, &quot;Hei maailma&quot;,</span></span><br><span class="line"><span class="string">                                           &quot;Hola Mundo&quot;, &quot;Привет мир&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function setText() &#123;</span></span><br><span class="line"><span class="string">        var i = Math.round(Math.random() * 3)</span></span><br><span class="line"><span class="string">        text.text = texts[i]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ColumnLayout &#123;</span></span><br><span class="line"><span class="string">        anchors.fill:  parent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Text &#123;</span></span><br><span class="line"><span class="string">            id: text</span></span><br><span class="line"><span class="string">            text: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        Button &#123;</span></span><br><span class="line"><span class="string">            text: &quot;Click me&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">            onClicked:  setText()</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QGuiApplication(sys.argv)</span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line">    engine.loadData(QML.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> engine.rootObjects():</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    exit_code = app.<span class="built_in">exec</span>()</span><br><span class="line">    <span class="keyword">del</span> engine</span><br><span class="line">    sys.exit(exit_code)</span><br></pre></td></tr></table></figure><p>下面是常见的用python写qtwidget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PySide6 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.hello = [<span class="string">&quot;Hallo Welt&quot;</span>, <span class="string">&quot;Hei maailma&quot;</span>, <span class="string">&quot;Hola Mundo&quot;</span>, <span class="string">&quot;Привет мир&quot;</span>]</span><br><span class="line"></span><br><span class="line">        self.button = QtWidgets.QPushButton(<span class="string">&quot;Click me!&quot;</span>)</span><br><span class="line">        self.text = QtWidgets.QLabel(<span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">                                     alignment=QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        self.layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        self.layout.addWidget(self.text)</span><br><span class="line">        self.layout.addWidget(self.button)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.magic)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.Slot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magic</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.text.setText(random.choice(self.hello))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication([])</span><br><span class="line"></span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    widget.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></table></figure><p>目前QtWidget与Qt quick没有绝对优劣,官网也是推荐在使用动画和移动端触摸时使用qml,事实上这两者也可以结合使用. 而安卓方面Compose已经成了趋势,但传统xml开发也需要掌握用来维护旧项目以及新项目缺少的组件.</p><p>其他技术可以看看这篇文章总结得不错<a href="https://zhuanlan.zhihu.com/p/547806659">桌面软件开发框架大赏 - 知乎 (zhihu.com)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.&lt;br&gt;</summary>
    
    
    
    
    <category term="技术栈" scheme="https://www.sekyoro.top/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
</feed>
