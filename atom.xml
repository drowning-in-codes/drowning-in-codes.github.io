<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sekyoro的博客小屋</title>
  
  
  <link href="https://www.sekyoro.top/atom.xml" rel="self"/>
  
  <link href="https://www.sekyoro.top/"/>
  <updated>2023-01-24T05:26:11.614Z</updated>
  <id>https://www.sekyoro.top/</id>
  
  <author>
    <name>Sekyoro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闲置服务器BT下载影视</title>
    <link href="https://www.sekyoro.top/2023/01/23/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8BT%E4%B8%8B%E8%BD%BD%E5%BD%B1%E8%A7%86/"/>
    <id>https://www.sekyoro.top/2023/01/23/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8BT%E4%B8%8B%E8%BD%BD%E5%BD%B1%E8%A7%86/</id>
    <published>2023-01-23T13:38:55.000Z</published>
    <updated>2023-01-24T05:26:11.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>利用闲置服务器通过BT SSR下载动漫,并通过filebrowser浏览下载.<br><span id="more"></span></p><h2 id="FileBrowser"><a href="#FileBrowser" class="headerlink" title="FileBrowser"></a>FileBrowser</h2><blockquote><p>filebrowser 是一个使用go语言编写的软件，功能是可以通过浏览器对服务器上的文件进行管理。可以是修改文件，或者是添加删除文件，甚至可以分享文件，是一个很棒的文件管理器，你甚至可以当成一个网盘来使用。</p></blockquote><p>在网站上下载压缩包后并解压.</p><p><a href="https://github.com/filebrowser/filebrowser">filebrowser/filebrowser: 📂 Web File Browser (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf linux-amd64-filebrowser.tar.gz</span><br><span class="line">CHANGELOG.md</span><br><span class="line">LICENSE</span><br><span class="line">README.md</span><br><span class="line">filebrowser</span><br></pre></td></tr></table></figure><p>直接运行程序,默认端口在8080</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ./filebrowser</span><br><span class="line">15:22:42 No config file used</span><br><span class="line">15:22:42 Listening on 127.0.0.1:8080</span><br></pre></td></tr></table></figure><p>一般都需要更改这个默认端口,可以先找到其db配置文件.</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>你可以直接通过命令参数filebrowser 后接参数设置,这里我推荐设置db文件.</p><p><img data-src="http://cdn.sekyoro.top/imgs/23/0120230123235939.png" alt="image-20230123221036526" style="zoom:80%;" /></p><p>默认配置文件在上面三个目录下你可以依次找看有没有.db文件,如果没有可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebrowser config init</span><br></pre></td></tr></table></figure><p>新建文件,然后通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebrowser config cat</span><br></pre></td></tr></table></figure><p>查看设置</p><p><img data-src="http://cdn.sekyoro.top/imgs/23/0120230123235942.png" alt="image-20230123221243713" style="zoom:67%;" /></p><p>我们可以通过filebrowser config set -p 9200设置运行端口为9200.</p><h3 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h3><p>开启后注意在服务器商那,比如腾讯云,阿里云拿<strong>设置安全组</strong>开通这个端口,允许外网访问,<strong>同时</strong>还要在服务器这开启端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9201/tcp --permanent</span><br></pre></td></tr></table></figure><p>同时最好重启一下防火墙服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>进入目录/lib/systemd/system,可以新建filebrowser.service或者下载一个类似的文件.</p><p><img data-src="http://cdn.sekyoro.top/imgs/23/0120230123235958.png" alt="image-20230123222348866"></p><p>写入以上内容,主要设置-d 配置刚才的db文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebrowser.service</span><br></pre></td></tr></table></figure><p>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> filebrowser.service</span><br></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status filebrowser.service</span><br></pre></td></tr></table></figure><p>查看运行状态</p><p><img data-src="http://cdn.sekyoro.top/imgs/23/0120230123235947.png" alt="image-20230123223854973"></p><p>然后打开你的网站,即公网ip+port,打开后类似如下图</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000007.png" alt="image-20230123222855110" style="zoom:80%;" /></p><p>可以在设置页面设置一些选项.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000010.png" alt="image-20230123222951056" style="zoom:67%;" />这样设置后就能访问某个文件夹下的内容了.</p><h2 id="qbtorrent"><a href="#qbtorrent" class="headerlink" title="qbtorrent"></a>qbtorrent</h2><p>qbtorrent下载之前讲过,现在就是需要查看webui,以及放开相应端口,设置后台运行.</p><p>操作跟刚才类似.</p><p>在Centos下下载qb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y qbittorrent-nox</span><br></pre></td></tr></table></figure><p>其他平台类似,当然也可以自己下载包编译安装.</p><p>下载安装后直接运行,默认端口8080</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox</span><br></pre></td></tr></table></figure><h3 id="开启后台运行服务"><a href="#开启后台运行服务" class="headerlink" title="开启后台运行服务"></a>开启后台运行服务</h3><blockquote><p>/usr/lib/systemd/system/目录下，您将找到一个qbittorrent-nox@.service文件。通过运行以下命令，使qbittorrent-nox在启动时自动启动。替换username为您的实际用户名。</p></blockquote><p>可以用whoami命令查看当前用户.</p><p>注意这里的username是您的用户名</p><p>然后开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start qbittorrent-nox@username.service</span><br></pre></td></tr></table></figure><p>开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox@username.service</span><br></pre></td></tr></table></figure><p>在那个目录下可以查看并配置这个服务</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000014.png" alt="image-20230123224137176"></p><p>然后更改端口</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/01image-20230123224224945.png" alt="image-20230123224224945"></p><p>后面设置安全组什么的跟上面类似.</p><p>打开这个端口即可. 默认username:admin  password:adminadmin</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000018.png" alt="image-20230123224318627"></p><p>用户界面</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000026.png" alt="image-20230123224417888" style="zoom:50%;" /></p><h3 id="更改web-ui密码"><a href="#更改web-ui密码" class="headerlink" title="更改web ui密码"></a>更改web ui密码</h3><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000030.png" alt="image-20230123224715884"></p><p>在tools-&gt;options-&gt;web ui中更改语言,验证信息.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000033.png" alt="image-20230123224801908" style="zoom:67%;" /></p><h3 id="设置下载路径"><a href="#设置下载路径" class="headerlink" title="设置下载路径"></a>设置下载路径</h3><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000037.png" alt="image-20230123225109400" style="zoom:67%;" /></p><p>将下载的文件放在filebrowser暴露的文件中,然后最好设置完成后删除torrent节省空间.</p><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><p>注意,截至现在时间qbittorrent版本是4.2.5,其Web UI界面没有RSS订阅功能.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/01image-20230123234248037.png" alt="image-20230123234248037"></p><p>这里我们设置第三方UI增加RSS订阅功能,这样就不用手动加磁力链接了.</p><p>有两种方法,其中一种需要开启HTTPS,懒得去申请了.</p><p>第二种需要下载文件到服务器,下载Release文件并解压.</p><p><a href="https://github.com/CzBiX/qb-web">CzBiX/qb-web: A qBittorrent Web UI, write in TypeScript+Vue. (github.com)</a></p><p>将解压后的文件放在服务器某个位置.</p><p>在设置界面 web UI下文件路径放那个文件的路径,比如 /config/dist. dist就是解压后的文件夹.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000045.png" alt="image-20230123234702168"></p><p>然后打开网页即可.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000048.png" alt="image-20230123234752928" style="zoom:67%;" /></p><p>左侧点击RSS增加RSS功能即可.</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000051.png" alt="image-20230123234823176" style="zoom:67%;" /></p><p>可以结合之前我的文章查看一些RSS订阅源.比如利用蜜柑计划等等…</p><h3 id="部分优化"><a href="#部分优化" class="headerlink" title="部分优化"></a>部分优化</h3><h4 id="增加tracker"><a href="#增加tracker" class="headerlink" title="增加tracker"></a>增加tracker</h4><p>需要切换到原来的UI</p><p><img data-src="http://cdn.sekyoro.top/imgs/24/0120230124000102.png" alt="image-20230123235226961" style="zoom: 67%;" /></p><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ol><li><a href="https://www.filebrowser.cn/">filebrowser 是一款非常优秀的文件管理工具，并且是跨平台。安装也非常简单，安装后就可以使用，同样使用也非常的简单。在linux环境中使用的比较多</a></li><li><a href="https://github.com/filebrowser/filebrowser">filebrowser/filebrowser: 📂 Web File Browser (github.com)</a></li><li><a href="https://www.cnblogs.com/webenh/p/13334303.html">File Browser 安装及使用 - WebEnh - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/a5idc/p/13784155.html">如何在CentOS 8 / RHEL 8服务器上安装qBittorrent - A5互联 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.misterma.com/archives/902/">Linux 服务器安装 qBittorrent - Mr. Ma’s Blog (misterma.com)</a></li><li><a href="https://eatash.com/index.php/2021/09/02/qbittorrent这两个-第三方-webui-还不错-geekman/">qbittorrent这两个 第三方 webui 还不错-Geekman | 吃灰网 (eatash.com)</a></li><li><a href="https://www.jianshu.com/p/54a6bf9e5ebe">Docker版qBittorrent或qBittorrent WebUI使用RSS功能 - 简书 (jianshu.com)</a></li><li><a href="https://github.com/CzBiX/qb-web">CzBiX/qb-web: A qBittorrent Web UI, write in TypeScript+Vue. (github.com)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用闲置服务器通过BT SSR下载动漫,并通过filebrowser浏览下载.&lt;br&gt;</summary>
    
    
    
    
    <category term="torrent" scheme="https://www.sekyoro.top/tags/torrent/"/>
    
    <category term="Centos" scheme="https://www.sekyoro.top/tags/Centos/"/>
    
    <category term="filebrowser" scheme="https://www.sekyoro.top/tags/filebrowser/"/>
    
  </entry>
  
  <entry>
    <title>dart学习</title>
    <link href="https://www.sekyoro.top/2023/01/14/dart%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2023/01/14/dart%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-01-14T13:45:23.000Z</published>
    <updated>2023-01-14T14:20:48.628Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>基本就是看看文档,对比学习.注意重点.<br><span id="more"></span></p><blockquote><p>所有变量引用的都是 <strong>对象</strong>，每个对象都是一个 <strong>类</strong> 的实例。数字、函数以及 <code>null</code> 都是对象。除去 <code>null</code> 以外（如果你开启了 <a href="https://dart.cn/null-safety">空安全</a>）, 所有的类都继承于 <a href="https://api.dart.cn/stable/dart-core/Object-class.html"><code>Object</code></a> 类。</p></blockquote><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>Dart 是支持<strong>基于 mixin 继承机制</strong>的面向对象语言，所有对象都是一个类的实例，而除了 <code>Null</code> 以外的所有的类都继承自 <a href="https://api.dart.cn/stable/dart-core/Object-class.html"><code>Object</code></a> 类。 <strong>基于 mixin 的继承</strong> 意味着尽管每个类（<a href="https://dart.cn/null-safety/understanding-null-safety#top-and-bottom">top class</a> <code>Object?</code> 除外）都只有一个超类，一个类的代码可以在其它多个类继承中重复使用。 <a href="https://dart.cn/guides/language/language-tour#extension-methods">扩展方法</a> 是一种在不更改类或创建子类的情况下向类添加功能的方式</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;基本就是看看文档,对比学习.注意重点.&lt;br&gt;</summary>
    
    
    
    
    <category term="dart" scheme="https://www.sekyoro.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>python构建微信公众号文章发表控制台应用</title>
    <link href="https://www.sekyoro.top/2023/01/04/python%E6%9E%84%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E5%8F%91%E8%A1%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BA%94%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2023/01/04/python%E6%9E%84%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E5%8F%91%E8%A1%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BA%94%E7%94%A8/</id>
    <published>2023-01-04T15:41:43.000Z</published>
    <updated>2023-01-08T08:57:32.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用Python构建控制台应用,简单一点.主目的是抓取某个网站图片然后上传到素材.<br><span id="more"></span></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access token"></a>获取access token</h3><p>首先需要知道自己的开发者AppID和开发者密码AppSecret.</p><p>然后获取access token</p><blockquote><p>https请求方式: GET <a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">是否必须</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">grant_type</td><td style="text-align:left">是</td><td style="text-align:left">获取access_token填写client_credential</td></tr><tr><td style="text-align:left">appid</td><td style="text-align:left">是</td><td style="text-align:left">第三方用户唯一凭证</td></tr><tr><td style="text-align:left">secret</td><td style="text-align:left">是</td><td style="text-align:left">第三方用户唯一凭证密钥，即appsecret</td></tr></tbody></table></div><p><strong>返回说明</strong></p><p>正常情况下，微信会返回下述 JSON 数据包给公众号：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;access_token&quot;</span>:<span class="string">&quot;ACCESS_TOKEN&quot;</span>,<span class="attr">&quot;expires_in&quot;</span>:<span class="number">7200</span>&#125;</span><br></pre></td></tr></table></figure><p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为 AppID 无效错误）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;errcode&quot;</span>:<span class="number">40013</span>,<span class="attr">&quot;errmsg&quot;</span>:<span class="string">&quot;invalid appid&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="素材管理"><a href="#素材管理" class="headerlink" title="素材管理"></a>素材管理</h2><h3 id="新增永久素材"><a href="#新增永久素材" class="headerlink" title="新增永久素材"></a>新增永久素材</h3><p>对于常用的素材，开发者可通过本接口上传到微信服务器，永久使用。新增的永久素材也可以在公众平台官网素材管理模块中查询管理。</p><p>通过 POST 表单来调用接口，表单 id 为media，包含需要上传的素材内容，有filename、filelength、content-type等信息。</p><p><strong>请注意：图片素材将进入公众平台官网素材管理模块中的默认分组。</strong>也就是说现在还不支持上传素材时创建分组.不过问题不大,到时候写文章时手动</p><blockquote><p>http请求方式: POST，需使用https <a href="https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=ACCESS_TOKEN&amp;type=TYPE">https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=ACCESS_TOKEN&amp;type=TYPE</a> </p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">是否必须</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">access_token</td><td style="text-align:left">是</td><td style="text-align:left">调用接口凭证</td></tr><tr><td style="text-align:left">type</td><td style="text-align:left">是</td><td style="text-align:left">媒体文件类型，分别有图片（image）、语音（voice）、视频（video）和缩略图（thumb）</td></tr><tr><td style="text-align:left">media</td><td style="text-align:left">是</td><td style="text-align:left">form-data中媒体文件标识，有filename、filelength、content-type等信息</td></tr></tbody></table></div><p>新增永久视频素材需特别注意</p><p>在上传视频素材时需要 POST 另一个表单，id为description，包含素材的描述信息，内容格式为JSON，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:VIDEO_TITLE,</span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span>:INTRODUCTION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">是否必须</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">是</td><td style="text-align:left">视频素材的标题</td></tr><tr><td style="text-align:left">introduction</td><td style="text-align:left">是</td><td style="text-align:left">视频素材的描述</td></tr></tbody></table></div><p>返回说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;media_id&quot;</span>:MEDIA_ID,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:URL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取素材总数"><a href="#获取素材总数" class="headerlink" title="获取素材总数"></a>获取素材总数</h3><p>永久素材的总数，也会计算公众平台官网素材管理中的素材 2.图片和图文消息素材（包括单图文和多图文）的总数上限为100000，其他素材的总数上限为1000 3.调用该接口需 https 协议</p><p>接口调用请求说明</p><blockquote><p>http请求方式: GET <a href="https://api.weixin.qq.com/cgi-bin/material/get_materialcount?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/material/get_materialcount?access_token=ACCESS_TOKEN</a></p></blockquote><h2 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h2><p>requests发送http请求,lxml解析html,tqdm显示进度条.</p><p>主要功能 爬取某个网站的所有图片,将某个文件夹下的图片全部上传.</p><p>一天随便写了写,比较菜还请见谅.</p><h3 id="用户类"><a href="#用户类" class="headerlink" title="用户类"></a>用户类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.access_token = <span class="literal">None</span></span><br><span class="line">        self.__appId = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的appid:&#x27;</span>)</span><br><span class="line">        self.__appSecret = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的appsecret:&#x27;</span>)</span><br><span class="line">        self.logintime = <span class="number">3</span></span><br><span class="line">        self.login()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> self.logintime:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(</span><br><span class="line">                    <span class="string">f&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="subst">&#123;self.__appId&#125;</span>&amp;secret=<span class="subst">&#123;self.__appSecret&#125;</span>&quot;</span>, )</span><br><span class="line">                <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">                    self.access_token = res.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;输入错误!请尝试再次输入,还剩&#x27;</span> + self.logintime + <span class="string">&#x27;次机会&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;错误&#x27;</span>, res.json(), e)</span><br><span class="line">            self.logintime = self.logintime - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就是注册 没什么好说的 可以增加一个错误机会.</p><h3 id="获取图片类"><a href="#获取图片类" class="headerlink" title="获取图片类"></a>获取图片类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__url = <span class="literal">None</span></span><br><span class="line">        self.title = <span class="literal">None</span></span><br><span class="line">        self.__header = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.54&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.filepathList = <span class="built_in">set</span>()</span><br><span class="line">        self.getUpdated()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUpdated</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&#x27;https://www.pixivision.net/zh/c/illustration&#x27;</span></span><br><span class="line">        res = requests.get(url,headers=self.__header)</span><br><span class="line">        selector = etree.HTML(res.text)</span><br><span class="line">        lastUpdatedNumber = selector.xpath(<span class="string">&quot;//li[@class=&#x27;article-card-container&#x27;][1]/article/div[@class=&#x27;arc__thumbnail-container&#x27;]/a[1]/@href&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        lastUpdatedNumber = lastUpdatedNumber.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;最新的图文号为&#x27;</span>,lastUpdatedNumber)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getarticle</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__url = <span class="built_in">input</span>(<span class="string">&#x27;输入网站链接(仅限pixvision:https://www.pixivision.net/zh/a/number):&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.__url.isnumeric():</span><br><span class="line">            self.__url = <span class="string">&#x27;https://www.pixivision.net/zh/a/&#x27;</span> + self.__url</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(self.__url, headers=self.__header)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ProxyError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;网络出现问题&#x27;</span>, e)</span><br><span class="line">            sys.exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;出错&#x27;</span>, e)</span><br><span class="line">            sys.exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        selector = etree.HTML(res.text)</span><br><span class="line">        imgLinks = selector.xpath(</span><br><span class="line">            <span class="string">&quot;////div[@class=&#x27;_feature-article-body&#x27;]/div[@class=&#x27;article-item _feature-article-body__pixiv_illust&#x27;]//div[@class=&#x27;am__work__main&#x27;]//img/@src&quot;</span>)  <span class="comment"># 返回为一列表</span></span><br><span class="line">        self.title = selector.xpath(<span class="string">&quot;//h1[@class=&#x27;am__title&#x27;]/text()&quot;</span>)</span><br><span class="line">        self.download(imgLinks)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, imgLinks</span>):</span></span><br><span class="line">        filepath = <span class="built_in">input</span>(<span class="string">&#x27;输入下载的目录路径(默认F:\公众号\图片):&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;目录输入错误&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        absfilepath = filepath + <span class="string">f&#x27;\\<span class="subst">&#123;self.title&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(absfilepath):</span><br><span class="line">            <span class="comment"># 清空文件夹中的文件</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;清空文件夹中的文件&#x27;</span>)</span><br><span class="line">            del_list = os.listdir(absfilepath)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> del_list:</span><br><span class="line">                file_path = os.path.join(absfilepath, f)</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                    os.remove(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;生成文件夹&#x27;</span>)</span><br><span class="line">            os.mkdir(absfilepath)</span><br><span class="line">        self.filepathList.add(absfilepath)</span><br><span class="line">        self.__header[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://www.pixiv.net/&#x27;</span></span><br><span class="line">        pbar = tqdm.tqdm(imgLinks)</span><br><span class="line">        total = <span class="built_in">len</span>(imgLinks)</span><br><span class="line">        <span class="keyword">for</span> index, link <span class="keyword">in</span> <span class="built_in">enumerate</span>(pbar):</span><br><span class="line">            filename = link.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            pbar.set_description(<span class="string">&quot;正在下载%s,&quot;</span> % filename)</span><br><span class="line">            pbar.set_postfix(&#123;<span class="string">&#x27;current&#x27;</span>: index + <span class="number">1</span>, <span class="string">&#x27;total&#x27;</span>: total&#125;)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(link, headers=self.__header)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(absfilepath + <span class="string">f&#x27;\\<span class="subst">&#123;filename&#125;</span>&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(res.content)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;需要设置代理&#x27;</span>, e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里主要利用xpath解析获取到的网页.</p><h3 id="上传素材类"><a href="#上传素材类" class="headerlink" title="上传素材类"></a>上传素材类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ACCESS_TOKEN, FILEPATHLIST</span>):</span></span><br><span class="line">        self.url = <span class="string">f&#x27;https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=<span class="subst">&#123;ACCESS_TOKEN&#125;</span>&amp;type&#x27;</span> \</span><br><span class="line">                   <span class="string">f&#x27;=image&#x27;</span></span><br><span class="line">        self.filepath = FILEPATHLIST</span><br><span class="line">        self.uploadPics()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uploadPics</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.filepath, <span class="built_in">str</span>):</span><br><span class="line">            self.uploadPic(self.filepath)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> self.filepath:</span><br><span class="line">                self.uploadPic(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uploadPic</span>(<span class="params">self, filepath</span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</span><br><span class="line">            filelist = os.listdir(filepath)</span><br><span class="line">            total = <span class="built_in">len</span>(filelist)</span><br><span class="line">            pbar = tqdm.tqdm(filelist)</span><br><span class="line">            <span class="keyword">for</span> index, f <span class="keyword">in</span> <span class="built_in">enumerate</span>(pbar):</span><br><span class="line">                file_path = os.path.join(filepath, f)</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                        files = &#123;</span><br><span class="line">                            <span class="string">&#x27;media&#x27;</span>: file</span><br><span class="line">                        &#125;</span><br><span class="line">                        res = requests.post(self.url, files=files)</span><br><span class="line">                        pbar.set_description(<span class="string">&#x27;正在上传&#x27;</span> + res.json()[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">                        pbar.set_postfix(&#123;<span class="string">&#x27;current&#x27;</span>: index + <span class="number">1</span>, <span class="string">&#x27;total&#x27;</span>: total&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件夹错误&#x27;</span>, filepath)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:requests上传FormData 需要利用files</p><h3 id="主文件"><a href="#主文件" class="headerlink" title="主文件"></a>主文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> getpic <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> uploadpic <span class="keyword">import</span> upload</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uploadDownloadpic = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;直接上传图片?0表示直接上传,1表示下载\n&#x27;</span>) == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        article = Article()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            article.getarticle()</span><br><span class="line">            doContinue = <span class="built_in">input</span>(<span class="string">&#x27;是否继续下载图片？1表示继续,0表示退出\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> doContinue != <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        uploadDownloadpic = <span class="built_in">input</span>(<span class="string">&#x27;是否上传刚才的图片?1表示是,0表示自己选择\n&#x27;</span>)</span><br><span class="line">    u = User()</span><br><span class="line">    <span class="keyword">if</span> uploadDownloadpic == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        upload(u.access_token, article.filepathList)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        filepath = <span class="built_in">input</span>(<span class="string">&#x27;输入需要上传的文件目录(单个):\n&#x27;</span>)</span><br><span class="line">        upload(u.access_token, filepath)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只是连续写了一会就累了,最近有点忙,利用这个工具上传素材到微信公众号方便水文章.最后可以利用pyinstaller打包</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Python构建控制台应用,简单一点.主目的是抓取某个网站图片然后上传到素材.&lt;br&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://www.sekyoro.top/tags/python/"/>
    
    <category term="wechat" scheme="https://www.sekyoro.top/tags/wechat/"/>
    
    <category term="xpath" scheme="https://www.sekyoro.top/tags/xpath/"/>
    
    <category term="request" scheme="https://www.sekyoro.top/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>构建微信快捷发布文章工具</title>
    <link href="https://www.sekyoro.top/2023/01/04/%E6%9E%84%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%BF%AB%E6%8D%B7%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.sekyoro.top/2023/01/04/%E6%9E%84%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%BF%AB%E6%8D%B7%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%B7%A5%E5%85%B7/</id>
    <published>2023-01-04T09:19:07.000Z</published>
    <updated>2023-01-05T05:26:04.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在使用微信公众号写文章但是每天打开网页太麻烦,而且上传图片文章也麻烦.于是打算自己写个桌面程序.主要使用vue和electron,使用vite构建工具. 长期更新<br><span id="more"></span></p><h2 id="工具的选择"><a href="#工具的选择" class="headerlink" title="工具的选择"></a>工具的选择</h2><p><a href="https://www.bilibili.com/video/BV1FP4115739?p=36&amp;vd_source=177ef88aa6608bc3652c72d71b0aa098">036-Vue3+Electron19项目-1_哔哩哔哩_bilibili</a></p><p>这个视频用了vite构建,比较新.之前我还在用webpack以及vue2. Vite与vue3比较搭.</p><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><p><a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project">开始 | Vite 官方中文文档 (vitejs.dev)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>值得注意的是Vite 需要 <a href="https://nodejs.org/en/">Node.js</a> 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本.当然我这里windows环境下主要利用nvm切换版本到新的.</p><p><img data-src="http://cdn.sekyoro.top/imgs/04/0120230104172727.png" alt="image-20230104172713111"></p><blockquote><p>注意:你可能使用低版本node创建一开始没报错,但后面会出问题.同时使用nvm注意版本问题,我这里使用了旧版本nvm报错unexpected token ‘.’.需要升级nvm<a href="https://blog.csdn.net/weixin_45696837/article/details/127830020">nvm：npm ERR! Unexpected token ‘.‘_爱天蝎的双鱼的博客-CSDN博客</a></p></blockquote><p>主要利用Vite构建</p><h3 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h3><p><a href="https://www.electronjs.org/zh/docs/latest/">简介 | Electron (electronjs.org)</a></p><p>Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。 嵌入 <a href="https://www.chromium.org/">Chromium</a> 和 <a href="https://nodejs.org/">Node.js</a> 到 二进制的 Electron 允许您保持一个 JavaScript 代码代码库并创建 在Windows上运行的跨平台应用 macOS和Linux——不需要本地开发 经验</p><p>同时注意须要electron-builder打包</p><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><p><a href="https://cn.vuejs.org/">Vue.js - 渐进式 JavaScript 框架 | Vue.js (vuejs.org)</a></p><p>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>vite构建时即可选择使用vue.现在已经默认3.x</p><h3 id="Element-plus"><a href="#Element-plus" class="headerlink" title="Element plus"></a>Element plus</h3><p><a href="https://element-plus.org/zh-CN/guide/design.html"><a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus (element-plus.org)</a></a></p><p>基于 Vue 3，面向设计师和开发者的组件库</p><h3 id="其他UI-Bootstrap5"><a href="#其他UI-Bootstrap5" class="headerlink" title="其他UI Bootstrap5"></a>其他UI Bootstrap5</h3><p>也可以使用Bootstrap</p><p>npm导入后需要引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/js/bootstrap.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://v5.bootcss.com/">Bootstrap v5 中文文档 · Bootstrap 是全球最受欢迎的 HTML、CSS 和 JS 前端工具库。 | Bootstrap 中文网 (bootcss.com)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap@5.3.0-alpha1</span><br></pre></td></tr></table></figure><h3 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h3><p><a href="https://jrsoftware.org/isinfo.php">Inno Setup (jrsoftware.org)</a></p><p>用于把生成的exe打包发布,这样就不是光溜溜的一个exe了.</p><p><a href="https://zhuanlan.zhihu.com/p/168690637">Inno Setup使用总结 - 知乎 (zhihu.com)</a></p><h3 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h3><p><a href="https://github.com/Kuari/Blog/issues/53">Vite+Electron快速构建一个VUE3桌面应用(二)——动态模块热重载 · Issue #53 · Kuari/Blog (github.com)</a></p><p>为了使vite和electron正常运行，需要先运行vite，使得其开发服务器的url可以正常访问，然后再开启electron去加载url。</p><p>此处需要安装两个库：</p><ul><li><p><strong>concurrently</strong>：阻塞运行多个命令，<code>-k</code>参数用来清除其它已经存在或者挂掉的进程</p></li><li><p><strong>wait-on</strong>：等待资源，此处用来等待url可访问</p></li><li><p>接着更新文件<code>package.json</code>，<code>scripts</code>新增两条命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;electron&quot;</span>: <span class="string">&quot;wait-on tcp:5173 &amp;&amp; electron .&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;concurrently -k \&quot;yarn dev\&quot; \&quot;yarn electron\&quot;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>start命令就是为了运行vue项目然后等其打开后运行electron.在开发时electron需要加载这个url.</p><p>在目录下创建main.js   加载5173端口 这个端口就是vite打开的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// win.loadFile(&#x27;index.html&#x27;)</span></span><br><span class="line">  win.loadURL(<span class="string">&#x27;http://localhost:5173&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  createWindow()</span><br><span class="line"></span><br><span class="line">  app.on(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) app.quit()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后运行npm run start</p><p><img data-src="http://cdn.sekyoro.top/imgs/04/0120230104222629.png" alt="image-20230104222628604" style="zoom:67%;" /></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/lw001x/article/details/127589755?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~default-6-127589755-blog-128000357.pc_relevant_landingrelevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~ESLANDING~default-6-127589755-blog-128000357.pc_relevant_landingrelevant&amp;utm_relevant_index=7">Vite+Vue+Electron环境搭建_⑥②的博客-CSDN博客_electron vite vue</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在使用微信公众号写文章但是每天打开网页太麻烦,而且上传图片文章也麻烦.于是打算自己写个桌面程序.主要使用vue和electron,使用vite构建工具. 长期更新&lt;br&gt;</summary>
    
    
    
    
    <category term="vue" scheme="https://www.sekyoro.top/tags/vue/"/>
    
    <category term="vite" scheme="https://www.sekyoro.top/tags/vite/"/>
    
    <category term="electron" scheme="https://www.sekyoro.top/tags/electron/"/>
    
    <category term="Bootstrap5" scheme="https://www.sekyoro.top/tags/Bootstrap5/"/>
    
    <category term="wechat" scheme="https://www.sekyoro.top/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>美化github首页</title>
    <link href="https://www.sekyoro.top/2023/01/01/%E7%BE%8E%E5%8C%96github%E9%A6%96%E9%A1%B5/"/>
    <id>https://www.sekyoro.top/2023/01/01/%E7%BE%8E%E5%8C%96github%E9%A6%96%E9%A1%B5/</id>
    <published>2023-01-01T04:48:06.000Z</published>
    <updated>2023-01-01T08:58:49.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>新年到了,新年新气象.美化一下github首页.<br><span id="more"></span></p><p>在几年前Github推出了美化profile的功能,到现在我来体验一下.</p><p>最后成果,比较简单方便.</p><p><img data-src="http://cdn.sekyoro.top/imgs/01/0120230101163704.png" alt="image-20230101163704294" style="zoom:50%;" /></p><p><img data-src="http://cdn.sekyoro.top/imgs/01/0120230101163735.png" alt="image-20230101163735498" style="zoom:50%;" /></p><p><img data-src="http://cdn.sekyoro.top/imgs/01/0120230101163806.png" alt="image-20230101163806235" style="zoom:50%;" /></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>主要流程比较简单,创建一个仓库,仓库的命名需要与自己Github用户名一致.</p><p>这里因为我创建过了所以提示重命名.然后这个仓库需要一个readme.md文件,就是用这个markdown文件来美化主页.重要的是其中显示个人数据的接口.</p><p>这里推荐两个模板生成器,可以看参考资料的前两个.</p><h3 id="github-stats"><a href="#github-stats" class="headerlink" title="github stats"></a>github stats</h3><p>接下来是github stats<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">github-readme-stats/readme_cn.md at master · anuraghazra/github-readme-stats</a></p><p><img data-src="https://camo.githubusercontent.com/8fd2570f103d1aae8a4d8970535274ae19c2ee62587d8868d618be37001263d0/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f616e7572616768617a72612f696d6167652f75706c6f61642f76313539353137343533362f6772732d7468656d65735f6c34796e6a612e706e67" alt="GitHub Readme Stat Themes" style="zoom: 33%;" /></p><blockquote><p>你可以通过使用 URL 参数的方式，为你的 <code>Stats Card</code> 或 <code>Repo Card</code> 自定义样式。</p><p>常用选项：</p><ul><li><code>title_color</code> - 卡片标题颜色 <em>（十六进制色码）</em></li><li><code>text_color</code> - 内容文本颜色 <em>（十六进制色码）</em></li><li><code>icon_color</code> - 图标颜色（如果可用）<em>（十六进制色码）</em></li><li><code>bg_color</code> - 卡片背景颜色 <em>（十六进制色码）</em> <strong>或者</strong> 以 <em>angle,start,end</em> 的形式渐变</li><li><code>hide_border</code> - 隐藏卡的边框 <em>(布尔值)</em></li><li><code>theme</code> - 主题名称，从<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">所有可用主题</a>中选择</li><li><code>cache_seconds</code> - 手动设置缓存头 <em>（最小值: 1800，最大值: 86400）</em></li><li><code>locale</code> - 在卡片中设置语言 <em>(例如 cn, de, es, 等等)</em></li></ul></blockquote><p>同时也有个人常用语言统计</p><p>将此代码复制粘贴到您的 <code>README.md</code> 文件中，并修改链接。</p><p>端点: <code>api/top-langs?username=anuraghazra</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Top Langs</span>](<span class="link">https://github-readme-stats.vercel.app/api/top-langs/?username=anuraghazra</span>)](<span class="link">https://github.com/anuraghazra/github-readme-stats</span>)</span><br></pre></td></tr></table></figure><h3 id="github-stats-1"><a href="#github-stats-1" class="headerlink" title="github stats"></a>github stats</h3><p>然后是个人信息统计,可以利用<a href="https://metrics.lecoq.io/">Metrics (lecoq.io)</a>,只需要输入Github用户名生成个人metrics.</p><p><img data-src="https://camo.githubusercontent.com/b9deb4987189bc5222f2b2fad0c0b461a171abfcaa31ac38006df8db466e4d2f/68747470733a2f2f6d6574726963732e6c65636f712e696f2f64726f776e696e672d696e2d636f6465733f74656d706c6174653d636c617373696326626173653d6865616465722532432532306163746976697479253243253230636f6d6d756e6974792532432532307265706f7369746f726965732532432532306d6574616461746126626173652e696e64657074683d66616c736526626173652e6869726561626c653d66616c736526626173652e736b69703d66616c736526636f6e6669672e74696d657a6f6e653d417369612532465368616e67686169" alt="img" style="zoom:50%;" /></p><h3 id="github-activity-graph"><a href="#github-activity-graph" class="headerlink" title="github activity graph"></a>github activity graph</h3><p>github活动图 也就是显示提交记录的.<a href="https://github.com/Ashutosh00710/github-readme-activity-graph/">Ashutosh00710/github-readme-activity-graph: A dynamically generated activity graph to show your GitHub activities of last 31 days.</a></p><p><img data-src="https://github.com/Ashutosh00710/github-readme-activity-graph/raw/main/asset/default.svg" alt="graph" style="zoom: 33%;" /></p><p>类似的将下面markdown中username改为自己github用户名.    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Ashutosh&#x27;s github activity graph</span>](<span class="link">https://github-readme-activity-graph.cyclic.app/graph?username=Ashutosh00710&amp;theme=dracula</span>)](<span class="link">https://github.com/ashutosh00710/github-readme-activity-graph</span>)</span><br></pre></td></tr></table></figure><h3 id="github-streak"><a href="#github-streak" class="headerlink" title="github streak"></a>github streak</h3><p>显示个人github成就</p><p><a href="https://github.com/DenverCoder1/github-readme-streak-stats">DenverCoder1/github-readme-streak-stats: 🔥 Stay motivated and show off your contribution streak! 🌟 Display your total contributions, current streak, and longest streak on your GitHub profile README</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![GitHub Streak</span>](<span class="link">https://streak-stats.demolab.com/?user=DenverCoder1</span>)](<span class="link">https://git.io/streak-stats</span>)</span><br></pre></td></tr></table></figure><h3 id="Shields（GitHub-徽章）"><a href="#Shields（GitHub-徽章）" class="headerlink" title="Shields（GitHub 徽章）"></a>Shields（GitHub 徽章）</h3><p><img data-src="http://cdn.sekyoro.top/imgs/01/0120230101165219.png" alt="image-20230101165219583" style="zoom:50%;" /></p><p>主要使用<a href="https://shields.io/这个网站生成图标比较简单,可以在外面包裹一个超链接用于跳转">https://shields.io/这个网站生成图标比较简单,可以在外面包裹一个超链接用于跳转</a>.</p><h3 id="Visitor-Badge（GitHub-访客徽章）"><a href="#Visitor-Badge（GitHub-访客徽章）" class="headerlink" title="Visitor Badge（GitHub 访客徽章）"></a>Visitor Badge（GitHub 访客徽章）</h3><p><img data-src="http://cdn.sekyoro.top/imgs/01/01image-20230101165431536.png" alt="image-20230101165431536" style="zoom: 67%;" /></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">visitors</span>](<span class="link">https://visitor-badge.glitch.me/badge?page_id=page.id&amp;left_color=green&amp;right_color=red</span>)</span><br></pre></td></tr></table></figure><p>将page_id替换为用户名即可.</p><p>最后可以看一下我的Github主页<a href="https://github.com/drowning-in-codes">drowning-in-codes (martyr) (github.com)</a>参观,模板生成的也比较简便.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://profilinator.rishav.dev/">Github Profilinator - GitHub Profile README Generator (rishav.dev)</a> 快捷的模板生成器</li><li><a href="https://rahuldkjain.github.io/gh-profile-readme-generator/">GitHub Profile Readme Generator | GitHub Profile Readme Generator (rahuldkjain.github.io)</a> 另一个快捷的模板生成器</li><li><a href="https://zhuanlan.zhihu.com/p/454597068">Github 首页美化教程（一）：打造个性化的GitHub首页</a> 其他教程</li><li><a href="https://sumygg.com/2021/04/25/beautify-your-github-profile-readme/">美化你的Github个人信息页 | SumyBlog (sumygg.com)</a></li><li><a href="https://shields.io/">Shields.io: Quality metadata badges for open source projects</a> 图标</li><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">abhisheknaiidu/awesome-github-profile-readme: 😎 A curated list of awesome GitHub Profile READMEs 📝</a> 优美的github profile案例</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;新年到了,新年新气象.美化一下github首页.&lt;br&gt;</summary>
    
    
    
    
    <category term="github" scheme="https://www.sekyoro.top/tags/github/"/>
    
    <category term="github profile" scheme="https://www.sekyoro.top/tags/github-profile/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习</title>
    <link href="https://www.sekyoro.top/2022/12/28/Flutter%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/12/28/Flutter%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-28T08:16:25.000Z</published>
    <updated>2023-01-01T08:14:43.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Flutter学习,主要用于移动端,展示的应用,跨平台.长期更新<br><span id="more"></span></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter主要是跨平台移动端UI框架,我使用它主要也是不错的UI设计以及跨平台的特性.至于原生开发其实也是不错的,各有所长吧.</p><p>开发工具是Android Studio或者vscode.至少就我现在的开发体验来说两者差别不大,前者功能更多.</p><p><strong>Android Studio的一些重要快捷键</strong>     </p><p><img data-src="http://cdn.sekyoro.top/imgs/28/1220221228215414.png" alt="image-20221228215320830" style="zoom:67%;" /></p><p><img data-src="http://cdn.sekyoro.top/imgs/28/1220221228215449.png" alt="image-20221228215449009"></p><p><img data-src="http://cdn.sekyoro.top/imgs/28/1220221228215521.png" alt="image-20221228215521331" style="zoom:67%;" /></p><h3 id="代码辅助和快速修复"><a href="#代码辅助和快速修复" class="headerlink" title="代码辅助和快速修复"></a>代码辅助和快速修复</h3><p>代码辅助功能是特定代码标识符相关的代码修改。当光标放在 Flutter widget 上时，黄色灯泡图标会指示可用的修改，可以通过点击灯泡进行修改，或使用键盘快捷键（在 Linux 和 Windows 上使用 <code>Alt</code>+<code>Enter</code>，在 macOS 上使用 <code>Option</code>+<code>Return</code>）</p><h4 id="Widget-嵌套辅助"><a href="#Widget-嵌套辅助" class="headerlink" title="Widget 嵌套辅助"></a>Widget 嵌套辅助</h4><p>当你有一个 widget 需要嵌套在其他 widget 时，可以使用该功能。例如，需要将 widget 嵌套在 <code>Row</code> 或 <code>Column</code> 中。</p><h4 id="Widget-列表嵌套辅助"><a href="#Widget-列表嵌套辅助" class="headerlink" title="Widget 列表嵌套辅助"></a>Widget 列表嵌套辅助</h4><p>和上面的辅助类似，但它嵌套的是一个 widget 的列表，而不是单个的 widget。</p><h4 id="child-和-children-转换辅助"><a href="#child-和-children-转换辅助" class="headerlink" title="child 和 children 转换辅助"></a>child 和 children 转换辅助</h4><p>将 child 转换成 children，并且把参数值写进一个 list。</p><p>Flutter 插件包含了以下模板：</p><ul><li>前缀 <code>stless</code>：创建一个 <code>StatelessWidget</code> 的子类。</li><li>前缀 <code>stful</code>：创建一个 <code>StatefulWidget</code> 的子类，并关联 State 子类。</li><li>前缀 <code>stanim</code>：创建一个 <code>StatefulWidget</code> 的子类，并关联 State 子类，包含一个 <code>AnimationController</code> 的初始化字段</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>不同系统不同配置可能有不同情况. 我这边首先需要在管理员模式下使用adb devices或者类似命令使得能访问adb.然后选择该模拟器,使用flutter run开启应用.</p><p><img data-src="http://cdn.sekyoro.top/imgs/28/1220221228222209.png" alt="image-20221228222209219" style="zoom:50%;" /></p><h3 id="vscode重要快捷键"><a href="#vscode重要快捷键" class="headerlink" title="vscode重要快捷键"></a>vscode重要快捷键</h3><p><img data-src="http://cdn.sekyoro.top/imgs/28/1220221228223036.png" alt="image-20221228223036046"></p><p>另外Ctrl+shift+\可以跳转到括号另一边.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body: Center(</span><br><span class="line">          <span class="comment">// ignore: prefer_const_constructors</span></span><br><span class="line">          child: Image(</span><br><span class="line">        image: <span class="keyword">const</span> AssetImage(<span class="string">&#x27;assets/4.jpg&#x27;</span>),</span><br><span class="line">              <span class="comment">//NetworkImage(&#x27;&#x27;)</span></span><br><span class="line">        <span class="comment">// fit: BoxFit.cover,</span></span><br><span class="line">      )),</span><br></pre></td></tr></table></figure><h3 id="发布app"><a href="#发布app" class="headerlink" title="发布app"></a>发布app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore  my-release-key.keystore -<span class="built_in">alias</span> my-key-alias -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flutter学习,主要用于移动端,展示的应用,跨平台.长期更新&lt;br&gt;</summary>
    
    
    
    
    <category term="Flutter" scheme="https://www.sekyoro.top/tags/Flutter/"/>
    
    <category term="Tutorial" scheme="https://www.sekyoro.top/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>css中的flex和grid布局</title>
    <link href="https://www.sekyoro.top/2022/12/27/css%E4%B8%AD%E7%9A%84flex%E5%92%8Cgrid%E5%B8%83%E5%B1%80/"/>
    <id>https://www.sekyoro.top/2022/12/27/css%E4%B8%AD%E7%9A%84flex%E5%92%8Cgrid%E5%B8%83%E5%B1%80/</id>
    <published>2022-12-27T08:32:10.000Z</published>
    <updated>2022-12-27T09:05:13.067Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>css中的布局flex和grid现在已经比较常用了.这里简单介绍一下<br><span id="more"></span></p><h2 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h2><p>grid布局,即网格布局.</p><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p><p><img data-src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032502.png" alt="img" style="zoom:50%;" /></p><p><strong>单元格</strong>:行和列的交叉区域，称为”单元格”（cell）。</p><p>正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n x m</code>个单元格。比如，3行3列会产生9个单元格。</p><p><strong>网格线</strong>:划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，<code>n</code>行有<code>n + 1</code>根水平网格线，<code>m</code>列有<code>m + 1</code>根垂直网格线，比如三行就有四根水平网格线。</p><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: grid;</span><br><span class="line">   <span class="comment">/* grid-template-columns: 100px 100px 100px; */</span></span><br><span class="line">   <span class="comment">/* grid-template-columns: repeat(3,33.33%); */</span></span><br><span class="line">   <span class="comment">/* grid-template-columns: repeat(2,100px 20px 80px); */</span></span><br><span class="line">   <span class="comment">/* grid-template-columns: repeat(auto-fill,100px); */</span></span><br><span class="line">   grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">   grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">   row-gap: <span class="number">20px</span>;</span><br><span class="line">   <span class="comment">/* column-gap: 20px; */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* grid-template-areas: ; */</span></span><br><span class="line">   <span class="comment">/* grid-auto-flow: row; */</span></span><br><span class="line"></span><br><span class="line">   justify-items: center;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">   <span class="attribute">align-content</span>: end;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="grid-template-columns-属性，-grid-template-rows-属性"><a href="#grid-template-columns-属性，-grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性， grid-template-rows 属性"></a>grid-template-columns 属性， grid-template-rows 属性</h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-</span><br></pre></td></tr></table></figure><p>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性"><a href="#grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性" class="headerlink" title="grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性"></a>grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</h3><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-row-gap: <span class="number">20px</span>;</span><br><span class="line">  grid-<span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-items-属性，-align-items-属性，-place-items-属性"><a href="#justify-items-属性，-align-items-属性，-place-items-属性" class="headerlink" title="justify-items 属性， align-items 属性， place-items 属性"></a>justify-items 属性， align-items 属性， place-items 属性</h3><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右），<code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content-属性，-align-content-属性，-place-content-属性"><a href="#justify-content-属性，-align-content-属性，-place-content-属性" class="headerlink" title="justify-content 属性， align-content 属性， place-content 属性"></a>justify-content 属性， align-content 属性， place-content 属性</h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以<code>justify-content</code>属性为例，<code>align-content</code>属性的图完全一样，只是将水平方向改成垂直方向。）</p><h3 id="grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性"><a href="#grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性" class="headerlink" title="grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性"></a>grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性</h3><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><blockquote><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li><code>grid-row-end</code>属性：下边框所在的水平网格线</li></ul></blockquote><p><code>grid-area</code>属性指定项目放在哪一个区域。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-area: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-self-属性，-align-self-属性，-place-self-属性"><a href="#justify-self-属性，-align-self-属性，-place-self-属性" class="headerlink" title="justify-self 属性， align-self 属性， place-self 属性"></a>justify-self 属性， align-self 属性， place-self 属性</h3><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  justify-self: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><p>以下6个属性设置在容器上。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><p>以下6个属性设置在项目上。</p><blockquote><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul></blockquote><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小</p><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://learncssgrid.com/">Learn CSS Grid - A Guide to Learning CSS Grid | Jonathan Suh</a></li><li><a href="http://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="http://ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇 - 阮一峰的网络日志 (ruanyifeng.com)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;css中的布局flex和grid现在已经比较常用了.这里简单介绍一下&lt;br&gt;</summary>
    
    
    
    
    <category term="css" scheme="https://www.sekyoro.top/tags/css/"/>
    
    <category term="flex" scheme="https://www.sekyoro.top/tags/flex/"/>
    
    <category term="grid" scheme="https://www.sekyoro.top/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>pr剪辑学习</title>
    <link href="https://www.sekyoro.top/2022/12/26/pr%E5%89%AA%E8%BE%91%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/12/26/pr%E5%89%AA%E8%BE%91%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-26T03:07:03.000Z</published>
    <updated>2023-01-24T05:54:10.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>短视频和一般的视频剪辑挺火的,如果是简单的短视频用剪映或者必剪就行了.但是为了体现专业(zhuang bi)性,我这里学学pr.可能要花几周时间.<br><span id="more"></span></p><h2 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h2><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><p>工作区:下面每一个都是一个工作区,每个工作区有很多面板组,每个面板组中又有很多面板.</p><p>可以自己修改工作区的内容又可以自己创建自己的工作区.</p><p><img data-src="http://cdn.sekyoro.top/imgs/26/12image-20221226111354984.png" alt="image-20221226111354984" style="zoom:80%;" /></p><h2 id="新建序列"><a href="#新建序列" class="headerlink" title="新建序列"></a>新建序列</h2><p>项目面板右下角新建项 序列</p><p>进行序列设置</p><p><img data-src="http://cdn.sekyoro.top/imgs/10/0120230110175918.png" alt="image-20230110175721067" style="zoom:50%;" /></p><p>选择序列设置 模式自定义</p><p><img data-src="http://cdn.sekyoro.top/imgs/10/0120230110180110.png" alt="image-20230110180110474" style="zoom:50%;" /></p><h3 id="调整时间轴"><a href="#调整时间轴" class="headerlink" title="调整时间轴"></a>调整时间轴</h3><p>alt+鼠标滚轮  鼠标滚轮  \键  </p><p>时间轴轨道 轨道上的图像折叠</p><p><img data-src="http://cdn.sekyoro.top/imgs/10/0120230110181120.png" alt="image-20230110181119820"></p><p><img data-src="http://cdn.sekyoro.top/imgs/11/01image-20230111110359012.png" alt="image-20230111110359012"></p><ol><li>嵌套图标对齐工具  </li><li>视频与音频的链接   </li><li>添加标记(m)  在时间轨道上   在视频或音频上</li></ol><p><img data-src="http://cdn.sekyoro.top/imgs/11/01image-20230111110857150.png" alt="image-20230111110857150"></p><p>左侧 视频或音频拖进来时有视频还是yinpin</p><p>右侧 决定视频优先级</p><p>选择工具 V   提到工具 C</p><h3 id="效果空间"><a href="#效果空间" class="headerlink" title="效果空间"></a>效果空间</h3><p>运动  不透明度 时间映射 </p><p>批量添加过渡效果 设置过渡效果为常用过渡效果  ctrl+d</p><p>复制素材 alt拖动</p><p><img data-src="http://cdn.sekyoro.top/imgs/11/01image-20230111113253991.png" alt="image-20230111113253991"></p><h3 id="电子相册制作"><a href="#电子相册制作" class="headerlink" title="电子相册制作"></a>电子相册制作</h3><p>复制素材拖到上一个轨道,缩放70%</p><h4 id="添加径向阴影"><a href="#添加径向阴影" class="headerlink" title="添加径向阴影"></a>添加径向阴影</h4><p><img data-src="http://cdn.sekyoro.top/imgs/11/0120230111114026.png" alt="image-20230111114026246"></p><h4 id="添加投影"><a href="#添加投影" class="headerlink" title="添加投影"></a>添加投影</h4><p><img data-src="http://cdn.sekyoro.top/imgs/11/0120230111114046.png" alt="image-20230111114046133"></p><h4 id="添加模糊"><a href="#添加模糊" class="headerlink" title="添加模糊"></a>添加模糊</h4><p>在下一个轨道图片上加模糊</p><p><img data-src="http://cdn.sekyoro.top/imgs/11/0120230111113934.png" alt="image-20230111113933985"></p><h4 id="批量复制"><a href="#批量复制" class="headerlink" title="批量复制"></a>批量复制</h4><p>复制某个素材,选中其他素材粘贴属性</p><p>或者使用快捷键ctrl+alt+v 粘贴属性快捷键</p><p>将上轨道改为立方体旋转</p><h4 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h4><p>加上光影素材,混合模式改为滤色</p><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>H.264即可</p><h3 id="电影混剪"><a href="#电影混剪" class="headerlink" title="电影混剪"></a>电影混剪</h3><h4 id="加上字幕遮罩"><a href="#加上字幕遮罩" class="headerlink" title="加上字幕遮罩"></a>加上字幕遮罩</h4><p>新建项 字幕遮罩  效果加上裁剪</p><p>上下都加上</p><h4 id="配上字幕"><a href="#配上字幕" class="headerlink" title="配上字幕"></a>配上字幕</h4><p>可以利用Arctime pro</p><h4 id="去除字幕"><a href="#去除字幕" class="headerlink" title="去除字幕"></a>去除字幕</h4><p>高斯模糊 蒙版</p><p>中间值 蒙版</p><h4 id="定格动画"><a href="#定格动画" class="headerlink" title="定格动画"></a>定格动画</h4><p>五帧或十帧</p><h2 id="剪辑工具"><a href="#剪辑工具" class="headerlink" title="剪辑工具"></a>剪辑工具</h2><p>镜头剪辑、排列以及各种调节方法</p><p><img data-src="http://cdn.sekyoro.top/imgs/26/12image-20221226210816710.png" alt="image-20221226210816710"></p><h3 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h3><p>超级键,但是有时候超级键扣不干净.可以利用颜色键和裁剪</p><p>最后加上超级键,加上基值,抑制和柔化.</p><p><img data-src="http://cdn.sekyoro.top/imgs/16/0120230116185035.png" alt="image-20230116185017552"  /></p><h4 id="人物调色"><a href="#人物调色" class="headerlink" title="人物调色"></a>人物调色</h4><p>让人物脸上光更均匀</p><p>新建调整图层,在Lumetric颜色</p><h4 id="转场过度"><a href="#转场过度" class="headerlink" title="转场过度"></a>转场过度</h4><p>filmImpact zoom blur</p><h3 id="直接花字法"><a href="#直接花字法" class="headerlink" title="直接花字法"></a>直接花字法</h3><h3 id="图片花字法"><a href="#图片花字法" class="headerlink" title="图片花字法"></a>图片花字法</h3><h3 id="表情贴图方法"><a href="#表情贴图方法" class="headerlink" title="表情贴图方法"></a>表情贴图方法</h3><p>追踪法</p><h3 id="特效素材法"><a href="#特效素材法" class="headerlink" title="特效素材法"></a>特效素材法</h3><p>添加帧定格</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li>q w剪辑  ctrl+k剪辑 shift+delete波纹剪辑</li><li>i o出入标记</li></ol><h4 id="转场合集"><a href="#转场合集" class="headerlink" title="转场合集"></a>转场合集</h4><h5 id="回忆快闪"><a href="#回忆快闪" class="headerlink" title="回忆快闪"></a>回忆快闪</h5><ol><li>变换 关键帧缩放 从大到小  缓入缓出</li><li>快门角度调大 </li><li>不透明度关键帧 </li></ol><h3 id="30个剪辑技巧"><a href="#30个剪辑技巧" class="headerlink" title="30个剪辑技巧"></a>30个剪辑技巧</h3><ol><li></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;短视频和一般的视频剪辑挺火的,如果是简单的短视频用剪映或者必剪就行了.但是为了体现专业(zhuang bi)性,我这里学学pr.可能要花几周时间.&lt;br&gt;</summary>
    
    
    
    
    <category term="premiere pro" scheme="https://www.sekyoro.top/tags/premiere-pro/"/>
    
    <category term="剪辑" scheme="https://www.sekyoro.top/tags/%E5%89%AA%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>uniapp申请获取地理位置</title>
    <link href="https://www.sekyoro.top/2022/12/11/uniapp%E7%94%B3%E8%AF%B7%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/"/>
    <id>https://www.sekyoro.top/2022/12/11/uniapp%E7%94%B3%E8%AF%B7%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-12-11T06:51:37.000Z</published>
    <updated>2022-12-20T14:26:42.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>老板要求做一个微信小程序,后面又希望能转为app. 所以选择了uniapp开发. 我的体验和感想就是以后不用uniapp了. 资源不多,学习了可能用处也不大.适合外包的干.这里写一下使用uniapp开发微信小程序获取地理位置<br><span id="more"></span></p><p>基本逻辑是使用uniapp的api首先获得地理经纬度位置等信息(在这之前可以先让用户授权,然后根据获得的地理位置信息利用腾讯的服务得到具体的位置名字.</p><p>这里我主要利用uniapp开发微信小程序.</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221220185902594.png" alt="流程" style="zoom:50%;" /></p><p>getsetting主要用于获取用户当前设置</p><p><img data-src="http://cdn.sekyoro.top/imgs/20/1220221220210453.png" alt="setting获取" style="zoom:67%;" /></p><p>这里重要的就是scope.xx查看用户的授权</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">uni.getSetting(&#123;<span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (res.authSetting &amp;&amp; res.authSetting.hasOwnProperty(<span class="string">&quot;scope.userFuzzyLocation&quot;</span>)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;获取到auth&#x27;</span>,res)</span><br><span class="line"><span class="keyword">if</span> (res.authSetting[<span class="string">&quot;scope.userFuzzyLocation&quot;</span>]) &#123;</span><br><span class="line"><span class="built_in">this</span>.getCityInfo();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">uni.showModal(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;提示&quot;</span>,</span><br><span class="line"><span class="attr">content</span>: <span class="string">&quot;请重新授权获取你的地理位置，否则部分功能将无法使用.\r\n提示:点击小程序右上角的三个点在设置中修改授权&quot;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">uni.openSetting(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function">() =&gt;</span> <span class="built_in">this</span>.getCityInfo()</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.getCovidData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;正确&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="built_in">this</span>.getCityInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的scope.userFuzzyLocation就是需要用户授权的,res.authsetting如果包含这个且为true就进行下一步操作.如果没有这个选项,即res.authSetting.hasOwnProperty(“scope.userFuzzyLocation”)返回false,这样就需要去授权.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getCityInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;调用getCityInfo&#x27;</span>)</span><br><span class="line">uni.authorize(&#123;</span><br><span class="line"><span class="attr">scope</span>: <span class="string">&quot;scope.userFuzzyLocation&quot;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;授权&#x27;</span>)</span><br><span class="line"><span class="comment">//做授权之后的操作</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="built_in">this</span>.loadError();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>uni.authorize 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uni.authorize(&#123;</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&#x27;scope.userLocation&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        uni.getLocation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。如果用户之前拒绝了授权，此接口会直接进入失败回调.</p><p>当调用这个接口之后就能有对应的scope.xx的值了,要么为true要么为false. authorize会跳出一个弹窗,请求获取权限,如果接受了那就没多大事了.</p><p>如果没有接受,就可以调取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uni.openSetting(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function">() =&gt;</span> <span class="built_in">this</span>.getCityInfo()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调起客户端小程序设置界面，返回用户设置的操作结果.</p><p><img data-src="http://cdn.sekyoro.top/imgs/20/1220221220220021.png" alt="设置界面" style="zoom:50%;" /></p><p>uni.openSetting会打开一个这样的界面让用户设置.用户在这里允许授权即可.</p><h2 id="具体设置"><a href="#具体设置" class="headerlink" title="具体设置"></a>具体设置</h2><p>在uniapp中,需要设置一些需要用户授权的权限.</p><p>  <img data-src="http://cdn.sekyoro.top/imgs/20/1220221220220601.png" alt="image-20221220220601255"></p><p>在uniapp中打开manifest.json中的源码视图,找到permission如上图.</p><p>添加需要的scope和requirePrivateInfos.</p><p>同时getsetting中需要看scope.xx是否存在以及是否为true.</p><p><img data-src="http://cdn.sekyoro.top/imgs/20/12image-20221220220755694.png" alt="image-20221220220755694"></p><p><img data-src="http://cdn.sekyoro.top/imgs/20/1220221220221058.png" alt="image-20221220221057784"></p><p>uni.authorize中也需要获取需要用户授权的scope</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在微信小程序中,使用一些平台提供的接口需要权限.</p><p><img data-src="http://cdn.sekyoro.top/imgs/20/1220221220221401.png" alt="image-20221220221400954" style="zoom:50%;" /></p><p>比如获取当前的地理位置、速度需要小程序的类目相符合,而获取当前的模糊地理位置也需要申请权限.不过这个接口相对来说比较好申请,但是这个接口有点bug,我一开始申请之后当天模拟器上有点问题,不过后面就好了.申请了之后可以利用腾讯提供的sdk将经纬度转为具体的位置名.</p><p>代码基本如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">uni.getFuzzyLocation(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;gcj02&quot;</span>, <span class="comment">//  wgs84: 返回GPS坐标，gcj02: 返回国测局坐标</span></span><br><span class="line"><span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;获取位置&#x27;</span>, res)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">latitude,</span><br><span class="line">longitude</span><br><span class="line">&#125; = res;</span><br><span class="line"><span class="keyword">const</span> location = &#123;</span><br><span class="line">latitude,</span><br><span class="line">longitude</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">this</span>.qqmapsdk.reverseGeocoder(&#123;</span><br><span class="line">location,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> loginAddress = res.result.ad_info.name</span><br><span class="line"><span class="built_in">console</span>.log(loginAddress)</span><br><span class="line"><span class="built_in">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 获取信息</span></span><br><span class="line"><span class="built_in">this</span>.country = loginAddress.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">this</span>.province = loginAddress.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">this</span>.city = loginAddress.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">this</span>.district = loginAddress.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">this</span>.formvalue.location = <span class="built_in">this</span>.province + <span class="string">&#x27;&gt;&#x27;</span> +</span><br><span class="line"><span class="built_in">this</span>.city + <span class="string">&#x27;&gt;&#x27;</span> + <span class="built_in">this</span>.district;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.donext();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://lbs.qq.com/miniProgram/jsSdk/jsSdkGuide/jsSdkOverview">微信小程序JavaScript SDK | 腾讯位置服务 (qq.com)</a></li><li><a href="https://blog.csdn.net/a18792627168/article/details/108962311#:~:text=uni-app,小程序项目无法直接获取到地理位置，只能通过获取到的经纬度，调用第三方地图Api获取。">uni-app微信小程序获取用户地理位置信息_DOM曼珠沙华的博客-CSDN博客_uni.getsetting</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;老板要求做一个微信小程序,后面又希望能转为app. 所以选择了uniapp开发. 我的体验和感想就是以后不用uniapp了. 资源不多,学习了可能用处也不大.适合外包的干.这里写一下使用uniapp开发微信小程序获取地理位置&lt;br&gt;</summary>
    
    
    
    
    <category term="uniapp" scheme="https://www.sekyoro.top/tags/uniapp/"/>
    
    <category term="微信小程序" scheme="https://www.sekyoro.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="获取地理位置" scheme="https://www.sekyoro.top/tags/%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>磁力链接与RSS订阅</title>
    <link href="https://www.sekyoro.top/2022/11/22/%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5%E4%B8%8ERSS%E8%AE%A2%E9%98%85/"/>
    <id>https://www.sekyoro.top/2022/11/22/%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5%E4%B8%8ERSS%E8%AE%A2%E9%98%85/</id>
    <published>2022-11-22T04:43:50.000Z</published>
    <updated>2022-11-22T06:09:57.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近接触到了BT下载和RSS订阅,稍微学习学习,了解下概念.内容主要来自维基百科<br><span id="more"></span></p><h2 id="BT介绍"><a href="#BT介绍" class="headerlink" title="BT介绍"></a>BT介绍</h2><p>BT全称BitTorrent,是用在<a href="https://zh.wikipedia.org/wiki/对等网络">对等网络</a>中<a href="https://zh.wikipedia.org/wiki/文件分享">文件分享</a>的<a href="https://zh.wikipedia.org/wiki/网络协议">网络协议</a><a href="https://zh.wikipedia.org/wiki/计算机程序">程序</a>。和<a href="https://zh.wikipedia.org/wiki/点对点协议">点对点</a>（point-to-point）的协议<a href="https://zh.wikipedia.org/wiki/计算机程序">程序</a>不同，它是用户群对用户群（peer-to-peer），而且用户越多，下载同一文件的人越多，下载该文件的速度越快。且下载后，继续维持上传的状态，就可以“分享”，成为其用户端节点下载的<a href="https://zh.wikipedia.org/wiki/种子文件">种子文件</a>（.torrent），同时上传及下载.</p><p>普通的<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>／<a href="https://zh.wikipedia.org/wiki/FTP">FTP</a>下载使用<a href="https://zh.wikipedia.org/wiki/TCP/IP协议">TCP/IP协议</a>，BitTorrent协议是架构于TCP/IP协议之上的一个<a href="https://zh.wikipedia.org/wiki/对等网络">P2P</a>文件传输<a href="https://zh.wikipedia.org/wiki/通訊協定">通信协议</a>，处于TCP/IP结构的<a href="https://zh.wikipedia.org/wiki/应用层">应用层</a>。BitTorrent协议本身也包含了很多具体的内容协议和扩展协议，并在不断扩展中</p><p>在BT下载的流程中,文件发布者会根据要发布的文件生成提供一个.torrent文件,这就是种子文件.发布这个文件就是做种(发布者提供下载任务的全部内容的行为；下载者下载完成后继续提供给他人下载的行为).</p><p>这个种子文件本质上是<a href="https://zh.wikipedia.org/wiki/文本文件">文本文件</a>，包含Tracker信息和文件信息两部分。<strong>Tracker信息主要是BT下载中需要用到的Tracker服务器的地址和针对Tracker服务器的设置</strong>，<strong>文件信息是根据对目标文件的计算生成的，计算结果根据BitTorrent协议内的<a href="https://zh.wikipedia.org/wiki/Bencode">Bencode</a>规则进行编码</strong>。它的主要原理是需要把提供下载的文件虚拟分成大小相等的块，块大小必须为2k的整数次方（由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和<a href="https://zh.wikipedia.org/wiki/Hash">Hash</a>验证码写入种子文件中；所以，种子文件就是被下载文件的“索引”。</p><p>下载者要下载文件内容，需要先得到相应的种子文件，然后使用BT客户端软件进行下载。</p><p>因为种子文件中有tracker地址,这个tracker就是个服务器地址(下载者的信息也会记录.收集下载者信息的服务器，并将此信息提供给其他下载者，使下载者们相互连接起来，传输数据。).下图是在Motrix中的种子的tracker信息<img data-src="http://cdn.sekyoro.top/imgs/image-20221122140032781.png" alt="image-20221122140032781" style="zoom:50%;" /></p><p>下载时，BT客户端首先解析种子文件得到Tracker地址，然后连接Tracker服务器。Tracker服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的IP。下载者再连接其他下载者，根据种子文件，两者分别告知对方自己已经有的块，然后交换对方所没有的数据。此时不需要其他服务器参与，分散了单个线路上的数据流量，因此减轻了服务器负担。</p><p>下载者每得到一个块，需要算出下载块的Hash验证码与种子文件中的对比，如果一样则说明块正确，不一样则需要重新下载这个块。这种规定是为了解决下载内容准确性的问题。</p><h2 id="磁力链接"><a href="#磁力链接" class="headerlink" title="磁力链接"></a>磁力链接</h2><p><strong>磁力链接</strong>（Magnet URI scheme），是<a href="https://zh.wikipedia.org/wiki/对等网络">对等网络</a>中进行信息检索和下载文档的<a href="https://zh.wikipedia.org/wiki/电脑程序">电脑程序</a>。和基于“位置”连接的<a href="https://zh.wikipedia.org/wiki/统一资源定位符">统一资源定位符</a>不同，磁力链接是基于<a href="https://zh.wikipedia.org/wiki/元数据">元数据</a>（metadata）文件内容，属于<a href="https://zh.wikipedia.org/wiki/统一资源名称">统一资源名称</a>。也就是说，磁力链接不基于文档的<a href="https://zh.wikipedia.org/wiki/IP地址">IP地址</a>或定位符，而是在<a href="https://zh.wikipedia.org/wiki/分布式数据库">分布式数据库</a>中，通过<a href="https://zh.wikipedia.org/wiki/散列函数">散列函数</a>值来识别、<a href="https://zh.wikipedia.org/wiki/搜索">搜索</a>来下载文档。因为不依赖一个处于启动状态的主机来下载文档，所以特别适用没有中心服务器的<a href="https://zh.wikipedia.org/wiki/对等网络">对等网络</a>。它符合<a href="https://zh.wikipedia.org/wiki/开源标准">开源标准</a>。</p><p>磁力链接由一组参数组成，参数间的顺序没有讲究，其格式与在HTTP链接末尾的查询字符串相同。最常见的参数是”xt”，是”exact topic”的缩写，通常是一个特定文件的内容散列函数值形成的<a href="https://zh.wikipedia.org/wiki/统一资源名称">URN</a></p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221122140625013.png" alt="image-20221122140625013"></p><h2 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h2><p><strong>RSS</strong>（英文全称：<a href="https://zh.wikipedia.org/wiki/Resource_Description_Framework">RDF</a> Site Summary 或 Really Simple Syndication<a href="https://zh.wikipedia.org/wiki/RSS#cite_note-powers-2003-1-2">[2]</a>），中文译作<strong>简易信息聚合</strong><a href="https://zh.wikipedia.org/wiki/RSS#cite_note-3">[3]</a>，也称<strong>聚合内容</strong><a href="https://zh.wikipedia.org/wiki/RSS#cite_note-张锐2015-4">[4]</a>，是一种<a href="https://zh.wikipedia.org/wiki/消息來源">消息来源</a>格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用 RSS 后，网站订阅者便无需再手动查看网站是否有新的内容，同时 RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要信息，并选择性地点阅查看。</p><p>RSS 摘要可以借由 RSS 阅读器、feed reader 或 aggregator 等网页或以桌面为架构的软件来阅读。标准的 <a href="https://zh.wikipedia.org/wiki/XML">XML</a> 档式可允许信息在一次发布后通过不同的程序阅览。用户借由将网摘输入 RSS 阅读器，或是用鼠标点取浏览器上指向订阅程序的 RSS 小图标 <a href="https://zh.wikipedia.org/wiki/URI">URI</a>（非通常所称的 <a href="https://zh.wikipedia.org/wiki/URL">URL</a>）来订阅网摘。RSS 阅读器会定期检阅网站是否有更新，然后下载至监看用户界面。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/RSS">RSS - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zh.wikipedia.org/wiki/BitTorrent_(协议">BitTorrent (协议) - 维基百科，自由的百科全书 (wikipedia.org)</a>)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近接触到了BT下载和RSS订阅,稍微学习学习,了解下概念.内容主要来自维基百科&lt;br&gt;</summary>
    
    
    
    
    <category term="RSS" scheme="https://www.sekyoro.top/tags/RSS/"/>
    
    <category term="torrent" scheme="https://www.sekyoro.top/tags/torrent/"/>
    
    <category term="BT" scheme="https://www.sekyoro.top/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>使用overleaf优雅地写文章</title>
    <link href="https://www.sekyoro.top/2022/11/11/%E4%BD%BF%E7%94%A8overleaf%E4%BC%98%E9%9B%85%E5%9C%B0%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <id>https://www.sekyoro.top/2022/11/11/%E4%BD%BF%E7%94%A8overleaf%E4%BC%98%E9%9B%85%E5%9C%B0%E5%86%99%E6%96%87%E7%AB%A0/</id>
    <published>2022-11-11T07:24:55.000Z</published>
    <updated>2022-11-11T10:56:20.703Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前一般都用markdown写完转word或者pdf.为了更方便地插入公式和使用模板,使用tex格式来写文章,特别是科研可能是个更好的选择.<br><span id="more"></span></p><blockquote><p><strong>TeX/LaTeX</strong> 既可以表示所指的宏语言/格式，也可以表示实现该宏语言的整套软件，也可以表示软件中的一两个可执行程序命令</p></blockquote><p>本地如果要使用可能需要装多个软件,比如texLive,texStudio等.主要是无法很好的跨平台,当换平台时一般需要通过网盘传送.如果使用overleaf从各个角度来看都方便多了,还方便与人分享交流review.与markdown差别是通过导入包使得功能更丰富,更加偏向科研.</p><h2 id="Latex基本语法"><a href="#Latex基本语法" class="headerlink" title="Latex基本语法"></a>Latex基本语法</h2><p>这东西包含内容很多,通览一下即可.个人感觉是需要先了解一篇文章的结构.</p><h3 id="序言-Preamble-和正文-Document"><a href="#序言-Preamble-和正文-Document" class="headerlink" title="序言(Preamble)和正文(Document)"></a>序言(Preamble)和正文(Document)</h3><p>首先基本文档结构氛围序言和正文.</p><h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>主要用来申明你写的文档类型、文档语言、文档使用的包(类似于Python中的<code>import</code>)等。一个常见的序言如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, letterpaper]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br></pre></td></tr></table></figure><p>简单来说就是声明要写的是article,report还是book并设置属性.同时导包并设置属性.</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221111162352108.png" alt="image-20221111162352108" style="zoom:67%;" /></p><p>babel设置语言,inputenc设置编码,geometry设置布局.</p><p>amsmath数学公式包,graphicx导入图片,hyperref设置超链接.</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>对于正文内容使用<code>\begin&#123;ducument&#125;</code>和<code>\end&#123;document&#125;</code>标签进行控制，在标签内就可以进行写作了，写在标签外的内容是不会展示出来的。和Markdown一样，换行需要按两次<code>Enter</code>。<code>\begin&#123;abstract&#125;</code>和<code>\end&#123;abstract&#125;</code>可以在正文中添加摘要</p><p>添加属性,即设置文档的标题 作者 时间 致谢</p><ul><li><code>\title&#123;your title&#125;</code>:添加文档标题</li><li><code>\author&#123;your name&#125;</code>:添加作者</li><li><code>\thanks&#123;funded by ...&#125;</code>:添加致谢信息，必须在<code>author</code>的花括号里面才有用</li><li><code>\date&#123;your date&#125;</code>:添加日期，<code>\today</code>表示设置成编译文档那一天的日期</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\title&#123;This is a title&#125;</span><br><span class="line">\author&#123;</span><br><span class="line">Zhao Xuhui\thanks&#123;thanks 1&#125;,</span><br><span class="line">Xuhui Zhao\thanks&#123;thanks 2&#125;&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">This is test text.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>注释使用%</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\label&#123;pic&#125;</span><br><span class="line">this is a pic\ref&#123;pic&#125;</span><br></pre></td></tr></table></figure><p>通常用在图片,表格的引用中.</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li>加粗:<code>\textbf&#123;...&#125;</code></li><li>斜体:<code>\textit&#123;...&#125;</code></li><li>下划线:<code>\underline&#123;...&#125;</code></li><li>强调:<code>\emph&#123;...&#125;</code>，与上下文字体相反，上下文常规它就是斜体，上下文斜体它就是常规</li><li>居中:<code>\centerline&#123;...&#125;</code>，居中显示文本</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">This is a test of image insertion.</span><br><span class="line"></span><br><span class="line">\begin&#123;figure&#125;[h]   % 必须要有[h]否则插入的图片都在文字前面</span><br><span class="line">    \centering  % 图像居中</span><br><span class="line">    \includegraphics[width=4cm]&#123;test/cover31.jpg&#125;   %[]里可以指定影像大小</span><br><span class="line">    \caption&#123;Electronic&#125;    % 图名</span><br><span class="line">    \label&#123;fig_electronic&#125;  % 用于内部引用的图名</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">It is a great figure.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>插入图片的基本流程 \begin{figure} 居中 设置路径与大小 设置名字 在名字种设置label方便引用</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用<code>itemize</code>，有序列表使用<code>enumerate</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">This is a test of list.</span><br><span class="line"></span><br><span class="line">\begin&#123;itemize&#125;</span><br><span class="line">  \item The individual entries are indicated with a black dot, a so-called bullet.</span><br><span class="line">  \item The text in the entries may be of any length.</span><br><span class="line">\end&#123;itemize&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item This is the first entry in our list</span><br><span class="line">  \item The list numbers increase with each entry we add</span><br><span class="line">\end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;table&#125;</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;l|r&#125;</span><br><span class="line">Item &amp; Quantity \\\hline</span><br><span class="line">Widgets &amp; 42 \\</span><br><span class="line">Gadgets &amp; 13</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\caption&#123;\label&#123;tab:widgets&#125;An example table.&#125;</span><br><span class="line">\end&#123;table&#125;</span><br></pre></td></tr></table></figure><p><code>\begin&#123;tabular&#125;&#123;l|c|r&#125;</code>这里面的<code>&#123;l|c|r&#125;</code>，包含了三个字母，代表了表格总共有三列，第一列靠左偏移，第二列居中，第三列靠右偏移。竖线代表列之间用线分隔开来，如果想要左右两边都用线包围起来，应该改成<code>&#123;|l|c|r|&#125;</code>。接下来就是正式的表格绘制部分。</p><h2 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h2><p>用<code>\section&#123;&#125;</code>来表示章节，从当前<code>section</code>开始直到下一个<code>section</code>出现，这期间的内容都属于当前<code>section</code>，花括号内是章节标题。章节号是LaTeX自动生成的</p><p><img data-src="https://zhaoxuhui.top/assets/images/blog/content/2019-09-04-06.png" alt="img" style="zoom:67%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\section&#123;Introduction&#125;</span><br><span class="line"></span><br><span class="line">Your introduction goes here! Simply start writing your document and use the Recompile button to view the updated PDF preview. Examples of commonly used commands and features are listed below, to help you get started.</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>添加目录的命令是<code>\tableofcontents</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\title&#123;Test title&#125;</span><br><span class="line">\author&#123;Zhao Xuhui&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\maketitle</span><br><span class="line"> </span><br><span class="line">\tableofcontents</span><br><span class="line"> </span><br><span class="line">\section&#123;Introduction&#125;</span><br><span class="line"> </span><br><span class="line">This is the first section.</span><br><span class="line"> </span><br><span class="line">Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  </span><br><span class="line">elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et </span><br><span class="line">neque pharetra sollicitudin.  Praesent imperdietmi nec ante. </span><br><span class="line">Donec ullamcorper, felis non sodales...</span><br><span class="line"> </span><br><span class="line">\addcontentsline&#123;toc&#125;&#123;section&#125;&#123;Unnumbered Section&#125;</span><br><span class="line">\section*&#123;Unnumbered Section&#125;</span><br><span class="line"> </span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"> </span><br><span class="line">\section&#123;Second Section&#125;</span><br><span class="line"> </span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  </span><br><span class="line">Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra </span><br><span class="line">sollicitudin.  Praesent imperdiet mi necante...</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>LaTeX公式分为行内(inline)与展示(display)两种类型。前者是文本中的一部分，后者是单独占一行。</p><p>行内公式有三种方式：反斜线小括号、<script type="math/tex">`和`</script>、<code>\begin&#123;math&#125;</code>和<code>\end&#123;math&#125;</code>。</p><p>展示型公式有四种方式：反斜线中括号、<code>\begin&#123;equation&#125;</code>和<code>\end&#123;equation&#125;</code>、<code>\begin&#123;displaymath&#125;</code>和<code>\end&#123;displaymath&#125;</code>、双美元标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\LaTeX&#123;&#125; is great at typesetting mathematics. Let $X_1, X_2, \ldots, X_n$ be a sequence of independent and identically distributed random variables with $\text&#123;E&#125;[X_i] = \mu$ and $\text&#123;Var&#125;[X_i] = \sigma^2 &lt; \infty$, and let</span><br><span class="line">\[S_n = \frac&#123;X_1 + X_2 + \cdots + X_n&#125;&#123;n&#125;</span><br><span class="line">      = \frac&#123;1&#125;&#123;n&#125;\sum_&#123;i&#125;^&#123;n&#125; X_i\]</span><br><span class="line">denote their mean. Then as $n$ approaches infinity, the random variables $\sqrt&#123;n&#125;(S_n - \mu)$ converge in distribution to a normal $\mathcal&#123;N&#125;(0, \sigma^2)$.</span><br></pre></td></tr></table></figure><h2 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h2><p>上传bib文件,比如叫sample.bib,进行引用\cite{},然后在最后添加引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\bibliographystyle&#123;plain&#125;</span><br><span class="line">\bibliography&#123;sample&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes">Learn LaTeX in 30 minutes - Overleaf, Online LaTeX Editor</a> overleaf上的Latex入门</p><p><a href="http://zhaoxuhui.top/blog/2019/09/04/latex-overleaf-note.html">LaTeX基本语法</a></p><p><a href="https://www.jianshu.com/p/5fe5e4d33a41">Latex基本语法(入门)</a></p><p><a href="https://blog.csdn.net/ayaishere_/article/details/123332393">【排版】用Overleaf速成LaTeX代码（从入门到开门）<em>ayaishere</em>的博客-CSDN博客_overleaf 空格</a></p><p><a href="https://blog.csdn.net/m0_52037292/article/details/109768317"> 快速上手系列——用Overleaf写中文文档_DeShawnPhang的博客-CSDN博客_overleaf怎么写中文</a></p><p><a href="https://blog.csdn.net/Canhui_WANG/article/details/87364800">关于Latex的Figure图像编号关联所在章节编号之问题的解决方案<em>林微的博客-CSDN博客</em>\begin{figure}</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前一般都用markdown写完转word或者pdf.为了更方便地插入公式和使用模板,使用tex格式来写文章,特别是科研可能是个更好的选择.&lt;br&gt;</summary>
    
    
    
    
    <category term="latex" scheme="https://www.sekyoro.top/tags/latex/"/>
    
    <category term="tex" scheme="https://www.sekyoro.top/tags/tex/"/>
    
    <category term="overleaf" scheme="https://www.sekyoro.top/tags/overleaf/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录</title>
    <link href="https://www.sekyoro.top/2022/11/11/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.sekyoro.top/2022/11/11/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-11-11T05:50:43.000Z</published>
    <updated>2022-12-26T09:37:15.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>唉,很久没做做题了.这里记录一下每天刷题练习.<br><span id="more"></span></p><p>主要刷一些简单中等题,难了我也不会.</p><p>剑指Offer 启动</p><p><img data-src="http://cdn.sekyoro.top/imgs/26/1220221226173618.png" alt="image-20221226173618143" style="zoom: 80%;" /></p><p>09.用两个栈实现队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 用两个栈实现队列;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CQueue2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Deque&lt;Integer&gt; inStack;</span><br><span class="line">  Deque&lt;Integer&gt; outStack;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inStack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    outStack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    inStack.push(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(outStack.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(inStack.isEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span>(!inStack.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">          outStack.push(inStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outStack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;唉,很久没做做题了.这里记录一下每天刷题练习.&lt;br&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://www.sekyoro.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="https://www.sekyoro.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue网上商城项目</title>
    <link href="https://www.sekyoro.top/2022/10/25/vue%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    <id>https://www.sekyoro.top/2022/10/25/vue%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-10-25T09:37:34.000Z</published>
    <updated>2022-10-25T12:33:16.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>学了就要写<br><span id="more"></span></p><p>使用vue cli,自己选一些feature.vuex和vue-router必要的.还要安装axios,vue-axios(axios使用的时候不能像vue的插件（如：Vue-Router、VueX等）通过Vue.use()安装插件，需要在原型上进行绑定：Vue.prototype.$axios = axios).</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios vue-axios -S</span><br></pre></td></tr></table></figure><p>在main.js文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line">createApp(App).use(store).use(router).use(VueAxios,axios).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>views目录下存放页面级组件,一般的小组件存放在components的文件夹下,这些组件会被复用.</p><p>请求后端数据就需要配置一个反向代理,在vue.config.js中配置</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_43654065/article/details/121288529">axios和vue-axios_在线小白www的博客-CSDN博客_axios vue-axios</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学了就要写&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vue-element-template实战</title>
    <link href="https://www.sekyoro.top/2022/10/08/vue-element-template%E5%AE%9E%E6%88%98/"/>
    <id>https://www.sekyoro.top/2022/10/08/vue-element-template%E5%AE%9E%E6%88%98/</id>
    <published>2022-10-08T06:55:30.000Z</published>
    <updated>2022-10-08T13:12:22.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一大坨东西<br><span id="more"></span></p><p>先复习一下vue</p><p>虚拟DOM 节省资源</p><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 鼠标悬浮看 title 属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-bind v-on--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">:click</span>=<span class="string">&quot;handleClick&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;hello 蓝桥&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleClick</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      alert(event.target.title);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt; --&gt;</span><br><span class="line">  &lt;div v-if=&quot;seen&quot; v-bind:title=&quot;msg&quot; @click=&quot;handleClick&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line"> &lt;template v-for=&quot;todo in todos&quot; :key=&quot;todo&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; todo &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    // HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg:&quot;Hello 蓝桥&quot;,</span><br><span class="line">      seen:true,</span><br><span class="line">      todos:[&quot;Vue&quot;, &quot;React&quot;, &quot;Angular&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      // alert(event.target.title);</span><br><span class="line">      this.seen = false</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h3><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用.</p><p>简单来说,一个Vue文件就是一个组件,里面有template script style.</p><p>建立一个Vue文件,比如叫main-component.Vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 鼠标悬浮看 title 属性 --&gt;</span><br><span class="line">  &lt;div v-if=&quot;seen&quot; :title=&quot;msg&quot; v-on:click=&quot;handleClick&quot;&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;!-- 循环渲染列表数据 --&gt;</span><br><span class="line">    &lt;template v-for=&quot;todo in todos&quot; :key=&quot;todo&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; todo &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;MainConcepts&quot;, // 组件名称</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;hello 蓝桥&quot;,</span><br><span class="line">      seen: true, // 控制是否显示</span><br><span class="line">      todos: [&quot;Vue&quot;, &quot;React&quot;, &quot;Angular&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      // alert(event.target.title);</span><br><span class="line">      this.seen = false;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 渲染 MainConcepts 组件--&gt;</span><br><span class="line">  &lt;main-concepts /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MainConcepts from &quot;./main-concepts&quot;; // 引入 MainConcepts 组件</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MainConcepts,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在 Vue 中，组件分为：“普通组件”、“函数式组件”、“类组件”。</p><p>Props代表了根组件的属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 声明式渲染 msg 数据 --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  props: [&quot;msg&quot;], // 给 App 组件定义一个 msg 属性</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="comment">// 传递根组件，并传递根组件属性</span></span><br><span class="line">createApp(App, &#123; <span class="attr">msg</span>: <span class="string">&quot;我是根组件属性中的 msg&quot;</span> &#125;).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(...)</span><br><span class="line"><span class="comment">// 注册一个全局组件 SearchInput</span></span><br><span class="line">app.component(<span class="string">&#x27;SearchInput&#x27;</span>, SearchInputComponent)</span><br><span class="line"><span class="comment">// 注册一个全局指令 focus</span></span><br><span class="line">app.directive(<span class="string">&#x27;focus&#x27;</span>, FocusDirective)</span><br><span class="line"><span class="comment">// 插件的使用</span></span><br><span class="line">app.use(LocalePlugin)</span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;蓝桥&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>用 <code>v-bind</code> 指令给元素绑定了一个属性</p><p>用过<code>v-if</code> 条件指令去控制某个元素的显示，用过 <code>v-on</code> 指令绑定过 <code>click</code> 事件，用过 <code>v-for</code> 指令去循环渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 鼠标悬浮看 title 属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;handleClick&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;handleLinkClick&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;msg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:</span>[<span class="attr">eventName</span>]<span class="attr">.prevent</span>=<span class="string">&quot;handleClick&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://www.lanqiao.cn/courses&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; &quot;hello&quot; + msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h3><p>组件的 <code>Data</code> 属性是一个函数。Vue 在创建新组件实例的过程中调用此函数。它应该返回一个对象，然后 Vue 会通过响应性系统将其包裹起来，并以 <code>$data</code> 的形式存储在组件实例中。可以直接通过组件实例访问 <code>$data</code> 对象中的属性。</p><p>组件外可以通过组件实例来访问组件 Data 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 创建 app 应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"><span class="comment">// 获取 App 根组件实例</span></span><br><span class="line"><span class="keyword">const</span> rootComponent = app.mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;App 组件中的 Data 属性：&quot;</span>, rootComponent.$data);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;App 组件中的 msg 数据：&quot;</span>, rootComponent.msg);</span><br><span class="line"><span class="comment">// 修改组件的响应式数据 msg</span></span><br><span class="line">rootComponent.msg = <span class="string">&quot;我是 msg 数据，我在组件外被修改了&quot;</span>;</span><br></pre></td></tr></table></figure><p>在定义 <code>methods</code> 时应避免使用<strong>箭头函数</strong>，因为这会阻止 Vue 绑定恰当的 <code>this</code> 指向。</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性可以依赖多个 Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新。</p><p>计算属性 <code>computed</code> 在使用时，一定要注意，函数里面的变量都会被监听，只要里面的某一个值变动，便会将整个函数执行一遍。</p><p>计算属性的setter与getter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">      &lt;legend&gt;单价：&lt;/legend&gt;</span><br><span class="line">      &lt;input :value=&quot;price&quot; @input=&quot;handlePriceInput&quot; /&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">      &lt;legend&gt;数量：&lt;/legend&gt;</span><br><span class="line">      &lt;input :value=&quot;count&quot; @input=&quot;handleCountInput&quot; /&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    总价：&#123;&#123; total &#125;&#125;</span><br><span class="line">    &lt;div @click=&quot;handleTotal&quot;&gt;私自修改一下 total&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0, // 数量</span><br><span class="line">      price: 0, // 单价</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性声明</span><br><span class="line">    total: &#123;</span><br><span class="line">      // 定义 total 计算属性</span><br><span class="line">      // getter</span><br><span class="line">      get() &#123;</span><br><span class="line">        return parseInt(this.count) * parseFloat(this.price);</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        alert(&quot;不允许直接操作 total 的值，你计算的：&quot; + newValue + &quot;无效！&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">      处理单价输入</span><br><span class="line">     */</span><br><span class="line">    handlePriceInput(event) &#123;</span><br><span class="line">      this.price = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">      处理数量输入</span><br><span class="line">     */</span><br><span class="line">    handleCountInput(event) &#123;</span><br><span class="line">      this.count = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 自定义处理 total</span><br><span class="line">     */</span><br><span class="line">    handleTotal() &#123;</span><br><span class="line">      this.total = 0;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时<strong>执行异步</strong>或开销较大的操作时，这个方式是最有用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">      &lt;legend&gt;单价：&lt;/legend&gt;</span><br><span class="line">      &lt;input :value=&quot;price&quot; @input=&quot;handlePriceInput&quot; /&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">      &lt;legend&gt;数量：&lt;/legend&gt;</span><br><span class="line">      &lt;input :value=&quot;count&quot; @input=&quot;handleCountInput&quot; /&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    总价：&#123;&#123; total &#125;&#125;</span><br><span class="line">    &lt;div @click=&quot;handleTotal&quot;&gt;私自修改一下 total&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0, // 数量</span><br><span class="line">      price: 0, // 单价</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性声明</span><br><span class="line">    total: &#123;</span><br><span class="line">      // 定义 total 计算属性</span><br><span class="line">      // getter</span><br><span class="line">      get() &#123;</span><br><span class="line">        return parseInt(this.count) * parseFloat(this.price);</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        alert(&quot;不允许直接操作 total 的值，你计算的：&quot; + newValue + &quot;无效！&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 侦听器声明</span><br><span class="line">    count(newCount, oldCount) &#123;</span><br><span class="line">      // 定义一个侦听器，名称跟响应式数据 count 一致</span><br><span class="line">      // 商品数量必须 &gt;= 0</span><br><span class="line">      if (Number.isNaN(parseFloat(newCount)) || parseFloat(newCount) &lt; 0) &#123;</span><br><span class="line">        this.count = oldCount;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    price(newPrice, oldPrice) &#123;</span><br><span class="line">      // 定义一个侦听器，名称跟响应式数据 price 一致</span><br><span class="line">      // 单价必须 &gt;= 0</span><br><span class="line">      if (Number.isNaN(parseFloat(newPrice)) || parseFloat(newPrice) &lt; 0) &#123;</span><br><span class="line">        this.price = oldPrice;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">      处理单价输入</span><br><span class="line">     */</span><br><span class="line">    handlePriceInput(event) &#123;</span><br><span class="line">      this.price = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">      处理数量输入</span><br><span class="line">     */</span><br><span class="line">    handleCountInput(event) &#123;</span><br><span class="line">      this.count = event.target.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 自定义处理 total</span><br><span class="line">     */</span><br><span class="line">    handleTotal() &#123;</span><br><span class="line">      this.total = 0;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>除了可以在 watch 选项中执行条件判断外，我们甚至可以在里面进行异步请求，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p><p><strong>计算属性与侦听器的区别：</strong></p><div class="table-container"><table><thead><tr><th>名称</th><th>特性</th></tr></thead><tbody><tr><td>计算属性（computed）</td><td>1. 计算一个或多个响应式数据的值。 2. 应用：简化模版语法中的变量计算。 3. 具有缓存性，页面重新渲染值不变化，计算属性会立即返回之前的计算结果，而不必再次执行函数。</td></tr><tr><td>侦听器（watch）</td><td>1. 观察一个响应式数据变化。 2. 应用：监听响应式数据的变化，做对应逻辑处理。 3. 具有缓存性，页面重新渲染值不变化，监听方法不会执行。</td></tr></tbody></table></div><h3 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h3><h4 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h4><p>hash 模式是用 <code>createWebHashHistory()</code> 创建的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>它在内部传递的实际 URL 之前使用了一个哈希字符（<code>#</code>）。由于这部分 URL 从未被发送到服务器，所以它不需要在服务器层面上进行任何特殊处理。不过，<strong>它在 SEO 中确实有不好的影响</strong>。如果你担心这个问题，可以使用 HTML5 模式</p><h4 id="HTML5模式"><a href="#HTML5模式" class="headerlink" title="HTML5模式"></a>HTML5模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue-element-template"><a href="#Vue-element-template" class="headerlink" title="Vue-element-template"></a>Vue-element-template</h2><p>直接先看一下文档</p><p><a href="http://panjiachen.github.io/vue-element-admin">vue-element-admin</a> 是一个后台前端解决方案，它基于 <a href="https://github.com/vuejs/vue">vue</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a>实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件</p><p><strong>建议</strong>你可以把 <code>vue-element-admin</code>当做工具箱或者集成方案仓库，在 <code>vue-admin-template</code> 的基础上进行二次开发，想要什么功能或者组件就去 <code>vue-element-admin</code> 那里复制过来。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>对应代码@/layout</p><p><code>vue-element-admin</code> 中大部分页面都是基于这个 <code>layout</code> 的，除了个别页面如：<code>login</code> , <code>404</code>, <code>401</code> 等页面没有使用该<code>layout</code>。如果你想在一个项目中有多种不同的<code>layout</code>也是很方便的，只要在一级路由那里选择不同的<code>layout</code>组件就行</p><h3 id="app-main"><a href="#app-main" class="headerlink" title="app-main"></a>app-main</h3><p>对应代码</p><p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/AppMain.vue">@/layout/components/AppMain</a></p><p>这里在 <code>app-main</code> 外部包了一层 <code>keep-alive</code> 主要是为了缓存 <code>&lt;router-view&gt;</code> 的，配合页面的 <code>tabs-view</code> 标签导航使用，如不需要可自行<a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/tags-view.html">去除</a>。</p><p>其中<code>transition</code> 定义了页面之间切换动画，可以根据自己的需求，自行修改转场动画。相关<a href="https://cn.vuejs.org/v2/guide/transitions.html">文档</a>。默认提供了<code>fade</code>和<code>fade-transform</code>两个转场动画，具体 css 实现见<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/styles/transition.scss">transition.scss</a>。如果需要调整可在<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/AppMain.vue">AppMain.vue</a>中调整<code>transition</code> 的 <code>name</code>。</p><h2 id="路由和侧边栏"><a href="#路由和侧边栏" class="headerlink" title="路由和侧边栏"></a>路由和侧边栏</h2><p>本项目侧边栏和路由是绑定在一起的，所以你只有在 <code>@/router/index.js</code> 下面配置对应的路由，侧边栏就能动态的生成了。大大减轻了手动重复编辑侧边栏的工作量。当然这样就需要在配置路由的时候遵循一些约定的规则</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">vue-element-admin (gitee.io)</a></p><p><a href="https://www.cnblogs.com/jyk/p/16248880.html">一篇文章说清 webpack、vite、vue-cli、create-vue 的区别 - 金色海洋（jyk） - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一大坨东西&lt;br&gt;</summary>
    
    
    
    
    <category term="vue" scheme="https://www.sekyoro.top/tags/vue/"/>
    
    <category term="vue-element-template" scheme="https://www.sekyoro.top/tags/vue-element-template/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian学习与Zotero联动</title>
    <link href="https://www.sekyoro.top/2022/10/01/Obsidian%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/10/01/Obsidian%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-10-01T14:33:36.000Z</published>
    <updated>2022-10-05T14:38:50.812Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>比typora多一点功能,管理与看文献更方便<br><span id="more"></span></p><p>我看重Obsidian的点在于文档双向链接以及有关系图而Zotero适用于管理文献的,可以通过插件获取更多功能.</p><h2 id="Obesidian"><a href="#Obesidian" class="headerlink" title="Obesidian"></a>Obesidian</h2><p>Markdown语法,双向链接,网络视图(关系图)此外还有很多插件以及可以设置模板</p><p>Markdown不用多说了,多媒体文件插入类似typora直接插入即可.</p><p>双向链接,输入[[]]可以跳出链接,用于链接其他文件.至于网络视图<img data-src="http://cdn.sekyoro.top/imgs/image-20221005191227303.png" alt="image-20221005191227303" style="zoom:67%;" /></p><p>​           </p><p>打开局部关系图即可</p><h2 id="Zotero"><a href="#Zotero" class="headerlink" title="Zotero"></a>Zotero</h2><p>用于文献管理,可以下载一些插件,按照提示装上那个浏览器的插件</p><h3 id="文献导入"><a href="#文献导入" class="headerlink" title="文献导入"></a>文献导入</h3><p>先建立一个文件夹, 打开文献网站点击插件就能直接导入了,或者下载文件拖拽到相应位置.</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005200640214.png" alt="image-20221005200640214" style="zoom:50%;" /></p><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>简单但很有用的操作,打上标签就知道论文是什么类型了.</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005205211225.png" alt="image-20221005205211225" style="zoom:67%;" /></p><p>还可以修改标签颜色</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005205915134.png" alt="image-20221005205915134" style="zoom:67%;" /></p><p>还可以添加笔记</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005210030322.png" alt="image-20221005210030322" style="zoom:67%;" /></p><p>双击查看文章</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005210204818.png" alt="image-20221005210204818" style="zoom:67%;" /></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img data-src="http://cdn.sekyoro.top/imgs/image-20221005211654155.png" alt="image-20221005211654155"></p><p>Zotero文件由pdf文件和快照组成</p><h3 id="Zotfile插件"><a href="#Zotfile插件" class="headerlink" title="Zotfile插件"></a>Zotfile插件</h3><p>重命名是 ZotFile 插件提供的功能，但属于文献的日常管理，所以放在这里讲。除了会将 PDF 标题修改为规定格式，该功能最常用来将文献迁移到自定义的目录下，也就是说它会把原本存在 Zotero 数据目录下的 PDF 文件转换为一个指向 OneDrive（对于我来说）中文件的软链接。</p><p>这也意味着导入一篇文献需要完成三步操作：拖入 PDF 文献，等待元数据检索完成并检查（或先导入元数据再拖入 PDF 文件），最后右键选择 Rename Attachments。比较繁琐，但没办法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1Ya4y1E7Mo/?vd_source=177ef88aa6608bc3652c72d71b0aa098">超好用笔记软件！神奇的Obsidian黑曜石Markdown文本编辑知识管理工具，成为你的第二大脑【方俊皓同学】_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1up4y1i7Hr/">我是如何使用Obsidian的 | 黑曜石Markdown笔记软件入门讲解 | 轻松设置懒人包【方俊皓同学】_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/347493385">Zotero：科研小白的第一款文献管理软件 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/349638221">Obsidian：一款完美的科研笔记/知识管理软件 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/98428625?from_voters_page=true">文献管理工具（一）：Zotero的操作指南 - 知乎 (zhihu.com)</a></p><p><a href="https://bend1031.github.io/2021/01/10/Zotero-uses-plug-in-Mdnotes-to-link-with-Obsidian/">Zotero 利用插件 Mdnotes 与 Obsidian 联动 - Bend的博客 | Bend’s Blog (bend1031.github.io)</a></p><p><a href="https://www.bilibili.com/video/BV1ZE411p7qT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=177ef88aa6608bc3652c72d71b0aa098">Zotero基础操作，比Endnote更好用的文献管理软件_哔哩哔哩_bilibili</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;比typora多一点功能,管理与看文献更方便&lt;br&gt;</summary>
    
    
    
    
    <category term="Obsidian" scheme="https://www.sekyoro.top/tags/Obsidian/"/>
    
    <category term="workflow" scheme="https://www.sekyoro.top/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>记录一次wp重装</title>
    <link href="https://www.sekyoro.top/2022/09/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1wp%E9%87%8D%E8%A3%85/"/>
    <id>https://www.sekyoro.top/2022/09/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1wp%E9%87%8D%E8%A3%85/</id>
    <published>2022-09-28T05:40:46.000Z</published>
    <updated>2022-09-28T08:37:10.867Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>网站出现了一点问题<br><span id="more"></span></p><p>之前用wordpress安装了主题但后面出了点问题,像是少了css文件<del>不排除被攻击了:cry:</del>,后面发现获取不到样式文件应该https有关.</p><p>重新装,把之前的wordpress文件都删掉,然后开始重装.这里主要写一下注意点.</p><h2 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h2><p>我用的是宝塔面板,添加站点,没有什么特别的,但是我在创建后发现进入网页还是显示不存在,这样反复几次我都崩溃了,结果在手机上访问网页又可以.浏览器退出再访问又行了,说明跟浏览器缓存有关.</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20220928152210895.png" alt="image-20220928152210895"></p><p>这是第一步,先在宝塔面板上创建一个站点,具体方法看参考网址,这里我不说了.这一步主要设置域名和ip,网站文件夹</p><h2 id="wordpress文件"><a href="#wordpress文件" class="headerlink" title="wordpress文件"></a>wordpress文件</h2><p>下载wordpress,放入第一步的文件夹中,解压后进入网页</p><p>创建数据库并填入信息,进入安装页</p><p><img data-src="http://cdn.sekyoro.top/imgs/image-20220928152659012.png" alt="image-20220928152659012"></p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>然后是换主题,下载一个主题,放入wp-content中的theme的文件夹中,在wp中有主题更改选项,直接改就行.</p><h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><p>我是在腾讯云买的域名,也是在办的免费SSL证书,然后在宝塔面板填上密钥和证书</p><h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>可以直接在wordpress中下载,也可以在其他地方下载放到文件夹下</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/47166916">wordpress怎么安装？小白教程 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/313474705">宝塔面板安装和搭建wordpress完整教程(新手指南) - 知乎 (zhihu.com)</a></p><p><a href="https://www.vpsss.net/19231.html">如何申请腾讯云免费ssl证书并部署到宝塔面板？-魏艾斯笔记 (vpsss.net)</a></p><p><a href="https://themeforwp.net/archives/wordpress-install-plugin/#:~:text=对于免费插件，一般我们都可以通过在 WordPress插件库,中搜索名称寻找，找到插件后点开详情页，会看到一个蓝色的Download按钮，点击它就会下载插件的安装包 如果是付费插件的话，一般都需要在插件的网站单独下载 下载下来一般都是zip的安装包，这个安装包就是插件的文件，接下来我们直接将其上传即可">WordPress安装插件的3种方法 - WP主题站 (themeforwp.net)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网站出现了一点问题&lt;br&gt;</summary>
    
    
    
    
    <category term="wordpress" scheme="https://www.sekyoro.top/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>cs224w学习</title>
    <link href="https://www.sekyoro.top/2022/09/22/cs224w%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/09/22/cs224w%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-09-22T12:25:03.000Z</published>
    <updated>2022-09-23T03:35:49.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>顺便学一下,还很重要的.主讲人是斯坦福大牛Jure Leskovec，他是图表示学习方法 node2vec 和 GraphSAGE 作者之一。<br><span id="more"></span></p><blockquote><p>Complex data can be represented as a graph of relationships between objects. Such networks are a fundamental tool for modeling social, technological, and biological systems. This course focuses on the computational, algorithmic, and modeling challenges specific to the analysis of massive graphs. By means of studying the underlying graph structure and its features, students are introduced to machine learning techniques and data mining tools apt to reveal insights on a variety of networks.</p></blockquote><p>网络相比一般的图像,文字的特殊性.没有空间局部性</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://web.stanford.edu/class/cs224w/">CS224W | Home (stanford.edu)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;顺便学一下,还很重要的.主讲人是斯坦福大牛Jure Leskovec，他是图表示学习方法 node2vec 和 GraphSAGE 作者之一。&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>flask学习</title>
    <link href="https://www.sekyoro.top/2022/09/19/flask%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/09/19/flask%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-09-19T02:01:23.000Z</published>
    <updated>2022-09-19T10:19:33.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java有一套spring但是略显笨重而且对于个人平时玩玩来说总感觉没必要(如果掌握了的话效率还是不错的) python的web框架有django和flask等</p><span id="more"></span><p>先安装环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>即可 安装最新版</p><p>按照官网教程</p><h2 id="最小的应用"><a href="#最小的应用" class="headerlink" title="最小的应用"></a>最小的应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>首先我们导入了 <a href="https://flask.net.cn/api.html#flask.Flask"><code>Flask</code></a> 类。 该类的实例将会成为我们的 WSGI 应用。</li><li>接着我们创建一个该类的实例。第一个参数是应用模块或者包的名称。如果你使用 一个单一模块（就像本例），那么应当使用 <code>__name__</code> ，因为名称会根据这个 模块是按应用方式使用还是作为一个模块导入而发生变化（可能是 ‘<strong>main</strong>’ ， 也可能是实际导入的名称）。这个参数是必需的，这样 Flask 才能知道在哪里可以 找到模板和静态文件等东西。更多内容详见 <a href="https://flask.net.cn/api.html#flask.Flask"><code>Flask</code></a> 文档。</li><li>然后我们使用 <a href="https://flask.net.cn/api.html#flask.Flask.route"><code>route()</code></a> 装饰器来告诉 Flask 触发函数的 URL 。</li><li>函数名称被用于生成相关联的 URL 。函数最后返回需要在用户浏览器中显示的信息。</li></ol><p><strong>WSGI的介绍</strong>：</p><p>全称Python Web Server Gateway Interface，指定了web服务器和Python web应用或web框架之间的标准接口，以提高web应用在一系列web服务器间的移植性。 具体可查看 <a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0333/">官方文档</a></p><p>从以上介绍我们可以看出：</p><ol><li>WSGI是一套接口标准协议/规范；</li><li>通信（作用）区间是Web服务器和Python Web应用程序之间；</li><li>目的是制定标准，以保证不同Web服务器可以和不同的Python程序之间相互通信</li></ol><p>请不要使用 <code>flask.py</code> 作为应用名称，这会与 Flask 本身发生冲突。</p><p><strong>flask</strong> 命令或者 python 的 <code>-m</code> 开关来运行这个应用。在 运行应用之前，需要在终端里导出 <code>FLASK_APP</code> 环境变量:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">export</span> FLASK_APP=hello.py</span><br><span class="line">$ flask run</span><br><span class="line"> * Running on http:<span class="comment">//127.0.0.1:5000/</span></span><br></pre></td></tr></table></figure><p>通过flask run -h [host] -p [port]指定主机和端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FLASK_ENV=development</span><br></pre></td></tr></table></figure><p>打开开发环境的功能</p><ol><li>激活调试器。</li><li>激活自动重载。</li><li>打开 Flask 应用的调试模式。</li></ol><p>还可以通过导出 <code>FLASK_DEBUG=1</code> 来单独控制调试模式的开关,<strong>绝对不能在生产环境 中使用调试器</strong></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>现代 web 应用都使用有意义的 URL ，这样有助于用户记忆，网页会更得到用户的青睐， 提高回头率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index page&#x27;</span></span><br><span class="line"><span class="comment"># print(__name__)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>可以动态变化 URL 的某些部分， 还可以为一个函数指定多个规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="comment"># 显示用户名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(username)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span>(<span class="params">post_id</span>):</span></span><br><span class="line">    <span class="comment"># 显示提交整型的用户&quot;id&quot;的结果，注意&quot;int&quot;是将输入的字符串形式转换为整型数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(post_id)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span>(<span class="params">subpath</span>):</span></span><br><span class="line">    <span class="comment"># 显示 /path/ 之后的路径名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(subpath)</span><br></pre></td></tr></table></figure><p>转换器的主要类型如下：</p><div class="table-container"><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>string</td><td>默认的数据类型，接受没有任何斜杠“/”的字符串</td></tr><tr><td>int</td><td>接受整型</td></tr><tr><td>float</td><td>接受浮点类型</td></tr><tr><td>path</td><td>和 string 类似，但是接受斜杠“/”</td></tr><tr><td>uuid</td><td>只接受 uuid 字符串</td></tr></tbody></table></div><h3 id="唯一的-URL-重定向行为"><a href="#唯一的-URL-重定向行为" class="headerlink" title="唯一的 URL / 重定向行为"></a>唯一的 URL / 重定向行为</h3><p>以下两条规则的不同之处在于是否使用尾部的斜杠。:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br></pre></td></tr></table></figure><p><code>projects</code> 的 URL 是中规中矩的，尾部有一个斜杠，看起来就如同一个文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，帮你在尾部加上一个斜杠。</p><p><code>about</code> 的 URL 没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助 搜索引擎避免重复索引同一页面。</p><h3 id="构建URL"><a href="#构建URL" class="headerlink" title="构建URL"></a>构建URL</h3><p>使用url_for()函数</p><p><a href="https://flask.net.cn/api.html#flask.url_for"><code>url_for()</code></a> 函数用于构建指定函数的 URL。它把函数名称作为第一个 参数。它可以接受任意个关键字参数，每个关键字参数对应 URL 中的变量。未知变量 将添加到 URL 中作为查询参数。</p><p>为什么不在把 URL 写死在模板中，而要使用反转函数 <a href="https://flask.net.cn/api.html#flask.url_for"><code>url_for()</code></a> 动态构建？</p><ol><li>反转通常比硬编码 URL 的描述性更好。</li><li>你可以只在一个地方改变 URL ，而不用到处乱找。</li><li>URL 创建会为你处理特殊字符的转义和 Unicode 数据，比较直观。</li><li>生产的路径总是绝对路径，可以避免相对路径产生副作用。</li><li>如果你的应用是放在 URL 根路径之外的地方（如在 <code>/myapplication</code> 中，不在 <code>/</code> 中）， <a href="https://flask.net.cn/api.html#flask.url_for"><code>url_for()</code></a> 会为你妥善处理。</li></ol><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>Web 应用使用不同的 HTTP 方法处理 URL 。当你使用 Flask 时，应当熟悉 HTTP 方法。 缺省情况下，一个路由只回应 <code>GET</code> 请求。 可以使用 <a href="https://flask.net.cn/api.html#flask.Flask.route"><code>route()</code></a> 装饰器的 <code>methods</code> 参数来处理不同的 HTTP 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></table></figure><p>如果当前使用了 GET 方法， Flask 会自动添加 <code>HEAD</code> 方法支持，并且同时还会 按照 <a href="https://www.ietf.org/rfc/rfc2068.txt">HTTP RFC</a> 来处理 <code>HEAD</code> 请求。同样， <code>OPTIONS</code> 也会自动实现。</p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>动态的 web 应用也需要静态文件，一般是 CSS 和 JavaScript 文件。理想情况下你的 服务器已经配置好了为你的提供静态文件的服务。但是在开发过程中， Flask 也能做好 这项工作。只要在你的包或模块旁边创建一个名为 <code>static</code> 的文件夹就行了。 静态文件位于应用的 <code>/static</code> 中。</p><p>使用特定的 <code>&#39;static&#39;</code> 端点就可以生成相应的 URL</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个静态文件在文件系统中的位置应该是 <code>static/style.css</code> 。</p><h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>在 Python 内部生成 HTML 不好玩，且相当笨拙。因为你必须自己负责 HTML 转义， 以确保应用的安全。因此， Flask 自动为你配置 <a href="http://jinja.pocoo.org/">Jinja2</a> 模板引擎</p><p>Flask 将会在 <code>templates</code> 文件夹中寻找模板。因此如果你的应用是个模块，这个文件夹在模块的旁边，如果它是一个包，那么这个文件夹在你的包里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello From Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 如果 name 不为空则将 name 渲染出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 如果 name 为空则打印 Hello World! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在模板中你也可以使用 <a href="http://flask.pocoo.org/docs/1.0/api/#flask.request">request</a>、<a href="http://flask.pocoo.org/docs/1.0/api/#flask.session">session</a> 和 <a href="http://flask.pocoo.org/docs/1.0/api/#flask.g">g</a> 对象，也能使用函数 <a href="http://flask.pocoo.org/docs/1.0/api/#flask.get_flashed_messages">get_flashed_messages()</a> 。</p><p>模板继承是十分有用的。如果想要知道模板继承如何工作的话，请阅读文档<a href="http://flask.pocoo.org/docs/1.0/patterns/templateinheritance/#template-inheritance">模板继承</a>。基本的模板继承使得某些特定元素（如标题、导航和页脚）在每一页成为可能</p><p>引入css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello ShiYanLou &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="接收请求数据"><a href="#接收请求数据" class="headerlink" title="接收请求数据"></a>接收请求数据</h2><p>在 Flask 中由全局对象 <code>request</code> 来提供这些信息。如果你有一定的 Python 经验，你会好奇这个对象怎么可能是全局的，并且 Flask 是怎么还能保证线程安全。答案是上下文作用域</p><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>首先你需要从 flask 模块中导入 <code>request</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><p>当前请求的方法可以用<code>method</code>属性来访问。你可以用<code>form</code>属性来访问表单数据 (数据在 <code>POST</code> 或者<code>PUT</code>中传输)。</p><p>如果在<code>form</code>属性中不存在上述键值会发生些什么？在这种情况下会触发一个特别的 <code>KeyError</code>。你可以像捕获标准的<code>KeyError</code>一样来捕获它，如果你不这样去做，会显示一个<code>HTTP 400 Bad Request</code>错误页面。所以很多情况下你不需要处理这个问题。</p><p>你可以用<code>args</code>属性来接收在<code>URL ( ?key=value )</code>中提交的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们推荐使用<code>get</code>来访问 URL 参数或捕获<code>KeyError</code>，因为用户可能会修改 URL，向他们显示一个<code>400 bad request</code>页面不是用户友好的。</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>你能够很容易地用 Flask 处理文件上传。只要确保在你的 HTML 表单中不要忘记设置属性 <code>enctype=&quot;multipart/form-data&quot;</code> ，否则浏览器将不会传送文件。</p><p>上传的文件是存储在内存或者文件系统上一个临时位置。你可以通过请求对象中<code>files</code>属性访问这些文件。每个上传的文件都会存储在这个属性字典里。它表现得像一个标准的 Python <code>file</code>对象，但是它同样具有<code>save()</code>方法，该方法允许你存储文件在服务器的文件系统上。</p><p>已上传的文件被储存在内存或文件系统的临时位置。你可以通过请求对象 <code>files</code> 属性来访问上传的文件。每个上传的文件都储存在这个 字典型属性中。这个属性基本和标准 Python <code>file</code> 对象一样，另外多出一个 用于把上传文件保存到服务器的文件系统中的 <a href="https://werkzeug.palletsprojects.com/en/0.15.x/datastructures/#werkzeug.datastructures.FileStorage.save"><code>save()</code></a> 方法。下例展示其如何运作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/uploaded_file.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果你想要知道在上传到你的应用之前在客户端的文件名称，你可以访问<code>filename</code>属性。但请记住永远不要信任这个值，因为这个值可以伪造。如果你想要使用客户端的文件名来在服务器上存储文件，把它传递到 <code>Werkzeug</code> 提供给你的 <code>secure_filename()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/&#x27;</span> + secure_filename(f.filename))</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="文件上传方案"><a href="#文件上传方案" class="headerlink" title="文件上传方案"></a>文件上传方案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, request, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;/path/to/the/uploads&#x27;</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER</span><br></pre></td></tr></table></figure><p>首先我们导入了一堆东西，大多数是浅显易懂的。 <code>werkzeug.secure_filename()</code> 会在稍后解释。 <code>UPLOAD_FOLDER</code> 是上传文 件要储存的目录， <code>ALLOWED_EXTENSIONS</code> 是允许上传的文件扩展名的集合。</p><p>下一个函数检查扩展名是否合法，上传文件，把用户重定向到已上传文件的 URL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># check if the post request has the file part</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># if user does not select file, browser also</span></span><br><span class="line">        <span class="comment"># submit an empty part without filename</span></span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            flash(<span class="string">&#x27;No selected file&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;uploaded_file&#x27;</span>,</span><br><span class="line">                                    filename=filename))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Upload new File&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Upload new File&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=post enctype=multipart/form-data&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=file name=file&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=submit value=Upload&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>那么 <a href="https://werkzeug.palletsprojects.com/en/0.15.x/utils/#werkzeug.utils.secure_filename"><code>secure_filename()</code></a> 函数到底是有什么用？有一条原 则是“永远不要信任用户输入”。这条原则同样适用于已上传文件的文件名。所有提 交的表单数据可能是伪造的，文件名也可以是危险的。此时要谨记：在把文件保存到 文件系统之前总是要使用这个函数对文件名进行安检。</p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><p>要访问 cookies ，可以使用 <a href="https://flask.net.cn/api.html#flask.Request.cookies"><code>cookies</code></a> 属性。可以使用响应 对象 的 <a href="https://flask.net.cn/api.html#flask.Response.set_cookie"><code>set_cookie</code></a> 方法来设置 cookies 。请求对象的 <a href="https://flask.net.cn/api.html#flask.Request.cookies"><code>cookies</code></a> 属性是一个包含了客户端传输的所有 cookies 的字典。在 Flask 中，如果使用 <a href="https://flask.net.cn/quickstart.html#sessions">会话</a> ，那么就不要直接使用 cookies ，因为 <a href="https://flask.net.cn/quickstart.html#sessions">会话</a> 比较安全一些。</p><p>读取 cookies:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    username = request.cookies.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="comment"># use cookies.get(key) instead of cookies[key] to not get a</span></span><br><span class="line">    <span class="comment"># KeyError if the cookie is missing.</span></span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>使用 <a href="https://flask.net.cn/api.html#flask.redirect"><code>redirect()</code></a> 函数可以重定向。使用 <a href="https://flask.net.cn/api.html#flask.abort"><code>abort()</code></a> 可以 更早退出请求，并返回错误代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort, redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    abort(<span class="number">401</span>)</span><br><span class="line">    this_is_never_executed()</span><br></pre></td></tr></table></figure><p>上例实际上是没有意义的，它让一个用户从索引页重定向到一个无法访问的页面（401 表示禁止访问）。但是上例可以说明重定向和出错跳出是如何工作的。</p><p>缺省情况下每种出错代码都会对应显示一个黑白的出错页面。使用 <a href="https://flask.net.cn/api.html#flask.Flask.errorhandler"><code>errorhandler()</code></a> 装饰器可以定制出错页面:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;page_not_found.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></figure><p>注意 <a href="https://flask.net.cn/api.html#flask.render_template"><code>render_template()</code></a> 后面的 <code>404</code> ，这表示页面对就的出错 代码是 404 ，即页面不存在。缺省情况下 200 表示：一切正常</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>一个视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串，它被转换成一个响应主体是该字符串，错误代码为 <code>200 OK</code> ，媒体类型为<code>text/html</code>的响应对象。Flask 把返回值转换成响应对象的逻辑如下：</p><ol><li>如果返回的是一个合法的响应对象，它会直接从视图返回。</li><li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li><li>如果返回的是一个元组而且元组中元素能够提供额外的信息。这样的元组必须是(<code>response, status, headers</code>) 形式且至少含有其中的一个元素。<code>status</code>值将会覆盖状态代码，<code>headers</code>可以是一个列表或额外的消息头值字典。</li><li>如果上述条件均不满足，Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象</li></ol><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>除了请求对象之外还有一种称为 <a href="https://flask.net.cn/api.html#flask.session"><code>session</code></a> 的对象，允许你在不同请求 之间储存信息。这个对象相当于用密钥签名加密的 cookie ，即用户可以查看你的 cookie ，但是如果没有密钥就无法修改它。</p><p>使用会话之前你必须设置一个密钥。举例说明:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, escape, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the secret key to some random bytes. Keep this really secret!</span></span><br><span class="line">app.secret_key = <span class="string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You are not logged in&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="comment"># remove the username from the session if it&#x27;s there</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这里用到的 <a href="https://flask.net.cn/api.html#flask.escape"><code>escape()</code></a> 是用来转义的。如果不使用模板引擎就可以像上例 一样使用这个函数来转义</p><h2 id="消息闪烁"><a href="#消息闪烁" class="headerlink" title="消息闪烁"></a>消息闪烁</h2><p>好的应用和用户界面全部是关于反馈。如果用户得不到足够的反馈，他们可能会变得讨厌这个应用。Flask 提供了一个真正的简单的方式来通过消息闪现系统给用户反馈。消息闪现系统基本上使得在请求结束时记录信息并在下一个 （且仅在下一个）请求中访问。通常结合模板布局来显示消息。</p><p>使用<code>flash()</code>方法来闪现一个消息，使用<code>get_flashed_messages()</code>能够获取消息，<code>get_flashed_messages()</code>也能用于模板中。</p><h2 id="日志和整合-WSGI-中间件"><a href="#日志和整合-WSGI-中间件" class="headerlink" title="日志和整合 WSGI 中间件"></a>日志和整合 WSGI 中间件</h2><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>有时候你会遇到一种情况：理论上来说你处理的数据应该是正确的，然而实际上并不正确。比如你可能有一些客户端代码，代码向服务器发送一个 HTTP 请求，但是显然它是错误的。这可能是由于用户篡改数据，或客户端代码失败。大部分时候针对这一情况返回<code>400 Bad Request</code>就可以了，但是有时候不能这样做，代码必须继续工作。</p><p>你也有可能想要记录一些发生的不正常事情。这时候日志就派上用处。从 Flask 0.3 开始日志记录是预先配置好的</p><h4 id="整合-WSGI-中间件"><a href="#整合-WSGI-中间件" class="headerlink" title="整合 WSGI 中间件"></a>整合 WSGI 中间件</h4><p>如果你想给你的应用添加 WSGI 中间件，你可以封装内部 WSGI 应用。例如如果你想使用 Werkzeug 包中的某个中间件来应付 lighttpd 中的 bugs，你可以这样做:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.contrib.fixers <span class="keyword">import</span> LighttpdCGIRootFix</span><br><span class="line">app.wsgi_app = LighttpdCGIRootFix(app.wsgi_app)</span><br></pre></td></tr></table></figure><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>包括四个视图函数的编写：主页视图、新建博客视图、登录视图和等初始图以及三个模板文件。最后编写了针对页面进行美化的 style.css 文件。完成后，即可启动项目并执行登录、编写博客等操作</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://flask.net.cn/">Flask 中文网</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;java有一套spring但是略显笨重而且对于个人平时玩玩来说总感觉没必要(如果掌握了的话效率还是不错的) python的web框架有django和flask等&lt;/p&gt;</summary>
    
    
    
    
    <category term="flask" scheme="https://www.sekyoro.top/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>c++与算法学习</title>
    <link href="https://www.sekyoro.top/2022/07/09/c-%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2022/07/09/c-%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-09T12:17:38.000Z</published>
    <updated>2022-07-10T03:17:47.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>考研咯,现在复习复习c++写点数据结构和算法题.<br><span id="more"></span></p><h2 id="C-复习"><a href="#C-复习" class="headerlink" title="C++复习"></a>C++复习</h2><p>基本的数组指针字符串结构体控制结构就不说了,主要写写STL.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;考研咯,现在复习复习c++写点数据结构和算法题.&lt;br&gt;</summary>
    
    
    
    
    <category term="c++" scheme="https://www.sekyoro.top/tags/c/"/>
    
    <category term="算法" scheme="https://www.sekyoro.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>animeGAN</title>
    <link href="https://www.sekyoro.top/2022/06/14/animeGAN/"/>
    <id>https://www.sekyoro.top/2022/06/14/animeGAN/</id>
    <published>2022-06-14T13:52:58.000Z</published>
    <updated>2022-06-14T13:52:58.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
