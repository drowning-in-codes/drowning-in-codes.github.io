<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sekyoro的博客小屋</title>
  
  
  <link href="https://www.sekyoro.top/atom.xml" rel="self"/>
  
  <link href="https://www.sekyoro.top/"/>
  <updated>2024-04-02T04:31:41.194Z</updated>
  <id>https://www.sekyoro.top/</id>
  
  <author>
    <name>Sekyoro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Web框架小赏</title>
    <link href="https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-04-02T03:23:04.000Z</published>
    <updated>2024-04-02T04:31:41.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.</p><p><img data-src="https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png" alt="img" style="zoom: 33%;" /></p><span id="more"></span><p>Go的web框架生态依旧零零碎碎,没有一个大的统一框架,不过这也正常,目前除了Java,其他都难说.</p><p>目前Go管理包都使用mod了,不用去看网上老教程的什么GO PATH配一堆.</p><h2 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := gin.Default()</span><br><span class="line">  r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin应该是最常使用的了,star数目前75.1k,官方例子也比较多<a href="https://gin-gonic.com/zh-cn/docs/">文档 | Gin Web Framework (gin-gonic.com)</a></p><h2 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/labstack/echo/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">&quot;:1323&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁高性能扩展性强的web框架,看起来跟gin没有什么太大的差别.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.HTML(http.StatusOK, <span class="string">&quot;&lt;strong&gt;Hello, World!&lt;/strong&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iris"><a href="#Iris" class="headerlink" title="Iris"></a>Iris</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/kataras/iris/v12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  app := iris.New()</span><br><span class="line">  app.Use(iris.Compression)</span><br><span class="line">  app.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="string">&quot;Hello &lt;strong&gt;%s&lt;/strong&gt;!&quot;</span>, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := iris.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v1</span></span><br><span class="line">    v1 := app.Party(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v2</span></span><br><span class="line">    v2 := app.Party(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><p>号称是受express影响的框架,看代码还是不错的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := fiber.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /api/register</span></span><br><span class="line">    app.Get(<span class="string">&quot;/api/*&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;✋ %s&quot;</span>, c.Params(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; ✋ register</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /flights/LAX-SFO</span></span><br><span class="line">    app.Get(<span class="string">&quot;/flights/:from-:to&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;💸 From: %s, To: %s&quot;</span>, c.Params(<span class="string">&quot;from&quot;</span>), c.Params(<span class="string">&quot;to&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 💸 From: LAX, To: SFO</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /dictionary.txt</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:file.:ext&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;📃 %s.%s&quot;</span>, c.Params(<span class="string">&quot;file&quot;</span>), c.Params(<span class="string">&quot;ext&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 📃 dictionary.txt</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john/75</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name/:age/:gender?&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;👴 %s is %s years old&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>), c.Params(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 👴 john is 75 years old</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;Hello, %s 👋!&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; Hello john 👋!</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    log.Fatal(app.Listen(<span class="string">&quot;:3000&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后部署可以使用Render<a href="https://docs.render.com/">Docs + Quickstarts | Render Docs</a>,还有一些go的web框架,但感觉文档不是很好或者目前用的人还不多,所以就先不说了.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png&quot; alt=&quot;img&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vitepress:SSG框架使用</title>
    <link href="https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-01T12:34:30.000Z</published>
    <updated>2024-04-02T03:14:01.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro<a href="https://docs.astro.build/zh-cn/getting-started/">入门指南 | Docs (astro.build)</a>,这个框架默认服务端渲染.<br><span id="more"></span></p><p>对于前端,可选的文档框架还是很多的,我最推荐vitepress(这也是本篇文章主要讲的),或者你也可以使用vuepress.</p><h3 id="Vitepress"><a href="#Vitepress" class="headerlink" title="Vitepress"></a>Vitepress</h3><p>vue的团队打造,很好用.自带的样式不错,自定义性强.</p><p>配置文件配置主题的标题,描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vitepress/config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// site-level options</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;VitePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Just playing around.&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// theme-level options</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主题配置包括logo,nav,siderbar,footer等.我试用了一下,适合写<strong>产品文档</strong>,它本身的官网<a href="https://vitepress.dev/">VitePress | Vite &amp; Vue Powered Static Site Generator</a>就是vitepress写的.</p><p>可以在这个配置里写nav和sidebar的信息.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vitepress&quot;</span>;</span><br><span class="line"><span class="comment">// https://vitepress.dev/reference/site-config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;protools&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;tools which I learn and use&quot;</span>,</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// https://vitepress.dev/reference/default-theme-config</span></span><br><span class="line">    <span class="attr">search</span>: &#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">footer</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Released under the MIT License.&quot;</span>,</span><br><span class="line">      <span class="attr">copyright</span>: <span class="string">`Copyright ©<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()&#125;</span>.Made with ❤ &lt;a href=&quot;https://sekyoro.top&quot;&gt;Sekyoro&lt;/a&gt;`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">socialLinks</span>: [</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">&quot;github&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;https://github.com/drowning-in-codes&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Home page作为主页,layout设置为<code>home</code>,其他的可以设置为<code>doc</code></p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240401233049341.png" alt="image-20240401233049341"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section"># https://vitepress.dev/reference/default-theme-home-page</span></span><br><span class="line">layout: home</span><br><span class="line"></span><br><span class="line">hero:</span><br><span class="line">  name: &quot;protools&quot;</span><br><span class="line">  text: &quot;tools which I learn and use&quot;</span><br><span class="line">  tagline: Help me and others to learn and use.</span><br><span class="line">  image:</span><br><span class="line"><span class="code">    src: /logo.png</span></span><br><span class="line"><span class="code">    alt: protools</span></span><br><span class="line"><span class="code">  actions:</span></span><br><span class="line"><span class="code">    - theme: brand</span></span><br><span class="line"><span class="code">      text: &#x27;Web框架&#x27;</span></span><br><span class="line"><span class="code">      link: &#x27;/node_web&#x27; </span></span><br><span class="line"><span class="code">features:</span></span><br><span class="line"><span class="code">  - title: Learn </span></span><br><span class="line"><span class="code">    details: No features</span></span><br><span class="line"><span class="code">---</span></span><br></pre></td></tr></table></figure><p>在写markdown时可以多利用vitepress自带的一些特性,</p><p>写完之后build一下把.vitepress目录下的dist拿来部署就行.我就部署在了vercel上,整个过程很顺畅<a href="https://protool-ten.vercel.app/">protools (protool-ten.vercel.app)</a></p><p>但是也有缺点,比如markdown增加了一些东西增加学习成本.不过官方文档还是写得很清楚的.</p><h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h3><p>也是js的静态网站生成器<a href="https://docsify.js.org/#/?id=docsify">docsify</a>.不过都有vitepress了,感觉必要性不是很大,这种东西没必要搞几个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p>启动完成后，你可以在 ./docs 子目录下看到文件列表。</p><ul><li>作为入口文件的 index.html</li><li>作为主页的 README.md</li><li>.nojekyll 阻止 GitHub 页面忽略以下划线开头的文件</li></ul><p>下面是Python的文档生成器.适合Python写的库</p><h3 id="Mkdocs"><a href="#Mkdocs" class="headerlink" title="Mkdocs"></a>Mkdocs</h3><p><a href="https://www.mkdocs.org/">mkdocs.org</a>看界面就有Python那种感觉了,毕竟Python的文档经常长这种样子.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install mkdocs</span><br><span class="line">mkdocs new my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p><img data-src="https://www.mkdocs.org/img/initial-layout.png" alt="The initial MkDocs layout"></p><p>在<code>mkdocs.yml</code>配置中加上网站信息和nav等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site_url:</span> <span class="string">https://example.com/</span></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">readthedocs</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs build</span><br></pre></td></tr></table></figure><p>这种网站可以部署在<a href="https://www.pythonanywhere.com/">Host, run, and code Python in the cloud: PythonAnywhere (www.pythonanywhere.com)</a>和github pages上,vercel上目前不太行.</p><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p><a href="https://zh-sphinx-doc.readthedocs.io/en/latest/tutorial.html">Sphinx初尝 — Sphinx 使用手册 (zh-sphinx-doc.readthedocs.io)</a></p><p>不推荐,本身不支持markdown,使用的是<code>reStructuredText</code>编写,界面也一般.</p><p>其他的相当于类似在线服务了,基本上不需要配置直接粘贴内容就行</p><h3 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h3><p>本身还是很不错的服务<a href="https://www.gitbook.com/">GitBook – Knowledge management for technical teams</a></p><p>很多人拿来制作电子书</p><h3 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h3><p><a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具 (yuque.com)</a>国内的平台,正如介绍一样,可以拿来写文档和提供知识</p><p>最后总结一下,如果写偏技术性文档,偏前端的技术或者产品使用vitepress,其他用mkdocs(也可以都是用vitepress,主要是前端的风格跟vitepress很搭)</p><p>如果面向大众的那种知识文档,用gitbook就行.</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ol><li><a href="https://blog.csdn.net/m0_46521785/article/details/119812280">几款文档框架：Mkdocs、Sphinx、Teadocs、docsify-CSDN博客</a></li><li><a href="https://vitepress.dev/guide/getting-started">Getting Started | VitePress</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro&lt;a href=&quot;https://docs.astro.build/zh-cn/getting-started/&quot;&gt;入门指南 | Docs (astro.build)&lt;/a&gt;,这个框架默认服务端渲染.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node后端框架小赏</title>
    <link href="https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-03-30T12:49:50.000Z</published>
    <updated>2024-04-01T15:12:51.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.<br><span id="more"></span><br>这里就写写Express,Koa,Fastify以及Nest这几个框架的介绍以及示例代码,以供后续技术选型使用.</p><p>首先完全可以不使用框架写一些api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> parsedURL = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">   <span class="keyword">if</span> (parsedURL.pathname === <span class="string">&#x27;/api&#x27;</span>) &#123;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class="line">      res.end(<span class="string">`Hey <span class="subst">$&#123;parsedURL.query.name&#125;</span> <span class="subst">$&#123;parsedURL.query.lastname&#125;</span>`</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>久经考验的node后端小框架,本身功能挺少的,感觉还不如Flask.没有特重载,需要使用nodemon.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.get(<span class="string">&#x27;/api/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params)</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: req.params.name,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>重要概念是Middleware,通过使用这个中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET method route</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;sddsaf&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/api/:name/:age&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params);</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    <span class="attr">name</span>: req.params.name,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST method route</span></span><br><span class="line">app.post(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;POST request to the homepage&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> myLogger = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;LOGGED&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line">app.use(myLogger);</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&quot;/secret&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Accessing the secret section ...&quot;</span>);</span><br><span class="line">  next(); <span class="comment">// pass control to the next handler</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>express的可魔改性挺高的,可以使用多种中间件以及重载express的API</p><p>中间件分为应用级,路由级以及一些自带的和第三方的.</p><h3 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h3><p>应用级直接使用app.use()也可以使用app.get等.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 使用use可以连续定义多个中间件</span><br><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"># 使用app.<span class="built_in">get</span>可以连续定义多个中间件</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOriginalUrl</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const logStuff = [logOriginalUrl, logMethod]</span><br><span class="line">app.<span class="built_in">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, logStuff, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">res</span>.send(<span class="string">&#x27;User Info&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要跳过一个路由的中间件中的其他中间件函数，可调用 next(‘route’) 将控制权传递给下一个路由。注意：next(‘route’) 只适用于通过 app.METHOD() 或 router.METHOD() 函数加载的中间件函数。</p><blockquote><p>注意区分对应路由的handler和middleware.(感觉差别其实不是很大)前者一般负责主要事务逻辑比较多,后者负责一些logging啥的.</p></blockquote><h3 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time:&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span></span><br><span class="line">router.use(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// handler for the /user/:id path, which renders a special page</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params.id)</span><br><span class="line">  res.render(<span class="string">&#x27;special&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mount the router on the app</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><p>使用 router.use() 和 router.METHOD() 函数加载路由器级中间件。相当于细分颗粒度了,使用一个router的中间件作为app级别的中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// predicate the router with a check and bail out when needed</span></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.headers[<span class="string">&#x27;x-auth&#x27;</span>]) <span class="keyword">return</span> next(<span class="string">&#x27;router&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello, user!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the router and 401 anything falling through</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, router, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendStatus(<span class="number">401</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码使用路由中间件,如果访问没有x-auth头,就跳过其他中间件直到handlers</p><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自带中间件</p><ul><li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static</a> serves static assets such as HTML files, images, and so on.</li><li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li><li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li></ul><p>第三方中间件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// load the cookie-parsing middleware</span></span><br><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure><h3 id="重写express-API"><a href="#重写express-API" class="headerlink" title="重写express API"></a>重写express API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.response.sendStatus = <span class="function"><span class="keyword">function</span> (<span class="params">statusCode, type, message</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code is intentionally kept simple for demonstration purpose</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.contentType(type)</span><br><span class="line">    .status(statusCode)</span><br><span class="line">    .send(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(app.request, <span class="string">&#x27;ip&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;Client-IP&#x27;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>express的模板引擎可以使用Pug,Mustache,Ejs等</p><p>错误处理函数,包括一个默认的,这个默认的错误处理中间件函数被添加到中间件函数栈的末尾,也可添加自定义的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa的中间件想法跟express不太一样,而且本身没有route.比如下面的输出依次是logger,res,start,1,Hello,GET / - 1ms</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;logger&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.get(<span class="string">&#x27;X-Response-Time&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;res&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  <span class="built_in">console</span>.log(ms)</span><br><span class="line">  ctx.set(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="comment">// html</span></span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">    <span class="comment">// json</span></span><br><span class="line">   <span class="comment">// ctx.body = &#123; foo: &#x27;bar&#x27; &#125;;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa中有个context,可以给它增加属性.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.context.db = db();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.db);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ctx里面包含了基本所有需要的东西,包括request和response.</p><ul><li><code>ctx.header</code></li><li><code>ctx.headers</code></li><li><code>ctx.method</code></li><li><code>ctx.method=</code></li><li><code>ctx.url</code></li><li><code>ctx.url=</code></li><li><code>ctx.originalUrl</code></li><li><code>ctx.origin</code></li><li><code>ctx.href</code></li><li><code>ctx.path</code></li><li><code>ctx.path=</code></li><li><code>ctx.query</code></li><li><code>ctx.query=</code></li><li><code>ctx.querystring</code></li><li><p><code>ctx.querystring=</code>等</p></li><li><p><code>ctx.body</code></p></li><li><code>ctx.body=</code></li><li><code>ctx.status</code></li><li><code>ctx.status=</code></li><li><code>ctx.message</code></li><li><code>ctx.message=</code></li><li><code>ctx.length=</code></li><li><code>ctx.length</code></li><li><code>ctx.type=</code></li><li><code>ctx.type</code></li><li><code>ctx.headerSent</code></li><li><code>ctx.redirect()</code></li><li><code>ctx.attachment()</code></li><li><code>ctx.set()</code></li><li><code>ctx.append()</code></li><li><code>ctx.remove()</code></li><li><code>ctx.lastModified=</code></li><li><code>ctx.etag=</code></li></ul><p>路由还需要下载<code>koa-router</code>,koa本身不包含中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Home Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;About Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server started on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  log.error(<span class="string">&#x27;server error&#x27;</span>, err, ctx)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>总价一下,koa本身比较简洁,使用中间件的逻辑有点怪,使用await会调用下一个中间件,如果没有其他中间件了再调用handler,然后再回去.没有自带路由,而且对模板引擎支持力度也不够,适合写API.</p><h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><p>特点就是快,而且github上star挺多的,一般表明生态不会太差.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p>fastify也有中间件这种叫做插件plugin的东西.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">logger</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">app, options</span>) </span>&#123;</span><br><span class="line">    app.get(<span class="string">&#x27;/hi&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;hi&#x27;</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.register(routes)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> app.listen(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        app.log.error(err)</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  start()</span><br></pre></td></tr></table></figure><p>此外还有数据验证和序列化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">someKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">someOtherKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.post(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">response</span>: &#123;</span><br><span class="line">      <span class="number">200</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;</span><br><span class="line">          <span class="attr">hello</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.get(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于数据验证,该路由接受一个schema键，该schema键包含body、querystring、params和标头。</p><p>对于序列化,可以将序列化速度提高 2-3 倍。这还有助于防止潜在敏感数据的泄漏，因为 Fastify 将只序列化响应模式中的数据。</p><p>感觉它的文档写的不是很好啊,不过如果有其他框架基础倒还是好写.</p><p>对这种精小的框架,有对比<a href="https://plainenglish.io/blog/fastify-express-benchmark-4c4aebb726d6">I Built the Same API With Fastify, Express &amp; Bare Node.js. Here Are the Differences (plainenglish.io)</a>表明express还是占大头,即使fastify性能好一些,毕竟现在性能并不是一个应用的全部.</p><h2 id="Nest-js"><a href="#Nest-js" class="headerlink" title="Nest.js"></a>Nest.js</h2><p>Nest是针对项目的,简单的几个api的话还是用express这种吧.Nest有controller,provider,interceptor这种东西了,还全面支持ts,相当于向spring MVC迈进.</p><blockquote><p>app.controller.ts 带有单一路由的基本控制器。<br>app.controller.spec.ts 控制器的单元测试。<br>app.module.ts 应用程序的根模块。<br>app.service.ts 带有单一方法的基本服务。<br>main.ts 应用程序的入口文件，使用核心函数 NestFactory 创建 Nest 应用程序实例。</p></blockquote><p>要创建 Nest 应用程序实例需要使用核心 NestFactory 类。NestFactory 提供了几个静态方法，用于创建应用程序实例。create() 方法会返回一个应用程序对象，该对象符合 INestApplication 接口。该对象提供了一系列方法.</p><h3 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h3><p>控制器负责处理接收到的请求，并将响应返回给客户端。</p><p><img data-src="https://docs.nestjs.com/assets/Controllers_1.png" alt="img"></p><p>控制器的作用是接收应用程序的特定请求。<strong>路由机制控制哪个控制器接收哪些请求</strong>。通常情况下，每个控制器都有不止一个路由，不同的路由可以执行不同的操作。</p><p><strong>为了创建基本控制器，我们使用类和装饰器。装饰器将类与所需的元数据关联起来，使 Nest 能够创建路由图</strong>（将请求绑定到相应的控制器）。</p><p>一个module下包括controller和provider(service).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Controller,</span><br><span class="line">  Get,</span><br><span class="line">  Req,</span><br><span class="line">  Post,</span><br><span class="line">  Res,</span><br><span class="line">  Param,</span><br><span class="line">  HttpCode,</span><br><span class="line">  Body,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  findAll(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action returns all cats&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  find(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> param.id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action adds a new cat&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以看到在modules.ts中写controller和provider,相当于把handler和route都写了.有很多修饰器可以使用</p><div class="table-container"><table><thead><tr><th>装饰器</th><th>方法</th></tr></thead><tbody><tr><td><code>@Request(), @Req()</code></td><td><code>req</code></td></tr><tr><td><code>@Response(), @Res()</code><strong>*</strong></td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(key?: string)</code></td><td><code>req.params</code> / <code>req.params[key]</code></td></tr><tr><td><code>@Body(key?: string)</code></td><td><code>req.body</code> / <code>req.body[key]</code></td></tr><tr><td><code>@Query(key?: string)</code></td><td><code>req.query</code> / <code>req.query[key]</code></td></tr><tr><td><code>@Headers(name?: string)</code></td><td><code>req.headers</code> / <code>req.headers[name]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table></div><h3 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h3><p>Nest 中的许多基本类都可以被视为提供者，如服services, repositories, factories, helpers等。提供者的主要理念是它可以作为依赖注入；这意味着对象之间可以创建各种关系，而 “连接 “这些对象的功能在很大程度上可以委托给 Nest 运行时系统。</p><p><img data-src="https://docs.nestjs.com/assets/Components_1.png" alt="img"></p><p>可以创建一个service作为provider,@Injectable() 装饰器附加了元数据，声明 CatsService 是一个可由 Nest IoC 容器管理的类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> cats: Cat[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params">cat: Cat</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cats.push(cat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findAll(): Cat[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cats;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Cat &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Post, Body &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;Cat[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CatsService 是通过类构造函数注入的。请注意 private 语法的使用。这种速记方法允许我们在同一位置立即声明和初始化 catsService 成员。</p><p>现在已经定义了一个提供者（CatsService），并且有了该服务的消费者（CatsController），我们需要向 Nest 注册该服务，以便它能执行注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>controller中访问provider利用<strong>依赖注入</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>模块是一个用 @Module() 装饰器注解的类。@Module() 装饰器提供了 Nest 用来组织应用程序结构的元数据</p><p><img data-src="https://docs.nestjs.com/assets/Modules_1.png" alt="img"></p><p>每个应用程序至少有一个模块，即根模块。根模块是 Nest 用来构建应用程序图的起点—Nest 用来解决模块和提供程序之间的关系和依赖关系的内部数据结构。</p><p>建议将模块作为组织组件的有效方式。因此，对于大多数应用程序而言，最终架构将采用多个模块，每个模块封装一组密切相关的功能。</p><div class="table-container"><table><thead><tr><th>模块中内容</th><th>作用</th></tr></thead><tbody><tr><td><code>providers</code></td><td>the providers that will be instantiated by the Nest injector and that may be shared at least across this module</td></tr><tr><td><code>controllers</code></td><td>the set of controllers defined in this module which have to be instantiated</td></tr><tr><td><code>imports</code></td><td>the list of imported modules that export the providers which are required in this module</td></tr><tr><td><code>exports</code></td><td>the subset of <code>providers</code> that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (<code>provide</code> value)</td></tr></tbody></table></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同一个modules中的不同controller可以共享provider,此外不同modules可以import还可以导出provider</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>每个模块都自动成为共享模块。一<strong>旦创建，任何模块都可以重复使用</strong>。假设我们想在其他几个模块之间共享一个 CatsService 实例。为此，我们首先需要导出 CatsService 提供者，将其添加到模块的导出数组中</p><p><img data-src="https://docs.nestjs.com/assets/Shared_Module_1.png" alt="img"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>现在，任何导入 CatsModule 的模块都可以访问 CatsService，并与所有导入该模块的其他模块共享同一个实例。此外还有全局modules和动态modules,</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, Global &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>中间件是在路由处理程序之前调用的函数。中间件函数可以访问请求和响应对象，以及应用程序请求-响应循环中的 next() 中间件函数。下一个中间件函数通常用名为 next 的变量来表示。</p><p>中间件功能可执行以下任务：</p><ul><li>执行任何代码。</li><li>更改请求和响应对象。</li><li>结束请求-响应循环。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前中间件函数没有结束请求-响应循环，则必须调用 next() 将控制权传递给下一个中间件函数。否则，请求将被挂起。</li></ul><p><img data-src="https://docs.nestjs.com/assets/Middlewares_1.png" alt="img"></p><p>创建中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerMiddleware</span> <span class="title">implements</span> <span class="title">NestMiddleware</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request...&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承<code>use</code>方法,使用req,res以及next方法.</p><p>使用中间件,使用模块类的 configure() 方法来设置它们。包含中间件的模块必须实现 NestModule 接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoggerMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/middleware/logger.middleware&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> <span class="title">implements</span> <span class="title">NestModule</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>)</span> &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(LoggerMiddleware)</span><br><span class="line">      .forRoutes(<span class="string">&#x27;cats&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现NestModule接口并继承configure方法,使用consumer类</p><p>它提供了多种内置方法来管理中间件。所有这些方法都能以流畅的方式简单地串联起来。forRoutes() 方法可以接受一个字符串、多个字符串、一个 RouteInfo 对象以及controller类.使用consumer应用中间件在路由和controller类上.</p><p>此外也有全局中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.use(logger);</span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="Exception-filtes"><a href="#Exception-filtes" class="headerlink" title="Exception filtes"></a>Exception filtes</h3><p>自带了一堆异常</p><ul><li><code>BadRequestException</code></li><li><code>UnauthorizedException</code></li><li><code>NotFoundException</code></li><li><code>ForbiddenException</code></li><li><code>NotAcceptableException</code></li><li><code>RequestTimeoutException</code></li><li><code>ConflictException</code></li><li><code>GoneException</code></li><li><code>HttpVersionNotSupportedException</code></li><li><code>PayloadTooLargeException</code></li><li><code>UnsupportedMediaTypeException</code></li><li><code>UnprocessableEntityException</code></li><li><code>InternalServerErrorException</code></li><li><code>NotImplementedException</code></li><li><code>ImATeapotException</code></li><li><code>MethodNotAllowedException</code></li><li><code>BadGatewayException</code></li><li><code>ServiceUnavailableException</code></li><li><code>GatewayTimeoutException</code></li><li><code>PreconditionFailedException</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.service.findAll()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(&#123;</span><br><span class="line">      <span class="attr">status</span>: HttpStatus.FORBIDDEN,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&#x27;This is a custom message&#x27;</span>,</span><br><span class="line">    &#125;, HttpStatus.FORBIDDEN, &#123;</span><br><span class="line">      <span class="attr">cause</span>: error</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自己继承HttpException.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ForbiddenException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&#x27;Forbidden&#x27;</span>, HttpStatus.FORBIDDEN);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要更好的控制,可以继承<code>ExceptionFilter</code>使用catch专门处理某些异常.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>(HttpException)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpExceptionFilter</span> <span class="title">implements</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">catch</span>(exception: HttpException, <span class="attr">host</span>: ArgumentsHost) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</span><br><span class="line">    <span class="keyword">const</span> status = exception.getStatus();</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">      .status(status)</span><br><span class="line">      .json(&#123;</span><br><span class="line">        <span class="attr">statusCode</span>: status,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">        <span class="attr">path</span>: request.url,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好filter后进行绑定到某个路由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UseFilters</span>(HttpExceptionFilter)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pipes-and-guards"><a href="#pipes-and-guards" class="headerlink" title="pipes and guards"></a>pipes and guards</h3><p>pipes 是一个使用 @Injectable() 装饰器注解的类，它实现了 PipeTransform 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Pipe_1.png" alt="img"></p><p>管道用于转换和校验数据.</p><ul><li><code>ValidationPipe</code></li><li><code>ParseIntPipe</code></li><li><code>ParseFloatPipe</code></li><li><code>ParseBoolPipe</code></li><li><code>ParseArrayPipe</code></li><li><code>ParseUUIDPipe</code></li><li><code>ParseEnumPipe</code></li><li><code>DefaultValuePipe</code></li><li><code>ParseFilePipe</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, ParseIntPipe) id: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findOne(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括做数据类型转换的默认值等的pipe,还可以自定义pipe</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个pipe管道都必须实现 transform() 方法以实现 PipeTransform 接口。该方法有两个参数：</p><ul><li>值</li><li>元数据</li></ul><p>数据校验也有很多种方法,下面是最简单的.创建数据类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCatDto</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还可以使用<code>zod</code>第三方库.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save zod</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; PipeTransform, ArgumentMetadata, BadRequestException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ZodSchema  &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ZodValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> schema: ZodSchema</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: unknown, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parsedValue = <span class="built_in">this</span>.schema.parse(value);</span><br><span class="line">      <span class="keyword">return</span> parsedValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&#x27;Validation failed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用 schema.parse() 方法，根据提供的模式验证输入的参数。</p><p>需要执行以下操作才能使用 ZodValidationPipe：</p><ul><li>创建一个 ZodValidationPipe 实例</li><li>在pipe的类构造函数中传递特定于上下文的 Zod 模式</li><li>将pipe绑定到方法</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCatSchema = z</span><br><span class="line">  .object(&#123;</span><br><span class="line">    <span class="attr">name</span>: z.string(),</span><br><span class="line">    <span class="attr">age</span>: z.number(),</span><br><span class="line">    <span class="attr">breed</span>: z.string(),</span><br><span class="line">  &#125;)</span><br><span class="line">  .required();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> CreateCatDto = z.infer&lt;<span class="keyword">typeof</span> createCatSchema&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用pipe</span></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UsePipes</span>(<span class="keyword">new</span> ZodValidationPipe(createCatSchema))</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guard 是一个使用 @Injectable() 装饰器注解的类，它实现了 CanActivate 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Guards_1.png" alt="img"></p><p>guard根据运行时存在的某些条件（如权限、角色、ACL 等），决定路由处理程序是否处理给定请求。这通常被称为授权.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> validateRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个guard都必须实现 canActivate() 函数。该函数应返回一个布尔值，表明当前请求是否被允许。它可以同步或异步（通过 Promise 或 Observable）返回响应。Nest 使用返回值来控制下一步操作.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RolesGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(RolesGuard)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局guard.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalGuards(<span class="keyword">new</span> RolesGuard());</span><br></pre></td></tr></table></figure><h3 id="interceptors"><a href="#interceptors" class="headerlink" title="interceptors"></a>interceptors</h3><p>拦截器是一个使用 @Injectable() 装饰器注解并实现 NestInterceptor 接口的类</p><p><img data-src="https://docs.nestjs.com/assets/Interceptors_1.png" alt="img"></p><p>受面向方面编程（AOP）技术的启发，拦截器具有一系列有用的功能。它们可以</p><ul><li>在方法执行前/后绑定额外逻辑</li><li>转换函数返回的结果</li><li>转换函数抛出的异常</li><li>扩展基本函数行为</li><li>根据特定条件（如缓存目的）完全重写函数</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="title">implements</span> <span class="title">NestInterceptor</span> </span>&#123;</span><br><span class="line">  intercept(context: ExecutionContext, <span class="attr">next</span>: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Before...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定interceptor.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UseInterceptors</span>(LoggingInterceptor)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局拦截器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor());</span><br></pre></td></tr></table></figure><p>自定义装饰器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> User = createParamDecorator(</span><br><span class="line">  <span class="function">(<span class="params">data: unknown, ctx: ExecutionContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> request.user;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@User</span>() user: UserEntity</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="websocket与socket-io"><a href="#websocket与socket-io" class="headerlink" title="websocket与socket.io"></a>websocket与socket.io</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="img"></p><blockquote><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</p><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection open ...&quot;</span>); </span><br><span class="line">  ws.send(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">&quot;Received Message: &quot;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>上面是客户端的写法,服务端可以利用ws<a href="https://github.com/websockets/ws">websockets/ws: Simple to use, blazing fast and thoroughly tested WebSocket client and server for Node.js (github.com)</a>或socket.io库<a href="https://github.com/socketio/socket.io">socketio/socket.io: Realtime application framework (Node.JS server) (github.com)</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入WebSocket模块:</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用Server类:</span></span><br><span class="line"><span class="keyword">const</span> WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化:</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[SERVER] connection()`</span>);</span><br><span class="line">    ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[SERVER] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">        ws.send(<span class="string">`ECHO: <span class="subst">$&#123;message&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`[SERVER] error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>客户端请求既可以在浏览器,也可以使用模块的客户端.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开WebSocket连接后立刻发送一条消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] open()`</span>);</span><br><span class="line">    ws.send(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应收到的消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>WebSocket协议本身不要求同源策略（Same-origin Policy），也就是某个地址为<code>http://a.com</code>的网页可以通过WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送<code>Origin</code>的HTTP头给服务器，服务器可以根据<code>Origin</code>拒绝这个WebSocket请求。所以，是否要求同源要看服务器端如何检查。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> httpServer = createServer();</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">    io.emit(<span class="string">&quot;message&quot;</span>, data); <span class="comment">// 广播消息给所有客户端</span></span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;event&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;receive:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;disconnet&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">httpServer.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 客户端</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.socket.io/4.7.5/socket.io.min.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> message = input.value;</span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">&quot;message&quot;</span>, message);</span></span><br><span class="line"><span class="javascript">        input.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter message&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取某个namespace(跟某个路由类似)下连接的客户端的数量</span></span><br><span class="line"><span class="keyword">const</span> socketCount = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Connected clients:&quot;</span>, socketCount);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(); <span class="comment">// or io(&quot;/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;https://example.com&quot;</span>); <span class="comment">// or io(&quot;https://example.com/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;https://example.com/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;https://example.com/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置cors</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;https://example.com&quot;</span>,</span><br><span class="line">    <span class="attr">allowedHeaders</span>: [<span class="string">&quot;my-custom-header&quot;</span>],</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>socket.io中server,socket都是重要概念,而且socket.io库本身与websocket并不相容.</p><blockquote><p>尽管 Socket.IO 在可能的情况下确实使用 WebSocket 进行传输，但它会在每个数据包中添加额外的元数据。这就是为什么 WebSocket 客户端无法成功连接到 Socket.IO 服务器，而 Socket.IO 客户端也无法连接到纯 WebSocket 服务器。</p></blockquote><p>server可以对应多个namespace和client,掌管多个sockets.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240331182812851.png" alt="image-20240331182812851"></p><p><code>io.of</code>与<code>`io.in</code>分别表示在某个namespace下和某个room或者id的socket</p><p>获取连接的客户端的数目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = io.engine.clientsCount;</span><br><span class="line"><span class="comment">// may or may not be similar to the count of Socket instances in the main namespace, depending on your usage</span></span><br><span class="line"><span class="keyword">const</span> count2 = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br></pre></td></tr></table></figure><p>此外server可以管理rooms,后者相当于隔离.比如下面代码是拉进房间与拉出房间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances join the &quot;room1&quot; room</span></span><br><span class="line">io.socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room join the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsJoin([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace join the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsJoin(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances leave the &quot;room1&quot; room</span></span><br><span class="line">io.socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room leave the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsLeave([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace leave the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsLeave(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><p>下面是关闭socket连接以及获取对应的socket.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances disconnect</span></span><br><span class="line">io.disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room disconnect (and discard the low-level connection)</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).disconnectSockets(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace disconnect</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(theSocketId).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(theSocketId).fetchSockets();</span><br></pre></td></tr></table></figure><p>serverSideEmit允许向集群中的其他 Socket.IO 服务器发出事件(多server中)(需要配置adapter)</p><p>socket可以<code>emit</code>,<code>join</code>,<code>leave</code>以及<code>disconnet</code>等操作,属性包括id,handshake(包含头,客户端地址等重要信息),rooms以及包含的数据. 它是与客户端交互的基本类。它继承了 Node.js EventEmitter 的所有方法，如 emit、on、once 或 removeListener。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: <span class="comment">/* the headers of the initial request */</span></span><br><span class="line">  query: <span class="comment">/* the query params of the initial request */</span></span><br><span class="line">  auth: <span class="comment">/* the authentication payload */</span></span><br><span class="line">  time: <span class="comment">/* the date of creation (as string) */</span></span><br><span class="line">  issued: <span class="comment">/* the date of creation (unix timestamp) */</span></span><br><span class="line">  url: <span class="comment">/* the request URL string */</span></span><br><span class="line">  address: <span class="comment">/* the ip of the client */</span></span><br><span class="line">  xdomain: <span class="comment">/* whether the connection is cross-domain */</span></span><br><span class="line">  secure: <span class="comment">/* whether the connection is secure */</span></span><br><span class="line">&#125;</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt; &#125;</span></span><br><span class="line">  socket.join(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt;, &quot;room1&quot; &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// server A</span></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.data.username = <span class="string">&quot;alice&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// server B</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"><span class="built_in">console</span>.log(sockets[<span class="number">0</span>].data.username); <span class="comment">// &quot;alice&quot;</span></span><br></pre></td></tr></table></figure><p>客户端使用对应的库<code>`socket.io-client</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span><br><span class="line">  socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = input.value;</span><br><span class="line">    socket.emit(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    input.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Hapi.js,Adonis.js,Egg.js等等,不过基本逻辑都一样了.让我推荐的话,还是express,大型的上nest.js. 还要说一句,js的后端框架中文文档质量还有待提升,其实包括英文文档看起来还是有点老旧.</p><p>Python的Web术语里面还是讲视图views,模型models,urls这种的(受Django,Flask的影响?),而Node这边后端框架还是在说路由这种.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题网站总结</title>
    <link href="https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-30T04:40:59.000Z</published>
    <updated>2024-03-31T07:34:08.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.<br><span id="more"></span></p><h2 id="工作刷题型"><a href="#工作刷题型" class="headerlink" title="工作刷题型"></a>工作刷题型</h2><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><p>用的最多,我个人感觉不用纠结用.cn还是.com的,也有周赛和企业题</p><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a>牛客网</h3><p>更加本土化,本地企业的题库更多吧</p><h2 id="学习型"><a href="#学习型" class="headerlink" title="学习型"></a>学习型</h2><h3 id="codewars"><a href="#codewars" class="headerlink" title="codewars"></a>codewars</h3><p>我个人比较喜欢的网站,适合练练手,题倒是不难.</p><p><img data-src="https://s2.loli.net/2024/03/30/ewEQhUAfYzPDgyi.png" alt="image-20240330160405991"></p><h3 id="hackerrank"><a href="#hackerrank" class="headerlink" title="hackerrank"></a>hackerrank</h3><p>有各种技能的练习,也有不同层次的练习题.看个人爱好了.</p><h2 id="竞赛型"><a href="#竞赛型" class="headerlink" title="竞赛型"></a>竞赛型</h2><p>下面就是动真格的了</p><h3 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h3><p><img data-src="https://s2.loli.net/2024/03/30/wK2Lj76fsRHQcNM.png" alt="image-20240330161209680"></p><h3 id="Topcoder"><a href="#Topcoder" class="headerlink" title="Topcoder"></a>Topcoder</h3><p>这个平台与其说拿来刷题,不如拿来赚钱.</p><p><img data-src="https://s2.loli.net/2024/03/30/PF2gaYGQUVqrdnD.png" alt="image-20240330161514807"></p><h3 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder"></a>Atcoder</h3><p><img data-src="https://s2.loli.net/2024/03/30/vjXfSmzR4l9QsKd.png" alt="image-20240330161747680" style="zoom:50%;" /></p><p>从难度上说相比cf更适合新手了.</p><p><a href="https://www.cnblogs.com/wawcac-blog/articles/12245307.html">一种程序设计竞赛的训练方法（译） - wawcac - 博客园 (cnblogs.com)</a></p><h2 id="练习语言"><a href="#练习语言" class="headerlink" title="练习语言"></a>练习语言</h2><h3 id="python-type-challenge"><a href="#python-type-challenge" class="headerlink" title="python-type-challenge"></a>python-type-challenge</h3><p><a href="https://github.com/laike9m/Python-Type-Challenges">laike9m/Python-Type-Challenges: Master Python typing (type hints) with interactive online exercises! (github.com)</a></p><p>python的typing不如ts,但是合适的使用一些效果还是不错的.</p><h3 id="type-challenges"><a href="#type-challenges" class="headerlink" title="type-challenges"></a>type-challenges</h3><p><img data-src="https://s2.loli.net/2024/03/30/f4CrVLp8lKYXjEi.png" alt="image-20240330160751891" style="zoom:50%;" /></p><p>练习ts的typing,</p><p>解析<a href="https://blog.maxiaobo.com.cn/type-challenge/dist/">关于本文档 | TS 类型挑战通关手册 (maxiaobo.com.cn)</a></p><h3 id="type-hero"><a href="#type-hero" class="headerlink" title="type-hero"></a>type-hero</h3><p>同上,练习ts的typing,但是题目不一样.</p><p>除了上面之外其实还有很多OJ网站,但是我想这么多也没必要一一列举.</p><p>目前我个人常用的就是Leetcode刷题,Codewars随便练练手以及Codeforces去观摩大佬.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python的Web框架比较</title>
    <link href="https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/"/>
    <id>https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/</id>
    <published>2024-03-27T14:22:39.000Z</published>
    <updated>2024-03-29T15:52:22.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把<strong>框架</strong>(framework)与<strong>库</strong>(library)区分一下.<br><span id="more"></span></p><p>之前我也写过(或者说想过)一些类似生态以及作用的框架进行比较,大多都是看看网上评价以及star数,现在我想大概使用以下感受一下氛围,毕竟现在找工作一般也不会强调用python的web(事实上python的web确实要比Java的生态啥的要差).</p><p>根据github的star与网上观察,我对Django,Flask,FastAPI,Tornado,Sanic上手浅尝一下,毕竟其他框架还不到10k star,未来可期.</p><p>首先使用Python开发web的主要目的还是开发效率高,可用的第三方库可以说是数一<del>数二</del>,而web框架本身很多时候就是在传参CRUD搞来搞去,所以相关生态和社区活跃度应该是最重要的因素之一了.这也是我选择star数高的框架原因,我看见有些推荐的某些框架已经几年没有新的commit了,所以现在趁着有空看看目前Python web情况.另外可以订阅<a href="https://pycoders.com/">PyCoder’s Weekly | A Weekly Python Email Newsletter (pycoders.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/28/1VRMny34mdt9b6f.png" alt="image-20240328234239085"></p><p><img data-src="https://i.imgur.com/7paYgeL.jpg" alt="img"></p><p>扎心了….2015年的回答,还是很领先的.所以Python的强项还是偏计算,做一些有效的上层的应用.或者去研究一下CPython做东西.</p><p>而目前Flask,Django都已支持异步网络模型,所以做个小项目应该是没啥差别的.以下使用poetry管理包环境.</p><p><img data-src="https://s2.loli.net/2024/03/29/PMb2aJfliZdmTH8.png" alt="image-20240329235216575"></p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p><a href="https://docs.djangoproject.com/zh-hans/5.0/intro/overview/">初识 Django | Django 文档 | Django (djangoproject.com)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry add django</span><br><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建项目,一个项目下有很多应用.</p><blockquote><p>一个 Python 包 —— 即一个代码目录 — 它包含 Django 的一个实例中所有的设置。这包括数据库配置，Django 的特定选项和特定应用程序设置</p></blockquote><p>文件结构如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.<span class="keyword">py</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">        settings.<span class="keyword">py</span></span><br><span class="line">        urls.<span class="keyword">py</span></span><br><span class="line">        asgi.<span class="keyword">py</span></span><br><span class="line">        wsgi.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>在<code>views.py</code>中创建<strong>视图</strong>,在创建<code>urls.py</code>作为url配置进行映射,然后在mysite/urls.py创建urlpatterns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>作为web框架需要思考的几个问题就是 数据库的CRUD,在Django的setting.py下修改相关配置.比如配置数据库的连接以及账户,密码等信息.此外这个文件中还有一些默认安装的应用,这些应用有些也会创建数据表在使用之前需要在数据库中创建一些表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p>许多web框架都强调这一点,然而模型到底是什么？<code>数据库结构设计和附加的其它元数据</code></p><blockquote><p>一个模型就是单个定义你的数据的信息源。模型中包含了不可缺少的数据区域和你存储数据的行为。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>创建好后就能直接使用django提供的工具,先创建python写的sql语句,再利用语句创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>我这里使用默认的sqlite数据库,还是很方便的.</p><p><img data-src="https://s2.loli.net/2024/03/29/HThLi4fXlgpUcsu.png" alt="image-20240329200022851"></p><p>当然定义里模型之后还要激活模型才能创建迁移语句.激活语句就是在setting.py中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;polls.apps.PollsConfig&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>还可以进shell,通过创建的models直接进行添加字段.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>也就是直接利用继承了models.Model的python对象操作数据库字段.</p><p>此外还可以创建超级用户通过web修改.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>还需要在admin.py中注册一下可以在管理员中查看.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>Django把对于request的相应叫做views,本身它也有个貌似叫做MVT的概念?其实跟MVC差不多,model,view以及template.这些概念其实早就在其它语言的web框架深深渗透了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;ans&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure><p>再在urls中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&quot;what&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>视图可以从数据库里读取记录，可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的），可以生成一个 PDF 文件，可以输出一个 XML，创建一个 ZIP 文件，你可以做任何你想做的事，使用任何你想用的 Python 库。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用一个模板作为视图的返回值.可以看到setting中的设置</p><p>在视图中,可以使用HttpResponse和template.render返回html,或者是直接使用render.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><blockquote><p>载入模板，填充上下文，再返回由它生成的 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 对象」是一个非常常用的操作流程。于是 Django 提供了一个快捷函数，用它来重写 <code>index()</code> 视图</p></blockquote><p>可以抛出404错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>传入参数可供模板调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还能使用urls.py中的name修改模板中的硬编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>这里模板中使用<code>&#123;% url 'detail'%&#125;</code>就表示</p><p>还可以给url名称添加命名空间.为了避免多个应用views冲突.在urls.py中添加app.name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_name = &quot;polls&quot;</span><br></pre></td></tr></table></figure><p>还可以使用<code>HttpResponseRedirect</code>的<code>`reverse()</code>的函数构造URL字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure><p>使用通用视图,通用视图将常见的模式抽象到了一个地步，以至于你甚至不需要编写 Python 代码来创建一个应用程序。例如，<a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.list.ListView"><code>ListView</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.detail.DetailView"><code>DetailView</code></a> 通用视图分别抽象了 “显示对象列表” 和 “显示特定类型对象的详细页面” 的概念。</p><blockquote><p>这些视图反映基本的网络开发中的一个常见情况：<strong>根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做 “通用视图” 系统</strong>。</p></blockquote><p>使用通用视图需要修改urlconf和视图.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = &quot;polls&quot;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&quot;&quot;, views.IndexView.as_view(), <span class="type">name</span>=&quot;index&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/&quot;, views.DetailView.as_view(), <span class="type">name</span>=&quot;detail&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/results/&quot;, views.ResultsView.as_view(), <span class="type">name</span>=&quot;results&quot;),</span><br><span class="line">    path(&quot;&lt;int:question_id&gt;/vote/&quot;, views.vote, <span class="type">name</span>=&quot;vote&quot;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是使用改好的通用视图跟url配对.对于ListView和DetailView不太一样,ListView的context命名是<model_name>_list,所以需要使用<code>context_object_name</code>,而DetailView默认是<model_name></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">generic.ListView</span>):</span></span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/results.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="comment"># same as above, no changes needed.</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>视图中配置好模板,模型还可以修改传入的context变量名字<code>context_object_name</code></p><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionModelTests</span>(<span class="params">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">        is in the future.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py test polls</span><br></pre></td></tr></table></figure><p>在模板中使用静态文件,默认目录是<code>static</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外我们还可以修改Django后台的表单和界面等.</p><p><a href="https://djangopackages.org/">Django Packages : Reusable apps, sites and tools directory for Django</a></p><p>可以看到django不愧是python内活跃度和生态数一数二的框架了,快速开发还是很方便的,内置了很多东西,不只是单纯的restfulAPI.当然Django也有个rest framework<a href="https://www.django-rest-framework.org/">Home - Django REST framework (django-rest-framework.org)</a>更加适合写API</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>相比于Django,Flask更偏向单纯写API,插件生态没有Django多,数据库一般使用sqlalchemy.</p><p>但是Flask包括了html模板,路由,静态文件,sessions应该有的功能.我也拿它写个小web程序,这里不赘述了.<a href="https://proanimer.com/arxiv/result">论文查 (proanimer.com)</a></p><p><a href="https://github.com/drowning-in-codes/paper-reader">drowning-in-codes/paper-reader (github.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/29/DEFAU7eBNqKTmnX.png" alt="image-20240329225756697"></p><p>上面这两个框架用于生产环境时还需要使用WSGI服务器,比如uWSGI,gunicorn等.</p><h3 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h3><p>很火的异步web框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install <span class="string">&quot;uvicorn[standard]&quot;</span></span><br></pre></td></tr></table></figure><p>看看下面基本示例,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>写法还是很朴素的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你的代码里会出现 async / await，请使用 async def：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>特点包括:异步(Starlette支持),数据验证Pydantic,交互式文档(使用swagger UI生成)</p><p>很容易上手学习,官方推荐数据库ORM也是SQLAlchemy.</p><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.Event().wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>也是异步框架,适合websockets等.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure><p>我看了一下文档,感觉不是很好上手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()    </span><br></pre></td></tr></table></figure><p>Tornado 大致可分为四个主要部分：</p><ul><li>Web框架（包括 <a href="https://www.osgeo.cn/tornado/web.html#tornado.web.RequestHandler"><code>RequestHandler</code></a> 它是创建Web应用程序和各种支持类的子类）。</li><li>HTTP的客户端和服务器端实现 (<a href="https://www.osgeo.cn/tornado/httpserver.html#tornado.httpserver.HTTPServer"><code>HTTPServer</code></a> 和 <a href="https://www.osgeo.cn/tornado/httpclient.html#tornado.httpclient.AsyncHTTPClient"><code>AsyncHTTPClient</code></a> ）</li><li>包含类的异步网络库 <a href="https://www.osgeo.cn/tornado/ioloop.html#tornado.ioloop.IOLoop"><code>IOLoop</code></a> 和 <a href="https://www.osgeo.cn/tornado/iostream.html#tornado.iostream.IOStream"><code>IOStream</code></a> 作为HTTP组件的构建块，也可以用于实现其他协议。</li><li>协作程序库 (<a href="https://www.osgeo.cn/tornado/gen.html#module-tornado.gen"><code>tornado.gen</code></a> ）它允许异步代码以比链接回调更简单的方式写入。这类似于Python3.5中引入的本地协同工作特性。</li></ul><h3 id="Sanic"><a href="#Sanic" class="headerlink" title="Sanic"></a>Sanic</h3><p>我第一次看到是一个开源项目再用,目前更新还是比较频繁的.可以说是除了FastAPI最有前途的了.</p><p><img data-src="https://s2.loli.net/2024/03/29/y8Uda4LGTKlDkXM.png" alt="image-20240329231255284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sanic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;MyHelloWorldApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官网的文档也强调了其关注performance,flexibility和易于使用.我觉得这些跟python比较契合.</p><p>连接数据库,app注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">attach_db</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    app.ctx.db = Database()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># app registry 相当于在一个地方给它挂Sanic上</span></span><br><span class="line"><span class="comment"># ./path/to/server.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/somewhere_else.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic.get_app(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">app = Sanic(<span class="string">&#x27;myapp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config.DB_NAME = <span class="string">&#x27;appdb&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;DB_USER&#x27;</span>] = <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line"></span><br><span class="line">db_settings = &#123;</span><br><span class="line">    <span class="string">&#x27;DB_HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_NAME&#x27;</span>: <span class="string">&#x27;appdb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_USER&#x27;</span>: <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">app.config.update(db_settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/server.py 工厂模式得到app并使用sanic path.to.server:create_app运行</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> .path.to.config <span class="keyword">import</span> MyConfig</span><br><span class="line"><span class="keyword">from</span> .path.to.some.blueprint <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">config=MyConfig</span>) -&gt; Sanic:</span></span><br><span class="line">    app = Sanic(<span class="string">&quot;MyApp&quot;</span>, config=config)</span><br><span class="line">    app.blueprint(bp)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>handlers,request,response等都是老话了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/foo&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo_handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;I said foo!&quot;</span>)</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/typed&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">typed_handler</span>(<span class="params">request: Request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&#x27;OK&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Sanic提供了Listener,看起来像在生命周期内添加hook.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.reload_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">reload_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; reload_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.main_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; main_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">before_start</span>(<span class="params">*_</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; before_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_1</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_2</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_3</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_4</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_5</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_6</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_7</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_8</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_8&quot;</span>)</span><br></pre></td></tr></table></figure><p>Sanic跟Flask一样提供了蓝图.</p><blockquote><p>蓝图是一种可用于应用程序内子路由的对象。蓝图定义了用于添加路由的类似方法，而不是将路由添加到应用程序实例中，然后以灵活和可插拔的方式将路由注册到应用程序中。</p><p>蓝图对大型应用程序尤其有用，因为在大型应用程序中，应用程序逻辑可被分解为多个组或责任区。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ./my_blueprint.py</span><br><span class="line">from sanic.response import json</span><br><span class="line">from sanic import Blueprint</span><br><span class="line"></span><br><span class="line">bp = Blueprint(&quot;my_blueprint&quot;)</span><br><span class="line"></span><br><span class="line">@bp.route(&quot;/&quot;)</span><br><span class="line">async def bp_root(request):</span><br><span class="line">    return json(&#123;&quot;my&quot;: &quot;blueprint&quot;&#125;)</span><br><span class="line"></span><br><span class="line">from sanic import Sanic</span><br><span class="line">from my_blueprint import bp</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.blueprint(bp)</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Starlette,Quart,Falcon等异步网络框架(其实没必要这么强调异步).但鉴于还没有那么多生态就先不品鉴了.</p><p>后面有空应该还会品鉴一下Node的后端框架,比如koa,express,nest等.PHP框架还有Laravel,Sympfony,ThinkPHP以及基于Swoole,workerman的hyperf<a href="https://hyperf.wiki/2.0/#/">Hyperf</a>,webman框架等等,不过我可能更看好Laravel(不用太在意其性能).除了这些语言,Java,C#,Go就是Web常客了(不过.Net发展有点曲折),它们的web框架比较集中也成熟,工作上也用得很多.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把&lt;strong&gt;框架&lt;/strong&gt;(framework)与&lt;strong&gt;库&lt;/strong&gt;(library)区分一下.&lt;br&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://www.sekyoro.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt变天了?了解Qt6相关技术</title>
    <link href="https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</id>
    <published>2024-03-24T10:37:06.000Z</published>
    <updated>2024-03-27T12:14:10.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.<br><span id="more"></span></p><p>目前跨平台的解决方案还是琳琅满目,但其中比较成熟的开发效率不低的,网上教程多的又成了凤毛麟角.让我说的话,有Flutter,.Net MAUI以及Qt等等</p><p>Flutter就不多提了,我是最推荐这个的.</p><p>.Net相关项目在微软操持下,生不如死.最成熟的是WPF本身不支持跨平台,此外的Avalonia,Uno等跨平台并不是微软首推. 微软目前首推MAUI与Blazor,后者是Web框架,此外还有UWP的继任者WinUI3目前也不成熟(其目的应该是占据WPF的部分市场).<a href="https://www.cnblogs.com/duwenlong/p/17462010.html">聊聊MAUI、WinUI3和WPF的优势及劣势 - 杜文龙 - 博客园 (cnblogs.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/25/6WmE12y9JhZRXaO.png" alt="image-20240325123001580"></p><p><img data-src="https://github.com/robloo/PublicDocs/raw/master/XAMLFrameworkEvolution.png?raw=true" alt="img"></p><p>此外还有移动端跨平台的React Native,Jetpack Compose(Compose Multiplatform)等等,桌面应用还有Electron,Tauri(目前也能在移动端使用)等,国内生态下还有微信小程序,Uniapp,Taro等.</p><p><img data-src="https://s2.loli.net/2024/03/25/V3DjN1wpYhmUSZF.png" alt="image-20240325123020037"></p><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose?hl=zh-cn">Jetpack Compose</a> 是一款新型工具包，旨在帮助简化界面开发。该工具包将响应式编程模型与简洁易用的 Kotlin 编程语言相结合，并采用完全声明式的代码编写方式，让您可以通过调用一系列函数来描述界面，这些函数会将数据转换为界面层次结构。当底层数据发生变化时，框架会自动重新执行这些函数，为您更新界面层次结构。简单来说,包括Flutter,这些都是使用代码声明UI的,而.Net下许多UI框架使用xaml,这与之前的安卓开发类似.</p></blockquote><p>上面说了这么多,做技术选型来个总结的话,当然首先需要顾及团队人员,最好结合工期和团队技术栈选择.如果是个人开发者,由于目前Flutter对web和桌面支持还是不太成熟,我个人其实想推荐.Net的技术,或者你也可以考虑Electron做桌面(强调软件性能或者容错性考虑WPF,Qt等),移动端用Flutter或React Native(Compose目前跨平台也不太成熟,如果只考虑安卓可以试试)</p><p>而今天要谈到的Qt,在工业领域用得多,感觉还是因为历史沉淀.这几天看了Qt官网,其推出了Design Studio软件,Qt Creator貌似也支持了AI辅助编码,说明还是跟上了潮流,而Qt6的优势就是跟Qt quick更好结合了.目前下载Qt也不像之前那么麻烦,现在用一个unified-downloader联网下载以及后续更新就行了.</p><h2 id="新的Qt"><a href="#新的Qt" class="headerlink" title="新的Qt"></a>新的Qt</h2><p>Qt主要还是在桌面、嵌入式多,但其实移动端也可以,相信其跨平台能力.Qt6与Qt5基本可以无缝转换.</p><blockquote><p>Qt 6 is highly compatible with <a href="https://doc.qt.io/qt-5.15/">Qt 5</a>. Developers of Qt 5 applications can move seamlessly to Qt 6 while retaining the applications’ functionality.</p></blockquote><p><img data-src="https://s2.loli.net/2024/03/25/b8UsBofHexM9gZ6.png" alt="image-20240325132130083"></p><p>Qt目前提供了设计,开发,测试和优化的工具,主要使用前两者即可.</p><h3 id="对于UI设计"><a href="#对于UI设计" class="headerlink" title="对于UI设计"></a>对于UI设计</h3><p><img data-src="https://doc.qt.io/qtcreator/images/qtcreator-project-qt-quick.webp" alt="{New Project dialog}"></p><p>如果想要在移动端或者需要丝滑的动画,那就用Qt Quick.可以使用Qt Design Studio辅助设计.</p><p><img data-src="https://s2.loli.net/2024/03/25/9nFhjdfoMGsXUyV.png" alt="image-20240325143557948"></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="title">Rectangle</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> page</span></span><br><span class="line">    <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="string">&quot;#ffffff&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用qml描述界面</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> todayTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> thisWeekTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> laterTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">Column</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> column</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">spacing</span>: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> todayTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: <span class="number">180</span></span><br><span class="line">            <span class="attribute">listModel</span>: todayTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Today&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: todayTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> thisWeekTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y - <span class="number">60</span></span><br><span class="line">            <span class="attribute">listModel</span>: thisWeekTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;This week&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: thisWeekTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> laterTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y</span><br><span class="line">            <span class="attribute">listModel</span>: laterTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Later&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: laterTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我在使用的时候感觉很像安卓的compose或者WPF的xaml开发,也是声明式,Flutter也是声明式,这可能就是趋势吧.类似js通过findelementById再到React,Vue的声明式UI.</p><h3 id="使用QtWidget"><a href="#使用QtWidget" class="headerlink" title="使用QtWidget"></a>使用QtWidget</h3><p><img data-src="https://doc.qt.io/qt-6/images/notepad2.png" alt="&quot;Qt Creator New Project dialog&quot;"></p><p><img data-src="https://doc.qt.io/qt-6/images/qtdesigner.png" alt="&quot;Qt Designer opened from Qt Creator&quot;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;notepad.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Notepad w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用QtWidget是传统开发方式,这里就不赘述了.</p><p>目前我在Qt官网以及开发工具上找到了一堆tutorial,可惜目前没多少时间学习,可以预见的是,虽然Qt在互联网以及开源软件领域基本没什么市场占有率(目前被Web技术占着,要么就是Flutter或者.Net),但是在使用c++比较多的工业领域或是使用Python进行Qt开发应该是一个技术上不错的选择了.比如下面代码就是用python执行qml.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtGui <span class="keyword">import</span> QGuiApplication</span><br><span class="line"><span class="keyword">from</span> PySide6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line">QML = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import QtQuick</span></span><br><span class="line"><span class="string">import QtQuick.Controls</span></span><br><span class="line"><span class="string">import QtQuick.Layouts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Window &#123;</span></span><br><span class="line"><span class="string">    width: 300</span></span><br><span class="line"><span class="string">    height: 200</span></span><br><span class="line"><span class="string">    visible: true</span></span><br><span class="line"><span class="string">    title: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    readonly property list&lt;string&gt; texts: [&quot;Hallo Welt&quot;, &quot;Hei maailma&quot;,</span></span><br><span class="line"><span class="string">                                           &quot;Hola Mundo&quot;, &quot;Привет мир&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function setText() &#123;</span></span><br><span class="line"><span class="string">        var i = Math.round(Math.random() * 3)</span></span><br><span class="line"><span class="string">        text.text = texts[i]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ColumnLayout &#123;</span></span><br><span class="line"><span class="string">        anchors.fill:  parent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Text &#123;</span></span><br><span class="line"><span class="string">            id: text</span></span><br><span class="line"><span class="string">            text: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        Button &#123;</span></span><br><span class="line"><span class="string">            text: &quot;Click me&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">            onClicked:  setText()</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QGuiApplication(sys.argv)</span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line">    engine.loadData(QML.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> engine.rootObjects():</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    exit_code = app.<span class="built_in">exec</span>()</span><br><span class="line">    <span class="keyword">del</span> engine</span><br><span class="line">    sys.exit(exit_code)</span><br></pre></td></tr></table></figure><p>下面是常见的用python写qtwidget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PySide6 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.hello = [<span class="string">&quot;Hallo Welt&quot;</span>, <span class="string">&quot;Hei maailma&quot;</span>, <span class="string">&quot;Hola Mundo&quot;</span>, <span class="string">&quot;Привет мир&quot;</span>]</span><br><span class="line"></span><br><span class="line">        self.button = QtWidgets.QPushButton(<span class="string">&quot;Click me!&quot;</span>)</span><br><span class="line">        self.text = QtWidgets.QLabel(<span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">                                     alignment=QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        self.layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        self.layout.addWidget(self.text)</span><br><span class="line">        self.layout.addWidget(self.button)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.magic)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.Slot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magic</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.text.setText(random.choice(self.hello))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication([])</span><br><span class="line"></span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    widget.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></table></figure><p>目前QtWidget与Qt quick没有绝对优劣,官网也是推荐在使用动画和移动端触摸时使用qml,事实上这两者也可以结合使用. 而安卓方面Compose已经成了趋势,但传统xml开发也需要掌握用来维护旧项目以及新项目缺少的组件.</p><p>其他技术可以看看这篇文章总结得不错<a href="https://zhuanlan.zhihu.com/p/547806659">桌面软件开发框架大赏 - 知乎 (zhihu.com)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.&lt;br&gt;</summary>
    
    
    
    
    <category term="技术栈" scheme="https://www.sekyoro.top/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何开始写一篇现代八股论文</title>
    <link href="https://www.sekyoro.top/2024/03/16/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E7%AF%87%E7%8E%B0%E4%BB%A3%E5%85%AB%E8%82%A1%E8%AE%BA%E6%96%87/"/>
    <id>https://www.sekyoro.top/2024/03/16/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E7%AF%87%E7%8E%B0%E4%BB%A3%E5%85%AB%E8%82%A1%E8%AE%BA%E6%96%87/</id>
    <published>2024-03-16T02:28:08.000Z</published>
    <updated>2024-04-02T03:20:46.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>通过阅读一系列文章,分析摘要、介绍每个section的组织形式,方便写出一些列现代八股文.<br><span id="more"></span></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><blockquote><p>实验部分介绍使用的数据集,评价指标,实现细节,定量分析,定性分析以及消融实验.</p></blockquote><p>首先介绍论文进行了comprehensive的实验,然后分别介绍数据集,随后介绍评价指标.</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>介绍使用的框架、工具以及训练的GPU设备.然后介绍训练时的细节,比如使用的optimizer和lr_scheduler,batch_size,epochs等.然后介绍自己的算法中的参数设置,最后介绍一些细节等</p><h3 id="定量分析"><a href="#定量分析" class="headerlink" title="定量分析"></a>定量分析</h3><p>使用不同指标进行对比</p><h2 id="Latex常用"><a href="#Latex常用" class="headerlink" title="Latex常用"></a>Latex常用</h2><blockquote><p>众所周知,不用latex写出来的只能是文章,不能是论文(暴言).</p></blockquote><p>LATEX 中单引号 ‘ 和 ’ 分别用 ` 和 ‘ 输入；双引号 “ 和 ” 分别用 `` 和 ‘’ 输入</p><h3 id="对文字操作"><a href="#对文字操作" class="headerlink" title="对文字操作"></a>对文字操作</h3><p>比如<code>\textbf</code>等等能使文字改变(包括公式),这些还是非常有用的.</p><p>引入宏包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\usepackage&#123;amssymb&#125;</span><br><span class="line">\usepackage&#123;bm&#125;</span><br></pre></td></tr></table></figure><p>对于排版数学公式,主要使用amsmath宏,而amssymb提供许多数学符号</p><p><code>\underline</code> 命令生成下划线的样式不够灵活，不同的单词可能生成高低各异的下划线，并 且无法换行。<code>ulem</code> 宏包提供了更灵活的解决方案，它提供的 <code>\uline</code> 命令能够轻松生成自动换行的下划线</p><h4 id="行内和行间公式"><a href="#行内和行间公式" class="headerlink" title="行内和行间公式"></a>行内和行间公式</h4><blockquote><p>数学公式有两种排版方式：其一是与文字混排，称为行内公式；其二是单独列为一行排版， 称为行间公式。</p></blockquote><p>简单来说行内公式使用$$$$,行间公式使用<code>\equation</code>.</p><p>equation 环境为公式自动生成一 个编号，<strong>这个编号可以用 \label 和 \ref 生成交叉引用，amsmath 的 \eqref 命令甚至为引用 自动加上圆括号</strong>；还可以用 \tag 命令手动修改公式的编号，或者用 \notag 命令取消为公式编 号</p><p>如果需要<strong>直接使用不带编号的行间公式</strong>，则将公式用命令 [ 和 ] 包裹，与之等效的是 displaymath 环境。有的人更喜欢 equation* 环境，体现了带星号和不带星号的环境之间的区 别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation*&#125;</span><br><span class="line">a^2 + b^2 = c^2</span><br><span class="line">\end&#123;equation*&#125;</span><br><span class="line">For short:</span><br><span class="line">\[ a^2 + b^2 = c^2 \]</span><br><span class="line">Or if you like the long one:</span><br><span class="line">\begin&#123;displaymath&#125;</span><br><span class="line">a^2 + b^2 = c^2</span><br><span class="line">\end&#123;displaymath&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当用户使用 $ 开启行内公式输入，或是使用 [ 命令、equation 环境时，LATEX 就进入了 数学模式。</p></blockquote><ul><li>数学模式中输入的空格被忽略。数学符号的间距默认由符号的性质（关系符号、运算符等） 决定。需要人为引入间距时，使用 \quad 和 \qquad 等命令</li><li><p>不允许有空行（分段）。行间公式中也无法用 \ 命令手动换行，排版多行公式需要使用其他环境</p></li><li><p>所有的字母被当作数学公式中的变量处理，字母间距与文本模式不一致，也无法生成单词 之间的空格。想在数学公式中输入正体的文本，简单情况下可用  \mathrm 命令。或者用 amsmath 提供的 \text 命令</p></li></ul><h5 id="一般符号"><a href="#一般符号" class="headerlink" title="一般符号"></a>一般符号</h5><p>希腊字母符号的名称就是其英文名称，如 α (\alpha)、β (\beta) 等等。大写的希腊字母为 首字母大写的命令，如 Γ (\Gamma)、∆ (\Delta) 等等。无穷大符号为 ∞ (\infty)。</p><h5 id="hyperref"><a href="#hyperref" class="headerlink" title="hyperref"></a>hyperref</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    Please visit my \href&#123;https://www.example.com&#125;&#123;website&#125;.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line">\hypersetup&#123;</span><br><span class="line">colorlinks=true,</span><br><span class="line">linkcolor=cyan,</span><br><span class="line">filecolor=blue,      </span><br><span class="line">urlcolor=red,</span><br><span class="line">citecolor=green,</span><br><span class="line">pagebackref=true,</span><br><span class="line">    breaklinks=true,</span><br><span class="line">    letterpaper=true,</span><br><span class="line">    </span><br><span class="line">    bookmarks=false,</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>colorlinks就是说超链接是否带颜色；<br>linkcolor就是目录，公式，图表等内部链接的颜色；<br>filecolor就是文件型链接的颜色；<br>urlcolor就是网页链接的颜色；<br>citecolor就是参考文献连接的颜色</p><p>pagebackref=true<code>：在参考文献中添加返回页码的链接。</code>breaklinks=true`：允许链接跨行断开。</p><p>letterpaper=true：将页面大小设置为Letter纸张尺寸。</p><p>bookmarks=false：禁用书签生成。</p></blockquote><p>amssymb 宏包提供了一些次常用的符号。</p><h5 id="xcolor"><a href="#xcolor" class="headerlink" title="xcolor"></a>xcolor</h5><p>文本设置颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xcolor&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    \textcolor&#123;red&#125;&#123;这是红色的文本。&#125;</span><br><span class="line"></span><br><span class="line">    \colorbox&#123;blue!30&#125;&#123;这是一个蓝色背景的盒子。&#125;</span><br><span class="line"></span><br><span class="line">    \definecolor&#123;mygreen&#125;&#123;rgb&#125;&#123;0,0.5,0&#125;</span><br><span class="line">    \textcolor&#123;mygreen&#125;&#123;这是自定义的绿色文本。&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="soul"><a href="#soul" class="headerlink" title="soul"></a>soul</h5><p>下划线和删除线等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\st&#123;This text has a strikethrough.&#125;</span><br><span class="line">\hl&#123;\ul&#123;Highlighted and underlined text.&#125;&#125;</span><br><span class="line">\st&#123;\ul&#123;Strikethrough and underlined text.&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="times"><a href="#times" class="headerlink" title="times"></a>times</h5><p>times宏包用于将文档的字体设置为Times字体。使用\usepackage{times}命令导入该宏包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;times&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">This is some text in Times font.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="epsfig宏包"><a href="#epsfig宏包" class="headerlink" title="epsfig宏包"></a>epsfig宏包</h5><p><code>epsfig</code>宏包用于在LaTeX文档中插入EPS格式的图像文件。使用<code>\usepackage&#123;epsfig&#125;</code>命令导入该宏包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;epsfig&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \epsfig&#123;file=example.eps, width=0.5\textwidth&#125;</span><br><span class="line">    \caption&#123;An example EPS figure.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="graphicx"><a href="#graphicx" class="headerlink" title="graphicx"></a>graphicx</h5><p><code>graphicx</code>宏包是LaTeX中最常用的图形处理宏包之一，用于插入和操作各种图像文件格式。使用<code>\usepackage&#123;graphicx&#125;</code>命令导入该宏包即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=0.5\textwidth]&#123;example.png&#125;</span><br><span class="line">    \caption&#123;An example PNG image.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\graphicspath&#123;&#123;resource/&#125;&#125;     % organize your images and other figures under resource/ folder</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="bbding"><a href="#bbding" class="headerlink" title="bbding"></a>bbding</h5><p><code>bbding</code>宏包提供了一系列特殊符号和图标，如手势、箭头、勾号、叉号等。使用<code>\usepackage&#123;bbding&#125;</code>命令导入该宏包即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;bbding&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\Checkmark \quad \XSolidBrush \quad \HandRight</span><br><span class="line">\end&#123;document&#125;</span><br><span class="line"># 打勾叉</span><br><span class="line">\Checkmark</span><br><span class="line">\CheckmarkBold</span><br><span class="line">\XSolid</span><br><span class="line">\XSolidBold</span><br><span class="line">\XSolidBrush</span><br></pre></td></tr></table></figure><h5 id="subcaption"><a href="#subcaption" class="headerlink" title="subcaption"></a>subcaption</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;subcaption&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \begin&#123;subfigure&#125;&#123;0.3\textwidth&#125;</span><br><span class="line">        \includegraphics[width=\linewidth]&#123;image1.png&#125;</span><br><span class="line">        \caption&#123;Subfigure 1&#125;</span><br><span class="line">    \end&#123;subfigure&#125;</span><br><span class="line">    \quad</span><br><span class="line">    \begin&#123;subfigure&#125;&#123;0.3\textwidth&#125;</span><br><span class="line">        \includegraphics[width=\linewidth]&#123;image2.png&#125;</span><br><span class="line">        \caption&#123;Subfigure 2&#125;</span><br><span class="line">    \end&#123;subfigure&#125;</span><br><span class="line">    \caption&#123;Example with subfigures.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As shown in Figure \ref&#123;fig:example&#125;, subfigure \subref&#123;subfig:1&#125; is interesting.</span><br></pre></td></tr></table></figure><p>使用<code>\subref</code>引用子图</p><h5 id="nicefrac"><a href="#nicefrac" class="headerlink" title="\nicefrac"></a>\nicefrac</h5><p><code>\nicefrac</code>命令是由<code>nicefrac</code>宏包提供的。它用于生成更紧凑的分数符号，比如1/2、3/4等。通常在文本模式下使用，可以将其用于正文、标注或其他地方需要使用分数的场景。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;nicefrac&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    The result is \nicefrac&#123;1&#125;&#123;2&#125;.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="microtype"><a href="#microtype" class="headerlink" title="microtype"></a>microtype</h5><p><code>microtype</code>宏包提供了微调字距和字形的功能，以改善文本的排版效果。它可以自动调整字符之间的间距、字号和字形，以提高视觉效果和可读性。要使用<code>microtype</code>宏包，只需在导言区使用<code>\usepackage&#123;microtype&#125;</code>命令导入即可。</p><h5 id="fancyhdr"><a href="#fancyhdr" class="headerlink" title="fancyhdr"></a>fancyhdr</h5><p><code>fancyhdr</code>宏包用于自定义页眉和页脚的样式。它允许在页面的顶部和底部添加自定义内容，如文档标题、章节标题、页码等。通过使用<code>fancyhdr</code>宏包，您可以灵活地控制和设计页面的页眉和页脚。要使用<code>fancyhdr</code>宏包，只需在导言区使用<code>\usepackage&#123;fancyhdr&#125;</code>命令导入即可。</p><h3 id="画表格"><a href="#画表格" class="headerlink" title="画表格"></a>画表格</h3><p>三线表在论文里面基本是必须的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tabular&#125;[⟨align⟩]&#123;⟨column-spec⟩&#125;</span><br><span class="line">⟨item1⟩ &amp; ⟨item2⟩ &amp; … \\</span><br><span class="line">\hline</span><br><span class="line">⟨item1⟩ &amp; ⟨item2⟩ &amp; … \\</span><br><span class="line">\end&#123;tabular&#125;</span><br></pre></td></tr></table></figure><p>表格有个列格式,包括l,c,r,p以及|和@{}.每行的数目不能多于列格式个数.还有简单法\</p><p>*{n}{<column-spec\>}.另外<code>\hline</code>可以用于绘制横线,但现在多用<code>\cline</code>替代可以绘制跨越部分单元格的横线.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">4 &amp; 9 &amp; 2 \\ \cline&#123;2-3&#125;</span><br><span class="line">3 &amp; 5 &amp; 7 \\ \cline&#123;1-1&#125;</span><br><span class="line">8 &amp; 1 &amp; 6 \\ \hline</span><br><span class="line">\end&#123;tabular&#125;</span><br></pre></td></tr></table></figure><blockquote><p>科技论文排版中广泛应用的表格形式是三线表，形式干净简明。三线表由 booktabs 宏包 支持，它提供了 \toprule、\midrule 和 \bottomrule 命令用以排版三线表的三条线，以及和 \cline 对应的 \cmidrule。除此之外，最好不要用其它横线以及竖线</p></blockquote><p>合并单元格可以使用<code>\multicolumn&#123;&lt;n&gt;&#125;&#123;&lt;column-spec&gt;&#125;&#123;&lt;item&gt;&#125;</code>以及<code>\multirow&#123;⟨n⟩&#125;&#123;⟨width⟩&#125;&#123;⟨item⟩&#125;</code></p><p>⟨width⟩ 为合并后单元格的宽度，可以填 * 以使用自然宽度</p><p><code>\cmidrule</code> 命令用于绘制带有中间规格线的表格。其中，<code>&lt;trim&gt;</code> 是用于控制规格线修剪的参数。</p><p><code>&lt;trim&gt;</code> 可以是以下几种取值之一：</p><ul><li><code>l</code>: 在左侧修剪规格线，使其不与左边界相连。</li><li><code>r</code>: 在右侧修剪规格线，使其不与右边界相连。</li><li><code>lr</code>: 在左右两侧修剪规格线，使其不与左右边界相连。</li></ul><h3 id="数字符号控制"><a href="#数字符号控制" class="headerlink" title="数字符号控制"></a>数字符号控制</h3><p>一些数字符号的形态在不同地方需要不一样,比如公式中</p><p>一般来说，不同的数学字体往往带有不同的语义，如矩阵、向量等常会使用粗体或粗斜体， 而数集常会使用 <code>\mathbb</code>表示。出于内容与格式分离以及方便书写的考虑，可以为它们定义新 的命令。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240331213806915.png" alt="image-20240331213806915"></p><p>对于数学符号加粗,使用<code>\mathbf</code>获得直立加粗,也可以使用<code>bm</code>  宏包提供的<code>\bm</code>  命令得到粗斜体.</p><h3 id="公式环境"><a href="#公式环境" class="headerlink" title="公式环境"></a>公式环境</h3><p>多行公式,amsmath 宏包的 <strong>multline 环境</strong>提供了书写折行长公式的方便环境。它允许用 \ 折行，将 公式编号放在最后一行。多行公式的首行左对齐，末行右对齐，其余行居中。多行公式的首行左对齐，末行右对齐，其余行居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;multline&#125;</span><br><span class="line">a + b + c + d + e + f</span><br><span class="line">+ g + h + i \\</span><br><span class="line">= j + k + l + m + n\\</span><br><span class="line">= o + p + q + r + s\\</span><br><span class="line">= t + u + v + x + z</span><br><span class="line">\end&#123;multline&#125;</span><br></pre></td></tr></table></figure><p>最常用的是 <strong>align 环境</strong>，它将公式用 &amp; 隔为两部分并对齐。分隔符通常放在等号左边</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">a =&#123;&#125; &amp; b + c \\</span><br><span class="line">=&#123;&#125; &amp; d + e + f + g + h + i</span><br><span class="line">+ j + k + l \notag \\</span><br><span class="line">&amp; + m + n + o \\</span><br><span class="line">=&#123;&#125; &amp; p + q + r + s</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure><p>align 环境会给每行公式都编号。然可以用 \notag 去掉某行的编号。为了对齐等号，将分隔符放在右侧，并且此时需要在等号后添加一对括号 {} 以产生正常的 间距</p><p>align 还能够对齐多组公式，除等号前的 &amp; 之外，公式之间也用 &amp; 分隔</p><p>如果不需要按等号对齐，只需罗列数个公式，<strong>gather</strong> 将是一个很好用的环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;gather&#125;</span><br><span class="line">a = b + c \\</span><br><span class="line">d = e + f + g \\</span><br><span class="line">h + i = j + k \notag \\</span><br><span class="line">l + m = n</span><br><span class="line">\end&#123;gather&#125;</span><br></pre></td></tr></table></figure><p>align 和 gather 有对应的不带编号的版本 align<em> 和 gather</em>。</p><p>另一个常见的需求是<strong>将多个公式组在一起公用一个编号，编号位于公式的居中位置</strong>。为此， amsmath 宏包提供了诸如 aligned、gathered 等环境，与 equation 环境套用。以 -ed 结尾的 环境用法与前一节不以 -ed 结尾的环境用法一一对应</p><p>amsmath 宏包提供了诸如 aligned、gathered 等环境，与 equation 环境套用。以 -ed 结尾的 环境用法与前一节不以 -ed 结尾的环境用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c \\</span><br><span class="line">d &amp;= e + f + g \\</span><br><span class="line">h + i &amp;= j + k \\</span><br><span class="line">l + m &amp;= n</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><p>区别是 split 只能 将每行的一个公式分两栏,aligned 允许每行多个公式多栏.</p><h3 id="空格与分段"><a href="#空格与分段" class="headerlink" title="空格与分段"></a>空格与分段</h3><p>空格键和 Tab 键输入的空白字符视为“空格”。连续的若干个空白字符视为一个空格。<strong>一行开头的空格忽略不计</strong>。</p><p><strong>行末的换行符视为一个空格</strong>；但连续两个换行符，<strong>也就是空行，会将文字分段。多个空行被 视为一个空行。也可以在行末使用 \par 命令分段</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It&#x27;s difficult to find \ldots\\</span><br><span class="line">It&#x27;s dif&#123;&#125;f&#123;&#125;icult to f&#123;&#125;ind \ldots</span><br></pre></td></tr></table></figure><h3 id="断行和断页"><a href="#断行和断页" class="headerlink" title="断行和断页"></a>断行和断页</h3><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><p>LATEX 本身不支持插图功能，需要由 <strong>graphicx 宏包</strong>辅助支持</p><p>我看通常使用的是pdf引入.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> \begin&#123;figure&#125;[t]</span><br><span class="line">  \centering</span><br><span class="line">  \includegraphics[width=\linewidth]&#123;imgs/temporal.pdf&#125;</span><br><span class="line">  \caption&#123;(a) The architecture of the proposed CIA component, including selective information filtering (\textit&#123;left&#125;) and spatio-temporal feature integration (\textit&#123;middle&#125;). (b) The multi-scale convolutional structure in the pyramid LSTM.</span><br><span class="line">  &#125;</span><br><span class="line">  \label&#123;temporal&#125;</span><br><span class="line">  \vspace&#123;-9pt&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><p>需要[t]表示在当页的顶部.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\includegraphics[⟨options⟩]&#123;⟨filename⟩&#125;</span><br></pre></td></tr></table></figure><p>文件名可能需要用相对路径或绝对路径表示。图片文件的扩展名一般可不写。另外一定要注意，文件名里既不要空格（类似 \include），也不要有多余的英文点号。另外 graphicx 宏包还提供了 \graphicspath 命令，用于声明一个或多个图片文件存放的目 录，使用这些目录里的图片时可不用写路径</p><h3 id="定义新命令"><a href="#定义新命令" class="headerlink" title="定义新命令"></a>定义新命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\newcommand&#123;\⟨name⟩&#125;[⟨num⟩]&#123;⟨definition⟩&#125;</span><br></pre></td></tr></table></figure><p><code>\newcommand</code> 的基本用法需要两个必选参数，第一个参数 ⟨name⟩ 是要定义的命令名称（带反斜线），第二个参数 ⟨definition⟩ 是命令的具体定义。方括号里的参数 ⟨num⟩ 是可选的，用于指定 新命令所需的参数数目（最多 9 个）。如果缺省可选参数，默认就是 0，也就是新定义的命令不带任何参数,如果使用多参数的话,在命令的定义中，标记 #1 代表指定的参数。 如果想使用多个参数，可以依次使用 #2、……、#9 等标记.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newcommand&#123;\sayHello&#125;[2]&#123;</span><br><span class="line">    Hi!\emph&#123;#1&#125;</span><br><span class="line">&#125;</span><br><span class="line">\sayHello&#123;Jack&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LATEX 不允许使用 \newcommand 定义一个与现有命令重名的命令。</p><p>如果需要修改命令定义 的话，使用 \renewcommand 命令。</p><p>它使用与命令 \newcommand 相同的语法。 </p><p>在某些情况之下，使用 \providecommand 命令是一种比较理想的方案：<strong>在命令未定义时，它相当于 \newcommand；在命令已定义时，沿用已有的定义</strong></p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>lshort<a href="https://github.com/CTeX-org/lshort-zh-cn/releases">Releases · CTeX-org/lshort-zh-cn (github.com)</a></li><li><a href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes">Learn LaTeX in 30 minutes - Overleaf, Online LaTeX Editor</a></li><li><a href="https://dmackinnon1.github.io/LaTeX101/">LaTeX101 (dmackinnon1.github.io)</a></li><li><a href="https://www.ctan.org/topic/class">CTAN: Class</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过阅读一系列文章,分析摘要、介绍每个section的组织形式,方便写出一些列现代八股文.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CMA热力图学习</title>
    <link href="https://www.sekyoro.top/2024/03/03/CMA%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/03/03/CMA%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-03T11:32:36.000Z</published>
    <updated>2024-03-03T11:32:37.016Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>attention mechanisms in CV</title>
    <link href="https://www.sekyoro.top/2024/03/03/attention-mechanisms-in-CV/"/>
    <id>https://www.sekyoro.top/2024/03/03/attention-mechanisms-in-CV/</id>
    <published>2024-03-03T07:19:50.000Z</published>
    <updated>2024-03-12T09:30:39.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要是在视觉领域以及二维的feature map上的注意力机制,不同于1D数据,一般不会用q,k,v来算.总结一下cv中attention的发展.</p><span id="more"></span><h2 id="Coordinate-Attention"><a href="#Coordinate-Attention" class="headerlink" title="Coordinate Attention"></a>Coordinate Attention</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://arxiv.org/pdf/2111.07624.pdf">2111.07624.pdf (arxiv.org)</a> 综述</li><li><a href="https://arxiv.org/pdf/2112.05561.pdf">2112.05561.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1807.06521.pdf">1807.06521.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/2103.02907.pdf">2103.02907.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1811.11721.pdf">1811.11721.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1711.07971.pdf">arxiv.org/pdf/1711.07971.pdf</a></li><li><a href="https://arxiv.org/pdf/1709.01507.pdf">1709.01507.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1903.06586.pdf">1903.06586.pdf (arxiv.org)</a></li><li><a href="https://mlrad.io/combining-convolution-and-attention-mechanisms">Convolution-Attention Mechanism Fusion (mlrad.io)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是在视觉领域以及二维的feature map上的注意力机制,不同于1D数据,一般不会用q,k,v来算.总结一下cv中attention的发展.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>再回看扩散模型</title>
    <link href="https://www.sekyoro.top/2024/02/23/%E5%86%8D%E5%9B%9E%E7%9C%8B%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/"/>
    <id>https://www.sekyoro.top/2024/02/23/%E5%86%8D%E5%9B%9E%E7%9C%8B%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-02-23T08:53:30.000Z</published>
    <updated>2024-02-24T03:55:44.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近OpenAI的Sora模型又大火了一把,据说背后的技术是transformer+diffusion.之前我也大致介绍过stable diffusion的过程,这里我再稍微详细介绍一下经典的扩散模型以及改进之后的DDIM.其中我也有很多不太明白的,只有结合代码理解了.<br><span id="more"></span></p><p>相关论文<a href="https://arxiv.org/abs/2006.11239">[2006.11239] Denoising Diffusion Probabilistic Models (arxiv.org)</a>与<a href="https://arxiv.org/abs/2010.02502">[2010.02502] Denoising Diffusion Implicit Models (arxiv.org)</a>,<a href="https://arxiv.org/pdf/2112.10752.pdf">2112.10752.pdf (arxiv.org)</a></p><blockquote><p>Stable Diffusion is a latent text-to-image diffusion model.</p></blockquote><p>已经提出了几种基于扩散的生成模型，其下有类似的想法，包括扩散概率模型、噪声条件评分网络和去噪扩散概率模型。现在常说的基于扩散的生成模型通常指的后者DDPM或者改进的DDIM.</p><h2 id="前向扩散过程"><a href="#前向扩散过程" class="headerlink" title="前向扩散过程"></a>前向扩散过程</h2><p><img data-src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/DDPM.png" alt="img"></p><script type="math/tex; mode=display">q(\mathbf{x}_t|\mathbf{x}_{t-1})=\mathcal{N}(\mathbf{x}_t;\sqrt{1-\beta_t}\mathbf{x}_{t-1},\beta_t\mathbf{I})\quad q(\mathbf{x}_{1:T}|\mathbf{x}_0)=\prod_{t=1}^Tq(\mathbf{x}_t|\mathbf{x}_{t-1})</script><p>所谓的扩散就是给图片(或者是特征,比如stable diffusion就是在所谓latent空间上进行扩散的)加噪声,所加的噪声按照一定分布.</p><p>前向过程为一个马尔科夫链,使用重参数化(在VAE中也有),可以表示为</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{x}_t&=\sqrt{\alpha_t}\mathbf{x}_{t-1}+\sqrt{1-\alpha_t}\boldsymbol{\epsilon}_{t-1}&&\text{;where }\boldsymbol{\epsilon}_{t-1},\boldsymbol{\epsilon}_{t-2},\cdots\sim\mathcal{N}(\boldsymbol{0},\mathbf{I})\\&=\sqrt{\alpha_t\alpha_{t-1}}\mathbf{x}_{t-2}+\sqrt{1-\alpha_t\alpha_{t-1}}\boldsymbol{\bar{\epsilon}}_{t-2}&&\text{;where }\boldsymbol{\bar{\boldsymbol{\epsilon}}}_{t-2}\text{ merges two Gaussians }(*).\\&=\ldots\\&=\sqrt{\alpha}_t\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}&&\text{j}\\q(\mathbf{x}_t|\mathbf{x}_0)&=\mathcal{N}(\mathbf{x}_t;\sqrt{\alpha}_t\mathbf{x}_0,(1-\bar{\alpha}_t)\mathbf{I})\end{aligned}</script><p>其中α=1-β.$\bar{\alpha}<em>{t}=\prod</em>{i=1}^{t}\alpha_{i}$,β是从0到1中间的采样值,比如0.01,0.02..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_beta_schedule</span>(<span class="params">timesteps, start=<span class="number">0.0001</span>, end=<span class="number">0.02</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(start, end, timesteps)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_from_list</span>(<span class="params">vals, t, x_shape</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Returns a specific index t of a passed list of values vals</span></span><br><span class="line"><span class="string">    while considering the batch dimension.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    batch_size = t.shape[<span class="number">0</span>]</span><br><span class="line">    out = vals.gather(-<span class="number">1</span>, t.cpu())</span><br><span class="line">    <span class="keyword">return</span> out.reshape(batch_size, *((<span class="number">1</span>,) * (<span class="built_in">len</span>(x_shape) - <span class="number">1</span>))).to(t.device)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_diffusion_sample</span>(<span class="params">x_0, t, device=<span class="string">&quot;cpu&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Takes an image and a timestep as input and </span></span><br><span class="line"><span class="string">    returns the noisy version of it</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    noise = torch.randn_like(x_0)</span><br><span class="line">    sqrt_alphas_cumprod_t = get_index_from_list(sqrt_alphas_cumprod, t, x_0.shape)</span><br><span class="line">    sqrt_one_minus_alphas_cumprod_t = get_index_from_list(</span><br><span class="line">        sqrt_one_minus_alphas_cumprod, t, x_0.shape</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># mean + variance</span></span><br><span class="line">    <span class="keyword">return</span> sqrt_alphas_cumprod_t.to(device) * x_0.to(device) \</span><br><span class="line">    + sqrt_one_minus_alphas_cumprod_t.to(device) * noise.to(device), noise.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define beta schedule</span></span><br><span class="line">T = <span class="number">300</span></span><br><span class="line">betas = linear_beta_schedule(timesteps=T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-calculate different terms for closed form</span></span><br><span class="line">alphas = <span class="number">1.</span> - betas</span><br><span class="line">alphas_cumprod = torch.cumprod(alphas, axis=<span class="number">0</span>)</span><br><span class="line">alphas_cumprod_prev = F.pad(alphas_cumprod[:-<span class="number">1</span>], (<span class="number">1</span>, <span class="number">0</span>), value=<span class="number">1.0</span>)</span><br><span class="line">sqrt_recip_alphas = torch.sqrt(<span class="number">1.0</span> / alphas)</span><br><span class="line">sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)</span><br><span class="line">sqrt_one_minus_alphas_cumprod = torch.sqrt(<span class="number">1.</span> - alphas_cumprod)</span><br><span class="line">posterior_variance = betas * (<span class="number">1.</span> - alphas_cumprod_prev) / (<span class="number">1.</span> - alphas_cumprod)</span><br></pre></td></tr></table></figure><p>加噪声的schedule有多种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_beta_schedule</span>(<span class="params">timesteps, s=<span class="number">0.008</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    cosine schedule as proposed in https://arxiv.org/abs/2102.09672</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    steps = timesteps + <span class="number">1</span></span><br><span class="line">    x = torch.linspace(<span class="number">0</span>, timesteps, steps)</span><br><span class="line">    alphas_cumprod = torch.cos(((x / timesteps) + s) / (<span class="number">1</span> + s) * torch.pi * <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line">    alphas_cumprod = alphas_cumprod / alphas_cumprod[<span class="number">0</span>]</span><br><span class="line">    betas = <span class="number">1</span> - (alphas_cumprod[<span class="number">1</span>:] / alphas_cumprod[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> torch.clip(betas, <span class="number">0.0001</span>, <span class="number">0.9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(beta_start, beta_end, timesteps)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(beta_start**<span class="number">0.5</span>, beta_end**<span class="number">0.5</span>, timesteps) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    betas = torch.linspace(-<span class="number">6</span>, <span class="number">6</span>, timesteps)</span><br><span class="line">    <span class="keyword">return</span> torch.sigmoid(betas) * (beta_end - beta_start) + beta_start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反向扩散过程"><a href="#反向扩散过程" class="headerlink" title="反向扩散过程"></a>反向扩散过程</h2><p>如果能将上述过程反向,就能从高斯噪声图像得到一整图像了.也就是需要知道$q(\mathbf{x}<em>{t-1}|\mathbf{x}</em>{t})$,这跟贝叶斯有点关系,可以使用神经网络近似这个条件概率,以便运行反向扩散过程.</p><script type="math/tex; mode=display">p_\theta(\mathbf{x}_{0:T})=p(\mathbf{x}_T)\prod_{t=1}^Tp_\theta(\mathbf{x}_{t-1}|\mathbf{x}_t)\quad p_\theta(\mathbf{x}_{t-1}|\mathbf{x}_t)=\mathcal{N}(\mathbf{x}_{t-1};\boldsymbol{\mu}_\theta(\mathbf{x}_t,t),\boldsymbol{\Sigma}_\theta(\mathbf{x}_t,t))</script><p>假设反向也是高斯,可以有条件概率</p><script type="math/tex; mode=display">q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_{t-1};\tilde{\boldsymbol{\mu}}(\mathbf{x}_t,\mathbf{x}_0),\color{red}{\tilde{\boldsymbol{\beta}}_t}\mathbf{I})</script><p>使用贝叶斯</p><script type="math/tex; mode=display">\begin{aligned}q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)& =q(\mathbf{x}_t|\mathbf{x}_{t-1},\mathbf{x}_0)\frac{q(\mathbf{x}_{t-1}|\mathbf{x}_0)}{q(\mathbf{x}_t|\mathbf{x}_0)}  \\&\propto\exp\left(-\frac12(\frac{(\mathbf{x}_t-\sqrt{\alpha_t}\mathbf{x}_{t-1})^2}{\beta_t}+\frac{(\mathbf{x}_{t-1}-\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0)^2}{1-\bar{\alpha}_{t-1}}-\frac{(\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0)^2}{1-\bar{\alpha}_t})\right) \\&=\exp\left(-\frac12(\frac{\mathbf{x}_t^2-2\sqrt{\alpha_t}\mathbf{x}_t\mathbf{x}_{t-1}+\alpha_t\mathbf{x}_{t-1}^2}{\beta_t}+\frac{\mathbf{x}_{t-1}^2-2\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0\mathbf{x}_{t-1}+\bar{\alpha}_{t-1}\mathbf{x}_0^2}{1-\bar{\alpha}_{t-1}}-\frac{(\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0)^2}{1-\bar{\alpha}_t})\right) \\&\left.=\exp\left(-\frac12(\color{red}{(\frac{\alpha_t}{\beta_t}+\frac1{1-\bar{\alpha}_{t-1}})x_{t-1}^2-(\frac{2\sqrt{\alpha_t}}{\beta_t}x_t+\frac{2\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}x_0)x_{t-1}+C(\mathbf{x}_t,\mathbf{x}_0)}\right)\right)\end{aligned}</script><p>根据一堆公式计算(这不是我擅长的),得到均值和方差.</p><script type="math/tex; mode=display">\begin{aligned}\tilde{\beta}_{t}& =1/(\frac{\alpha_t}{\beta_t}+\frac{1}{1-\bar{\alpha}_{t-1}})=1/(\frac{\alpha_t-\bar{\alpha}_t+\beta_t}{\beta_t(1-\bar{\alpha}_{t-1})})=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t  \\\tilde{\boldsymbol{\mu}}_t(\mathbf{x}_t,\mathbf{x}_0)& =(\frac{\sqrt{\alpha_t}}{\beta_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}\mathbf{x}_0)/(\frac{\alpha_t}{\beta_t}+\frac{1}{1-\bar{\alpha}_{t-1}})  \\&=(\frac{\sqrt{\alpha_t}}{\beta_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}\mathbf{x}_0)\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t \\&=\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\mathbf{x}_0\end{aligned}</script><p>由于$\mathbf{x}_0=\frac1{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t-\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t)$,有均值如下:</p><script type="math/tex; mode=display">\begin{aligned}\tilde{\boldsymbol{\mu}}_{t}& =\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\frac{1}{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t-\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t)  \\&=\color{red}{\frac1{\sqrt{\alpha_t}}\left(x_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\epsilon_t\right)}\end{aligned}</script><p>所以需要训练一个神经网络拟合这个概率分布,使用重参数化技巧,前向加噪声后,利用得到的图像数据得到高斯分布的参数μ</p><script type="math/tex; mode=display">\begin{aligned}\boldsymbol{\mu}_{\theta}(\mathbf{x}_{t},t)& =\color{red}{\frac1{\sqrt{\alpha_t}}\left(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\right)}  \\\Gamma\mathrm{hus~}\mathbf{x}_{t-1}& =\mathcal{N}(\mathbf{x}_{t-1};\frac{1}{\sqrt{\alpha_{t}}}\left(\mathbf{x}_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\boldsymbol{\epsilon}_{\theta}(\mathbf{x}_{t},t)\right),\boldsymbol{\Sigma}_{\theta}(\mathbf{x}_{t},t)) \end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}L_{t}& =\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac{1}{2\|\boldsymbol{\Sigma}_\theta(\mathbf{x}_t,t)\|_2^2}\|\tilde{\boldsymbol{\mu}}_t(\mathbf{x}_t,\mathbf{x}_0)-\boldsymbol{\mu}_\theta(\mathbf{x}_t,t)\|^2\Big]  \\&=\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac1{2\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\color{red}{\frac1{\sqrt{\alpha_t}}\left(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\boldsymbol{\epsilon}_t\right)}-\frac1{\sqrt{\alpha_t}}\Big(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}} \\&=\mathbb{E}_{\mathbf{x}_0,\boldsymbol{\epsilon}}\Big[\frac{(1-\alpha_t)^2}{2\alpha_t(1-\bar{\alpha}_t)\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\Big] \\&=\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac{(1-\alpha_t)^2}{2\alpha_t(1-\bar{\alpha}_t)\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\Big]\end{aligned}</script><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><script type="math/tex; mode=display">\begin{aligned}L_{t}^{\operatorname{simple}}& =\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\boldsymbol{\epsilon}_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\right]  \\&=\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\boldsymbol{\epsilon}_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\right]\end{aligned}</script><p>最终目标优化函数</p><script type="math/tex; mode=display">L_\text{simple} = L_t^\text{simple} + C</script><p><img data-src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/DDPM-algo.png" alt="img"></p><h2 id="加速扩散模型采样"><a href="#加速扩散模型采样" class="headerlink" title="加速扩散模型采样"></a>加速扩散模型采样</h2><p>DDPM生成样本很慢,可以通过经过多步后进行采样(也就是增加采样间隔),或者根据DDIM论文,跳过p(x~t~|x~t-1~)直接从p(x~t~|x~0~)出发.</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{X}_{t-1}& =\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}}\boldsymbol{\epsilon}_{t-1}  \\&=\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_t^2}\boldsymbol{\epsilon}_t+\sigma_t\boldsymbol{\epsilon} \\&=\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_t^2}\frac{\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0}{\sqrt{1-\bar{\alpha}_t}}+\sigma_t\boldsymbol{\epsilon} \\q_\sigma(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)& =\mathcal{N}(\mathbf{x}_{t-1};\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_{0}+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_{t}^{2}}\frac{\mathbf{x}_{t}-\sqrt{\bar{\alpha}_{t}}\mathbf{x}_{0}}{\sqrt{1-\bar{\alpha}_{t}}},\sigma_{t}^{2}\mathbf{I}) \end{aligned}</script><script type="math/tex; mode=display">\tilde{\beta}_t=\sigma_t^2=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t</script><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://huggingface.co/blog/annotated-diffusion">The Annotated Diffusion Model (huggingface.co)</a></li><li><a href="https://colab.research.google.com/drive/1sjy9odlSSy0RBVgMTgP7s99NXsqglsUL?usp=sharing#scrollTo=qWw50ui9IZ5q">diffusion_model.ipynb - Colaboratory (google.com)</a></li><li><a href="https://github.com/cloneofsimo/minDiffusion/tree/master">cloneofsimo/minDiffusion: Self-contained, minimalistic implementation of diffusion models with Pytorch. (github.com)</a></li><li><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/">What are Diffusion Models? | Lil’Log (lilianweng.github.io)</a></li><li><a href="https://spaces.ac.cn/archives/9119">生成扩散模型漫谈（一）：DDPM = 拆楼 + 建楼 - 科学空间|Scientific Spaces</a></li><li><a href="https://sungsoo.github.io/2022/07/20/diffusion-model.html">Diffusion Models from Scratch in PyTorch (sungsoo.github.io)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近OpenAI的Sora模型又大火了一把,据说背后的技术是transformer+diffusion.之前我也大致介绍过stable diffusion的过程,这里我再稍微详细介绍一下经典的扩散模型以及改进之后的DDIM.其中我也有很多不太明白的,只有结合代码理解了.&lt;br&gt;</summary>
    
    
    
    
    <category term="diffusion model" scheme="https://www.sekyoro.top/tags/diffusion-model/"/>
    
  </entry>
  
  <entry>
    <title>机器学习回顾:集成学习</title>
    <link href="https://www.sekyoro.top/2024/02/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/02/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-02-22T15:49:54.000Z</published>
    <updated>2024-02-23T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>传统的机器学习方法,现在用得不多了(自我感觉).但是有必要稍微了解一下原理。<br><span id="more"></span></p><p>集成学习方法可以分为Bagging,Boosting以及Stacking.</p><p>Bagging也称为bootstrap聚合，是预测模型的多个版本的聚合。每个模型都是单独训练的，并使用平均过程进行组合。装袋的主要重点是实现比任何模型单独具有的方差更小的方差。</p><p>Bootstrapping 是从给定的数据集中生成自举样本的过程。样本是通过随机抽取数据点并进行替换而形成的。</p><p>重新采样的数据包含原始数据中作为一个整体的不同特征。它绘制了数据点中存在的分布，并且往往保持彼此不同，即数据分布必须保持完整，同时保持Bootstrapping 样本之间的不相似性.其实这跟目前深度学习中的样本增强等概念又何尝不同呢.</p><p>在Bagging中,首先创建自举样本.然后,对每个样本应用回归算法或分类算法.最后在回归的情况下,对个体学习者预测的所有输出取平均值.对于分类,要么接受投票最多的类别（硬投票）,要么将所有类别概率的最高平均值作为输出（软投票）</p><script type="math/tex; mode=display">\widehat{f_{bag}}=\widehat{f_1}\left(X\right)+\widehat{f_2}\left(X\right)+\cdots+\widehat{f_b}\left(X\right)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = model_selection.KFold(n_splits=<span class="number">10</span>, random_state=seed)</span><br><span class="line">cart = DecisionTreeClassifier()</span><br><span class="line">num_trees = <span class="number">100</span></span><br><span class="line">model = BaggingClassifier(base_estimator=cart,n_estimators=num_trees, random_state=seed)</span><br><span class="line"></span><br><span class="line">results = model_selection.cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(results.mean())</span><br></pre></td></tr></table></figure><p>Stacking是通过一个元分类器或者元回归器来整合多个分类模型或回归模型的集成学习技术。基础模型利用整个训练集做训练，元模型将基础模型的特征作为特征进行训练.感觉有点类似于元学习(meta learning)的概念.</p><p><img data-src="https://pic1.zhimg.com/80/v2-6a1eb954185433e79498dea9bf87e0e0_720w.webp" alt="img"></p><p>或者又可以分为顺序的和并行的训练器.不同的模型按顺序生成,之前模型的错误由后面的分类器学习.这旨在通过赋予错误标记的示例更高的权重（例如AdaBoost）来利用模型之间的相关性。</p><p> 并行训练器,其中基础模型是并行生成的.这通过平均错误来利用模型之间的独立性（例如随机森林）</p><p>这里主要介绍其中的Boosting,Boosting算法试图从几个较弱模型的错误中建立一个强大的学习者（预测模型）。首先从训练数据创建模型.然后通过尝试减少上一个模型中的错误,从上一个创建第二个模型.依次添加模型,每个模型都对其前身进行校正,直到训练数据得到完美预测或添加了最大数量的模型。</p><p>Boosting包括AdaBoost,Gradient Tree Boosting等等.</p><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><p>AdaBoost是一种非常流行的Boosting技术,旨在将多个弱分类器组合起来构建一个强分类器.弱分类器比随机猜测性能更好，但在为对象指定类方面仍然表现不佳。单个分类器可能无法准确预测对象的类别，但当我们将多个弱分类器分组，每个弱分类器从其他错误分类的对象中逐步学习时，我们可以建立一个这样的强模型。这里提到的分类器可以是任何基本分类器，从决策树（通常是默认的）到逻辑回归等。</p><p>步骤1：基于加权样本在训练数据之上进行弱分类器（例如decision stump）.每个样本的权重表明正确分类的重要性。最初，对于第一个stump,我们给予所有样本相等的权重。</p><p>第2步：我们为每个变量创建一个决策树桩,看看每个树桩将样本分类到目标类的效果如何.</p><p>步骤3：将更多的权重分配给分类错误的样本,以便在下一个决策阶段对其进行正确分类.权重也根据分类器的精度分配给每个分类器,这意味着高精度=高权重</p><p>第4步：从第2步开始重复,直到所有数据点都被正确分类,或者达到最大迭代级别.</p><p>首先给每个样本相同权重,计算得到的预测结果错误率,根据错误率得到α</p><script type="math/tex; mode=display">error = sum(w(i) * terror(i)) / sum(w) \\terror = 0 if(y == p), otherwise 1</script><script type="math/tex; mode=display">\alpha_t=\frac12ln\frac{(1-TotalError)}{TotalError}</script><p>然后对权重进行更新</p><script type="math/tex; mode=display">w_i=w_{i-1}*e^{\pm\alpha}</script><p>当预测输出和实际输出一致时（样本分类正确），Alpha为正。在这种情况下，我们减少了样权重，因为已经表现得很好了。</p><p>当预测输出与实际类别不一致时（即样本分类错误），Alpha为负值。在这种情况下需要增加样本权重，以便在下一个树桩中不会重复相同的错误分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on Nov 28, 2010</span></span><br><span class="line"><span class="string">Adaboost is short for Adaptive Boosting</span></span><br><span class="line"><span class="string">@author: Peter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadSimpData</span>():</span></span><br><span class="line">    datMat = matrix([[ <span class="number">1.</span> ,  <span class="number">2.1</span>],</span><br><span class="line">        [ <span class="number">2.</span> ,  <span class="number">1.1</span>],</span><br><span class="line">        [ <span class="number">1.3</span>,  <span class="number">1.</span> ],</span><br><span class="line">        [ <span class="number">1.</span> ,  <span class="number">1.</span> ],</span><br><span class="line">        [ <span class="number">2.</span> ,  <span class="number">1.</span> ]])</span><br><span class="line">    classLabels = [<span class="number">1.0</span>, <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    <span class="keyword">return</span> datMat,classLabels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span>(<span class="params">fileName</span>):</span>      <span class="comment">#general function to parse tab -delimited floats</span></span><br><span class="line">    numFeat = <span class="built_in">len</span>(<span class="built_in">open</span>(fileName).readline().split(<span class="string">&#x27;\t&#x27;</span>)) <span class="comment">#get number of fields </span></span><br><span class="line">    dataMat = []; labelMat = []</span><br><span class="line">    fr = <span class="built_in">open</span>(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        lineArr =[]</span><br><span class="line">        curLine = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numFeat-<span class="number">1</span>):</span><br><span class="line">            lineArr.append(<span class="built_in">float</span>(curLine[i]))</span><br><span class="line">        dataMat.append(lineArr)</span><br><span class="line">        labelMat.append(<span class="built_in">float</span>(curLine[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> dataMat,labelMat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stumpClassify</span>(<span class="params">dataMatrix,dimen,threshVal,threshIneq</span>):</span><span class="comment">#just classify the data</span></span><br><span class="line">    retArray = ones((shape(dataMatrix)[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> threshIneq == <span class="string">&#x27;lt&#x27;</span>:</span><br><span class="line">        retArray[dataMatrix[:,dimen] &lt;= threshVal] = -<span class="number">1.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        retArray[dataMatrix[:,dimen] &gt; threshVal] = -<span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> retArray</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildStump</span>(<span class="params">dataArr,classLabels,D</span>):</span></span><br><span class="line">    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T</span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    numSteps = <span class="number">10.0</span>; bestStump = &#123;&#125;; bestClasEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    minError = inf <span class="comment">#init error sum, to +infinity</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#loop over all dimensions</span></span><br><span class="line">        rangeMin = dataMatrix[:,i].<span class="built_in">min</span>(); rangeMax = dataMatrix[:,i].<span class="built_in">max</span>();</span><br><span class="line">        stepSize = (rangeMax-rangeMin)/numSteps</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>,<span class="built_in">int</span>(numSteps)+<span class="number">1</span>):<span class="comment">#loop over all range in current dimension</span></span><br><span class="line">            <span class="keyword">for</span> inequal <span class="keyword">in</span> [<span class="string">&#x27;lt&#x27;</span>, <span class="string">&#x27;gt&#x27;</span>]: <span class="comment">#go over less than and greater than</span></span><br><span class="line">                threshVal = (rangeMin + <span class="built_in">float</span>(j) * stepSize)</span><br><span class="line">                predictedVals = stumpClassify(dataMatrix,i,threshVal,inequal)<span class="comment">#call stump classify with i, j, lessThan</span></span><br><span class="line">                errArr = mat(ones((m,<span class="number">1</span>)))</span><br><span class="line">                errArr[predictedVals == labelMat] = <span class="number">0</span></span><br><span class="line">                weightedError = D.T*errArr  <span class="comment">#calc total error multiplied by D</span></span><br><span class="line">                <span class="comment">#print &quot;split: dim %d, thresh %.2f, thresh ineqal: %s, the weighted error is %.3f&quot; % (i, threshVal, inequal, weightedError)</span></span><br><span class="line">                <span class="keyword">if</span> weightedError &lt; minError:</span><br><span class="line">                    minError = weightedError</span><br><span class="line">                    bestClasEst = predictedVals.copy()</span><br><span class="line">                    bestStump[<span class="string">&#x27;dim&#x27;</span>] = i</span><br><span class="line">                    bestStump[<span class="string">&#x27;thresh&#x27;</span>] = threshVal</span><br><span class="line">                    bestStump[<span class="string">&#x27;ineq&#x27;</span>] = inequal</span><br><span class="line">    <span class="keyword">return</span> bestStump,minError,bestClasEst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaBoostTrainDS</span>(<span class="params">dataArr,classLabels,numIt=<span class="number">40</span></span>):</span></span><br><span class="line">    weakClassArr = []</span><br><span class="line">    m = shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">    D = mat(ones((m,<span class="number">1</span>))/m)   <span class="comment">#init D to all equal</span></span><br><span class="line">    aggClassEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numIt):</span><br><span class="line">        bestStump,error,classEst = buildStump(dataArr,classLabels,D)<span class="comment">#build Stump</span></span><br><span class="line">        <span class="comment">#print &quot;D:&quot;,D.T</span></span><br><span class="line">        alpha = <span class="built_in">float</span>(<span class="number">0.5</span>*log((<span class="number">1.0</span>-error)/<span class="built_in">max</span>(error,<span class="number">1e-16</span>)))<span class="comment">#calc alpha, throw in max(error,eps) to account for error=0</span></span><br><span class="line">        bestStump[<span class="string">&#x27;alpha&#x27;</span>] = alpha  </span><br><span class="line">        weakClassArr.append(bestStump)                  <span class="comment">#store Stump Params in Array</span></span><br><span class="line">        <span class="comment">#print &quot;classEst: &quot;,classEst.T</span></span><br><span class="line">        expon = multiply(-<span class="number">1</span>*alpha*mat(classLabels).T,classEst) <span class="comment">#exponent for D calc, getting messy</span></span><br><span class="line">        D = multiply(D,exp(expon))                              <span class="comment">#Calc New D for next iteration</span></span><br><span class="line">        D = D/D.<span class="built_in">sum</span>()</span><br><span class="line">        <span class="comment">#calc training error of all classifiers, if this is 0 quit for loop early (use break)</span></span><br><span class="line">        aggClassEst += alpha*classEst</span><br><span class="line">        <span class="comment">#print &quot;aggClassEst: &quot;,aggClassEst.T</span></span><br><span class="line">        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T,ones((m,<span class="number">1</span>)))</span><br><span class="line">        errorRate = aggErrors.<span class="built_in">sum</span>()/m</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;total error: &quot;</span>,errorRate</span><br><span class="line">        <span class="keyword">if</span> errorRate == <span class="number">0.0</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> weakClassArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaClassify</span>(<span class="params">datToClass,classifierArr</span>):</span></span><br><span class="line">    dataMatrix = mat(datToClass)<span class="comment">#do stuff similar to last aggClassEst in adaBoostTrainDS</span></span><br><span class="line">    m = shape(dataMatrix)[<span class="number">0</span>]</span><br><span class="line">    aggClassEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classifierArr)):</span><br><span class="line">        classEst = stumpClassify(dataMatrix, classifierArr[i][<span class="string">&#x27;dim&#x27;</span>],\</span><br><span class="line">                                 classifierArr[i][<span class="string">&#x27;thresh&#x27;</span>],\</span><br><span class="line">                                 classifierArr[i][<span class="string">&#x27;ineq&#x27;</span>])<span class="comment">#call stump classify</span></span><br><span class="line">        aggClassEst += classifierArr[i][<span class="string">&#x27;alpha&#x27;</span>]*classEst</span><br><span class="line">        <span class="built_in">print</span> aggClassEst</span><br><span class="line">    <span class="keyword">return</span> sign(aggClassEst)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotROC</span>(<span class="params">predStrengths, classLabels</span>):</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    cur = (<span class="number">1.0</span>,<span class="number">1.0</span>) <span class="comment">#cursor</span></span><br><span class="line">    ySum = <span class="number">0.0</span> <span class="comment">#variable to calculate AUC</span></span><br><span class="line">    numPosClas = <span class="built_in">sum</span>(array(classLabels)==<span class="number">1.0</span>)</span><br><span class="line">    yStep = <span class="number">1</span>/<span class="built_in">float</span>(numPosClas); xStep = <span class="number">1</span>/<span class="built_in">float</span>(<span class="built_in">len</span>(classLabels)-numPosClas)</span><br><span class="line">    sortedIndicies = predStrengths.argsort()<span class="comment">#get sorted index, it&#x27;s reverse</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    fig.clf()</span><br><span class="line">    ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line">    <span class="comment">#loop through all the values, drawing a line segment at each point</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> sortedIndicies.tolist()[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">if</span> classLabels[index] == <span class="number">1.0</span>:</span><br><span class="line">            delX = <span class="number">0</span>; delY = yStep;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            delX = xStep; delY = <span class="number">0</span>;</span><br><span class="line">            ySum += cur[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#draw line from cur to (cur[0]-delX,cur[1]-delY)</span></span><br><span class="line">        ax.plot([cur[<span class="number">0</span>],cur[<span class="number">0</span>]-delX],[cur[<span class="number">1</span>],cur[<span class="number">1</span>]-delY], c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        cur = (cur[<span class="number">0</span>]-delX,cur[<span class="number">1</span>]-delY)</span><br><span class="line">    ax.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],<span class="string">&#x27;b--&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;False positive rate&#x27;</span>); plt.ylabel(<span class="string">&#x27;True positive rate&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;ROC curve for AdaBoost horse colic detection system&#x27;</span>)</span><br><span class="line">    ax.axis([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;the Area Under the Curve is: &quot;</span>,ySum*xStep</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://machinelearningmastery.com/boosting-and-adaboost-for-machine-learning/">Boosting and AdaBoost for Machine Learning - MachineLearningMastery.com</a></li><li><a href="https://machinelearningmastery.com/gentle-introduction-xgboost-applied-machine-learning/">A Gentle Introduction to XGBoost for Applied Machine Learning - MachineLearningMastery.com</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;传统的机器学习方法,现在用得不多了(自我感觉).但是有必要稍微了解一下原理。&lt;br&gt;</summary>
    
    
    
    
    <category term="Ensemble Learning" scheme="https://www.sekyoro.top/tags/Ensemble-Learning/"/>
    
  </entry>
  
  <entry>
    <title>深度学习有用的库以及介绍</title>
    <link href="https://www.sekyoro.top/2024/02/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%89%E7%94%A8%E7%9A%84%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.sekyoro.top/2024/02/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%89%E7%94%A8%E7%9A%84%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-02-19T07:49:03.000Z</published>
    <updated>2024-02-23T07:07:03.166Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在看其他源代码时以及自己写代码时可能用到的有用的库以及一些常用写法.<br><span id="more"></span></p><h2 id="python自带的库"><a href="#python自带的库" class="headerlink" title="python自带的库"></a>python自带的库</h2><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><p>用于迭代器的工具<a href="https://docs.python.org/zh-cn/3/library/itertools.html">itertools —- 为高效循环而创建迭代器的函数 — Python 3.12.2 文档</a></p><h3 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h3><p>用于处理函数的工具</p><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p>集合工具</p><h2 id="深度学习库"><a href="#深度学习库" class="headerlink" title="深度学习库"></a>深度学习库</h2><h3 id="timm"><a href="#timm" class="headerlink" title="timm"></a>timm</h3><h3 id="einops"><a href="#einops" class="headerlink" title="einops"></a>einops</h3><h3 id="from-torch-import-einsum"><a href="#from-torch-import-einsum" class="headerlink" title="from torch import einsum"></a>from torch import einsum</h3><h2 id="transformers"><a href="#transformers" class="headerlink" title="transformers"></a>transformers</h2><h2 id="accelerate"><a href="#accelerate" class="headerlink" title="accelerate"></a>accelerate</h2><h2 id="一些常用代码"><a href="#一些常用代码" class="headerlink" title="一些常用代码"></a>一些常用代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seed = <span class="number">2024</span></span><br><span class="line">random.seed(seed)</span><br><span class="line">torch.manual_seed(seed)</span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    torch.cuda.manual_seed(seed)</span><br><span class="line">    torch.cuda.manual_seed_all(seed)</span><br><span class="line">np.random.seed(seed)</span><br><span class="line">torch.backends.cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> Optimizer</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> LambdaLR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cosine_schedule_with_warmup</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">optimizer: Optimizer,</span></span></span><br><span class="line"><span class="params"><span class="function">num_warmup_steps: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">num_training_steps: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">num_cycles: <span class="built_in">float</span> = <span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">last_epoch: <span class="built_in">int</span> = -<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Create a schedule with a learning rate that decreases following the values of the cosine function between the</span></span><br><span class="line"><span class="string">initial lr set in the optimizer to 0, after a warmup period during which it increases linearly between 0 and the</span></span><br><span class="line"><span class="string">initial lr set in the optimizer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">optimizer (:class:`~torch.optim.Optimizer`):</span></span><br><span class="line"><span class="string">The optimizer for which to schedule the learning rate.</span></span><br><span class="line"><span class="string">num_warmup_steps (:obj:`int`):</span></span><br><span class="line"><span class="string">The number of steps for the warmup phase.</span></span><br><span class="line"><span class="string">num_training_steps (:obj:`int`):</span></span><br><span class="line"><span class="string">The total number of training steps.</span></span><br><span class="line"><span class="string">num_cycles (:obj:`float`, `optional`, defaults to 0.5):</span></span><br><span class="line"><span class="string">The number of waves in the cosine schedule (the defaults is to just decrease from the max value to 0</span></span><br><span class="line"><span class="string">following a half-cosine).</span></span><br><span class="line"><span class="string">last_epoch (:obj:`int`, `optional`, defaults to -1):</span></span><br><span class="line"><span class="string">The index of the last epoch when resuming training.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Return:</span></span><br><span class="line"><span class="string">:obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lr_lambda</span>(<span class="params">current_step</span>):</span></span><br><span class="line"><span class="comment"># Warmup</span></span><br><span class="line"><span class="keyword">if</span> current_step &lt; num_warmup_steps:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">float</span>(current_step) / <span class="built_in">float</span>(<span class="built_in">max</span>(<span class="number">1</span>, num_warmup_steps))</span><br><span class="line"><span class="comment"># decadence</span></span><br><span class="line">progress = <span class="built_in">float</span>(current_step - num_warmup_steps) / <span class="built_in">float</span>(</span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, num_training_steps - num_warmup_steps)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(</span><br><span class="line"><span class="number">0.0</span>, <span class="number">0.5</span> * (<span class="number">1.0</span> + math.cos(math.pi * <span class="built_in">float</span>(num_cycles) * <span class="number">2.0</span> * progress))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> LambdaLR(optimizer, lr_lambda, last_epoch)</span><br></pre></td></tr></table></figure><h2 id="一些有用的资料"><a href="#一些有用的资料" class="headerlink" title="一些有用的资料"></a>一些有用的资料</h2><ol><li><a href="https://stanford.edu/~shervine/teaching/cs-230/cheatsheet-deep-learning-tips-and-tricks">CS 230 - Deep Learning Tips and Tricks Cheatsheet (stanford.edu)</a></li><li><a href="https://github.com/Conchylicultor/Deep-Learning-Tricks">Conchylicultor/Deep-Learning-Tricks: Enumerate diverse machine learning training tricks. (github.com)</a></li><li><a href="https://github.com/ayyucedemirbas/Deep-Learning-Tips-and-Tricks">ayyucedemirbas/Deep-Learning-Tips-and-Tricks (github.com)</a></li><li>找一些模型代码<a href="https://github.com/huggingface/pytorch-image-models">huggingface/pytorch-image-models: PyTorch image models, scripts, pretrained weights — ResNet, ResNeXT, EfficientNet, NFNet, Vision Transformer (ViT), MobileNet-V3/V2, RegNet, DPN, CSPNet, Swin Transformer, MaxViT, CoAtNet, ConvNeXt, and more (github.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;在看其他源代码时以及自己写代码时可能用到的有用的库以及一些常用写法.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>transformer and attention(三)</title>
    <link href="https://www.sekyoro.top/2024/02/16/transformer-and-attention-%E4%B8%89/"/>
    <id>https://www.sekyoro.top/2024/02/16/transformer-and-attention-%E4%B8%89/</id>
    <published>2024-02-16T14:44:00.000Z</published>
    <updated>2024-02-21T15:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这里介绍一些细节信息.有关位置编码信息和用于图像的transformer.<br><span id="more"></span></p><h2 id="线性注意力"><a href="#线性注意力" class="headerlink" title="线性注意力"></a>线性注意力</h2><script type="math/tex; mode=display">Attention(\boldsymbol{Q},\boldsymbol{K},\boldsymbol{V})=softmax\left(\boldsymbol{Q}\boldsymbol{K}^\top\right)\boldsymbol{V}</script><p>其中$Q\in\mathbb{R}^{n\times d_k},\boldsymbol{K}\in\mathbb{R}^{m\times d_k},\boldsymbol{V}\in\mathbb{R}^{m\times d_v}$​,一般情况下n&gt;d甚至n&gt;&gt;d.所以如果对QK^T^进行softmax操作,复杂度为O(mn),所以去掉Softmax的Attention的复杂度可以降到最理想的线性级别Linear Attention.</p><script type="math/tex; mode=display">Attention(\boldsymbol{Q},\boldsymbol{K},\boldsymbol{V})_i=\frac{\sum_{j=1}^nsim(\boldsymbol{q}_i,\boldsymbol{k}_j)\boldsymbol{v}_j}{\sum_{j=1}^nsim(\boldsymbol{q}_i,\boldsymbol{k}_j)}</script><p>只要保证Attention相似的分布特性,要求sim(q~i~,k~j~)≥0恒成立.比如可以把核函数改为激活函数使得输出大于0.</p><p>还可以改成softmax.</p><p><img data-src="https://s2.loli.net/2024/02/17/wE3HgYJ7KnxZ5pe.png" alt="image-20240217224419083"></p><p>其中softmax1、softmax2分别指在第一个（n）、第二个维度（d）进行Softmax运算.</p><p><a href="https://spaces.ac.cn/archives/7546">线性Attention的探索：Attention必须有个Softmax吗？ - 科学空间|Scientific Spaces</a>提出将指数</p><p>e^qK^泰勒展开,$e^{\boldsymbol{q}_i^\top\boldsymbol{k}_j}\approx1+\boldsymbol{q}_i^\top\boldsymbol{k}_j$</p><p><img data-src="https://s2.loli.net/2024/02/17/fhBMIgcsqzZQt3k.png" alt="image-20240217224836831"></p><p>此外还有稀疏注意力,这里就不多介绍了.</p><h2 id="图像中的transformer与attention"><a href="#图像中的transformer与attention" class="headerlink" title="图像中的transformer与attention"></a>图像中的transformer与attention</h2><p>注意力机制以及transformer都是先在NLP领域发展,所以一般attention可能会处理一些1维数据,有CNN与transformer结合的Conformer<a href="https://arxiv.org/abs/2005.08100">[2005.08100] Conformer: Convolution-augmented Transformer for Speech Recognition (arxiv.org)</a>,conformer中的编码采用相对位置编码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> einops <span class="keyword">import</span> rearrange</span><br><span class="line"><span class="keyword">from</span> einops.layers.torch <span class="keyword">import</span> Rearrange</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn, einsum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span>(<span class="params">val</span>):</span></span><br><span class="line">    <span class="keyword">return</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">val, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> val <span class="keyword">if</span> exists(val) <span class="keyword">else</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swish</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x * x.sigmoid()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedForward</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, mult=<span class="number">4</span>, dropout=<span class="number">0.0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            nn.Linear(dim, dim * mult),</span><br><span class="line">            Swish(),  <span class="comment"># or can be replace by nn.silu()</span></span><br><span class="line">            nn.Dropout(dropout),</span><br><span class="line">            nn.Linear(dim * mult, dim),</span><br><span class="line">            nn.Dropout(dropout),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, heads=<span class="number">8</span>, dim_head=<span class="number">64</span>, dropout=<span class="number">0.0</span>, max_pos_emb=<span class="number">512</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        inner_dim = dim_head * heads</span><br><span class="line">        self.heads = heads</span><br><span class="line">        self.scale = dim_head**-<span class="number">0.5</span></span><br><span class="line">        self.to_q = nn.Linear(dim, inner_dim, bias=<span class="literal">False</span>)</span><br><span class="line">        self.to_kv = nn.Linear(dim, inner_dim * <span class="number">2</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.to_out = nn.Linear(inner_dim, dim)</span><br><span class="line"></span><br><span class="line">        self.max_pos_emb = max_pos_emb</span><br><span class="line">        self.rel_pos_emb = nn.Embedding(<span class="number">2</span> * max_pos_emb + <span class="number">1</span>, dim_head)</span><br><span class="line"></span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, context=<span class="literal">None</span>, mask=<span class="literal">None</span>, context_mask=<span class="literal">None</span></span>):</span></span><br><span class="line">        n, device, h, max_pos_emb, has_context = (</span><br><span class="line">            x.shape[-<span class="number">2</span>],</span><br><span class="line">            x.device,</span><br><span class="line">            self.heads,</span><br><span class="line">            self.max_pos_emb,</span><br><span class="line">            exists(context),</span><br><span class="line">        )</span><br><span class="line">        context = default(context, x)</span><br><span class="line"></span><br><span class="line">        q, k, v = (self.to_q(x), *self.to_kv(context).chunk(<span class="number">2</span>, dim=-<span class="number">1</span>))</span><br><span class="line">        q, k, v = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: rearrange(t, <span class="string">&quot;b n (h d) -&gt; b h n d&quot;</span>, h=h), (q, k, v))</span><br><span class="line"></span><br><span class="line">        dots = einsum(<span class="string">&quot;b h i d, b h j d -&gt; b h i j&quot;</span>, q, k) * self.scale</span><br><span class="line"></span><br><span class="line">        <span class="comment"># shaw&#x27;s relative positional embedding</span></span><br><span class="line">        seq = torch.arange(n, device=device)</span><br><span class="line">        dist = rearrange(seq, <span class="string">&quot;i -&gt; i ()&quot;</span>) - rearrange(seq, <span class="string">&quot;j -&gt; () j&quot;</span>)</span><br><span class="line">        dist = dist.clamp(-max_pos_emb, max_pos_emb) + max_pos_emb</span><br><span class="line">        rel_pos_emb = self.rel_pos_emb(dist).to(q)</span><br><span class="line">        pos_attn = einsum(<span class="string">&quot;b h n d, n r d -&gt; b h n r&quot;</span>, q, rel_pos_emb) * self.scale</span><br><span class="line">        dots = dots + pos_attn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> exists(mask) <span class="keyword">or</span> exists(context_mask):</span><br><span class="line">            mask = default(mask, <span class="keyword">lambda</span>: torch.ones(*x.shape[:<span class="number">2</span>], device=device))</span><br><span class="line">            context_mask = (</span><br><span class="line">                default(context_mask, mask)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> has_context</span><br><span class="line">                <span class="keyword">else</span> default(</span><br><span class="line">                    context_mask, <span class="keyword">lambda</span>: torch.ones(*context.shape[:<span class="number">2</span>], device=device)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            mask_value = -torch.finfo(dots.dtype).<span class="built_in">max</span></span><br><span class="line">            mask = rearrange(mask, <span class="string">&quot;b i -&gt; b () i ()&quot;</span>) * rearrange(</span><br><span class="line">                context_mask, <span class="string">&quot;b j -&gt; b () () j&quot;</span></span><br><span class="line">            )</span><br><span class="line">            dots.masked_fill_(~mask, mask_value)</span><br><span class="line"></span><br><span class="line">        attn = dots.softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        out = einsum(<span class="string">&quot;b h i j, b h j d -&gt; b h i d&quot;</span>, attn, v)</span><br><span class="line">        out = rearrange(out, <span class="string">&quot;b h n d -&gt; b n (h d)&quot;</span>)</span><br><span class="line">        out = self.to_out(out)</span><br><span class="line">        <span class="keyword">return</span> self.dropout(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_same_padding</span>(<span class="params">kernel_size</span>):</span></span><br><span class="line">    pad = kernel_size // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> pad, pad - (kernel_size + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepthWiseConv1d</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, chan_in, chan_out, kernel_size, padding</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.padding = padding</span><br><span class="line">        self.conv = nn.Conv1d(chan_in, chan_out, kernel_size, groups=chan_in)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.pad(x, self.padding)</span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GLU</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.dim = dim</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out, gate = x.chunk(<span class="number">2</span>, dim=self.dim)</span><br><span class="line">        <span class="keyword">return</span> out * gate.sigmoid()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConformerConvModule</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, dim, causal=<span class="literal">False</span>, expansion_factor=<span class="number">2</span>, kernel_size=<span class="number">31</span>, dropout=<span class="number">0.0</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        inner_dim = dim * expansion_factor</span><br><span class="line">        padding = calc_same_padding(kernel_size) <span class="keyword">if</span> <span class="keyword">not</span> causal <span class="keyword">else</span> (kernel_size - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">            Rearrange(<span class="string">&quot;b n d -&gt; b d n&quot;</span>),</span><br><span class="line">            nn.Conv1d(dim, inner_dim * <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">            GLU(dim=<span class="number">1</span>),</span><br><span class="line">            DepthWiseConv1d(</span><br><span class="line">                inner_dim, inner_dim, kernel_size=kernel_size, padding=padding</span><br><span class="line">            ),</span><br><span class="line">            nn.BatchNorm1d(inner_dim) <span class="keyword">if</span> <span class="keyword">not</span> causal <span class="keyword">else</span> nn.Identity(),</span><br><span class="line">            Swish(),</span><br><span class="line">            nn.Conv1d(inner_dim, dim, <span class="number">1</span>),</span><br><span class="line">            Rearrange(<span class="string">&quot;b d n -&gt; b n d&quot;</span>),</span><br><span class="line">            nn.Dropout(dropout),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scale</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, scale, fn</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.scale = scale</span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.fn(x, **kwargs) * self.scale</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PreNorm</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, fn</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.fn = fn</span><br><span class="line">        self.norm = nn.LayerNorm(dim)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, **kwargs</span>):</span></span><br><span class="line">        x = self.norm(x)</span><br><span class="line">        <span class="keyword">return</span> self.fn(x, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConformerBlock</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        *,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim_head=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        heads=<span class="number">8</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ff_mult=<span class="number">4</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_expansion_factor=<span class="number">2</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_kernel_size=<span class="number">31</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        attn_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ff_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_causal=<span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.ff1 = FeedForward(dim=dim, mult=ff_mult, dropout=ff_dropout)</span><br><span class="line">        self.attn = Attention(</span><br><span class="line">            dim=dim, dim_head=dim_head, heads=heads, dropout=attn_dropout</span><br><span class="line">        )</span><br><span class="line">        self.conv = ConformerConvModule(</span><br><span class="line">            dim=dim,</span><br><span class="line">            causal=conv_causal,</span><br><span class="line">            expansion_factor=conv_expansion_factor,</span><br><span class="line">            kernel_size=conv_kernel_size,</span><br><span class="line">            dropout=conv_dropout,</span><br><span class="line">        )</span><br><span class="line">        self.ff2 = FeedForward(dim=dim, mult=ff_mult, dropout=ff_dropout)</span><br><span class="line"></span><br><span class="line">        self.attn = PreNorm(dim, self.attn)</span><br><span class="line">        self.ff1 = Scale(<span class="number">0.5</span>, PreNorm(dim, self.ff1))</span><br><span class="line">        self.ff2 = Scale(<span class="number">0.5</span>, PreNorm(dim, self.ff2))</span><br><span class="line"></span><br><span class="line">        self.post_norm = nn.LayerNorm(dim)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask=<span class="literal">None</span></span>):</span></span><br><span class="line">        x = self.ff1(x) + x</span><br><span class="line">        x = self.attn(x, mask=mask) + x</span><br><span class="line">        x = self.conv(x) + x</span><br><span class="line">        x = self.ff2(x) + x</span><br><span class="line">        x = self.post_norm(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        *,</span></span></span><br><span class="line"><span class="params"><span class="function">        depth,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim_head=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        heads=<span class="number">8</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ff_mult=<span class="number">4</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_expansion_factor=<span class="number">2</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_kernel_size=<span class="number">31</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        attn_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ff_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        conv_causal=<span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">            self.layers.append(</span><br><span class="line">                ConformerBlock(</span><br><span class="line">                    dim=dim,</span><br><span class="line">                    dim_head=dim_head,</span><br><span class="line">                    heads=heads,</span><br><span class="line">                    ff_mult=ff_mult,</span><br><span class="line">                    conv_expansion_factor=conv_expansion_factor,</span><br><span class="line">                    conv_kernel_size=conv_kernel_size,</span><br><span class="line">                    conv_causal=conv_causal,</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = block(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上一节中其实已经充分使用了feature map也就是二维数据上的注意力机制,现在介绍一下在视觉领域表现出色的transformer及其变体.</p><h2 id="Vision-Transformer"><a href="#Vision-Transformer" class="headerlink" title="Vision Transformer"></a>Vision Transformer</h2><p><img data-src="https://s2.loli.net/2024/02/17/mdybruOEWxgSDVt.png" alt="image-20240217121859843"></p><p>将transformer拿到CV领域的出名作品,通过patch embedding得到序列,再加上位置编码就能像在nlp一样处理问题.</p><p><img data-src="https://pic1.zhimg.com/80/v2-1c6aa554d8fc53daa7bf79c755b1f86c_720w.webp" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> einops <span class="keyword">import</span> rearrange</span><br><span class="line"><span class="keyword">from</span> einops.layers.torch <span class="keyword">import</span> Rearrange</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="comment"># helpers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pair</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> t <span class="keyword">if</span> <span class="built_in">isinstance</span>(t, <span class="built_in">tuple</span>) <span class="keyword">else</span> (t, t)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posemb_sincos_2d</span>(<span class="params">h, w, dim, temperature: <span class="built_in">int</span> = <span class="number">10000</span>, dtype=torch.float32</span>):</span></span><br><span class="line">    y, x = torch.meshgrid(torch.arange(h), torch.arange(w), indexing=<span class="string">&quot;ij&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> (dim % <span class="number">4</span>) == <span class="number">0</span>, <span class="string">&quot;feature dimension must be multiple of 4 for sincos emb&quot;</span></span><br><span class="line">    omega = torch.arange(dim // <span class="number">4</span>) / (dim // <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line">    omega = <span class="number">1.0</span> / (temperature**omega)</span><br><span class="line"></span><br><span class="line">    y = y.flatten()[:, <span class="literal">None</span>] * omega[<span class="literal">None</span>, :]</span><br><span class="line">    x = x.flatten()[:, <span class="literal">None</span>] * omega[<span class="literal">None</span>, :]</span><br><span class="line">    pe = torch.cat((x.sin(), x.cos(), y.sin(), y.cos()), dim=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> pe.<span class="built_in">type</span>(dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># classes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedForward</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, hidden_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">            nn.Linear(dim, hidden_dim),</span><br><span class="line">            nn.GELU(),</span><br><span class="line">            nn.Linear(hidden_dim, dim),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, heads=<span class="number">8</span>, dim_head=<span class="number">64</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        inner_dim = dim_head * heads</span><br><span class="line">        self.heads = heads</span><br><span class="line">        self.scale = dim_head**-<span class="number">0.5</span></span><br><span class="line">        self.norm = nn.LayerNorm(dim)</span><br><span class="line"></span><br><span class="line">        self.attend = nn.Softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.to_qkv = nn.Linear(dim, inner_dim * <span class="number">3</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.to_out = nn.Linear(inner_dim, dim, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.norm(x)</span><br><span class="line"></span><br><span class="line">        qkv = self.to_qkv(x).chunk(<span class="number">3</span>, dim=-<span class="number">1</span>)</span><br><span class="line">        q, k, v = <span class="built_in">map</span>(<span class="keyword">lambda</span> t: rearrange(t, <span class="string">&quot;b n (h d) -&gt; b h n d&quot;</span>, h=self.heads), qkv)</span><br><span class="line"></span><br><span class="line">        dots = torch.matmul(q, k.transpose(-<span class="number">1</span>, -<span class="number">2</span>)) * self.scale</span><br><span class="line"></span><br><span class="line">        attn = self.attend(dots)</span><br><span class="line"></span><br><span class="line">        out = torch.matmul(attn, v)</span><br><span class="line">        out = rearrange(out, <span class="string">&quot;b h n d -&gt; b n (h d)&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.to_out(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, depth, heads, dim_head, mlp_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.norm = nn.LayerNorm(dim)</span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">            self.layers.append(</span><br><span class="line">                nn.ModuleList(</span><br><span class="line">                    [</span><br><span class="line">                        Attention(dim, heads=heads, dim_head=dim_head),</span><br><span class="line">                        FeedForward(dim, mlp_dim),</span><br><span class="line">                    ]</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">for</span> attn, ff <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = attn(x) + x</span><br><span class="line">            x = ff(x) + x</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleViT</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        *,</span></span></span><br><span class="line"><span class="params"><span class="function">        image_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        patch_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_classes,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        depth,</span></span></span><br><span class="line"><span class="params"><span class="function">        heads,</span></span></span><br><span class="line"><span class="params"><span class="function">        mlp_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        channels=<span class="number">3</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim_head=<span class="number">64</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        image_height, image_width = pair(image_size)</span><br><span class="line">        patch_height, patch_width = pair(patch_size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">            image_height % patch_height == <span class="number">0</span> <span class="keyword">and</span> image_width % patch_width == <span class="number">0</span></span><br><span class="line">        ), <span class="string">&quot;Image dimensions must be divisible by the patch size.&quot;</span></span><br><span class="line"></span><br><span class="line">        patch_dim = channels * patch_height * patch_width</span><br><span class="line"></span><br><span class="line">        self.to_patch_embedding = nn.Sequential(</span><br><span class="line">            Rearrange(</span><br><span class="line">                <span class="string">&quot;b c (h p1) (w p2) -&gt; b (h w) (p1 p2 c)&quot;</span>,</span><br><span class="line">                p1=patch_height,</span><br><span class="line">                p2=patch_width,</span><br><span class="line">            ),</span><br><span class="line">            nn.LayerNorm(patch_dim),</span><br><span class="line">            nn.Linear(patch_dim, dim),</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.pos_embedding = posemb_sincos_2d(</span><br><span class="line">            h=image_height // patch_height,</span><br><span class="line">            w=image_width // patch_width,</span><br><span class="line">            dim=dim,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.transformer = Transformer(dim, depth, heads, dim_head, mlp_dim)</span><br><span class="line"></span><br><span class="line">        self.pool = <span class="string">&quot;mean&quot;</span></span><br><span class="line">        self.to_latent = nn.Identity()</span><br><span class="line"></span><br><span class="line">        self.linear_head = nn.Linear(dim, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, img</span>):</span></span><br><span class="line">        device = img.device</span><br><span class="line"></span><br><span class="line">        x = self.to_patch_embedding(img)</span><br><span class="line">        x += self.pos_embedding.to(device, dtype=x.dtype)</span><br><span class="line"></span><br><span class="line">        x = self.transformer(x)</span><br><span class="line">        x = x.mean(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        x = self.to_latent(x)</span><br><span class="line">        <span class="keyword">return</span> self.linear_head(x)</span><br></pre></td></tr></table></figure><p>上面做了patch之后的位置编码使用三角函数绝对编码,attention和feednetwork与transformer没有什么差别.</p><h2 id="卷积注意力"><a href="#卷积注意力" class="headerlink" title="卷积注意力"></a>卷积注意力</h2><p>使用vision transformer中使用的绝对位置注意力,但是也可以使用相对位置注意力或者卷积注意力.</p><blockquote><p>卷积位置嵌入( CPE )方法考虑了输入序列的2D性质。采用补零的方式进行2D卷积采集位置信息。卷积位置嵌入( Convolutional Position嵌入，CPE )可用于合并ViT不同阶段的位置数据。CPE可以具体引入到自注意力模块，前馈网络，或者在两个编码器层之间的。</p></blockquote><p>卷积注意力通常方法是利用2D卷积或者depth-wise的卷积将已经做了patch的图像数据进行处理.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvolutionalPositionEmbedding</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv = nn.Conv2d(d_model, d_model, kernel_size, padding=padding)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = x.transpose(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 将通道维度和序列长度维度交换</span></span><br><span class="line">        x = x.unsqueeze(<span class="number">2</span>)  <span class="comment"># 在通道维度和序列长度维度之间添加一个维度</span></span><br><span class="line">        x = self.conv(x)  <span class="comment"># 对输入进行卷积操作</span></span><br><span class="line">        x = x.squeeze(<span class="number">2</span>)  <span class="comment"># 移除添加的维度</span></span><br><span class="line">        x = x.transpose(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 将通道维度和序列长度维度交换回来</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="CVT"><a href="#CVT" class="headerlink" title="CVT"></a>CVT</h3><p><img data-src="https://github.com/rishikksh20/convolution-vision-transformers/raw/master/assets/model.PNG" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   #!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#   #-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#  Copyleft (C) 2024 proanimer, Inc. All Rights Reserved</span></span><br><span class="line"><span class="comment">#   author:proanimer</span></span><br><span class="line"><span class="comment">#   createTime:2024/2/18 上午10:38</span></span><br><span class="line"><span class="comment">#   lastModifiedTime:2024/2/18 上午10:38</span></span><br><span class="line"><span class="comment">#   file:cvt.py</span></span><br><span class="line"><span class="comment">#   software: classicNets</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> einops <span class="keyword">import</span> rearrange, repeat</span><br><span class="line"><span class="keyword">from</span> einops.layers.torch <span class="keyword">import</span> Rearrange</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> einsum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SepConv2d</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        in_channels,</span></span></span><br><span class="line"><span class="params"><span class="function">        out_channels,</span></span></span><br><span class="line"><span class="params"><span class="function">        kernel_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        stride=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        padding=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dilation=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SepConv2d, self).__init__()</span><br><span class="line">        self.depthwise = torch.nn.Conv2d(</span><br><span class="line">            in_channels,</span><br><span class="line">            in_channels,</span><br><span class="line">            kernel_size=kernel_size,</span><br><span class="line">            stride=stride,</span><br><span class="line">            padding=padding,</span><br><span class="line">            dilation=dilation,</span><br><span class="line">            groups=in_channels,</span><br><span class="line">        )</span><br><span class="line">        self.bn = torch.nn.BatchNorm2d(in_channels)</span><br><span class="line">        self.pointwise = torch.nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.depthwise(x)</span><br><span class="line">        x = self.bn(x)</span><br><span class="line">        x = self.pointwise(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Residual</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, fn</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.fn(x, **kwargs) + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PreNorm</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, fn</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.norm = nn.LayerNorm(dim)</span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.fn(self.norm(x), **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedForward</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, hidden_dim, dropout=<span class="number">0.0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            nn.Linear(dim, hidden_dim),</span><br><span class="line">            nn.GELU(),</span><br><span class="line">            nn.Dropout(dropout),</span><br><span class="line">            nn.Linear(hidden_dim, dim),</span><br><span class="line">            nn.Dropout(dropout),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        img_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        heads=<span class="number">8</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim_head=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        kernel_size=<span class="number">3</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        q_stride=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        k_stride=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        v_stride=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        last_stage=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.last_stage = last_stage</span><br><span class="line">        self.img_size = img_size</span><br><span class="line">        inner_dim = dim_head * heads</span><br><span class="line">        project_out = <span class="keyword">not</span> (heads == <span class="number">1</span> <span class="keyword">and</span> dim_head == dim)</span><br><span class="line"></span><br><span class="line">        self.heads = heads</span><br><span class="line">        self.scale = dim_head**-<span class="number">0.5</span></span><br><span class="line">        pad = (kernel_size - q_stride) // <span class="number">2</span></span><br><span class="line">        self.to_q = SepConv2d(dim, inner_dim, kernel_size, q_stride, pad)</span><br><span class="line">        self.to_k = SepConv2d(dim, inner_dim, kernel_size, k_stride, pad)</span><br><span class="line">        self.to_v = SepConv2d(dim, inner_dim, kernel_size, v_stride, pad)</span><br><span class="line"></span><br><span class="line">        self.to_out = (</span><br><span class="line">            nn.Sequential(nn.Linear(inner_dim, dim), nn.Dropout(dropout))</span><br><span class="line">            <span class="keyword">if</span> project_out</span><br><span class="line">            <span class="keyword">else</span> nn.Identity()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        b, n, _, h = *x.shape, self.heads</span><br><span class="line">        <span class="keyword">if</span> self.last_stage:</span><br><span class="line">            cls_token = x[:, <span class="number">0</span>]</span><br><span class="line">            x = x[:, <span class="number">1</span>:]</span><br><span class="line">            cls_token = rearrange(cls_token.unsqueeze(<span class="number">1</span>), <span class="string">&quot;b n (h d) -&gt; b h n d&quot;</span>, h=h)</span><br><span class="line">        x = rearrange(x, <span class="string">&quot;b (l w) n -&gt; b n l w&quot;</span>, l=self.img_size, w=self.img_size)</span><br><span class="line">        q = self.to_q(x)</span><br><span class="line">        q = rearrange(q, <span class="string">&quot;b (h d) l w -&gt; b h (l w) d&quot;</span>, h=h)</span><br><span class="line"></span><br><span class="line">        v = self.to_v(x)</span><br><span class="line">        v = rearrange(v, <span class="string">&quot;b (h d) l w -&gt; b h (l w) d&quot;</span>, h=h)</span><br><span class="line"></span><br><span class="line">        k = self.to_k(x)</span><br><span class="line">        k = rearrange(k, <span class="string">&quot;b (h d) l w -&gt; b h (l w) d&quot;</span>, h=h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.last_stage:</span><br><span class="line">            q = torch.cat((cls_token, q), dim=<span class="number">2</span>)</span><br><span class="line">            v = torch.cat((cls_token, v), dim=<span class="number">2</span>)</span><br><span class="line">            k = torch.cat((cls_token, k), dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        dots = einsum(<span class="string">&quot;b h i d, b h j d -&gt; b h i j&quot;</span>, q, k) * self.scale</span><br><span class="line"></span><br><span class="line">        attn = dots.softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        out = einsum(<span class="string">&quot;b h i j, b h j d -&gt; b h i d&quot;</span>, attn, v)</span><br><span class="line">        out = rearrange(out, <span class="string">&quot;b h n d -&gt; b n (h d)&quot;</span>)</span><br><span class="line">        out = self.to_out(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        img_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        depth,</span></span></span><br><span class="line"><span class="params"><span class="function">        heads,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim_head,</span></span></span><br><span class="line"><span class="params"><span class="function">        mlp_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        last_stage=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">            self.layers.append(</span><br><span class="line">                nn.ModuleList(</span><br><span class="line">                    [</span><br><span class="line">                        PreNorm(</span><br><span class="line">                            dim,</span><br><span class="line">                            ConvAttention(</span><br><span class="line">                                dim,</span><br><span class="line">                                img_size,</span><br><span class="line">                                heads=heads,</span><br><span class="line">                                dim_head=dim_head,</span><br><span class="line">                                dropout=dropout,</span><br><span class="line">                                last_stage=last_stage,</span><br><span class="line">                            ),</span><br><span class="line">                        ),</span><br><span class="line">                        PreNorm(dim, FeedForward(dim, mlp_dim, dropout=dropout)),</span><br><span class="line">                    ]</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">for</span> attn, ff <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = attn(x) + x</span><br><span class="line">            x = ff(x) + x</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cvt</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        image_size,</span></span></span><br><span class="line"><span class="params"><span class="function">        in_channels,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_classes,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        kernels=[<span class="number">7</span>, <span class="number">3</span>, <span class="number">3</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        strides=[<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        heads=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        depth=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        pool=<span class="string">&quot;cls&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        emb_dropout=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        scale_dim=<span class="number">4</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>(cvt, self).__init__()</span><br><span class="line">        <span class="keyword">assert</span> pool <span class="keyword">in</span> &#123;</span><br><span class="line">            <span class="string">&quot;cls&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mean&quot;</span>,</span><br><span class="line">        &#125;, <span class="string">&quot;pool type must be either cls (cls token) or mean (mean pooling)&quot;</span></span><br><span class="line">        self.pool = pool</span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.stage1_conv_embed = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, dim, kernels[<span class="number">0</span>], strides[<span class="number">0</span>], <span class="number">2</span>),</span><br><span class="line">            Rearrange(<span class="string">&quot;b c h w -&gt; b (h w) c&quot;</span>, h=image_size // <span class="number">4</span>, w=image_size // <span class="number">4</span>),</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">        )</span><br><span class="line">        self.stage_1_transformer = nn.Sequential(</span><br><span class="line">            Transformer(</span><br><span class="line">                dim,</span><br><span class="line">                img_size=image_size // <span class="number">4</span>,</span><br><span class="line">                depth=depth[<span class="number">0</span>],</span><br><span class="line">                heads=heads[<span class="number">0</span>],</span><br><span class="line">                dim_head=dim // heads[<span class="number">0</span>],</span><br><span class="line">                mlp_dim=dim * scale_dim,</span><br><span class="line">                dropout=dropout,</span><br><span class="line">                last_stage=<span class="literal">True</span>,</span><br><span class="line">            ),</span><br><span class="line">            Rearrange(<span class="string">&quot;b (h w) c -&gt; b c h w&quot;</span>, h=image_size // <span class="number">4</span>, w=image_size // <span class="number">4</span>),</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#     stage 2</span></span><br><span class="line">        in_channels = dim</span><br><span class="line">        scale = heads[<span class="number">1</span>] // heads[<span class="number">0</span>]</span><br><span class="line">        dim = scale * dim</span><br><span class="line">        self.stage2_conv_embed = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, dim, kernels[<span class="number">1</span>], strides[<span class="number">1</span>], <span class="number">1</span>),</span><br><span class="line">            Rearrange(<span class="string">&quot;b c h w -&gt; b (h w) c&quot;</span>, h=image_size // <span class="number">8</span>, w=image_size // <span class="number">8</span>),</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">        )</span><br><span class="line">        self.stage_2_transformer = nn.Sequential(</span><br><span class="line">            Transformer(</span><br><span class="line">                dim,</span><br><span class="line">                img_size=image_size // <span class="number">8</span>,</span><br><span class="line">                depth=depth[<span class="number">1</span>],</span><br><span class="line">                heads=heads[<span class="number">1</span>],</span><br><span class="line">                dim_head=dim // heads[<span class="number">1</span>],</span><br><span class="line">                mlp_dim=dim * scale_dim,</span><br><span class="line">                dropout=dropout,</span><br><span class="line">                last_stage=<span class="literal">True</span>,</span><br><span class="line">            ),</span><br><span class="line">            Rearrange(<span class="string">&quot;b (h w) c -&gt; b c h w&quot;</span>, h=image_size // <span class="number">8</span>, w=image_size // <span class="number">8</span>),</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#     stage 3</span></span><br><span class="line">        in_channels = dim</span><br><span class="line">        scale = heads[<span class="number">2</span>] // heads[<span class="number">1</span>]</span><br><span class="line">        dim = scale * dim</span><br><span class="line">        self.stage3_conv_embed = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, dim, kernels[<span class="number">2</span>], strides[<span class="number">2</span>], <span class="number">1</span>),</span><br><span class="line">            Rearrange(<span class="string">&quot;b c h w -&gt; b (h w) c&quot;</span>, h=image_size // <span class="number">16</span>, w=image_size // <span class="number">16</span>),</span><br><span class="line">            nn.LayerNorm(dim),</span><br><span class="line">        )</span><br><span class="line">        self.stage_3_transformer = nn.Sequential(</span><br><span class="line">            Transformer(</span><br><span class="line">                dim=dim,</span><br><span class="line">                img_size=image_size // <span class="number">16</span>,</span><br><span class="line">                depth=depth[<span class="number">2</span>],</span><br><span class="line">                heads=heads[<span class="number">2</span>],</span><br><span class="line">                dim_head=self.dim,</span><br><span class="line">                mlp_dim=dim * scale_dim,</span><br><span class="line">                dropout=dropout,</span><br><span class="line">                last_stage=<span class="literal">True</span>,</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">        self.cls_token = nn.Parameter(torch.randn(<span class="number">1</span>, <span class="number">1</span>, dim))</span><br><span class="line">        self.drop_large = nn.Dropout(emb_dropout)</span><br><span class="line"></span><br><span class="line">        self.mlp_head = nn.Sequential(nn.LayerNorm(dim), nn.Linear(dim, num_classes))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,img</span>):</span></span><br><span class="line">        xs = self.stage1_conv_embed(img)</span><br><span class="line">        xs = self.stage1_transformer(xs)</span><br><span class="line"></span><br><span class="line">        xs = self.stage2_conv_embed(xs)</span><br><span class="line">        xs = self.stage2_transformer(xs)</span><br><span class="line"></span><br><span class="line">        xs = self.stage3_conv_embed(xs)</span><br><span class="line">        b, n, _ = xs.shape</span><br><span class="line">        cls_tokens = repeat(self.cls_token, <span class="string">&#x27;() n d -&gt; b n d&#x27;</span>, b=b)</span><br><span class="line">        xs = torch.cat((cls_tokens, xs), dim=<span class="number">1</span>)</span><br><span class="line">        xs = self.stage3_transformer(xs)</span><br><span class="line">        xs = xs.mean(dim=<span class="number">1</span>) <span class="keyword">if</span> self.pool == <span class="string">&#x27;mean&#x27;</span> <span class="keyword">else</span> xs[:, <span class="number">0</span>]</span><br><span class="line">        xs = self.mlp_head(xs)</span><br><span class="line">        <span class="keyword">return</span> xs</span><br></pre></td></tr></table></figure><h3 id="PVT"><a href="#PVT" class="headerlink" title="PVT"></a>PVT</h3><p><img data-src="https://s2.loli.net/2024/02/18/w8EUDyAJ4sIv51n.png" alt="image-20240218105527163"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   #!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#   #-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#  Copyleft (C) 2024 proanimer, Inc. All Rights Reserved</span></span><br><span class="line"><span class="comment">#   author:proanimer</span></span><br><span class="line"><span class="comment">#   createTime:2024/2/18 下午2:22</span></span><br><span class="line"><span class="comment">#   lastModifiedTime:2024/2/18 下午2:22</span></span><br><span class="line"><span class="comment">#   file:pvt.py</span></span><br><span class="line"><span class="comment">#   software: classicNets</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> timm.models.layers <span class="keyword">import</span> DropPath, to_2tuple, trunc_normal_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mlp</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        in_features,</span></span></span><br><span class="line"><span class="params"><span class="function">        hidden_features=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        out_features=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        act_layer=nn.GELU,</span></span></span><br><span class="line"><span class="params"><span class="function">        drop=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        out_features = out_features <span class="keyword">or</span> in_features</span><br><span class="line">        hidden_features = hidden_features <span class="keyword">or</span> in_features</span><br><span class="line">        self.fc1 = nn.Linear(in_features, hidden_features)</span><br><span class="line">        self.act = act_layer()</span><br><span class="line">        self.fc2 = nn.Linear(hidden_features, out_features)</span><br><span class="line">        self.drop = nn.Dropout(drop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.act(x)</span><br><span class="line">        x = self.drop(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        x = self.drop(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_heads=<span class="number">8</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qkv_bias=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qk_scale=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        attn_drop=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        proj_drop=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        sr_ratio=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">            dim % num_heads == <span class="number">0</span></span><br><span class="line">        ), <span class="string">f&quot;dim <span class="subst">&#123;dim&#125;</span> should be divided by num_heads <span class="subst">&#123;num_heads&#125;</span>.&quot;</span></span><br><span class="line"></span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.num_heads = num_heads</span><br><span class="line">        head_dim = dim // num_heads</span><br><span class="line">        self.scale = qk_scale <span class="keyword">or</span> head_dim**-<span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        self.q = nn.Linear(dim, dim, bias=qkv_bias)</span><br><span class="line">        self.kv = nn.Linear(dim, dim * <span class="number">2</span>, bias=qkv_bias)</span><br><span class="line">        self.attn_drop = nn.Dropout(attn_drop)</span><br><span class="line">        self.proj = nn.Linear(dim, dim)</span><br><span class="line">        self.proj_drop = nn.Dropout(proj_drop)</span><br><span class="line"></span><br><span class="line">        self.sr_ratio = sr_ratio</span><br><span class="line">        <span class="keyword">if</span> sr_ratio &gt; <span class="number">1</span>:</span><br><span class="line">            self.sr = nn.Conv2d(dim, dim, kernel_size=sr_ratio, stride=sr_ratio)</span><br><span class="line">            self.norm = nn.LayerNorm(dim)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, H, W</span>):</span></span><br><span class="line">        B, N, C = x.shape</span><br><span class="line">        q = (</span><br><span class="line">            self.q(x)</span><br><span class="line">            .reshape(B, N, self.num_heads, C // self.num_heads)</span><br><span class="line">            .permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.sr_ratio &gt; <span class="number">1</span>:</span><br><span class="line">            x_ = x.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>).reshape(B, C, H, W)</span><br><span class="line">            x_ = self.sr(x_).reshape(B, C, -<span class="number">1</span>).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">            x_ = self.norm(x_)</span><br><span class="line">            kv = (</span><br><span class="line">                self.kv(x_)</span><br><span class="line">                .reshape(B, -<span class="number">1</span>, <span class="number">2</span>, self.num_heads, C // self.num_heads)</span><br><span class="line">                .permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            kv = (</span><br><span class="line">                self.kv(x)</span><br><span class="line">                .reshape(B, -<span class="number">1</span>, <span class="number">2</span>, self.num_heads, C // self.num_heads)</span><br><span class="line">                .permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            )</span><br><span class="line">        k, v = kv[<span class="number">0</span>], kv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        attn = (q @ k.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) * self.scale  <span class="comment"># q (B,H,N,C)  K(B,H,C,N)</span></span><br><span class="line">        attn = attn.softmax(dim=-<span class="number">1</span>)</span><br><span class="line">        attn = self.attn_drop(attn)</span><br><span class="line"></span><br><span class="line">        x = (</span><br><span class="line">            (attn @ v).transpose(<span class="number">1</span>, <span class="number">2</span>).reshape(B, N, C)</span><br><span class="line">        )  <span class="comment"># (B,H,N,N) @ (B,H,N,C) -&gt; (B,H,N,C)</span></span><br><span class="line">        x = self.proj(x)</span><br><span class="line">        x = self.proj_drop(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        dim,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_heads,</span></span></span><br><span class="line"><span class="params"><span class="function">        mlp_ratio=<span class="number">4.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qkv_bias=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qk_scale=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        drop=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        attn_drop=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        drop_path=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        act_layer=nn.GELU,</span></span></span><br><span class="line"><span class="params"><span class="function">        norm_layer=nn.LayerNorm,</span></span></span><br><span class="line"><span class="params"><span class="function">        sr_ratio=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.norm1 = norm_layer(dim)</span><br><span class="line">        self.attn = Attention(</span><br><span class="line">            dim,</span><br><span class="line">            num_heads=num_heads,</span><br><span class="line">            qkv_bias=qkv_bias,</span><br><span class="line">            qk_scale=qk_scale,</span><br><span class="line">            attn_drop=attn_drop,</span><br><span class="line">            proj_drop=drop,</span><br><span class="line">            sr_ratio=sr_ratio,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> drop path for stochastic depth, we shall see if this is better than dropout here</span></span><br><span class="line">        self.drop_path = DropPath(drop_path) <span class="keyword">if</span> drop_path &gt; <span class="number">0.0</span> <span class="keyword">else</span> nn.Identity()</span><br><span class="line">        self.norm2 = norm_layer(dim)</span><br><span class="line">        mlp_hidden_dim = <span class="built_in">int</span>(dim * mlp_ratio)</span><br><span class="line">        self.mlp = Mlp(</span><br><span class="line">            in_features=dim,</span><br><span class="line">            hidden_features=mlp_hidden_dim,</span><br><span class="line">            act_layer=act_layer,</span><br><span class="line">            drop=drop,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, H, W</span>):</span></span><br><span class="line">        x = x + self.drop_path(self.attn(self.norm1(x), H, W))</span><br><span class="line">        x = x + self.drop_path(self.mlp(self.norm2(x)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PatchEmbed</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Image to Patch Embedding&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, img_size=<span class="number">224</span>, patch_size=<span class="number">16</span>, in_chans=<span class="number">3</span>, embed_dim=<span class="number">768</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        img_size = to_2tuple(img_size)</span><br><span class="line">        patch_size = to_2tuple(patch_size)</span><br><span class="line"></span><br><span class="line">        self.img_size = img_size</span><br><span class="line">        self.patch_size = patch_size</span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">            img_size[<span class="number">0</span>] % patch_size[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">and</span> img_size[<span class="number">1</span>] % patch_size[<span class="number">1</span>] == <span class="number">0</span></span><br><span class="line">        ), <span class="string">f&quot;img_size <span class="subst">&#123;img_size&#125;</span> should be divided by patch_size <span class="subst">&#123;patch_size&#125;</span>.&quot;</span></span><br><span class="line">        self.H, self.W = img_size[<span class="number">0</span>] // patch_size[<span class="number">0</span>], img_size[<span class="number">1</span>] // patch_size[<span class="number">1</span>]</span><br><span class="line">        self.num_patches = self.H * self.W</span><br><span class="line">        self.proj = nn.Conv2d(</span><br><span class="line">            in_chans, embed_dim, kernel_size=patch_size, stride=patch_size</span><br><span class="line">        )</span><br><span class="line">        self.norm = nn.LayerNorm(embed_dim)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        B, C, H, W = x.shape</span><br><span class="line"></span><br><span class="line">        x = (</span><br><span class="line">            self.proj(x).flatten(<span class="number">2</span>).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        )  <span class="comment"># B,C,H,W-&gt;B,embed_dim,seq*seq-&gt;B,seq*seq,embed_dim</span></span><br><span class="line">        x = self.norm(x)</span><br><span class="line">        H, W = H // self.patch_size[<span class="number">0</span>], W // self.patch_size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x, (H, W)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyramidVisionTransformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        img_size=<span class="number">224</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        patch_size=<span class="number">16</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        in_chans=<span class="number">3</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_classes=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        embed_dims=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        num_heads=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        mlp_ratios=[<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        qkv_bias=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        qk_scale=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        drop_rate=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        attn_drop_rate=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        drop_path_rate=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        norm_layer=nn.LayerNorm,</span></span></span><br><span class="line"><span class="params"><span class="function">        depths=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        sr_ratios=[<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">        F4=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        num_stages=<span class="number">4</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.depths = depths</span><br><span class="line">        self.F4 = F4</span><br><span class="line">        self.num_stages = num_stages</span><br><span class="line"></span><br><span class="line">        dpr = [</span><br><span class="line">            x.item() <span class="keyword">for</span> x <span class="keyword">in</span> torch.linspace(<span class="number">0</span>, drop_path_rate, <span class="built_in">sum</span>(depths))</span><br><span class="line">        ]  <span class="comment"># stochastic depth decay rule</span></span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_stages):</span><br><span class="line">            patch_embed = PatchEmbed(</span><br><span class="line">                img_size=img_size <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">else</span> img_size // (<span class="number">2</span> ** (i + <span class="number">1</span>)),</span><br><span class="line">                patch_size=patch_size <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">else</span> <span class="number">2</span>,</span><br><span class="line">                in_chans=in_chans <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">else</span> embed_dims[i - <span class="number">1</span>],</span><br><span class="line">                embed_dim=embed_dims[i],</span><br><span class="line">            )  <span class="comment"># [B,seq=num_patches,dim=patch_size**2*embed_dim]</span></span><br><span class="line">            num_patches = (</span><br><span class="line">                patch_embed.num_patches</span><br><span class="line">                <span class="keyword">if</span> i != num_stages - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> patch_embed.num_patches + <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">            pos_embed = nn.Parameter(torch.zeros(<span class="number">1</span>, num_patches, embed_dims[i]))</span><br><span class="line">            pos_drop = nn.Dropout(p=drop_rate)</span><br><span class="line"></span><br><span class="line">            block = nn.ModuleList(</span><br><span class="line">                [</span><br><span class="line">                    Block(</span><br><span class="line">                        dim=embed_dims[i],</span><br><span class="line">                        num_heads=num_heads[i],</span><br><span class="line">                        mlp_ratio=mlp_ratios[i],</span><br><span class="line">                        qkv_bias=qkv_bias,</span><br><span class="line">                        qk_scale=qk_scale,</span><br><span class="line">                        drop=drop_rate,</span><br><span class="line">                        attn_drop=attn_drop_rate,</span><br><span class="line">                        drop_path=dpr[cur + j],</span><br><span class="line">                        norm_layer=norm_layer,</span><br><span class="line">                        sr_ratio=sr_ratios[i],</span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(depths[i])</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">            cur += depths[i]</span><br><span class="line"></span><br><span class="line">            <span class="built_in">setattr</span>(self, <span class="string">f&quot;patch_embed<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>, patch_embed)</span><br><span class="line">            <span class="built_in">setattr</span>(self, <span class="string">f&quot;pos_embed<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>, pos_embed)</span><br><span class="line">            <span class="built_in">setattr</span>(self, <span class="string">f&quot;pos_drop<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>, pos_drop)</span><br><span class="line">            <span class="built_in">setattr</span>(self, <span class="string">f&quot;block<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>, block)</span><br><span class="line"></span><br><span class="line">            trunc_normal_(pos_embed, std=<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># init weights</span></span><br><span class="line">        self.apply(self._init_weights)</span><br><span class="line">        <span class="comment"># self.init_weights(pretrained)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_weights</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">            trunc_normal_(m.weight, std=<span class="number">0.02</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear) <span class="keyword">and</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.LayerNorm):</span><br><span class="line">            nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            nn.init.constant_(m.weight, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_pos_embed</span>(<span class="params">self, pos_embed, patch_embed, H, W</span>):</span></span><br><span class="line">        <span class="keyword">if</span> H * W == self.patch_embed1.num_patches:</span><br><span class="line">            <span class="keyword">return</span> pos_embed</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                F.interpolate(</span><br><span class="line">                    pos_embed.reshape(<span class="number">1</span>, patch_embed.H, patch_embed.W, -<span class="number">1</span>).permute(</span><br><span class="line">                        <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">                    ),</span><br><span class="line">                    size=(H, W),</span><br><span class="line">                    mode=<span class="string">&quot;bilinear&quot;</span>,</span><br><span class="line">                )</span><br><span class="line">                .reshape(<span class="number">1</span>, -<span class="number">1</span>, H * W)</span><br><span class="line">                .permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        outs = []</span><br><span class="line">        B = x.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num_stages):</span><br><span class="line">            patch_embed = <span class="built_in">getattr</span>(self, <span class="string">f&quot;patch_embed<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">            pos_embed = <span class="built_in">getattr</span>(self, <span class="string">f&quot;pos_embed<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">            pos_drop = <span class="built_in">getattr</span>(self, <span class="string">f&quot;pos_drop<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">            block = <span class="built_in">getattr</span>(self, <span class="string">f&quot;block<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">            x, (H, W) = patch_embed(x)</span><br><span class="line">            <span class="keyword">if</span> i == self.num_stages - <span class="number">1</span>:</span><br><span class="line">                pos_embed = self._get_pos_embed(pos_embed[:, <span class="number">1</span>:], patch_embed, H, W)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pos_embed = self._get_pos_embed(pos_embed, patch_embed, H, W)</span><br><span class="line"></span><br><span class="line">            x = pos_drop(x + pos_embed)</span><br><span class="line">            <span class="keyword">for</span> blk <span class="keyword">in</span> block:</span><br><span class="line">                x = blk(x, H, W)</span><br><span class="line">            x = x.reshape(B, H, W, -<span class="number">1</span>).permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>).contiguous()</span><br><span class="line">            outs.append(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.forward_features(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.F4:</span><br><span class="line">            x = x[<span class="number">3</span>:<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="PVT-v2"><a href="#PVT-v2" class="headerlink" title="PVT v2"></a>PVT v2</h3><p><a href="https://arxiv.org/pdf/2106.13797.pdf">2106.13797.pdf (arxiv.org)</a>对之前的pvt进行了改进,包括空间大小降低放的方法,patch embdedding改为了有重叠区域的patch embedding.FeedNetwork中加了depth-wise卷积.</p><p><img data-src="https://s2.loli.net/2024/02/21/buMGx8v6TfNOQht.png" alt="image-20240221212026465"></p><p><img data-src="https://s2.loli.net/2024/02/21/OhtbAGq8NgvKnEX.png" alt="image-20240221212055900"></p><h3 id="CPVT中的PEG"><a href="#CPVT中的PEG" class="headerlink" title="CPVT中的PEG"></a>CPVT中的PEG</h3><p><img data-src="https://s2.loli.net/2024/02/19/LHY9bVrE8w2DlZs.png" alt="image-20240219150034479"></p><p>conditional position encoding</p><p><img data-src="https://s2.loli.net/2024/02/18/cfmP5yO41sN6h8o.png" alt="image-20240218103528794"></p><p>出自论文<a href="https://arxiv.org/pdf/2102.10882.pdf">2102.10882.pdf (arxiv.org)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PEG</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim=<span class="number">256</span>, k=<span class="number">3</span></span>):</span></span><br><span class="line">        self.proj = nn.Conv2d(dim, dim, k, <span class="number">1</span>, k//<span class="number">2</span>, groups=dim)</span><br><span class="line">        <span class="comment"># Only for demo use, more complicated functions are effective too.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, H, W</span>):</span></span><br><span class="line">        B, N, C = x.shape</span><br><span class="line">        cls_token, feat_token = x[:, <span class="number">0</span>], x[:, <span class="number">1</span>:] <span class="comment"># cls token不参与PEG</span></span><br><span class="line">        cnn_feat = feat_token.transpose(<span class="number">1</span>, <span class="number">2</span>).view(B, C, H, W)</span><br><span class="line">        x = self.proj(cnn_feat) + cnn_feat <span class="comment"># 产生PE加上自身</span></span><br><span class="line">        x = x.flatten(<span class="number">2</span>).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        x = torch.cat((cls_token.unsqueeze(<span class="number">1</span>), x), dim=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisionTransformer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">layers=<span class="number">12</span>, dim=<span class="number">192</span>, nhead=<span class="number">3</span>, img_size=<span class="number">224</span>, patch_size=<span class="number">16</span></span>):</span></span><br><span class="line">        self.pos_block = PEG(dim)</span><br><span class="line">        self.blocks = nn.ModuleList([TransformerEncoderLayer(dim</span><br><span class="line">, nhead, dim*<span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(layers)])</span><br><span class="line">        self.patch_embed = PatchEmbed(img_size, patch_size, dim</span><br><span class="line">*<span class="number">4</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        B, C, H, W = x.shape</span><br><span class="line">        x, patch_size = self.patch_embed(x)</span><br><span class="line">        _H, _W = H // patch_size, W // patch_size</span><br><span class="line">        x = torch.cat((self.cls_tokens, x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, blk <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.blocks):</span><br><span class="line">            x = blk(x)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>: <span class="comment"># 第一个encoder之后施加PEG</span></span><br><span class="line">                x = self.pos_block(x, _H, _W)</span><br><span class="line">        <span class="keyword">return</span> x[:, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="LocalVit"><a href="#LocalVit" class="headerlink" title="LocalVit"></a>LocalVit</h3><p><img data-src="https://s2.loli.net/2024/02/18/ncu63LwS7bKhl8j.png" alt="image-20240218105718876"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, depth, heads, dim_head, patch_height, patch_width, scale = <span class="number">4</span>, depth_kernel = <span class="number">3</span>, dropout = <span class="number">0.</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">            self.layers.append(nn.ModuleList([</span><br><span class="line">                Residual(PreNorm(dim, Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout))),</span><br><span class="line">                Residual(PreNorm(dim, ConvFF(dim, scale, depth_kernel, patch_height, patch_width)))</span><br><span class="line">            ]))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> attn, convff <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = attn(x)</span><br><span class="line">            cls_tokens = x[:, <span class="number">0</span>]</span><br><span class="line">            x = convff(x[:, <span class="number">1</span>:])</span><br><span class="line">            x = torch.cat((cls_tokens.unsqueeze(<span class="number">1</span>), x), dim=<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> xclass ConvFF(nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim = <span class="number">192</span>, scale = <span class="number">4</span>, depth_kernel = <span class="number">3</span>, patch_height = <span class="number">14</span>, patch_width = <span class="number">14</span>, dropout=<span class="number">0.</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        </span><br><span class="line">        scale_dim = dim*scale</span><br><span class="line">        self.up_proj = nn.Sequential(</span><br><span class="line">                                    Rearrange(<span class="string">&#x27;b (h w) c -&gt; b c h w&#x27;</span>, h=patch_height, w=patch_width),</span><br><span class="line">                                    nn.Conv2d(dim, scale_dim, kernel_size=<span class="number">1</span>),</span><br><span class="line">                                    nn.Hardswish()</span><br><span class="line">                                    )</span><br><span class="line">        </span><br><span class="line">        self.depth_conv = nn.Sequential(</span><br><span class="line">                        nn.Conv2d(scale_dim, scale_dim, kernel_size=depth_kernel, padding=<span class="number">1</span>, groups=scale_dim, bias=<span class="literal">True</span>),</span><br><span class="line">                        nn.Conv2d(scale_dim, scale_dim, kernel_size=<span class="number">1</span>, bias=<span class="literal">True</span>),</span><br><span class="line">                        nn.Hardswish()</span><br><span class="line">                        )</span><br><span class="line">        </span><br><span class="line">        self.down_proj = nn.Sequential(</span><br><span class="line">                                    nn.Conv2d(scale_dim, dim, kernel_size=<span class="number">1</span>),</span><br><span class="line">                                    nn.Dropout(dropout),</span><br><span class="line">                                    Rearrange(<span class="string">&#x27;b c h w -&gt;b (h w) c&#x27;</span>)</span><br><span class="line">                                    )</span><br></pre></td></tr></table></figure><p>在feed-forward中使用2d的卷积.</p><h2 id="transformer中的绝对和相对位置编码"><a href="#transformer中的绝对和相对位置编码" class="headerlink" title="transformer中的绝对和相对位置编码"></a>transformer中的绝对和相对位置编码</h2><p>位置编码可以分为使用<code>nn.Embedding</code>或者<code>nn.Parameter</code>的可学习参数,也可以直接使用固定的值,比如三角函数编码.此外可以分为相对位置和绝对位置编码</p><h3 id="绝对位置编码"><a href="#绝对位置编码" class="headerlink" title="绝对位置编码"></a>绝对位置编码</h3><p>transformer中使用了位置编码信息,被认为是绝对位置编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEncoding</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;Implement the PE function.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d_model, dropout, max_len=<span class="number">5000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(PositionalEncoding, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the positional encodings once in log space.</span></span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>) *</span><br><span class="line">                             -(math.log(<span class="number">10000.0</span>) / d_model))</span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        self.register_buffer(<span class="string">&#x27;pe&#x27;</span>, pe)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = x + Variable(self.pe[:, :x.size(<span class="number">1</span>)],</span><br><span class="line">                         requires_grad=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.dropout(x)</span><br></pre></td></tr></table></figure><blockquote><p>我们可能希望使用相对位置编码而不是绝对位置编码，原因有很多。首先，使用绝对位置信息必然意味着模型可以处理的token数量有限制。假设一个语言模型最多只能编码1024个位置。这必然意味着任何长于1024个token的序列都不能被模型处理;相对位置编码可以推广到看不见长度的序列，因为理论上它编码的唯一信息是两个标记之间的相对成对距离。</p></blockquote><h3 id="相对位置编码的历史"><a href="#相对位置编码的历史" class="headerlink" title="相对位置编码的历史"></a>相对位置编码的历史</h3><blockquote><p>相对位置嵌入( Relative Position Embedding，RPE )技术主要用于将与相对位置相关的信息纳入到注意力模块中。该技术基于这样的思想：块之间的空间关系比它们的绝对位置承载更多的权重。为了计算RPE值，使用了基于可学习参数的查找表。查找过程由图像patch间的相对距离决定。虽然RPE技术可以扩展到不同长度的序列，但它可能会增加训练和测试时间。</p></blockquote><p>在<code>attention is all you need</code>中的attention中,自我注意力可以表述为如下,并使用三角函数索引进行位置编码.</p><script type="math/tex; mode=display">z_i=\sum_{j=1}^n\alpha_{ij}(x_jW^V) \\\alpha_{ij}=\frac{\exp e_{ij}}{\sum_{k=1}^n\exp e_{ik}} \\e_{ij}=\frac{(x_iW^Q)(x_jW^K)^T}{\sqrt{d_z}}</script><h3 id="1D数据"><a href="#1D数据" class="headerlink" title="1D数据"></a>1D数据</h3><h4 id="Shaw"><a href="#Shaw" class="headerlink" title="Shaw"></a>Shaw</h4><p>相对位置编码在swin-transformer以及Self-Attention with Relative Position Representations中都有体现.较早的论文<a href="https://arxiv.org/pdf/1803.02155.pdf">1803.02155.pdf (arxiv.org)</a></p><script type="math/tex; mode=display">z_i=\sum_{j=1}^n\alpha_{ij}(x_jW^V+a_{ij}^V) \\e_{ij}=\frac{x_iW^Q(x_jW^K+a_{ij}^K)^T}{\sqrt{d_z}} \\\begin{aligned}a_{ij}^{K}& =w_{\mathrm{clip}(j-i,k)}^{K}  \\a_{ij}^{V}& =w_{\mathrm{clip}(j-i,k)}^{V}  \\\operatorname{clip}(x,k)& =\max(-k,\min(k,x)) \end{aligned}</script><p>其中的w^k^和w^v^是需要训练的参数.</p><script type="math/tex; mode=display">w^{K}=(w_{-k}^{K},\ldots,w_{k}^{K}) \\w^{V}=(\dot{w_{-k}^{V}},\ldots,w_{k}^{V})</script><p>以下是<a href="https://arxiv.org/pdf/1803.02155.pdf">1803.02155.pdf (arxiv.org)</a>中的相对位置注意力</p><p><img data-src="https://s2.loli.net/2024/02/16/4esqYAdLkgNuybn.png" alt="image-20240216225108501" style="zoom: 67%;" /></p><p><img data-src="https://pic4.zhimg.com/80/v2-f6d057978590bd14fd876856500b69df_720w.webp" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shaw&#x27;s relative positional embedding</span></span><br><span class="line">seq = torch.arange(n, device=device)</span><br><span class="line">dist = rearrange(seq, <span class="string">&quot;i -&gt; i ()&quot;</span>) - rearrange(seq, <span class="string">&quot;j -&gt; () j&quot;</span>)</span><br><span class="line">dist = dist.clamp(-max_pos_emb, max_pos_emb) + max_pos_emb</span><br><span class="line">rel_pos_emb = self.rel_pos_emb(dist).to(q)</span><br><span class="line">pos_attn = einsum(<span class="string">&quot;b h n d, n r d -&gt; b h n r&quot;</span>, q, rel_pos_emb) * self.scale</span><br><span class="line">dots = dots + pos_attn</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> exists(mask) <span class="keyword">or</span> exists(context_mask):</span><br><span class="line">    mask = default(mask, <span class="keyword">lambda</span>: torch.ones(*x.shape[:<span class="number">2</span>], device=device))</span><br><span class="line">    context_mask = (</span><br><span class="line">        default(context_mask, mask)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_context</span><br><span class="line">        <span class="keyword">else</span> default(</span><br><span class="line">            context_mask, <span class="keyword">lambda</span>: torch.ones(*context.shape[:<span class="number">2</span>], device=device)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    mask_value = -torch.finfo(dots.dtype).<span class="built_in">max</span></span><br><span class="line">    mask = rearrange(mask, <span class="string">&quot;b i -&gt; b () i ()&quot;</span>) * rearrange(</span><br><span class="line">        context_mask, <span class="string">&quot;b j -&gt; b () () j&quot;</span></span><br><span class="line">    )</span><br><span class="line">    dots.masked_fill_(~mask, mask_value)</span><br><span class="line"></span><br><span class="line">attn = dots.softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">out = einsum(<span class="string">&quot;b h i j, b h j d -&gt; b h i d&quot;</span>, attn, v)</span><br><span class="line">out = rearrange(out, <span class="string">&quot;b h n d -&gt; b n (h d)&quot;</span>)</span><br><span class="line">out = self.to_out(out)</span><br></pre></td></tr></table></figure><h4 id="transformer-xl"><a href="#transformer-xl" class="headerlink" title="transformer-xl"></a>transformer-xl</h4><p>众所周知,q=xW~Q~,k=xW~K~,加入相对位置编码后,展开一般注意力公式有</p><p><img data-src="https://pic4.zhimg.com/80/v2-5ee0eed4bc859e400591d7c83047bffb_720w.webp" alt="img"></p><p><img data-src="https://pic1.zhimg.com/80/v2-733f110568f1c83519ada84af1e32014_720w.webp" alt="img"></p><p>Transformer-XL的做法很简单，直接将 $p<em>j$ 替换为相对位置向量 $R</em>{i-j}$, 至于两个 $p_i$ , 则干脆替换为两个可训练的问量 $u,v$</p><p>之后的改进也是基于此,并且不再改动计算V了.</p><p>在transformer-xl(或者也是XLNET中使用的编码)中</p><script type="math/tex; mode=display">e_{ij}=\frac{(\mathbf{x}_i\mathbf{W}^Q+\mathbf{u})(\mathbf{x}_j\mathbf{W}^K)^T+(\mathbf{x}_i\mathbf{W}^Q+\mathbf{v})(\mathbf{s}_{i-j}\mathbf{W}^R)^T}{\sqrt{d_z}},</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEmbedding</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, demb</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(PositionalEmbedding, self).__init__()</span><br><span class="line">        self.demb = demb</span><br><span class="line">        inv_freq = <span class="number">1</span> / (<span class="number">10000</span> ** (torch.arange(<span class="number">0.0</span>, demb, <span class="number">2.0</span>) / demb))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, pos_seq</span>):</span></span><br><span class="line">        sinusoid_inp = torch.outer(pos_seq, self.inv_freq) <span class="comment"># 向量之间相乘</span></span><br><span class="line">        pos_emb = torch.cat([sinusoid_inp.sin(), sinusoid_inp.cos()], dim=-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> pos_emb[:,<span class="literal">None</span>,:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">w_head_q = w_head_q.view(qlen, bsz, self.n_head, self.d_head)           <span class="comment"># qlen x bsz x n_head x d_head</span></span><br><span class="line">w_head_k = w_head_k.view(klen, bsz, self.n_head, self.d_head)           <span class="comment"># qlen x bsz x n_head x d_head</span></span><br><span class="line">w_head_v = w_head_v.view(klen, bsz, self.n_head, self.d_head)           <span class="comment"># qlen x bsz x n_head x d_head</span></span><br><span class="line"></span><br><span class="line">r_head_k = r_head_k.view(rlen, self.n_head, self.d_head)                <span class="comment"># qlen x n_head x d_head</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### compute attention score</span></span><br><span class="line">rw_head_q = w_head_q + r_w_bias   <span class="comment">#加上biase                                       # qlen x bsz x n_head x d_head</span></span><br><span class="line">AC = torch.einsum(<span class="string">&#x27;ibnd,jbnd-&gt;ijbn&#x27;</span>, (rw_head_q, w_head_k))             <span class="comment"># qlen x klen x bsz x n_head</span></span><br><span class="line"></span><br><span class="line">rr_head_q = w_head_q + r_r_bias  <span class="comment">#加上biase  </span></span><br><span class="line">BD = torch.einsum(<span class="string">&#x27;ibnd,jnd-&gt;ijbn&#x27;</span>, (rr_head_q, r_head_k))              <span class="comment"># qlen x klen x bsz x n_head</span></span><br><span class="line">BD = self._rel_shift(BD)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [qlen x klen x bsz x n_head]</span></span><br><span class="line">attn_score = AC + BD</span><br><span class="line">attn_score.mul_(self.scale)</span><br></pre></td></tr></table></figure><p>其中u,v是两个可学习参数,W^R^是一个矩阵将s~i-j~投影到一个与位置相关的key向量.</p><h4 id="Music-transformer"><a href="#Music-transformer" class="headerlink" title="Music transformer"></a>Music transformer</h4><p>后来Huang对shaw的相对位置编码进行改进</p><p><img data-src="https://s2.loli.net/2024/02/16/PX9Ev1HjwKDB5xt.png" alt="image-20240216225143335" style="zoom: 67%;" /></p><h4 id="Huang"><a href="#Huang" class="headerlink" title="Huang"></a>Huang</h4><p>此外还有<a href="https://arxiv.org/pdf/2009.13658.pdf">2009.13658.pdf (arxiv.org)</a>提出的</p><script type="math/tex; mode=display">e_{ij}=\frac{(\mathbf{x}_i\mathbf{W}^Q+\mathbf{p}_{ij})(\mathbf{x}_j\mathbf{W}^K+\mathbf{p}_{ij})^T-\mathbf{p}_{ij}\mathbf{p}_{ij}^T}{\sqrt{d_z}},</script><h4 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h4><p><img data-src="https://pic1.zhimg.com/80/v2-16c2aa40bbf7a888a62d9dc1373d6c94_720w.webp" alt="img" style="zoom:50%;" /></p><h4 id="DeBERTa"><a href="#DeBERTa" class="headerlink" title="DeBERTa"></a>DeBERTa</h4><p><img data-src="https://pic3.zhimg.com/80/v2-b5436edfcde32b292cdf24c7f39d9c0e_720w.webp" alt="img"></p><p>总结下来就是在计算attention权重时或者在计算最后的注意力时加上一个与相对位置信息相关的值.这个值的计算通常类似如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shaw&#x27;s relative positional embedding</span></span><br><span class="line">seq = torch.arange(n, device=device)</span><br><span class="line">dist = rearrange(seq, <span class="string">&quot;i -&gt; i ()&quot;</span>) - rearrange(seq, <span class="string">&quot;j -&gt; () j&quot;</span>)</span><br><span class="line">dist = dist.clamp(-max_pos_emb, max_pos_emb) + max_pos_emb</span><br><span class="line">rel_pos_emb = self.rel_pos_emb(dist).to(q)</span><br></pre></td></tr></table></figure><p>以上大多用于1D数据比如音频和文字.</p><h3 id="2D数据"><a href="#2D数据" class="headerlink" title="2D数据"></a>2D数据</h3><h4 id="Stand-Alone-Self-Attention-in-Vision-Models"><a href="#Stand-Alone-Self-Attention-in-Vision-Models" class="headerlink" title="Stand-Alone Self-Attention in Vision Models"></a>Stand-Alone Self-Attention in Vision Models</h4><p><img data-src="https://user-images.githubusercontent.com/19909320/137499552-3bdf3189-7f57-4f95-a85e-8d5dd2ef6fd0.png" alt="SASA" style="zoom:50%;" /></p><p>公式如下</p><script type="math/tex; mode=display">y_{ij}=\sum_{a,b\in\mathcal{N}_{k}(i,j)}\text{softmax}_{ab}\left(q_{ij}^{\top}k_{ab}+q_{ij}^{\top}r_{a-i,b-j}\right)v_{ab}</script><p>对相对距离进行维度分解，每个元素ab∈N~k(i,j)~得到两个距离：行偏移量a-i和列偏移量b-j .</p><p>行偏移和列偏移分别与一个嵌入r~a-i~和r~b-j~相关联，每个嵌入维度为1/2d~out~,行偏移嵌入和列偏移嵌入被串联起来形成r~a-i,b-j~。</p><p>或者表示如下</p><script type="math/tex; mode=display">e_{ij}=\frac{(\mathbf{x}_i\mathbf{W}^Q)(\mathbf{x}_j\mathbf{W}^K+concat(\mathbf{p}_{\delta\bar{x}}^K,\mathbf{p}_{\delta\bar{y}}^K))^T}{\sqrt{d_z}},</script><p>其中p是可训练参数,长度是1/2d~z~</p><p><img data-src="https://s2.loli.net/2024/02/17/2S9UbyF7DYfujVw.png" alt="image-20240217180330619"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">use_cuda = torch.cuda.is_available()</span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> use_cuda <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SASA_Layer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_channels, kernel_size=<span class="number">7</span>, num_heads=<span class="number">8</span>, image_size=<span class="number">224</span>, inference=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SASA_Layer, self).__init__()</span><br><span class="line">        self.kernel_size = <span class="built_in">min</span>(kernel_size, image_size) <span class="comment"># receptive field shouldn&#x27;t be larger than input H/W         </span></span><br><span class="line">        self.num_heads = num_heads</span><br><span class="line">        self.dk = self.dv = in_channels</span><br><span class="line">        self.dkh = self.dk // self.num_heads</span><br><span class="line">        self.dvh = self.dv // self.num_heads</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> self.dk % self.num_heads == <span class="number">0</span>, <span class="string">&quot;dk should be divided by num_heads. (example: dk: 32, num_heads: 8)&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.dk % self.num_heads == <span class="number">0</span>, <span class="string">&quot;dv should be divided by num_heads. (example: dv: 32, num_heads: 8)&quot;</span>  </span><br><span class="line">        </span><br><span class="line">        self.k_conv = nn.Conv2d(self.dk, self.dk, kernel_size=<span class="number">1</span>).to(device)</span><br><span class="line">        self.q_conv = nn.Conv2d(self.dk, self.dk, kernel_size=<span class="number">1</span>).to(device)</span><br><span class="line">        self.v_conv = nn.Conv2d(self.dv, self.dv, kernel_size=<span class="number">1</span>).to(device)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Positional encodings</span></span><br><span class="line">        self.rel_encoding_h = nn.Parameter(torch.randn(self.dk // <span class="number">2</span>, self.kernel_size, <span class="number">1</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">        self.rel_encoding_w = nn.Parameter(torch.randn(self.dk // <span class="number">2</span>, <span class="number">1</span>, self.kernel_size), requires_grad=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># later access attention weights</span></span><br><span class="line">        self.inference = inference</span><br><span class="line">        <span class="keyword">if</span> self.inference:</span><br><span class="line">            self.register_parameter(<span class="string">&#x27;weights&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        batch_size, _, height, width = x.size()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute k, q, v</span></span><br><span class="line">        padded_x = F.pad(x, [(self.kernel_size-<span class="number">1</span>)//<span class="number">2</span>, (self.kernel_size-<span class="number">1</span>)-((self.kernel_size-<span class="number">1</span>)//<span class="number">2</span>), (self.kernel_size-<span class="number">1</span>)//<span class="number">2</span>, (self.kernel_size-<span class="number">1</span>)-((self.kernel_size-<span class="number">1</span>)//<span class="number">2</span>)])</span><br><span class="line">        k = self.k_conv(padded_x)</span><br><span class="line">        q = self.q_conv(x)</span><br><span class="line">        v = self.v_conv(padded_x)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Unfold patches into [BS, num_heads*depth, horizontal_patches, vertical_patches, kernel_size, kernel_size]</span></span><br><span class="line">        k = k.unfold(<span class="number">2</span>, self.kernel_size, <span class="number">1</span>).unfold(<span class="number">3</span>, self.kernel_size, <span class="number">1</span>)</span><br><span class="line">        v = v.unfold(<span class="number">2</span>, self.kernel_size, <span class="number">1</span>).unfold(<span class="number">3</span>, self.kernel_size, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reshape into [BS, num_heads, horizontal_patches, vertical_patches, depth_per_head, kernel_size*kernel_size]</span></span><br><span class="line">        k = k.reshape(batch_size, self.num_heads, height, width, self.dkh, -<span class="number">1</span>)</span><br><span class="line">        v = v.reshape(batch_size, self.num_heads, height, width, self.dvh, -<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Reshape into [BS, num_heads, height, width, depth_per_head, 1]</span></span><br><span class="line">        q = q.reshape(batch_size, self.num_heads, height, width, self.dkh, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        qk = torch.matmul(q.transpose(<span class="number">4</span>, <span class="number">5</span>), k)    </span><br><span class="line">        qk = qk.reshape(batch_size, self.num_heads, height, width, self.kernel_size, self.kernel_size)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Add positional encoding</span></span><br><span class="line">        qr_h = torch.einsum(<span class="string">&#x27;bhxydz,cij-&gt;bhxyij&#x27;</span>, q, self.rel_encoding_h)</span><br><span class="line">        qr_w = torch.einsum(<span class="string">&#x27;bhxydz,cij-&gt;bhxyij&#x27;</span>, q, self.rel_encoding_w)</span><br><span class="line">        qk += qr_h</span><br><span class="line">        qk += qr_w</span><br><span class="line">        </span><br><span class="line">        qk = qk.reshape(batch_size, self.num_heads, height, width, <span class="number">1</span>, self.kernel_size*self.kernel_size)</span><br><span class="line">        weights = F.softmax(qk, dim=-<span class="number">1</span>)    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.inference:</span><br><span class="line">            self.weights = nn.Parameter(weights)</span><br><span class="line">        </span><br><span class="line">        attn_out = torch.matmul(weights, v.transpose(<span class="number">4</span>, <span class="number">5</span>)) </span><br><span class="line">        attn_out = attn_out.reshape(batch_size, -<span class="number">1</span>, height, width)</span><br><span class="line">        <span class="keyword">return</span> attn_out</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>上面的代码可能有些问题,应该是将i,j的距离差嵌入到一个<code>embedding</code>中更合适</p><h4 id="Rethinking-and-Improving-Relative-Position-Encoding-for-Vision-Transformer"><a href="#Rethinking-and-Improving-Relative-Position-Encoding-for-Vision-Transformer" class="headerlink" title="Rethinking and Improving Relative Position Encoding for Vision Transformer"></a>Rethinking and Improving Relative Position Encoding for Vision Transformer</h4><p>这是篇好文章,关于注意力中相对位置用于2d图像数据的方法.也是在上面SASA的一种改进.</p><p><img data-src="https://s2.loli.net/2024/02/17/CHqOLZKXNxhIdzj.png" alt="image-20240217181329312"></p><p>以往的相对位置编码方法都依赖于输入嵌入。这就带来了一个问题，即编码能否独立于输入?</p><p>论文引入相对位置编码的偏向模式和语境模式来研究该问题。前者独立于输入嵌入，而后者考虑了与查询、键或值的交互。也就上图的两种模式.</p><script type="math/tex; mode=display">e_{ij}=\frac{(\mathbf{x}_i\mathbf{W}^Q)(\mathbf{x}_j\mathbf{W}^K)^T\color{blue}{+}b_{ij}}{\sqrt{d_z}} \\b_{ij}=\bold{r}_{ij} \space for \space  bias \space mode\\b_{ij}=(x_{i}W^Q)r_{ij}\space for\space  context  \space mode\\</script><p>计算attention weight加上一个偏置,在bias模式下,这个偏置是一个可学习的参数,表示相对位置的权重.</p><p>在context模式下,有多种可行的方式.其中r是一个可训练的向量,也表示相对位置,但它会与Q或K交互.</p><script type="math/tex; mode=display">b_{ij}=(\mathbf{x}_i\mathbf{W}^Q)(\mathbf{r}_{ij}^K)^T+(\mathbf{x}_j\mathbf{W}^K)(\mathbf{r}_{ij}^Q)^T</script><p>此外context模式也可以应用于value嵌入</p><script type="math/tex; mode=display">\mathbf{z}_i=\sum_{j=1}^n\alpha_{ij}(\mathbf{x}_j\mathbf{W}^V\color{red}{+}\mathbf{r}_{ij}^V),</script><p>为了计算二维图像平面上的相对位置并定义相对权重r~ij~,提出了两种无向映射方法Euclidean和Quantization，以及两种有向映射方法Cross和Product。</p><script type="math/tex; mode=display">\mathbf{r}_{ij}=\mathbf{p}_{I(i,j)},</script><script type="math/tex; mode=display">I(i,j)=g(\sqrt{(\tilde{x}_i-\tilde{x}_j)^2+(\tilde{y}_i-\tilde{y}_j)^2}),</script><p>在上述欧几里得方法中，距离较近的两个具有不同相对距离的邻居可能被映射到同一个索引中，例如二维相对位置( 1、0 )和( 1 , 1)都被映射到索引1中。假设近邻应该是分离的。因此对欧氏距离进行量化，即将不同的实数映射成不同的整数。</p><script type="math/tex; mode=display">I(i,j)=g(quant(\sqrt{(\tilde{x}_i-\tilde{x}_j)^2+(\tilde{y}_i-\tilde{y}_j)^2}).</script><p>运算quant ( · )将一组实数{ 0，1，1.41，2，2.24，.. }映射为一组整数{ 0，1，2，3，4，.. } .这种方法也是无向的.</p><p>像素的位置方向对图像也很重要，因此提出了有向映射方法。这种方法被称为Cross方法，它分别在水平和垂直方向上计算编码，然后进行汇总。方法如下</p><script type="math/tex; mode=display">\begin{gathered}\mathbf{r}_{ij}=\mathbf{p}_{I^{\tilde{x}}(i,j)}^{\tilde{x}}+\mathbf{p}_{I^{\tilde{y}}(i,j)}^{\tilde{y}}, \\I^{\tilde{x}}(i,j)=g(\tilde{x_{i}}-\tilde{x_{j}}), \\I^{\tilde{y}}(i,j)=g(\tilde{y}_i-\tilde{y}_j), \end{gathered}</script><p>如果某个方向上的距离是相同的，那么Cross方法将不同的相对位置编码到同一个嵌入中，此外带来了额外的计算开销。为了提高效率并包含更多的方向性信息，设计了Product方法，公式如下：</p><p><img data-src="https://s2.loli.net/2024/02/17/2rIStXgva96PhTZ.png" alt="image-20240217223648427"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="Swin-transformer"><a href="#Swin-transformer" class="headerlink" title="Swin transformer"></a>Swin transformer</h3><p><a href="https://arxiv.org/abs/2103.14030">[2103.14030] Swin Transformer: Hierarchical Vision Transformer using Shifted Windows (arxiv.org)</a></p><p><a href="https://arxiv.org/abs/2111.09883">[2111.09883] Swin Transformer V2: Scaling Up Capacity and Resolution (arxiv.org)</a></p><p><img data-src="https://s2.loli.net/2024/02/18/NMFCXv8EKabh6cp.png" alt="image-20240218140849412"></p><script type="math/tex; mode=display">\begin{aligned}\Omega(\mathbf{MSA})&=4hwC^2+2(hw)^2C,\\\Omega(\mathbf{W-MSA})&=4hwC^2+2M^2hwC,\end{aligned}</script><p><img data-src="https://s2.loli.net/2024/02/18/WBD3do8KnrHqlLU.png" alt="image-20240218141119075"></p><blockquote><p>将Transformer从语言转换到视觉的挑战来自于两个领域之间的差异，例如视觉实体的尺度变化较大，图像中的像素相对于文本中的文字分辨率较高。</p><p>为了解决这些差异，提出了一个分层Transformer，其表示由Shifted窗口计算。移位窗口方案通过将自注意力计算限制在不重叠的局部窗口，同时允许跨窗口连接，从而带来更高的效率。这种分层架构具有在各种尺度下建模的灵活性，并且具有与图像大小相关的线性计算复杂度。</p></blockquote><p><img data-src="https://s2.loli.net/2024/02/21/If19Km8TFPneM6x.png" alt="image-20240221231106703"></p><h3 id="Swin-transformerV2"><a href="#Swin-transformerV2" class="headerlink" title="Swin-transformerV2"></a>Swin-transformerV2</h3><p><a href="https://arxiv.org/abs/2111.09883">[2111.09883] Swin Transformer V2: Scaling Up Capacity and Resolution (arxiv.org)</a></p><p><img data-src="https://s2.loli.net/2024/02/21/6izranSXgP7CobN.png" alt="image-20240221231423057"></p><h3 id="Twins"><a href="#Twins" class="headerlink" title="Twins"></a>Twins</h3><p><a href="https://arxiv.org/abs/2104.13840">[2104.13840] Twins: Revisiting the Design of Spatial Attention in Vision Transformers (arxiv.org)</a></p><p><img data-src="https://github.com/lucidrains/vit-pytorch/raw/main/images/twins_svt.png" alt="img" style="zoom:67%;" /></p><p><img data-src="https://s2.loli.net/2024/02/18/1Zf5pWymzPTaHoB.png" alt="image-20240218141741213"></p><blockquote><p>在这项工作中，重新审视了空间注意力的设计，并证明了一个精心设计但简单的空间注意力机制与最先进的方案相比具有良好的性能。因此，我们提出了两种视觉转换器结构，即Twins - PCPVT和TwinsSVT。我们提出的架构高效且易于实现，只涉及在现代深度学习框架中高度优化的矩阵乘法。更重要的是，所提出的架构在包括图像级cla在内的广泛的视觉任务上取得了优异的性能</p></blockquote><p>此外随着时间发展,目前已经有了空间注意力,通道注意力等等可以用于2D数据的注意力模型.但是基本思想是类似的.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/364828960">Relative position embedding - 知乎 (zhihu.com)</a></li><li><a href="https://arxiv.org/abs/1803.02155">[1803.02155] Self-Attention with Relative Position Representations (arxiv.org)</a></li><li><a href="https://placebokkk.github.io/asr/2021/01/14/asr-rpe.html">Relative Positional Embedding | Chao Yang (placebokkk.github.io)</a></li><li><a href="https://aclanthology.org/2020.findings-emnlp.298.pdf">Improve Transformer Models with Better Relative Position Embeddings (aclanthology.org)</a></li><li><a href="https://zhuanlan.zhihu.com/p/352898810">让研究人员绞尽脑汁的Transformer位置编码 - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/669523714">《A survey of the Vision Transformers and its CNN-Transformer based Variants》第一期 - 知乎 (zhihu.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里介绍一些细节信息.有关位置编码信息和用于图像的transformer.&lt;br&gt;</summary>
    
    
    
    
    <category term="transformers" scheme="https://www.sekyoro.top/tags/transformers/"/>
    
    <category term="attention" scheme="https://www.sekyoro.top/tags/attention/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript on the way:学习TypeScript</title>
    <link href="https://www.sekyoro.top/2024/02/11/TypeScript-on-the-way-%E5%AD%A6%E4%B9%A0TypeScript/"/>
    <id>https://www.sekyoro.top/2024/02/11/TypeScript-on-the-way-%E5%AD%A6%E4%B9%A0TypeScript/</id>
    <published>2024-02-11T08:01:13.000Z</published>
    <updated>2024-02-13T12:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>早该学学了.<br><span id="more"></span></p><p>之前写过Python的类型系统,如果对于写C++,Java,C#等这类语言来说,typing根本不成问题,所以理解TypeScript也不是问题.</p><h2 id="特殊的类型"><a href="#特殊的类型" class="headerlink" title="特殊的类型"></a>特殊的类型</h2><h3 id="any-unknown与never"><a href="#any-unknown与never" class="headerlink" title="any,unknown与never"></a>any,unknown与never</h3><p>any,unknown是”顶层类型”,never是”底层类型”.never类型是所有类型共有的,any类型基本没有限制,unknown类型不能直接调用并且运算是有限的,只能进行比较运算.推荐使用unknown代替any然后使用as转换类型.</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><h3 id="String与string-Number与number"><a href="#String与string-Number与number" class="headerlink" title="String与string,Number与number"></a>String与string,Number与number</h3><p>String与string是不同的,前者是可以包含后者的.但是在ts中,很多方法只能使用后者.</p><p>所以推荐只使用后者.</p><p><img data-src="https://s2.loli.net/2024/02/11/4DiknPFr569Ulgp.png" alt="image-20240211171858237"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">let</span> obj2:&#123;&#125;;</span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line">obj = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>此外Object类型包括除了undefined和null的基本类型.所以这并不符合直觉,推荐使用<code>object</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj3:<span class="built_in">object</span>;</span><br><span class="line">obj3 = &#123;<span class="attr">name</span>:<span class="string">&quot;John&quot;</span>&#125;;</span><br><span class="line">obj3 = <span class="number">13</span>; <span class="comment">//报错 不能将number分配给类型object</span></span><br></pre></td></tr></table></figure><p>object类型包含对象,数组,函数.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ccx = &#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;;</span><br><span class="line">ccx.foo = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> t = &#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;;</span><br><span class="line">t.foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> hh:<span class="built_in">object</span> = &#123;<span class="attr">foo</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// hh.foo 报错 类型不对</span></span><br></pre></td></tr></table></figure><p>此外undefined和null也可以赋值为number,object等等.</p><p>TypeScript中单个值也是类型成为值类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t: <span class="string">&quot;dfasdf&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> xy = <span class="string">&quot;https&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(xy);</span><br></pre></td></tr></table></figure><p>将多个类型组合起来就是联合类型,如果严格检查也就是设置<code>strictNullChecks</code>,使得其他类型变量不能被赋值为undefined或null.这个时候就可以用联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setting: <span class="literal">true</span> | <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gender: <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rainbowColor: <span class="string">&quot;赤&quot;</span> | <span class="string">&quot;橙&quot;</span> | <span class="string">&quot;黄&quot;</span> | <span class="string">&quot;绿&quot;</span> | <span class="string">&quot;青&quot;</span> | <span class="string">&quot;蓝&quot;</span> | <span class="string">&quot;紫&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">name = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>对象的合成可以给对象添加新的属性,属于交叉类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj5: &#123; <span class="attr">foo</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">bar</span>: <span class="built_in">number</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Age = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> age:Age =  <span class="number">55</span>;</span><br></pre></td></tr></table></figure><p>跟Python的typing和Go语言类似.</p><h2 id="数组-元组"><a href="#数组-元组" class="headerlink" title="数组 元组"></a>数组 元组</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [];</span><br><span class="line"><span class="keyword">let</span> arr2: (<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [];</span><br><span class="line"><span class="keyword">let</span> arr3: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [];</span><br></pre></td></tr></table></figure><p>const数组中的元素是可以改变的,所以在ts中增加了<code>readonly</code>,readonly数组是原本数组的子类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr5: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">arr5[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> arr6: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = arr5;</span><br></pre></td></tr></table></figure><p>声明readonly数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> a1: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> a2: Readonly&lt;<span class="built_in">number</span>[]&gt; = [];</span><br><span class="line"><span class="keyword">let</span> a3 = [] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 推断类型时，遇到<code>const</code>命令声明的变量，如果代码里面没有注明类型，就会推断该变量是值类型。</p><p><code>const</code>命令声明的变量，如果赋值为对象，并不会推断为值类型,这是因为 JavaScript 里面，<code>const</code>变量赋值为对象时，属性值是可以改变的(数组等同理)</p></blockquote><h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><p>使用元组时必须声明类型不然会默认数组.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ot: [<span class="built_in">number</span>, <span class="built_in">string</span>?] | <span class="literal">undefined</span> = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>使用扩展运算符可以不下成员数量的元组.</p><p>元组也有只读元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readonlyTuple: <span class="keyword">readonly</span> [<span class="built_in">number</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> point = [<span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><h3 id="symbol类型"><a href="#symbol类型" class="headerlink" title="symbol类型"></a>symbol类型</h3><p>symbol主要用于类的属性.</p><p>ts增加了unique symbol作为symbol的子类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> x: unique symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> y: unique symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> x: unique symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: unique symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> b: <span class="keyword">typeof</span> a = a; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感觉平常可能用不上…</p><h3 id="函数-对象-interface"><a href="#函数-对象-interface" class="headerlink" title="函数 对象 interface"></a>函数 对象 interface</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">txt: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + txt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params">txt: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + txt);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> hello: <span class="function">(<span class="params">txt: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span> = <span class="function"><span class="keyword">function</span> (<span class="params">txt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + txt);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数声明与函数变量声明.前者需要声明参数类型,否则默认为any.后者可以在选择在赋值时写出类型或者在声明变量时添加类型.此外还有这种写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add: &#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> repeat = (str: <span class="built_in">string</span>, <span class="attr">times</span>: <span class="built_in">number</span>): <span class="function"><span class="params">string</span> =&gt;</span> str.repeat(times);</span><br></pre></td></tr></table></figure><p>另外使用?表示可选参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// OK</span></span><br><span class="line">f(<span class="number">10</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>默认值也类似.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPoint</span>(<span class="params">x: <span class="built_in">number</span> = <span class="number">0</span>, y: <span class="built_in">number</span> = <span class="number">0</span></span>): [<span class="title">number</span>, <span class="title">number</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPoint(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><p>rest参数也可以用于将多个值包裹为数组或元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joinNum</span>(<span class="params">...nums: [...<span class="built_in">number</span>[]]</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nums);</span><br><span class="line">  <span class="keyword">return</span> nums.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">joinNum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joinNumAndString</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">joinNumAndString(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>参数也可以使用readonly进行修饰.</p><p>此外函数返回有void和never类型.前者表示没有返回值(或undefined)后者表示不会退出,常用于丢错误或循环.</p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>不同于其他语言重载,</p><blockquote><p>有一些编程语言允许不同的函数参数，对应不同的函数实现。但是，JavaScript 函数只能有一个实现，必须在这个实现当中，处理不同的参数。因此，函数体内部就需要判断参数的类型及个数，并根据判断结果执行不同的操作。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="title">any</span>[]</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">stringOrArray: <span class="built_in">string</span> | <span class="built_in">any</span>[]</span>): <span class="title">string</span> | <span class="title">any</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> stringOrArray === <span class="string">&quot;string&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> stringOrArray.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> stringOrArray.slice().reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载声明的排序很重要，因为 TypeScript 是按照顺序进行检查的，一旦发现符合某个类型声明，就不再往下检查了，所以类型最宽的声明应该放在最后面，防止覆盖其他类型声明</p><p><strong>构造函数</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AnimalConstructor = <span class="keyword">new</span> () =&gt; Animal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">c: AnimalConstructor</span>): <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line">create(Animal);</span><br></pre></td></tr></table></figure><p>构造函数的类型写法，就是在参数列表前面加上<code>new</code>命令</p><p>此外也有对象形式写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F = &#123;</span><br><span class="line">  <span class="keyword">new</span> (s: <span class="built_in">string</span>): <span class="built_in">object</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对对象,既可以使用<code>type</code>别名也可以使用<code>interface</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadOnlyPerson &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w:ReadOnlyPerson = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空对象是 TypeScript 的一种特殊值，也是一种特殊类型。</p><blockquote><p>TypeScript 不允许动态添加属性，所以对象不能分步生成，必须生成时一次性声明所有属性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.prop = <span class="number">123</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>因为<code>Object</code>可以接受各种类型的值，而空对象是<code>Object</code>类型的简写，所以它不会有严格字面量检查，赋值时总是允许多余的属性，只是不能读取这些属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Empty &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b: Empty = &#123; <span class="attr">myProp</span>: <span class="number">1</span>, <span class="attr">anotherProp</span>: <span class="number">2</span> &#125;; <span class="comment">// 正确</span></span><br><span class="line">b.myProp; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> d: &#123;&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// let d:Object;</span></span><br><span class="line"></span><br><span class="line">d = &#123;&#125;;</span><br><span class="line">d = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line">d = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">d = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>interface 可以表示对象的各种语法，它的成员有 5 种形式。</p><ul><li>对象属性</li><li>对象的属性索引</li><li>对象方法</li><li>函数</li><li>构造函数</li></ul></blockquote><p>interface 与 type 的区别有下面几点。</p><p>（1）<code>type</code>能够表示非对象类型，而<code>interface</code>只能表示对象类型（包括数组、函数等）。</p><p>（2）<code>interface</code>可以继承其他类型，<code>type</code>不支持继承。</p><p>可以在interface中写方法以及利用interface写函数,构造函数.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  f(x: <span class="built_in">boolean</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">f</span>: <span class="function">(<span class="params">x: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">  <span class="attr">f</span>: &#123; (x: <span class="built_in">boolean</span>): <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Add &#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myAdd: Add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ErrorConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (message?: <span class="built_in">string</span>): <span class="built_in">Error</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interface可以实现继承,而type不行.而且可以多继承.多重继承时,如果多个父接口存在同名属性,那么这些同名属性不能有类型冲突,否则会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Style &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle <span class="keyword">extends</span> Style, Shape &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Country = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  capital: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> CountryWithPop <span class="keyword">extends</span> Country &#123;</span><br><span class="line">  <span class="attr">population</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果<code>type</code>命令定义的类型不是对象，interface 就无法继承</p><p>多个同名接口会进行合并.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>举例来说，Web 网页开发经常会对<code>windows</code>对象和<code>document</code>对象添加自定义属性，但是 TypeScript 会报错，因为原始定义没有这些属性。解决方法就是把自定义属性写成 interface，合并进原始定义。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  f(x: <span class="string">&quot;foo&quot;</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  f(x: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  f(x: <span class="string">&quot;foo&quot;</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  f(x: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果两个 interface 组成的联合类型存在同名属性，那么该属性的类型也是联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">  <span class="attr">area</span>: bigint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">  <span class="attr">area</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> s: Circle | Rectangle;</span><br><span class="line"></span><br><span class="line">s.area; <span class="comment">// bigint | number</span></span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>对于顶层声明的属性，可以在声明时同时给出类型,如果不给声明默认any.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 有一个配置项<code>strictPropertyInitialization</code>，只要打开，就会检查属性是否设置了初值，如果没有就报错。</p></blockquote><p><img data-src="https://s2.loli.net/2024/02/12/4chodubBD5QySIM.png" alt="image-20240212174733858"></p><p>如果打开了这个设置，但是某些情况下，不是在声明时赋值或在构造方法里面赋值，为了防止这个设置报错，可以使用非空断言。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  x!: <span class="built_in">number</span>;</span><br><span class="line">  y!: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">  <span class="attr">contents</span>: Type;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value: Type</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.contents = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b: Box&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> Box(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="attr">key</span>: K;</span><br><span class="line">  value: V;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类的内部可以有已经实现好的属性和方法，也可以有还未实现的属性和方法。后者就叫做“抽象成员”（abstract member），即属性名和方法名有<code>abstract</code>关键字，表示该方法需要子类实现。如果子类没有实现抽象成员，就会报错。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirst</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arr: Type[]</span>): <span class="title">Type</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过为了方便，函数调用时，往往省略不写类型参数的值，让 TypeScript 自己推断,有些复杂的使用场景，TypeScript 可能推断不出类型参数的值，这时就必须显式给出.</p><blockquote><p>类型参数的名字，可以随便取，但是必须为合法的标识符。习惯上，类型参数的第一个字符往往采用大写字母。一般会使用<code>T</code>（type 的第一个字母）作为类型参数的名字。如果有多个类型参数，则使用 T 后面的 U、V 等字母命名，各个参数之间使用逗号（“,”）分隔。</p></blockquote><p>泛型主要用在四个场合：函数、接口、类和别名。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myid: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = id;</span><br><span class="line"><span class="keyword">interface</span> Box&lt;Type&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: Type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box: Box&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>类型别名</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Nullable&lt;T&gt; = T | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Container&lt;T&gt; = &#123; <span class="attr">value</span>: T &#125;;</span><br><span class="line"><span class="keyword">type</span> Tree&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">  left: Tree&lt;T&gt; | <span class="literal">null</span>;</span><br><span class="line">  right: Tree&lt;T&gt; | <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类型参数默认值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirst_</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">arr: T[]</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型参数的约束条件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comp</span>&lt;<span class="title">Type</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(a: Type, <span class="attr">b</span>: Type) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length &gt; b.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Fn&lt;A <span class="keyword">extends</span> <span class="built_in">string</span>, B <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;world&quot;</span>&gt; = [A, B];</span><br><span class="line"><span class="keyword">type</span> Result = Fn&lt;<span class="string">&quot;hello&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>类型参数的约束条件如下</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TypeParameter <span class="keyword">extends</span> ConstraintType&gt;</span><br></pre></td></tr></table></figure><p>泛型使用注意:</p><ol><li><strong>尽量少用泛型</strong></li><li><strong>类型参数越少越好</strong></li><li><strong>类型参数需要出现两次</strong></li><li><strong>泛型可以嵌套</strong></li></ol><h3 id="Enum类型"><a href="#Enum类型" class="headerlink" title="Enum类型"></a>Enum类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red, <span class="comment">// 0</span></span><br><span class="line">  Green, <span class="comment">// 1</span></span><br><span class="line">  Blue, <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  Up = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">  Down = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">  Left = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">  Right = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum 结构本身也是一种类型。比如，上例的变量<code>c</code>等于<code>1</code>，它的类型可以是 Color，也可以是<code>number</code></p><p>多个同名的 Enum 结构会自动合并。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> MediaTypes &#123;</span><br><span class="line">  <span class="built_in">JSON</span> = <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  XML = <span class="string">&quot;application/xml&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">Accept</span>: MediaTypes.JSON,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法一</span></span><br><span class="line"><span class="keyword">let</span> bar: T = &lt;T&gt;foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法二</span></span><br><span class="line"><span class="keyword">let</span> bar: T = foo <span class="keyword">as</span> T;</span><br></pre></td></tr></table></figure><p>类型断言要求实际的类型与断言的类型兼容，实际类型可以断言为一个更加宽泛的类型（父类型），也可以断言为一个更加精确的类型（子类型），但不能断言为一个完全无关的类型</p><p>此外还有as const断言,<code>s const</code>断言只能用于字面量,<code>as const</code>也不能用于表达式</p><p>或者先断言为unknown.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="keyword">as</span> unknown <span class="keyword">as</span> T;</span><br></pre></td></tr></table></figure><p>对于那些可能为空的变量（即可能等于<code>undefined</code>或<code>null</code>），TypeScript 提供了非空断言，保证这些变量不会为空，写法是在变量名后面加上感叹号<code>!</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)!;</span><br></pre></td></tr></table></figure><p>断言函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">value: unknown</span>): <span class="title">asserts</span> <span class="title">value</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;string&quot;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Not a string&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块和namespace"><a href="#模块和namespace" class="headerlink" title="模块和namespace"></a>模块和namespace</h3><p>TypeScript 模块除了支持所有 ES 模块的语法，特别之处在于允许输出和输入类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Bool = <span class="literal">true</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>模块加载方式有classic和Node,也就是Command js和ES6.</p><p>namespace 用来建立一个容器，内部的所有变量和函数，都必须在这个容器里面使用。</p><blockquote><p>它出现在 ES 模块诞生之前，作为 TypeScript 自己的模块格式而发明的。但是，自从有了 ES 模块，官方已经不推荐使用 namespace 了。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">value: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正确</span></span><br><span class="line">  isString(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Utils.isString(<span class="string">&quot;no&quot;</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>如果要在命名空间以外使用内部成员，就必须为该成员加上<code>export</code>前缀，表示对外输出该成员</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Utility &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">msg: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Utility.log(<span class="string">&quot;Call me&quot;</span>);</span><br><span class="line">Utility.error(<span class="string">&quot;maybe!&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。</p><p>在语法上，装饰器有如下几个特征。</p><p>（1）第一个字符（或者说前缀）是<code>@</code>，后面是一个表达式。</p><p>（2）<code>@</code>后面的表达式，必须是一个函数（或者执行后可以得到一个函数）。</p><p>（3）这个函数接受所修饰对象的一些相关值作为参数。</p><p>（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。</p><p>装饰器函数和装饰器方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Decorator = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: DecoratedValue,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | symbol;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer?(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      get?(): unknown;</span></span></span><br><span class="line"><span class="params"><span class="function">      set?(value: unknown): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span> | ReplacementValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ClassDecorator = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&quot;class&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">Function</span> | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countInstances</span>(<span class="params">value: <span class="built_in">any</span>, context: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instanceCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="function"><span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    instanceCount++;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> value(...args);</span><br><span class="line">    instance.count = instanceCount;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125; <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="keyword">typeof</span> MyClass;</span><br><span class="line"></span><br><span class="line">  wrapper.prototype = value.prototype; <span class="comment">// A</span></span><br><span class="line">  <span class="keyword">return</span> wrapper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@countInstances</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inst1 = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst1 <span class="keyword">instanceof</span> MyClass; <span class="comment">// true</span></span><br><span class="line">inst1.count; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="declare关键字"><a href="#declare关键字" class="headerlink" title="declare关键字"></a>declare关键字</h3><p>declare 关键字用来告诉编译器，某个类型是存在的，可以在当前文件中使用。</p><p>它的主要作用，就是让当前文件可以使用其他文件声明的类型。举例来说，自己的脚本使用外部库定义的函数，编译器会因为不知道外部函数的类型定义而报错，这时就可以在自己的脚本里面使用<code>declare</code>关键字，告诉编译器外部函数的类型。这样的话，编译单个脚本就不会因为使用了外部类型而报错。</p><p>declare 关键字可以描述以下类型。</p><ul><li>变量（const、let、var 命令声明）</li><li>type 或者 interface 命令声明的类型</li><li>class</li><li>enum</li><li>函数（function）</li><li>模块（module）</li><li>命名空间（namespace）</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> x: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">declare</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">  sleep(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> AnimalLib &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    eat(): <span class="built_in">void</span>;</span><br><span class="line">    sleep(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> Animals = <span class="string">&quot;Fish&quot;</span> | <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> AnimalLib &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    eat(): <span class="built_in">void</span>;</span><br><span class="line">    sleep(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> Animals = <span class="string">&quot;Fish&quot;</span> | <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d-ts类型声明文件"><a href="#d-ts类型声明文件" class="headerlink" title="d.ts类型声明文件"></a>d.ts类型声明文件</h2><p>可以为每个模块脚本，定义一个<code>.d.ts</code>文件，把该脚本用到的类型定义都放在这个文件里面。但是，更方便的做法是为整个项目，定义一个大的<code>.d.ts</code>文件，在这个文件里面使用<code>declare module</code>定义每个模块脚本的类型</p><p>使用时，自己的脚本使用三斜杠命令，加载这个类型声明文件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有上面这一行命令，自己的脚本使用外部模块时，就需要在脚本里面使用 declare 命令单独给出外部模块的类型。</p><blockquote><p>单独使用的模块，一般会同时提供一个单独的类型声明文件（declaration file），把本模块的外部接口的所有类型都写在这个文件里面，便于模块使用者了解接口，也便于编译器检查使用者的用法是否正确。</p><p>类型声明文件里面只有类型代码，没有具体的代码实现。它的文件名一般为<code>[模块名].d.ts</code>的形式，其中的<code>d</code>表示 declaration（声明）</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">&quot;./test&quot;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> x: <span class="built_in">number</span>;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="keyword">let</span> p: Post = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;title&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;content&quot;</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> Post &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  content: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后推荐两个练习网站:</p><ul><li><a href="https://typehero.dev/">TypeHero</a></li><li><a href="https://github.com/type-challenges/type-challenges">type-challenges/type-challenges: Collection of TypeScript type challenges with online judge (github.com)</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://typescript.p6p.net">https://typescript.p6p.net</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/intro.html">TypeScript: Handbook - The TypeScript Handbook (typescriptlang.org)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;早该学学了.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>回头再看前端框架</title>
    <link href="https://www.sekyoro.top/2024/02/03/%E5%9B%9E%E5%A4%B4%E5%86%8D%E7%9C%8B%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.sekyoro.top/2024/02/03/%E5%9B%9E%E5%A4%B4%E5%86%8D%E7%9C%8B%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</id>
    <published>2024-02-03T06:34:45.000Z</published>
    <updated>2024-02-11T07:28:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>马上又要到农历新年了,趁现在回顾一下过去一年的前端发展.当然是站在我的角度,因为有许多新的技术,对于不同领域的人以及不同层面的开发者都有不同的意味.<br>对于我来说,快捷、轻松的开发体验是比较重要的,臃肿的大型框架并不是优秀的代名词,所以我会尽量使用或者倾向喜欢一些生态发展好,开发者使用体验好,社区也比较活跃的框架或者技术.此外,随着事件发展肯定会不断涌现一些新型技术甚至新的思想,对于学习者来说,这些东西还需要一些观望.<br><span id="more"></span></p><p>除开一些基本概念,我来写一些我平常会用的框架和技术.当然我这里并不是想做一个技术栈的介绍,更多的是在做一个web前端项目时可以考虑的提升开发效率的工具.</p><h2 id="Tailwind-css"><a href="#Tailwind-css" class="headerlink" title="Tailwind css"></a>Tailwind css</h2><p>虽然有争议,但这个css工具已经是极为方便的工具了,目前浏览器已经支持许多css新的特性,所以我觉得可以说,类似less和scss的工具是不需要的了.</p><p>Bootstrap或许过于臃肿,使用tailwind css本身并没有组件库,这里我推荐两个组件库，一个是<a href="https://daisyui.com/">daisyUI — Tailwind CSS Components ( version 4 update is here )</a>另一个是<a href="https://ui.shadcn.com/docs">Introduction - shadcn/ui</a></p><p>搭配现代的css特性,这样写css基本就够了.实在觉得不行可以再往Element-Plus也就是更抽象高级的组件库上靠.</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>react的生态很好,状态管理工具以及搭配的一些动效库都很多.此外搭配Next.js,Remix.js等等成为一个较为完整的web前端解决方案.React是一个library,关键是使用了JSX,很多其他库也是受此影响,比如Solid,Preact,Millions等等.</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue在国内用的很多,当然国外也不少.相对来说我认为较大的差别是Vue的官方本身已经提供了整套的解决方案,Vue也有Nuxt解决SSR的问题,它有Pinia解决状态管理的问题,不像React状态管理通常会选用第三方的Zusland或者jotai等等(当然,如果需要管理的不多直接使用context也可以).目前vue2已经不在维护了,我也大力推荐直接上vue3.Vue使用单独的一个.vue文件表示一个或多个组件,svelte框架也类似.</p><p>可以这么说,如果要做一个中大型的前端项目,使用vue或者react的以及它们各自的生态工具是完全没有问题,也没有太大差异的.而且vue对于国内开发者还是比较友好的,各类文档的中文支持还是要比react好.</p><p>React和Vue都有SSR的框架,分别是Next和Nuxt,当然React还有Gatsby,Expo这些</p><h2 id="Svelte-or-Solid"><a href="#Svelte-or-Solid" class="headerlink" title="Svelte or Solid"></a>Svelte or Solid</h2><p>在virtual dom上不再赘述.而svelte和solid都是使用的真实的dom.</p><p>有的时候你并不需要也并不想要写一个较大的应用,并不想引入过多依赖,但是又想使用一些方便的库.</p><p>这时候react,vue就可以稍微退退,使用一些既新颖又成熟的方案,比如Svelte,Solid,Preact或者Million等等.前端框架的发展特别快,在使用过程中掌握一些基本概念会更好.</p><p>在浏览这些框架时,我也体会到一个深刻的事情,作为普通开发者在选择这些框架时,即使文档宣传有多么好多么快,如果背后的社区不坚持做下去不坚持宣传,背后的生态,背后没有一个较为统一的解决方案,还是无法做的长久.</p><p>我说这些话的意思是,在这么多前端框架出现的今天,如果想要有一个顺畅的开发体验,除了框架本身宣传的技术,还有背后的生态工具链也很重要,毕竟,当项目体积变大,事情就更复杂了.</p><p>Svelte官方提供了一个SvelteKit工具,也支持SSR等功能.</p><p>Solid也是类似.可以简单粗暴地说在语法上Svelte更像Vue,Solid更像React.而且后两者都提供了SSR的能力.</p><h2 id="对比一下Next-Nuxt以及SvelteKit和solid-js"><a href="#对比一下Next-Nuxt以及SvelteKit和solid-js" class="headerlink" title="对比一下Next,Nuxt以及SvelteKit和solid.js"></a>对比一下Next,Nuxt以及SvelteKit和solid.js</h2><p>平常我们写前端代码关注哪些点?</p><p>Next官网给了以下几点</p><p><img data-src="https://s2.loli.net/2024/02/03/gZW9YjzshmFBXnx.png" alt="image-20240203185447263" style="zoom:67%;" /></p><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>对于Next,可以使用<code>create-next-app</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>使用Next或者Nuxt一般主要目的是使用SSR功能.当然除了SSR之外这些框架本身也提供了很多功能,一些开箱即用的库,一些默认的目录结构.不过不是为了强调SSR,SEO,貌似也没有必要使用Next(事实上你也可以使用这些框架但不过多使用它们的一些feature,好处是不用费时费力安装一些常用库)</p><p>如果不使用Next而是用React,可以考虑使用Vite等构建工具.</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>使用不同的构建工具或者框架会默认一些目录结构.</p><p>Next使用基于文件结构的路由,所录在目录结构上需要注意的.在Next的大更新也就是v13之后,路由默认使用App Router. App Router默认使用app目录进行路由,而Page Router 使用Page目录.</p><p>推荐只是用app router就够了.</p><p>在<code>app/layout.tsx</code>中创建html,在<code>app/page.tsx</code>中创建组件,然后创建public文件夹放图像和字体等静态文件.</p><p>具体Next项目结构参看<a href="https://nextjs.org/docs/getting-started/project-structure">Getting Started: Project Structure | Next.js (nextjs.org)</a>,可以看到还是有很多默认规则的.</p><h3 id="如何写一个组件"><a href="#如何写一个组件" class="headerlink" title="如何写一个组件"></a>如何写一个组件</h3><p>由于有了SSR功能,组件分为了服务端和客户端组件</p><h4 id="服务端组件"><a href="#服务端组件" class="headerlink" title="服务端组件"></a>服务端组件</h4><p>服务器组件相比于原本的CSR应用有很多好处.比如数据获取更快,更安全,有缓存,客户端需要的Bundle更小,更好的SEO.</p><p>渲染过程:在服务器上，Next.js使用React的API来编排渲染。渲染工作分为多个块：按各个route segments和suspense boundaries。</p><p>每个块(chunks)分两个步骤呈现：React将服务器组件呈现为一种特殊的数据格式，称为React服务器组件有效载荷（RSC Payload）。Next.js使用RSC Payload和Client Component JavaScript指令在服务器上呈现HTML。</p><p>然后，在客户端上：HTML用于立即显示对应路由的快速非交互式预览-这仅用于初始页面加载。React服务器组件有效负载用于协调客户端和服务器组件树，并更新DOM。JavaScript指令用于水合客户端组件并使应用程序具有交互性。</p><p><strong>渲染策略</strong></p><p>有静态渲染,动态渲染</p><p>默认是静态渲染,使用静态渲染，路由在构建时渲染，或在数据重新验证后在后台渲染。结果被缓存，并且可以被推送到内容交付网络（CDN）。此优化允许您在用户和服务器请求之间共享渲染工作的结果。当路由包含的数据不是针对用户个性化的，并且可能在构建时已知时（例如静态博客文章或产品页面），静态渲染非常有用。</p><p>使用动态渲染，<strong>可以在请求时为每个用户渲染路由</strong>。当路由具有针对用户个性化的数据或具有只能在请求时才知道的信息（如cookie或URL的搜索参数）时，动态呈现非常有用。</p><blockquote><p>作为开发人员，您不需要在静态和动态渲染之间进行选择，因为Next.js会根据所使用的功能和API自动为每条路由选择最佳渲染策略。相反，您可以选择何时缓存或重新验证特定数据，也可以选择流式处理UI的部分内容。</p></blockquote><p>此外还有streaming,流式处理使您能够从服务器逐步渲染UI。工作被分割成块，并在准备就绪时流式传输到客户端。这允许用户在整个内容完成呈现之前立即查看页面的部分内容。</p><h4 id="客户端组件"><a href="#客户端组件" class="headerlink" title="客户端组件"></a>客户端组件</h4><p>客户端组件<strong>可以使用state,effects以及事件监听.此外还可以使用浏览器的API</strong>.</p><p>“use client”用于声明服务器和客户端组件模块之间的边界。这意味着，通过在文件中定义“use clinet”，导入其中的所有其他模块，包括子组件，都被视为客户端捆绑包的一部分。</p><p>一旦定义了边界，导入其中的所有子组件和模块都将被视为客户端捆绑包的一部分。</p><h3 id="styling"><a href="#styling" class="headerlink" title="styling"></a>styling</h3><p>一般来说可以使用tailwind css,像这种主要关注的是组件化,也就是不同的组件之间的css不要互相污染.全局的css可以方便插入.除了tailwind css外还有css in js,css modules等方法,我建议使用其中两种搭配就行了,不然会让人confused(推荐css modules和tailwind css搭配).</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fterminology-url-anatomy.png&amp;w=3840&amp;q=75&amp;dpl=dpl_8JSreCCcxctwsnJ6FNFujsNZdfsZ" alt="Terminology for URL Anatomy"></p><p>Next的app router支持共享布局,嵌套路由,加载状态,错误处理等等.文件用于定义路由.</p><p>每个目录表示一个路由段,使用<code>page.tsx</code>表示对于那个该路由的组件.</p><p>page默认是服务端组件,可以改为客户端组件</p><p>layouts在不同pages中是共享的,跳转时layouts保留state,不再重新渲染.这个组件应该接受一个<code>children</code>属性作为一个child layout或者一个child page.</p><p>顶层有一个Root Layout,这是必须的.在所有pages中共享.包含html和body.</p><p>每个路由段可以选择性定义自己的layout,路由中的layout默认被包含,每个父layout把子layout通过children包含在一起.layout和page可以在同一个目录下,layoput会包含这个page.</p><p>此外Next还有template,跟layouts类似,但是它并不会保持routes之间的state,这意思是当一个用户在共享一个template的不同路由之间跳转时,不会保持状态.会重新渲染元素.</p><p>在定义metadata信息时可以在page或者layout中导出metadata对象.</p><h3 id="链接与页面导航"><a href="#链接与页面导航" class="headerlink" title="链接与页面导航"></a>链接与页面导航</h3><p>Next有四种跳转路由的方式</p><ol><li>使用Link组件</li><li>使用useRouter hook(客户端组件)</li><li>使用redirect函数(服务端组件)</li><li>浏览器的History API</li></ol><h4 id="Link组件"><a href="#Link组件" class="headerlink" title="Link组件"></a>Link组件</h4><p>继承了\<a\>标签并且使得在客户端跳转提供了prefetching功能,优选方式</p><p>跳转路由时默认行为会到顶端,可以使用属性<code>scroll=&#123;false&#125;</code></p><h4 id="useRouter"><a href="#useRouter" class="headerlink" title="useRouter"></a>useRouter</h4><p>使用useRouter hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/navigation&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> router.push(&#x27;/dashboard&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="xml">      Dashboard</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于服务端组件,可以使用redirect.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; redirect &#125; <span class="keyword">from</span> <span class="string">&#x27;next/navigation&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchTeam</span>(<span class="params">id: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://...&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!res.ok) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> res.json()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Profile</span>(<span class="params">&#123; params &#125;: &#123; params: &#123; id: string &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> team = <span class="keyword">await</span> fetchTeam(params.id)</span><br><span class="line">  <span class="keyword">if</span> (!team) &#123;</span><br><span class="line">    redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next.js路由默认缓存等机制.</p><p>使用<code>loading.js</code>加载一些内容,原本是React中的suspense.</p><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Floading-ui.png&amp;w=3840&amp;q=75&amp;dpl=dpl_7E1cZLB9sZWvkjQY6Ei4tJ18mYN7" alt="Loading UI"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default function Loading() &#123;</span><br><span class="line">  // You can add any UI inside Loading, including a Skeleton.</span><br><span class="line">  return &lt;LoadingSkeleton /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用loading.js与suspense可以获得<strong>Streaming Server Rendering</strong> 和<strong>Selective Hydration</strong>的效果.</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>使用error.js进行错误处理.如果要处理根目录下的错误,需要使用<code>global-error.tsx</code>文件,它可以处理包括根下layout.tsx和template.tsx中丢出的错误,此外也推荐再定义error.tsx处理根下page.tsx中的错误.</p><p>error.tsx文件会被嵌入到layout之中,所以不会处理layout.tsx中丢出的错误.</p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p><img data-src="https://s2.loli.net/2024/02/06/Zav7h3fXBkOIR8g.png" alt="image-20240206130511356"></p><p>重定向跟路由类似,也分在服务端组件和客户端使用.</p><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use server&#x27;</span><br><span class="line"> </span><br><span class="line">import &#123; redirect &#125; from &#x27;next/navigation&#x27;</span><br><span class="line">import &#123; revalidatePath &#125; from &#x27;next/cache&#x27;</span><br><span class="line"> </span><br><span class="line">export async function createPost(id: string) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // Call database</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    // Handle errors</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  revalidatePath(&#x27;/posts&#x27;) // Update cached posts</span><br><span class="line">  redirect(`/post/$&#123;id&#125;`) // Navigate to the new post page</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在<code>next.config.js</code>中设置redirects使得在请求的页面渲染之前进行跳转.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">redirects</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="comment">// Basic redirect</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">source</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">destination</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">permanent</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Wildcard path matching</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">source</span>: <span class="string">&#x27;/blog/:slug&#x27;</span>,</span><br><span class="line">        <span class="attr">destination</span>: <span class="string">&#x27;/news/:slug&#x27;</span>,</span><br><span class="line">        <span class="attr">permanent</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有在Middleware中的跳转,方便在进行验证之后进行选择性跳转.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NextResponse, NextRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; authenticate &#125; <span class="keyword">from</span> <span class="string">&#x27;auth-provider&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">request: NextRequest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isAuthenticated = authenticate(request)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// If the user is authenticated, continue as normal</span></span><br><span class="line">  <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">    <span class="keyword">return</span> NextResponse.next()</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Redirect to login page if not authenticated</span></span><br><span class="line">  <span class="keyword">return</span> NextResponse.redirect(<span class="keyword">new</span> URL(<span class="string">&#x27;/login&#x27;</span>, request.url))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: <span class="string">&#x27;/dashboard/:path*&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由组"><a href="#路由组" class="headerlink" title="路由组"></a>路由组</h4><p>路由组可以将路由分成一组,同时使得在一个路由段建立多个嵌套的layout.</p><p>使用<code>()</code>包含一个目录名,这个目录不会被当作一个路由.在这个路由组中的路由可以共享一个layout.这个目录不会被处理成路由段,此外可以利用这个创建多个root layout.</p><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-group-multiple-root-layouts.png&amp;w=3840&amp;q=75&amp;dpl=dpl_Fr1VCq6W9RFeEuXYFe2L4sUmaW7a" alt="Route Groups with Multiple Root Layouts"></p><h4 id="项目结构和文件安排"><a href="#项目结构和文件安排" class="headerlink" title="项目结构和文件安排"></a>项目结构和文件安排</h4><p>在目录前加<code>_</code>使得其不可访问.</p><blockquote><p>：_folderName这表示文件夹是一个专用的实现细节，路由系统不应考虑它，从而选择不路由文件夹及其所有子文件夹。</p></blockquote><p>这样做可以使得UI与路由分开.</p><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fproject-organization-private-folders.png&w=3840&q=75&dpl=dpl_FhZP1LTtukMJX1yNmAQ5DmdgAZ2Q" alt="An example folder structure using private folders" style="zoom:67%;" /></p><p>此外可以配置module aliases方便导入.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/components/*&quot;</span>: [<span class="string">&quot;components/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目组织策略</strong></p><p>可以将组件和lib库放在根目录,跟app目录同层.</p><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fproject-organization-project-root.png&w=3840&q=75&dpl=dpl_FhZP1LTtukMJX1yNmAQ5DmdgAZ2Q" alt="An example folder structure with project files outside of app" style="zoom:50%;" /></p><p>还可以将这些目录放在app目录下,此外还可以放在路由目录下.</p><p><img data-src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fproject-organization-app-root-split.png&amp;w=3840&amp;q=75&amp;dpl=dpl_FhZP1LTtukMJX1yNmAQ5DmdgAZ2Q" alt="An example folder structure with project files split by feature or route"></p><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>给目录命名的时候使用<code>[]</code>,这样在layout,page,route或者generateMetadata函数中可以访问动态路由的参数.</p><p>此外使用<code>[...slug]</code>不仅可以捕获该路由下其下的子路由也能被捕获</p><p>使用<code>dynamicParams</code>控制<code>generateStaticParams</code>得到的结果之外的能否访问.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const dynamicParams = false</span><br></pre></td></tr></table></figure><p>存在multiple-dynamic route以及catch-all segments</p><p><img data-src="https://s2.loli.net/2024/02/06/rcxIzpTYlAGDZPK.png" alt="image-20240206163014573"></p><p>此外还有Optional Catch-all Segments,<code>[[...]]</code>既可以匹配原本路由也可以匹配子路由</p><h4 id="并行路由"><a href="#并行路由" class="headerlink" title="并行路由"></a>并行路由</h4><p>并行路由允许您同时或有条件地呈现同一布局中的一个或多个页面。它们适用于应用程序的高度动态部分，如社交网站上的仪表板和提要。</p><p>使用<code>@</code>开头的目录,类似slot可以插入到layout中.</p><h4 id="插入路由"><a href="#插入路由" class="headerlink" title="插入路由"></a>插入路由</h4><p>截取路由允许您在当前布局中从应用程序的另一部分加载路由。当您希望在不让用户切换到不同上下文的情况下显示路线的内容时，这种路由范例可能很有用。</p><h4 id="路由处理器"><a href="#路由处理器" class="headerlink" title="路由处理器"></a>路由处理器</h4><p>这也是Next能作为全栈框架的原因,当然在这方面不如Nest.</p><p>路由处理器类似page.js而且不能跟其重合.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const dynamic = &#x27;force-dynamic&#x27; // defaults to auto</span><br><span class="line">export async function GET(request: Request) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用GET方法并用Response返回能自动缓存.并且可以使用revalidate验证缓存数据.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export async function GET() &#123;</span><br><span class="line">  const res = await fetch(&#x27;https://data.mongodb-api.com/...&#x27;, &#123;</span><br><span class="line">    next: &#123; revalidate: 60 &#125;, // Revalidate every 60 seconds</span><br><span class="line">  &#125;)</span><br><span class="line">  const data = await res.json()</span><br><span class="line"> </span><br><span class="line">  return Response.json(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>page,layout和route handler有个<code>dynamic</code>属性,控制静态和动态的渲染和缓存.</p><p>默认为<code>auto</code>表示尽可能地缓存,<code>force-dynamic</code>表示强制动态渲染,使得每此渲染在每次请求的时候渲染.<code>error</code>如果每个组件使用了动态函数或者没有缓存的数据基会报错.</p><p><code>force-static</code>强制静态渲染并且缓存数据,cookies和headers等返回空值.</p><p>动态函数包括cookies和headers.</p><p>动态路由也可以处理请求的参数.</p><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h4><blockquote><p>Middleware允许在请求完成之前运行代码。然后，根据传入的请求，您可以通<strong>过重写、重定向、修改请求或响应标头或直接响应</strong>来修改响应。</p></blockquote><p>在根目录使用<code>middleware.ts</code>进行对请求的拦截相应.</p><p><img data-src="https://s2.loli.net/2024/02/07/z9TjK2Om3EcICDY.png" alt="image-20240207234054276"></p><h3 id="Data-Fetching"><a href="#Data-Fetching" class="headerlink" title="Data Fetching"></a>Data Fetching</h3><p>由于引入了SSR等,数据获取也有了变化.分为在server上和在client上.</p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>在Next.js服务端中,fetch可以配置缓存和重验证.</p><p>在客户端中可以调用route handler获取数据,也可以使用React Query等第三方库.</p><h4 id="Server-Actions和Mutations"><a href="#Server-Actions和Mutations" class="headerlink" title="Server Actions和Mutations"></a>Server Actions和Mutations</h4><p>Server Actions是在服务上的异步函数,既可以在服务和客户端的组件来处理提交和和数据改变.</p><p>对于服务端组件,将”use server”放在一个异步函数的最顶部.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Server Component</span><br><span class="line">export default function Page() &#123;</span><br><span class="line">  // Server Action</span><br><span class="line">  async function create() &#123;</span><br><span class="line">    &#x27;use server&#x27;</span><br><span class="line"> </span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  return (</span><br><span class="line">    // ...</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于客户端组件,将”use server”放在客户端组件最顶部.</p><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>Vue的SSR框架,Nuxt默认使用Vite构建工具.官方文档将它的和核心概念分为以下几个部分</p><p><img data-src="https://s2.loli.net/2024/02/06/iU72dluEKhtOkI9.png" alt="image-20240206000905397"></p><p>总体看来跟Next差别不大,具体的可以查看<a href="https://nuxt.com/docs/getting-started/introduction">Introduction · Get Started with Nuxt</a>.</p><h3 id="SvelteKit"><a href="#SvelteKit" class="headerlink" title="SvelteKit"></a>SvelteKit</h3><p>SvelteKit默认使用Vite构建,推荐使用SvelteKit创建一个svelte项目</p><blockquote><p>SvelteKit将处理调用Svelte编译器，将.Svelte文件转换为.js文件，这些文件创建DOM和.css文件。它还提供构建web应用程序所需的所有其他部分，如开发服务器、路由、部署以及SSR支持.</p></blockquote><p><img data-src="https://s2.loli.net/2024/02/03/kOdja1mSY925byP.png" alt="image-20240203190856868"></p><p>值得注意的是,Svelte是的更新是基于赋值,使用数组的push等操作不会自动更新.</p><p>sveltekit类似Next也在路由,fetch数据,headers,cookies等有很多opinioned的配置.</p><h3 id="Solid"><a href="#Solid" class="headerlink" title="Solid"></a>Solid</h3><p>Solid也是使用Vite构建,使用<code>createSignal</code>来管理状态实现交互性.目前github上的star没有svelte多,因为发展成熟度还没有svelte高,但是solid目前更像一个方便的动态库,比较轻巧.</p><p>Solid的SSR支持有点特别.</p><blockquote><p>Solid有一个动态服务器端渲染解决方案，可以实现真正同构的开发体验。通过使用我们的Resource原语，可以轻松地进行异步数据请求，更重要的是，可以在客户端和浏览器之间自动序列化和同步。</p></blockquote><p>Solid的响应式基于Signal,Memo以及Effect.</p><p>目前Solid正在开发Solid Start,目的也是提供一个较为整体的Solid生态的解决方案.</p><p><img data-src="https://s2.loli.net/2024/02/08/CwB6zkX5yPvnf4q.png" alt="image-20240208002623304"></p><p>Solid和Svelte都有很好的tutorial而且在掌握vue或者react之后再去看它们的文档也并不困难.</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>对于这一类前端框架,以后可能还会不断涌现,但是其中的生态还是很重要的,如果想要快速没有太多心智负担的开发一个较为成熟生产应用,还是推荐使用React或者Vue等较为成熟的框架或者库.此外这些框架其中的要解决的问题是一致的,解决方法也是趋同的.</p><p>响应性,组件创建,生命周期等等,此外附带路由,状态管理,数据获取操作等等都有解决方法.</p><h2 id="Astro"><a href="#Astro" class="headerlink" title="Astro"></a>Astro</h2><p>我一看到这个框架的官网介绍就觉得这个框架适合写博客.当然它很灵活,功能很强大.</p><p>Astro本身并不与React和Vue冲突,所以一起用并没问题.<a href="https://docs.astro.build/zh-cn/guides/integrations-guide/">使用集成 | Docs (astro.build)</a></p><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><p>现在流行用ts代替js了,所以还是学习一下.其实并不是很难.</p><h2 id="Bun-Deno"><a href="#Bun-Deno" class="headerlink" title="Bun?Deno?"></a>Bun?Deno?</h2><p>node之后的运行时.Deno现在没声了,可以考虑用用Bun.</p><blockquote><p>开发、测试、运行和捆绑JavaScript&amp;TypeScript项目——所有这些都使用Bun。Bun是一个一体化的JavaScript运行时和工具包，专为速度而设计，配有bundler、测试运行程序和Node.js兼容的包管理器。</p></blockquote><h2 id="htmlx"><a href="#htmlx" class="headerlink" title="htmlx??"></a>htmlx??</h2><p>最近比较火,但其实本身就是使用html的语法增加了一些原本用js才能实现的比如传文件、发送请求的功能.</p><p>但我总感觉定制化能力有点弱,可能本身也是为了快速开发一些web工具用的.</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有很多技术我并没有提到,比如还有前端框架Angular以及WASM<a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly">WebAssembly | MDN (mozilla.org)</a>,Qwik等等,因为我现实中并没有过多使用它们,还是让子弹飞一会吧.</p><p>一些前端框架的黑盒有点多,对于初学者还是要多多学习基础,学习框架时建议从简单入手,慢慢深入,毕竟很多框架的一些功能其实平常可能用不上.我推荐在掌握React,Next之后可以往Svelte或者Solid框架学习.因为Vue从一些概念上我觉得并没有与React太大的差异,主要是生态上差别,Vue的官方给的工具链已经比较齐全了,而React的生态可以说比较多样化,但也会导致在选择工具上的犹豫和困难.</p><p>Solid目前正在开发Solid Start框架,预计应该是类似于SvelteKit之于Svelte,期待后续发展.</p><p>而Astro这类框架用于个人博客等等还是很不错的.最后推荐几位Youtube上的前端博主,<a href="https://www.youtube.com/@WebDevSimplified">Web Dev Simplified - YouTube</a>,<a href="https://www.youtube.com/@TraversyMedia">Traversy Media - YouTube</a>,<a href="https://www.youtube.com/@Fireship">Fireship - YouTube</a>以及<a href="https://www.youtube.com/@freecodecamp">freeCodeCamp.org - YouTube</a>.当然不只是前端以及一些技术趋势.</p><h2 id="可以观看的一些视频和文章"><a href="#可以观看的一些视频和文章" class="headerlink" title="可以观看的一些视频和文章"></a>可以观看的一些视频和文章</h2><ol><li><a href="https://www.youtube.com/watch?v=Gc4Xh8u19NU">YouTube</a></li><li><a href="https://www.youtube.com/watch?v=9He4UBLyk8Y&amp;list=PLWKjhJtqVAbmMuZ3saqRIBimAKIMYkt0E&amp;ab_channel=freeCodeCamp.org">Front End Developer Roadmap 2024 - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=8sXRyHI3bLw&amp;ab_channel=TraversyMedia">Web Development In 2024 - A Practical Guide (youtube.com)</a></li><li><a href="https://risingstars.js.org/2023/en">2023 JavaScript Rising Stars</a></li><li><a href="https://www.satellytes.com/blog/post/getting-started-gatsby-next-remix/">Getting Started: Gatsby vs. Next.js vs. Remix | Satellytes</a></li><li><a href="https://clonecoding.com/zh-cn/next-js-三种渲染方式-ssr-csr-ssg-优缺点分析/">[Next.js] 三种渲染方式 - SSR、CSR、SSG：优缺点分析 - CloneCoding</a></li><li><a href="https://juejin.cn/post/7145669817428049957">后起之秀svelte和solid是否值得花时间学习？ - 掘金 (juejin.cn)</a></li><li><a href="https://www.jdon.com/59675.html">比较前端框架ReactJs、SolidJS、Svelte和Lit底层逻辑 - Smashing - 极道 (jdon.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;马上又要到农历新年了,趁现在回顾一下过去一年的前端发展.当然是站在我的角度,因为有许多新的技术,对于不同领域的人以及不同层面的开发者都有不同的意味.&lt;br&gt;对于我来说,快捷、轻松的开发体验是比较重要的,臃肿的大型框架并不是优秀的代名词,所以我会尽量使用或者倾向喜欢一些生态发展好,开发者使用体验好,社区也比较活跃的框架或者技术.此外,随着事件发展肯定会不断涌现一些新型技术甚至新的思想,对于学习者来说,这些东西还需要一些观望.&lt;br&gt;</summary>
    
    
    
    
    <category term="front end" scheme="https://www.sekyoro.top/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>协同融合代码学习</title>
    <link href="https://www.sekyoro.top/2024/01/31/%E5%8D%8F%E5%90%8C%E8%9E%8D%E5%90%88%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/01/31/%E5%8D%8F%E5%90%8C%E8%9E%8D%E5%90%88%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-01-31T11:15:43.000Z</published>
    <updated>2024-04-01T05:49:42.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>代码还是很重要的,虽然发现有些代码库不怎么样.<br><span id="more"></span></p><p>目前协同感知算法主要就是利用注意力机制和图神经网络,利用backbone(包括voxelNet,Point Pillar等网络)处理后的特征进行融合,具体的codebase我找到三个(此外还有很多基于OpenCOOD的多模态、关注其他问题的代码,这里就放一些基础的).</p><ul><li>一个是<a href="https://github.com/coperception/where2comm?tab=readme-ov-file">coperception/where2comm: [NeurIPS 2022] Where2comm (github.com)</a>,</li><li>还有<a href="https://github.com/GT-RIPL/MultiAgentPerception">GT-RIPL/MultiAgentPerception: Official source code to CVPR’20 paper, “When2com: Multi-Agent Perception via Communication Graph Grouping” (github.com)</a>.</li><li>另一个是<a href="https://github.com/DerrickXuNu/OpenCOOD">DerrickXuNu/OpenCOOD: [ICRA 2022] An opensource framework for cooperative detection. Official implementation for OPV2V. (github.com)</a>.可以说包含许多20年到现在的经典车辆协同感知的算法代码了,此外还有一些零散的算法代码,这里咱就细细把玩一下.</li></ul><h2 id="Coperceptions"><a href="#Coperceptions" class="headerlink" title="Coperceptions"></a>Coperceptions</h2><p>包括where2comm,v2vnet,disconet,v2x-vit以及when2comm的代码.</p><p><img data-src="https://github.com/coperception/where2comm/raw/gh-pages/static/images/Intro.png" alt="Where2comm"></p><p>本身有mean,max,cat以及agent的融合方式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeanFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> torch.mean(torch.stack(self.neighbor_feat_list), dim=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>继承自FusionBase,而<code>FusionBase</code>又继承自<code>SegModelBase</code>,后者实现了一系列模型.在<code>FusionBase</code>中,首先对特征进行下采样,然后转换除了ego agent的特征,然后进行融合,最后再上采样.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> coperception.models.seg.SegModelBase <span class="keyword">import</span> SegModelBase</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FusionBase</span>(<span class="params">SegModelBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, n_channels, n_classes, num_agent=<span class="number">5</span>, kd_flag=<span class="literal">False</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line">        self.neighbor_feat_list = <span class="literal">None</span></span><br><span class="line">        self.tg_agent = <span class="literal">None</span></span><br><span class="line">        self.current_num_agent = <span class="literal">None</span></span><br><span class="line">        self.kd_flag = kd_flag</span><br><span class="line">        self.only_v2i = only_v2i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(</span><br><span class="line">            <span class="string">&quot;Please implement this method for specific fusion strategies&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, trans_matrices, num_agent_tensor</span>):</span></span><br><span class="line">        x1 = self.inc(x)</span><br><span class="line">        x2 = self.down1(x1)</span><br><span class="line">        x3 = self.down2(x2)</span><br><span class="line">        x4 = self.down3(x3)  <span class="comment"># b 512 32 32</span></span><br><span class="line">        size = (<span class="number">1</span>, <span class="number">512</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.compress_level &gt; <span class="number">0</span>:</span><br><span class="line">            x4 = F.relu(self.bn_compress(self.com_compresser(x4)))</span><br><span class="line">            x4 = F.relu(self.bn_decompress(self.com_decompresser(x4)))</span><br><span class="line"></span><br><span class="line">        batch_size = x.size(<span class="number">0</span>) // self.num_agent</span><br><span class="line">        feat_list = <span class="built_in">super</span>().build_feat_list(x4, batch_size)</span><br><span class="line"></span><br><span class="line">        local_com_mat = torch.cat(<span class="built_in">tuple</span>(feat_list), <span class="number">1</span>)</span><br><span class="line">        local_com_mat_update = torch.cat(<span class="built_in">tuple</span>(feat_list), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">            self.com_num_agent = num_agent_tensor[b, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            agent_feat_list = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> nb <span class="keyword">in</span> <span class="built_in">range</span>(self.com_num_agent):</span><br><span class="line">                agent_feat_list.append(local_com_mat[b, nb])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.com_num_agent):</span><br><span class="line">                self.tg_agent = local_com_mat[b, i]</span><br><span class="line"></span><br><span class="line">                self.neighbor_feat_list = <span class="built_in">list</span>()</span><br><span class="line">                self.neighbor_feat_list.append(self.tg_agent)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.com_num_agent):</span><br><span class="line">                    <span class="keyword">if</span> j != i:</span><br><span class="line">                        <span class="keyword">if</span> self.only_v2i <span class="keyword">and</span> i != <span class="number">0</span> <span class="keyword">and</span> j != <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                        self.neighbor_feat_list.append(</span><br><span class="line">                            <span class="built_in">super</span>().feature_transformation(</span><br><span class="line">                                b,</span><br><span class="line">                                j,</span><br><span class="line">                                i,</span><br><span class="line">                                local_com_mat,</span><br><span class="line">                                size,</span><br><span class="line">                                trans_matrices,</span><br><span class="line">                            )</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                local_com_mat_update[b, i] = self.fusion()</span><br><span class="line"></span><br><span class="line">        feat_mat = <span class="built_in">super</span>().agents_to_batch(local_com_mat_update)</span><br><span class="line"></span><br><span class="line">        x5 = self.down4(feat_mat)</span><br><span class="line">        x6 = self.up1(x5, feat_mat)</span><br><span class="line">        x7 = self.up2(x6, x3)</span><br><span class="line">        x8 = self.up3(x7, x2)</span><br><span class="line">        x9 = self.up4(x8, x1)</span><br><span class="line">        logits = self.outc(x9)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.kd_flag:</span><br><span class="line">            <span class="keyword">return</span> logits, x9, x8, x7, x6, x5, feat_mat</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> logits</span><br></pre></td></tr></table></figure><p>使用了连续的下采样和上采样,先下采样,然后进行融合再进行上采样.这几种融合方式真是一层套一层,这么多参数效果不变强才怪…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegModelBase</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, n_channels, n_classes, bilinear=<span class="literal">True</span>, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.n_channels = n_channels</span><br><span class="line">        self.n_classes = n_classes</span><br><span class="line">        self.bilinear = bilinear</span><br><span class="line">        self.num_agent = num_agent</span><br><span class="line">        self.only_v2i = only_v2i</span><br><span class="line"></span><br><span class="line">        self.inc = DoubleConv(n_channels, <span class="number">64</span>)</span><br><span class="line">        self.down1 = Down(<span class="number">64</span>, <span class="number">128</span>)</span><br><span class="line">        self.down2 = Down(<span class="number">128</span>, <span class="number">256</span>)</span><br><span class="line">        self.down3 = Down(<span class="number">256</span>, <span class="number">512</span>)</span><br><span class="line">        factor = <span class="number">2</span> <span class="keyword">if</span> bilinear <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        self.down4 = Down(<span class="number">512</span>, <span class="number">1024</span> // factor)</span><br><span class="line">        self.up1 = Up(<span class="number">1024</span>, <span class="number">512</span> // factor, bilinear)</span><br><span class="line">        self.up2 = Up(<span class="number">512</span>, <span class="number">256</span> // factor, bilinear)</span><br><span class="line">        self.up3 = Up(<span class="number">256</span>, <span class="number">128</span> // factor, bilinear)</span><br><span class="line">        self.up4 = Up(<span class="number">128</span>, <span class="number">64</span>, bilinear)</span><br><span class="line">        self.outc = OutConv(<span class="number">64</span>, n_classes)</span><br><span class="line"></span><br><span class="line">        self.compress_level = compress_level</span><br><span class="line">        <span class="keyword">if</span> compress_level &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">assert</span> compress_level &lt;= <span class="number">9</span></span><br><span class="line">            feat_map_channel_num = <span class="number">512</span></span><br><span class="line">            compress_channel_num = feat_map_channel_num // (<span class="number">2</span>**compress_level)</span><br><span class="line"></span><br><span class="line">            self.com_compresser = nn.Conv2d(</span><br><span class="line">                feat_map_channel_num, compress_channel_num, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">            self.bn_compress = nn.BatchNorm2d(compress_channel_num)</span><br><span class="line"></span><br><span class="line">            self.com_decompresser = nn.Conv2d(</span><br><span class="line">                compress_channel_num, feat_map_channel_num, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">            self.bn_decompress = nn.BatchNorm2d(feat_map_channel_num)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_feat_list</span>(<span class="params">self, feat_maps, batch_size</span>):</span></span><br><span class="line">        feat_maps = torch.flip(feat_maps, (<span class="number">2</span>,))</span><br><span class="line"></span><br><span class="line">        tmp_feat_map = &#123;&#125;</span><br><span class="line">        feat_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num_agent):</span><br><span class="line">            tmp_feat_map[i] = torch.unsqueeze(</span><br><span class="line">                feat_maps[batch_size * i : batch_size * (i + <span class="number">1</span>)], <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">            feat_list.append(tmp_feat_map[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feat_list</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feature_transformation</span>(<span class="params">b, j, agent_idx, local_com_mat, size, trans_matrices</span>):</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">        nb_agent = torch.unsqueeze(local_com_mat[b, j], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        tfm_ji = trans_matrices[b, j, agent_idx]</span><br><span class="line">        M = (</span><br><span class="line">            torch.hstack((tfm_ji[:<span class="number">2</span>, :<span class="number">2</span>], -tfm_ji[:<span class="number">2</span>, <span class="number">3</span>:<span class="number">4</span>])).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">        )  <span class="comment"># [1,2,3]</span></span><br><span class="line">        M = M.to(device)</span><br><span class="line"></span><br><span class="line">        mask = torch.tensor([[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span> / <span class="number">128</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span> / <span class="number">128</span>]]], device=M.device)</span><br><span class="line"></span><br><span class="line">        M *= mask</span><br><span class="line"></span><br><span class="line">        grid = F.affine_grid(M, size=torch.Size(size))</span><br><span class="line">        warp_feat = F.grid_sample(nb_agent, grid).squeeze()</span><br><span class="line">        <span class="keyword">return</span> warp_feat</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">agents_to_batch</span>(<span class="params">self, feats</span>):</span></span><br><span class="line">        feat_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num_agent):</span><br><span class="line">            feat_list.append(feats[:, i, :, :, :])</span><br><span class="line">        feat_mat = torch.cat(feat_list, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        feat_mat = torch.flip(feat_mat, (<span class="number">2</span>,))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feat_mat</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleConv</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_channels, out_channels, mid_channels=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mid_channels:</span><br><span class="line">            mid_channels = out_channels</span><br><span class="line">        self.double_conv = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, mid_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(mid_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(mid_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.double_conv(x)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Down</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.maxpool_conv = nn.Sequential(</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            DoubleConv(in_channels, out_channels),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.maxpool_conv(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Up</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_channels, out_channels, bilinear=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">if</span> bilinear:</span><br><span class="line">            self.up = nn.Upsample(scale_factor=<span class="number">2</span>, mode=<span class="string">&quot;bilinear&quot;</span>, align_corners=<span class="literal">True</span>)</span><br><span class="line">            self.conv = DoubleConv(in_channels, out_channels, in_channels // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.up = nn.ConvTranspose2d(</span><br><span class="line">                in_channels, in_channels // <span class="number">2</span>, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span></span><br><span class="line">            )</span><br><span class="line">            self.conv = DoubleConv(in_channels, out_channels)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x1, x2</span>):</span></span><br><span class="line">        x1 = self.up(x1)</span><br><span class="line">        diff_y = x2.size()[<span class="number">2</span>] - x1.size()[<span class="number">2</span>]</span><br><span class="line">        diff_x = x2.size()[<span class="number">3</span>] - x1.size()[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        x1 = F.pad(</span><br><span class="line">            x1, [diff_x // <span class="number">2</span>, diff_x - diff_x // <span class="number">2</span>, diff_y // <span class="number">2</span>, diff_y - diff_y // <span class="number">2</span>]</span><br><span class="line">        )</span><br><span class="line">        x = torch.cat([x2, x1], dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br></pre></td></tr></table></figure><p>mean,max和sum不用多说,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> coperception.models.seg.FusionBase <span class="keyword">import</span> FusionBase</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SumFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(torch.stack(self.neighbor_feat_list), dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeanFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> torch.mean(torch.stack(self.neighbor_feat_list), dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">max</span>(torch.stack(self.neighbor_feat_list), dim=<span class="number">0</span>).values</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>catFusion将其他特征做个mean然后与自己的特征连接起来.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent, compress_level, only_v2i</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line">        self.modulation_layer_3 = ModulationLayer3()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        mean_feat = torch.mean(torch.stack(self.neighbor_feat_list), dim=<span class="number">0</span>)  <span class="comment"># [c, h, w]</span></span><br><span class="line">        cat_feat = torch.cat([self.tg_agent, mean_feat], dim=<span class="number">0</span>)</span><br><span class="line">        cat_feat = cat_feat.unsqueeze(<span class="number">0</span>)  <span class="comment"># [1, 1, c, h, w]</span></span><br><span class="line">        <span class="keyword">return</span> self.modulation_layer_3(cat_feat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">FIXME:</span> Change size</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModulationLayer3</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ModulationLayer3, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv1_1 = nn.Conv2d(<span class="number">1024</span>, <span class="number">512</span>, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line">        self.bn1_1 = nn.BatchNorm2d(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = x.view(-<span class="number">1</span>, x.size(-<span class="number">3</span>), x.size(-<span class="number">2</span>), x.size(-<span class="number">1</span>))</span><br><span class="line">        x_1 = F.relu(self.bn1_1(self.conv1_1(x)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x_1</span><br></pre></td></tr></table></figure><p>此外还有个<code>AgentWiseWeightedFusion</code>,每个ego_agent单独和每个其他特征cat在一起再通过,然后计算一个融合特征,再计算一个softmax作为特征的权重.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentWiseWeightedFusion</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_channels, n_classes, num_agent=<span class="number">5</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels, n_classes, num_agent=num_agent, compress_level=compress_level, only_v2i=only_v2i</span><br><span class="line">        )</span><br><span class="line">        self.agent_weighted_fusion = AgentWeightedFusion()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        agent_weight_list = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(self.com_num_agent):</span><br><span class="line">            cat_feat = torch.cat([self.tg_agent, self.neighbor_feat_list[k]], dim=<span class="number">0</span>)</span><br><span class="line">            cat_feat = cat_feat.unsqueeze(<span class="number">0</span>)</span><br><span class="line">            agent_weight = self.agent_weighted_fusion(cat_feat)</span><br><span class="line">            agent_weight_list.append(agent_weight)</span><br><span class="line"></span><br><span class="line">        soft_agent_weight_list = torch.squeeze(</span><br><span class="line">            F.softmax(torch.tensor(agent_weight_list).unsqueeze(<span class="number">0</span>), dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        agent_wise_weight_feat = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(self.com_num_agent):</span><br><span class="line">            agent_wise_weight_feat = (</span><br><span class="line">                agent_wise_weight_feat</span><br><span class="line">                + soft_agent_weight_list[k] * self.neighbor_feat_list[k]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> agent_wise_weight_feat</span><br></pre></td></tr></table></figure><p>discoNet特别之处就在于使用了所谓学生-教师模型进行知识蒸馏,在代码中添加了这个.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">&quot;--kd_flag&quot;</span>,</span><br><span class="line">    default=<span class="number">0</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;Whether to enable distillation (only DiscNet is 1 )&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 还添加了权重参数,可见权重加得还挺大的.</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;--kd_weight&quot;</span>, default=<span class="number">100000</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;KD loss weight&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后类似<code>AgentWiseWeightedFusion</code>,将ego的特征与通信的单独每辆车的特征cat在一起传入一个网络中,计算得到所有值的幂和.然后再用各自的值乘以和(跟softmax差不多).算按出来权重再乘以对应的特征.最后的值是相加起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiscoNet</span>(<span class="params">FusionBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, n_channels, n_classes, num_agent, kd_flag=<span class="literal">True</span>, compress_level=<span class="number">0</span>, only_v2i=<span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            n_channels,</span><br><span class="line">            n_classes,</span><br><span class="line">            num_agent,</span><br><span class="line">            kd_flag=kd_flag,</span><br><span class="line">            compress_level=compress_level,</span><br><span class="line">            only_v2i=only_v2i,</span><br><span class="line">        )</span><br><span class="line">        self.pixel_weighted_fusion = PixelWeightedFusionSoftmax(<span class="number">512</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fusion</span>(<span class="params">self</span>):</span></span><br><span class="line">        tmp_agent_weight_list = <span class="built_in">list</span>()</span><br><span class="line">        sum_weight = <span class="number">0</span></span><br><span class="line">        nb_len = <span class="built_in">len</span>(self.neighbor_feat_list)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nb_len):</span><br><span class="line">            cat_feat = torch.cat([self.tg_agent, self.neighbor_feat_list[k]], dim=<span class="number">0</span>)</span><br><span class="line">            cat_feat = cat_feat.unsqueeze(<span class="number">0</span>)</span><br><span class="line">            agent_weight = torch.squeeze(self.pixel_weighted_fusion(cat_feat))</span><br><span class="line">            tmp_agent_weight_list.append(torch.exp(agent_weight))</span><br><span class="line">            sum_weight = sum_weight + torch.exp(agent_weight)</span><br><span class="line"></span><br><span class="line">        agent_weight_list = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nb_len):</span><br><span class="line">            agent_weight = torch.div(tmp_agent_weight_list[k], sum_weight)</span><br><span class="line">            agent_weight.expand([<span class="number">256</span>, -<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line">            agent_weight_list.append(agent_weight)</span><br><span class="line"></span><br><span class="line">        agent_wise_weight_feat = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(nb_len):</span><br><span class="line">            agent_wise_weight_feat = (</span><br><span class="line">                agent_wise_weight_feat</span><br><span class="line">                + agent_weight_list[k] * self.neighbor_feat_list[k]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> agent_wise_weight_feat</span><br></pre></td></tr></table></figure><h3 id="V2VNet"><a href="#V2VNet" class="headerlink" title="V2VNet"></a>V2VNet</h3><p><img data-src="https://s2.loli.net/2024/02/13/LK8F15wDS6jdkPJ.png" alt="image-20240213170444226"></p><p>说实话,看了代码感觉也就那样…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Hao Xiang &lt;haxiang@g.ucla.edu&gt;</span></span><br><span class="line"><span class="comment"># License: TDG-Attribution-NonCommercial-NoDistrib</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Implementation of V2VNet Fusion</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> opencood.models.sub_modules.torch_transformation_utils <span class="keyword">import</span> \</span><br><span class="line">    get_discretized_transformation_matrix, get_transformation_matrix, \</span><br><span class="line">    warp_affine, get_rotated_roi</span><br><span class="line"><span class="keyword">from</span> opencood.models.sub_modules.convgru <span class="keyword">import</span> ConvGRU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2VNetFusion</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(V2VNetFusion, self).__init__()</span><br><span class="line">        </span><br><span class="line">        in_channels = args[<span class="string">&#x27;in_channels&#x27;</span>]</span><br><span class="line">        H, W = args[<span class="string">&#x27;conv_gru&#x27;</span>][<span class="string">&#x27;H&#x27;</span>], args[<span class="string">&#x27;conv_gru&#x27;</span>][<span class="string">&#x27;W&#x27;</span>]</span><br><span class="line">        kernel_size = args[<span class="string">&#x27;conv_gru&#x27;</span>][<span class="string">&#x27;kernel_size&#x27;</span>]</span><br><span class="line">        num_gru_layers = args[<span class="string">&#x27;conv_gru&#x27;</span>][<span class="string">&#x27;num_layers&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        self.discrete_ratio = args[<span class="string">&#x27;voxel_size&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">        self.downsample_rate = args[<span class="string">&#x27;downsample_rate&#x27;</span>]</span><br><span class="line">        self.num_iteration = args[<span class="string">&#x27;num_iteration&#x27;</span>]</span><br><span class="line">        self.gru_flag = args[<span class="string">&#x27;gru_flag&#x27;</span>]</span><br><span class="line">        self.agg_operator = args[<span class="string">&#x27;agg_operator&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        self.msg_cnn = nn.Conv2d(in_channels * <span class="number">2</span>, in_channels, kernel_size=<span class="number">3</span>,</span><br><span class="line">                                 stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.conv_gru = ConvGRU(input_size=(H, W),</span><br><span class="line">                                input_dim=in_channels * <span class="number">2</span>,</span><br><span class="line">                                hidden_dim=[in_channels],</span><br><span class="line">                                kernel_size=kernel_size,</span><br><span class="line">                                num_layers=num_gru_layers,</span><br><span class="line">                                batch_first=<span class="literal">True</span>,</span><br><span class="line">                                bias=<span class="literal">True</span>,</span><br><span class="line">                                return_all_layers=<span class="literal">False</span>)</span><br><span class="line">        self.mlp = nn.Linear(in_channels, in_channels)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">regroup</span>(<span class="params">self, x, record_len</span>):</span></span><br><span class="line">        cum_sum_len = torch.cumsum(record_len, dim=<span class="number">0</span>)</span><br><span class="line">        split_x = torch.tensor_split(x, cum_sum_len[:-<span class="number">1</span>].cpu())</span><br><span class="line">        <span class="keyword">return</span> split_x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, record_len, pairwise_t_matrix</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Fusion forwarding.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        x : torch.Tensor</span></span><br><span class="line"><span class="string">            input data, (B, C, H, W)</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        record_len : list</span></span><br><span class="line"><span class="string">            shape: (B)</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        pairwise_t_matrix : torch.Tensor</span></span><br><span class="line"><span class="string">            The transformation matrix from each cav to ego, </span></span><br><span class="line"><span class="string">            shape: (B, L, L, 4, 4) </span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns</span></span><br><span class="line"><span class="string">        -------</span></span><br><span class="line"><span class="string">        Fused feature.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        _, C, H, W = x.shape</span><br><span class="line">        B, L = pairwise_t_matrix.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># split x:[(L1, C, H, W), (L2, C, H, W)]</span></span><br><span class="line">        split_x = self.regroup(x, record_len)</span><br><span class="line">        <span class="comment"># (B,L,L,2,3)</span></span><br><span class="line">        pairwise_t_matrix = get_discretized_transformation_matrix(</span><br><span class="line">            pairwise_t_matrix.reshape(-<span class="number">1</span>, L, <span class="number">4</span>, <span class="number">4</span>), self.discrete_ratio,</span><br><span class="line">            self.downsample_rate).reshape(B, L, L, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># (B*L,L,1,H,W)</span></span><br><span class="line">        roi_mask = get_rotated_roi((B * L, L, <span class="number">1</span>, H, W),</span><br><span class="line">                                   pairwise_t_matrix.reshape(B * L * L, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">        roi_mask = roi_mask.reshape(B, L, L, <span class="number">1</span>, H, W)</span><br><span class="line">        batch_node_features = split_x</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># iteratively update the features for num_iteration times</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(self.num_iteration):</span><br><span class="line"></span><br><span class="line">            batch_updated_node_features = []</span><br><span class="line">            <span class="comment"># iterate each batch</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(B):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># number of valid agent</span></span><br><span class="line">                N = record_len[b]</span><br><span class="line">                <span class="comment"># (N,N,4,4)</span></span><br><span class="line">                <span class="comment"># t_matrix[i, j]-&gt; from i to j</span></span><br><span class="line">                t_matrix = pairwise_t_matrix[b][:N, :N, :, :]</span><br><span class="line">                updated_node_features = []</span><br><span class="line">                <span class="comment"># update each node i</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                    <span class="comment"># (N,1,H,W)</span></span><br><span class="line">                    mask = roi_mask[b, :N, i, ...]</span><br><span class="line"></span><br><span class="line">                    current_t_matrix = t_matrix[:, i, :, :]</span><br><span class="line">                    current_t_matrix = get_transformation_matrix(</span><br><span class="line">                        current_t_matrix, (H, W))</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># (N,C,H,W)</span></span><br><span class="line">                    neighbor_feature = warp_affine(batch_node_features[b],</span><br><span class="line">                                                   current_t_matrix,</span><br><span class="line">                                                   (H, W))</span><br><span class="line">                    <span class="comment"># (N,C,H,W)</span></span><br><span class="line">                    ego_agent_feature = batch_node_features[b][i].unsqueeze(</span><br><span class="line">                        <span class="number">0</span>).repeat(N, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                    <span class="comment">#(N,2C,H,W)</span></span><br><span class="line">                    neighbor_feature = torch.cat(</span><br><span class="line">                        [neighbor_feature, ego_agent_feature], dim=<span class="number">1</span>)</span><br><span class="line">                    <span class="comment"># (N,C,H,W)</span></span><br><span class="line">                    message = self.msg_cnn(neighbor_feature) * mask</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># (C,H,W)</span></span><br><span class="line">                    <span class="keyword">if</span> self.agg_operator==<span class="string">&quot;avg&quot;</span>:</span><br><span class="line">                        agg_feature = torch.mean(message, dim=<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">elif</span> self.agg_operator==<span class="string">&quot;max&quot;</span>:</span><br><span class="line">                        agg_feature = torch.<span class="built_in">max</span>(message, dim=<span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;agg_operator has wrong value&quot;</span>)</span><br><span class="line">                    <span class="comment"># (2C, H, W)</span></span><br><span class="line">                    cat_feature = torch.cat(</span><br><span class="line">                        [batch_node_features[b][i, ...], agg_feature], dim=<span class="number">0</span>)</span><br><span class="line">                    <span class="comment"># (C,H,W)</span></span><br><span class="line">                    <span class="keyword">if</span> self.gru_flag:</span><br><span class="line">                        gru_out = \</span><br><span class="line">                            self.conv_gru(cat_feature.unsqueeze(<span class="number">0</span>).unsqueeze(<span class="number">0</span>))[</span><br><span class="line">                                <span class="number">0</span>][</span><br><span class="line">                                <span class="number">0</span>].squeeze(<span class="number">0</span>).squeeze(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        gru_out = batch_node_features[b][i, ...] + agg_feature</span><br><span class="line">                    updated_node_features.append(gru_out.unsqueeze(<span class="number">0</span>))</span><br><span class="line">                <span class="comment"># (N,C,H,W)</span></span><br><span class="line">                batch_updated_node_features.append(</span><br><span class="line">                    torch.cat(updated_node_features, dim=<span class="number">0</span>))</span><br><span class="line">            batch_node_features = batch_updated_node_features</span><br><span class="line">        <span class="comment"># (B,C,H,W)</span></span><br><span class="line">        out = torch.cat(</span><br><span class="line">            [itm[<span class="number">0</span>, ...].unsqueeze(<span class="number">0</span>) <span class="keyword">for</span> itm <span class="keyword">in</span> batch_node_features], dim=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># (B,C,H,W)</span></span><br><span class="line">        out = self.mlp(out.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)).permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>有的实现没有RNN比如上面代码,也有的用了RNN和LSTM.后者代码代码简直就是屎…</p><h3 id="V2xvit"><a href="#V2xvit" class="headerlink" title="V2xvit"></a>V2xvit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> v2xvit.models.sub_modules.base_transformer <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> v2xvit.models.sub_modules.hmsa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> v2xvit.models.sub_modules.mswin <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> v2xvit.models.sub_modules.torch_transformation_utils <span class="keyword">import</span> \</span><br><span class="line">    get_transformation_matrix, warp_affine, get_roi_and_cav_mask, \</span><br><span class="line">    get_discretized_transformation_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">STTF</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(STTF, self).__init__()</span><br><span class="line">        self.discrete_ratio = args[<span class="string">&#x27;voxel_size&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">        self.downsample_rate = args[<span class="string">&#x27;downsample_rate&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask, spatial_correction_matrix</span>):</span></span><br><span class="line">        x = x.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        dist_correction_matrix = get_discretized_transformation_matrix(</span><br><span class="line">            spatial_correction_matrix, self.discrete_ratio,</span><br><span class="line">            self.downsample_rate)</span><br><span class="line">        <span class="comment"># Only compensate non-ego vehicles</span></span><br><span class="line">        B, L, C, H, W = x.shape</span><br><span class="line"></span><br><span class="line">        T = get_transformation_matrix(</span><br><span class="line">            dist_correction_matrix[:, <span class="number">1</span>:, :, :].reshape(-<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (H, W))</span><br><span class="line">        cav_features = warp_affine(x[:, <span class="number">1</span>:, :, :, :].reshape(-<span class="number">1</span>, C, H, W), T,</span><br><span class="line">                                   (H, W))</span><br><span class="line">        cav_features = cav_features.reshape(B, -<span class="number">1</span>, C, H, W)</span><br><span class="line">        x = torch.cat([x[:, <span class="number">0</span>, :, :, :].unsqueeze(<span class="number">1</span>), cav_features], dim=<span class="number">1</span>)</span><br><span class="line">        x = x.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RelTemporalEncoding</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Implement the Temporal Encoding (Sinusoid) function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_hid, RTE_ratio, max_len=<span class="number">100</span>, dropout=<span class="number">0.2</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RelTemporalEncoding, self).__init__()</span><br><span class="line">        position = torch.arange(<span class="number">0.</span>, max_len).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, n_hid, <span class="number">2</span>) *</span><br><span class="line">                             -(math.log(<span class="number">10000.0</span>) / n_hid))</span><br><span class="line">        emb = nn.Embedding(max_len, n_hid)</span><br><span class="line">        emb.weight.data[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term) / math.sqrt(</span><br><span class="line">            n_hid)</span><br><span class="line">        emb.weight.data[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term) / math.sqrt(</span><br><span class="line">            n_hid)</span><br><span class="line">        emb.requires_grad = <span class="literal">False</span></span><br><span class="line">        self.RTE_ratio = RTE_ratio</span><br><span class="line">        self.emb = emb</span><br><span class="line">        self.lin = nn.Linear(n_hid, n_hid)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, t</span>):</span></span><br><span class="line">        <span class="comment"># When t has unit of 50ms, rte_ratio=1.</span></span><br><span class="line">        <span class="comment"># So we can train on 100ms but test on 50ms</span></span><br><span class="line">        <span class="keyword">return</span> x + self.lin(self.emb(t * self.RTE_ratio)).unsqueeze(</span><br><span class="line">            <span class="number">0</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTE</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dim, RTE_ratio=<span class="number">2</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RTE, self).__init__()</span><br><span class="line">        self.RTE_ratio = RTE_ratio</span><br><span class="line"></span><br><span class="line">        self.emb = RelTemporalEncoding(dim, RTE_ratio=self.RTE_ratio)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, dts</span>):</span></span><br><span class="line">        <span class="comment"># x: (B,L,H,W,C)</span></span><br><span class="line">        <span class="comment"># dts: (B,L)</span></span><br><span class="line">        rte_batch = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(x.shape[<span class="number">0</span>]):</span><br><span class="line">            rte_list = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x.shape[<span class="number">1</span>]):</span><br><span class="line">                rte_list.append(</span><br><span class="line">                    self.emb(x[b, i, :, :, :], dts[b, i]).unsqueeze(<span class="number">0</span>))</span><br><span class="line">            rte_batch.append(torch.cat(rte_list, dim=<span class="number">0</span>).unsqueeze(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> torch.cat(rte_batch, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2XFusionBlock</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_blocks, cav_att_config, pwindow_config</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># first multi-agent attention and then multi-window attention</span></span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        self.num_blocks = num_blocks</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_blocks):</span><br><span class="line">            att = HGTCavAttention(cav_att_config[<span class="string">&#x27;dim&#x27;</span>],</span><br><span class="line">                                  heads=cav_att_config[<span class="string">&#x27;heads&#x27;</span>],</span><br><span class="line">                                  dim_head=cav_att_config[<span class="string">&#x27;dim_head&#x27;</span>],</span><br><span class="line">                                  dropout=cav_att_config[<span class="string">&#x27;dropout&#x27;</span>]) <span class="keyword">if</span> \</span><br><span class="line">                cav_att_config[<span class="string">&#x27;use_hetero&#x27;</span>] <span class="keyword">else</span> \</span><br><span class="line">                CavAttention(cav_att_config[<span class="string">&#x27;dim&#x27;</span>],</span><br><span class="line">                             heads=cav_att_config[<span class="string">&#x27;heads&#x27;</span>],</span><br><span class="line">                             dim_head=cav_att_config[<span class="string">&#x27;dim_head&#x27;</span>],</span><br><span class="line">                             dropout=cav_att_config[<span class="string">&#x27;dropout&#x27;</span>])</span><br><span class="line">            self.layers.append(nn.ModuleList([</span><br><span class="line">                PreNorm(cav_att_config[<span class="string">&#x27;dim&#x27;</span>], att),</span><br><span class="line">                PreNorm(cav_att_config[<span class="string">&#x27;dim&#x27;</span>],</span><br><span class="line">                        PyramidWindowAttention(pwindow_config[<span class="string">&#x27;dim&#x27;</span>],</span><br><span class="line">                                               heads=pwindow_config[<span class="string">&#x27;heads&#x27;</span>],</span><br><span class="line">                                               dim_heads=pwindow_config[</span><br><span class="line">                                                   <span class="string">&#x27;dim_head&#x27;</span>],</span><br><span class="line">                                               drop_out=pwindow_config[</span><br><span class="line">                                                   <span class="string">&#x27;dropout&#x27;</span>],</span><br><span class="line">                                               window_size=pwindow_config[</span><br><span class="line">                                                   <span class="string">&#x27;window_size&#x27;</span>],</span><br><span class="line">                                               relative_pos_embedding=</span><br><span class="line">                                               pwindow_config[</span><br><span class="line">                                                   <span class="string">&#x27;relative_pos_embedding&#x27;</span>],</span><br><span class="line">                                               fuse_method=pwindow_config[</span><br><span class="line">                                                   <span class="string">&#x27;fusion_method&#x27;</span>]))]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask, prior_encoding</span>):</span></span><br><span class="line">        <span class="keyword">for</span> cav_attn, pwindow_attn <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = cav_attn(x, mask=mask, prior_encoding=prior_encoding) + x</span><br><span class="line">            x = pwindow_attn(x) + x</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2XTEncoder</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        cav_att_config = args[<span class="string">&#x27;cav_att_config&#x27;</span>]</span><br><span class="line">        pwindow_att_config = args[<span class="string">&#x27;pwindow_att_config&#x27;</span>]</span><br><span class="line">        feed_config = args[<span class="string">&#x27;feed_forward&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        num_blocks = args[<span class="string">&#x27;num_blocks&#x27;</span>]</span><br><span class="line">        depth = args[<span class="string">&#x27;depth&#x27;</span>]</span><br><span class="line">        mlp_dim = feed_config[<span class="string">&#x27;mlp_dim&#x27;</span>]</span><br><span class="line">        dropout = feed_config[<span class="string">&#x27;dropout&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        self.downsample_rate = args[<span class="string">&#x27;sttf&#x27;</span>][<span class="string">&#x27;downsample_rate&#x27;</span>]</span><br><span class="line">        self.discrete_ratio = args[<span class="string">&#x27;sttf&#x27;</span>][<span class="string">&#x27;voxel_size&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">        self.use_roi_mask = args[<span class="string">&#x27;use_roi_mask&#x27;</span>]</span><br><span class="line">        self.use_RTE = cav_att_config[<span class="string">&#x27;use_RTE&#x27;</span>]</span><br><span class="line">        self.RTE_ratio = cav_att_config[<span class="string">&#x27;RTE_ratio&#x27;</span>]</span><br><span class="line">        self.sttf = STTF(args[<span class="string">&#x27;sttf&#x27;</span>])</span><br><span class="line">        <span class="comment"># adjust the channel numbers from 256+3 -&gt; 256</span></span><br><span class="line">        self.prior_feed = nn.Linear(cav_att_config[<span class="string">&#x27;dim&#x27;</span>] + <span class="number">3</span>,</span><br><span class="line">                                    cav_att_config[<span class="string">&#x27;dim&#x27;</span>])</span><br><span class="line">        self.layers = nn.ModuleList([])</span><br><span class="line">        <span class="keyword">if</span> self.use_RTE:</span><br><span class="line">            self.rte = RTE(cav_att_config[<span class="string">&#x27;dim&#x27;</span>], self.RTE_ratio)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">            self.layers.append(nn.ModuleList([</span><br><span class="line">                V2XFusionBlock(num_blocks, cav_att_config, pwindow_att_config),</span><br><span class="line">                PreNorm(cav_att_config[<span class="string">&#x27;dim&#x27;</span>],</span><br><span class="line">                        FeedForward(cav_att_config[<span class="string">&#x27;dim&#x27;</span>], mlp_dim,</span><br><span class="line">                                    dropout=dropout))</span><br><span class="line">            ]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask, spatial_correction_matrix</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># transform the features to the current timestamp</span></span><br><span class="line">        <span class="comment"># velocity, time_delay, infra</span></span><br><span class="line">        <span class="comment"># (B,L,H,W,3)</span></span><br><span class="line">        prior_encoding = x[..., -<span class="number">3</span>:]</span><br><span class="line">        <span class="comment"># (B,L,H,W,C)</span></span><br><span class="line">        x = x[..., :-<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">if</span> self.use_RTE:</span><br><span class="line">            <span class="comment"># dt: (B,L)</span></span><br><span class="line">            dt = prior_encoding[:, :, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>].to(torch.<span class="built_in">int</span>)</span><br><span class="line">            x = self.rte(x, dt)</span><br><span class="line">        x = self.sttf(x, mask, spatial_correction_matrix)</span><br><span class="line">        com_mask = mask.unsqueeze(<span class="number">1</span>).unsqueeze(<span class="number">2</span>).unsqueeze(</span><br><span class="line">            <span class="number">3</span>) <span class="keyword">if</span> <span class="keyword">not</span> self.use_roi_mask <span class="keyword">else</span> get_roi_and_cav_mask(x.shape,</span><br><span class="line">                                                                  mask,</span><br><span class="line">                                                                  spatial_correction_matrix,</span><br><span class="line">                                                                  self.discrete_ratio,</span><br><span class="line">                                                                  self.downsample_rate)</span><br><span class="line">        <span class="keyword">for</span> attn, ff <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = attn(x, mask=com_mask, prior_encoding=prior_encoding)</span><br><span class="line">            x = ff(x) + x</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2XTransformer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(V2XTransformer, self).__init__()</span><br><span class="line"></span><br><span class="line">        encoder_args = args[<span class="string">&#x27;encoder&#x27;</span>]</span><br><span class="line">        self.encoder = V2XTEncoder(encoder_args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, mask, spatial_correction_matrix</span>):</span></span><br><span class="line">        output = self.encoder(x, mask, spatial_correction_matrix)</span><br><span class="line">        output = output[:, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>关键是脱离了agent2agent,而是vehicle2everything,向异构多模态发展.</p><h3 id="DiscoNet"><a href="#DiscoNet" class="headerlink" title="DiscoNet"></a>DiscoNet</h3><p>主要是利用了蒸馏,教师-学生模型这种理论.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> args.kd_flag == <span class="number">1</span>:</span><br><span class="line">        teacher = TeacherNet(config)</span><br><span class="line">        teacher = nn.DataParallel(teacher)</span><br><span class="line">        teacher = teacher.to(device)</span><br><span class="line">        faf_module = FaFModule(</span><br><span class="line">            model, teacher, config, optimizer, criterion, args.kd_flag</span><br><span class="line">        )</span><br><span class="line">        checkpoint_teacher = torch.load(args.resume_teacher)</span><br><span class="line">        start_epoch_teacher = checkpoint_teacher[<span class="string">&quot;epoch&quot;</span>]</span><br><span class="line">        faf_module.teacher.load_state_dict(checkpoint_teacher[<span class="string">&quot;model_state_dict&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;Load teacher model from &#123;&#125;, at epoch &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                args.resume_teacher, start_epoch_teacher</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        faf_module.teacher.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure><p>先使用tearcherNet拿数据进行训练,然后拿训练后的模型加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherNet</span>(<span class="params">NonIntermediateModelBase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The teacher net for knowledged distillation in DiscoNet.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, config</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(TeacherNet, self).__init__(config, compress_level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, bevs, maps=<span class="literal">None</span>, vis=<span class="literal">None</span></span>):</span></span><br><span class="line">        bevs = bevs.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># (Batch, seq, z, h, w)</span></span><br><span class="line">        <span class="comment"># vis = vis.permute(0, 3, 1, 2)</span></span><br><span class="line">        <span class="keyword">return</span> self.stpn(bevs)</span><br></pre></td></tr></table></figure><p>使用教师模型得到的结果和原本模型得到的结果(一些中间融合层)计算损失,代码中用的KL交叉熵损失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_kd_loss</span>(<span class="params">self, batch_size, data, fused_layer, num_agent, x_5, x_6, x_7</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.kd_flag:</span><br><span class="line">        bev_seq_teacher = data[<span class="string">&quot;bev_seq_teacher&quot;</span>]</span><br><span class="line">        kd_weight = data[<span class="string">&quot;kd_weight&quot;</span>]</span><br><span class="line">        (</span><br><span class="line">            x_8_teacher,</span><br><span class="line">            x_7_teacher,</span><br><span class="line">            x_6_teacher,</span><br><span class="line">            x_5_teacher,</span><br><span class="line">            x_3_teacher,</span><br><span class="line">            x_2_teacher,</span><br><span class="line">        ) = self.teacher(bev_seq_teacher)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># for k, v in self.teacher.named_parameters():</span></span><br><span class="line">        <span class="comment"># if k != &#x27;xxx.weight&#x27; and k != &#x27;xxx.bias&#x27;:</span></span><br><span class="line">        <span class="comment"># print(v.requires_grad)  # should be False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># for k, v in self.model.named_parameters():</span></span><br><span class="line">        <span class="comment"># if k != &#x27;xxx.weight&#x27; and k != &#x27;xxx.bias&#x27;:</span></span><br><span class="line">        <span class="comment"># print(v.requires_grad)  # should be False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># -------- KD loss---------#</span></span><br><span class="line">        kl_loss_mean = nn.KLDivLoss(size_average=<span class="literal">True</span>, reduce=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># target_x8 = x_8_teacher.permute(0, 2, 3, 1).reshape(5 * batch_size * 256 * 256, -1)</span></span><br><span class="line">        <span class="comment"># student_x8 = x_8.permute(0, 2, 3, 1).reshape(5 * batch_size * 256 * 256, -1)</span></span><br><span class="line">        <span class="comment"># kd_loss_x8 = kl_loss_mean(F.log_softmax(student_x8, dim=1), F.softmax(target_x8, dim=1))</span></span><br><span class="line">        <span class="comment"># #</span></span><br><span class="line">        target_x7 = x_7_teacher.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">128</span> * <span class="number">128</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        student_x7 = x_7.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">128</span> * <span class="number">128</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        kd_loss_x7 = kl_loss_mean(</span><br><span class="line">            F.log_softmax(student_x7, dim=<span class="number">1</span>), F.softmax(target_x7, dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        target_x6 = x_6_teacher.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">64</span> * <span class="number">64</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        student_x6 = x_6.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">64</span> * <span class="number">64</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        kd_loss_x6 = kl_loss_mean(</span><br><span class="line">            F.log_softmax(student_x6, dim=<span class="number">1</span>), F.softmax(target_x6, dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># #</span></span><br><span class="line">        target_x5 = x_5_teacher.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">32</span> * <span class="number">32</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        student_x5 = x_5.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">32</span> * <span class="number">32</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        kd_loss_x5 = kl_loss_mean(</span><br><span class="line">            F.log_softmax(student_x5, dim=<span class="number">1</span>), F.softmax(target_x5, dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        target_x3 = x_3_teacher.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">32</span> * <span class="number">32</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        student_x3 = fused_layer.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).reshape(</span><br><span class="line">            num_agent * batch_size * <span class="number">32</span> * <span class="number">32</span>, -<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        kd_loss_fused_layer = kl_loss_mean(</span><br><span class="line">            F.log_softmax(student_x3, dim=<span class="number">1</span>), F.softmax(target_x3, dim=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        kd_loss = kd_weight * (</span><br><span class="line">            kd_loss_x7 + kd_loss_x6 + kd_loss_x5 + kd_loss_fused_layer</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># kd_loss = kd_weight * (kd_loss_x6 + kd_loss_x5 + kd_loss_fused_layer)</span></span><br><span class="line">        <span class="comment"># print(kd_loss)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        kd_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> kd_loss</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>KL损失定义如下</p><p><img data-src="https://s2.loli.net/2024/02/27/CQuUxlwvFV7ceB5.png" alt="image-20240227225503889"></p><h2 id="Comunicaton-Mechanism"><a href="#Comunicaton-Mechanism" class="headerlink" title="Comunicaton Mechanism"></a>Comunicaton Mechanism</h2><p>之前的方法基本都是使用通信范围内固定车辆的所有特征,之后有了自定义的通信机制,对通信的车辆,特征等进行选择.</p><h3 id="who2com-2020"><a href="#who2com-2020" class="headerlink" title="who2com 2020"></a>who2com 2020</h3><p><a href="https://arxiv.org/abs/2003.09575">[2003.09575] Who2com: Collaborative Perception via Learnable Handshake Communication (arxiv.org)</a></p><p><img data-src="https://s2.loli.net/2024/02/29/muRMCOTiKLwl6X9.png" alt="image-20240229143700618"></p><p><img data-src="https://s2.loli.net/2024/02/29/ZheUYj6bvl9T7XP.png" alt="image-20240229143720495"></p><p><strong>Who2com 建立了首个带宽限制下的通信机制</strong>，通过三阶段握手实现。具体来说，<strong>Who2com 使用一般注意力函数计算代理之间的匹配分数，并选择最需要的代理，从而有效减少带宽</strong>。</p><p>定义了一个三阶段的handshake通信机制,分为request,match,connect.</p><p>具体来说，代理首先向邻近的代理广播其请求信息 μ~j~∈ R~m~，代理计算其keys κi∈ R~k~ 与请求信息之间的匹配得分 s~ji~。</p><p>一旦理将其匹配分数返回给降级ego代理,ego代理会进一步选择最佳的 n 个代理与之连接</p><p>在每个步骤中，每个代理 i 可以通过key生成器 G~i~^k^、信息生成器 G~i~^m^、图像编码器 E~i~ 和任务解码器 D~i~ 对信息进行压缩。</p><p>简单来说,对于一个ego代理,首先使用一个request生成器(就是一个网络)得到一个信息.此外其他车也会生成一个key发送给ego代理,然后使用注意力机制计算两者值作为相似度.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # Message generator</span></span><br><span class="line">       self.query_key_net = policy_net4(n_classes=n_classes, in_channels=in_channels, enc_backbone=enc_backbone)</span><br><span class="line">       <span class="keyword">if</span> self.has_query:</span><br><span class="line">           self.query_net = linear(out_size=self.query_size, input_feat_sz=image_size / <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">       self.key_net = linear(out_size=self.key_size, input_feat_sz=image_size / <span class="number">32</span>)</span><br><span class="line">       <span class="keyword">if</span> attention == <span class="string">&#x27;additive&#x27;</span>:</span><br><span class="line">           self.attention_net = AdditiveAttentin()</span><br><span class="line">       <span class="keyword">elif</span> attention == <span class="string">&#x27;general&#x27;</span>:</span><br><span class="line">           self.attention_net = GeneralDotProductAttention(self.query_size, self.key_size)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           self.attention_net = ScaledDotProductAttention(<span class="number">128</span> ** <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\mu_j=G_m^j(\tilde{x}_j;\theta_m)\in\mathbb{R}^m \\s_{ji}=\Phi(\mu_j,\kappa_i),\quad\kappa_i=G_k^i(x_i;\theta_k)\in\mathbb{R}^k \\\text{General: }\Phi=\mu_j^TW_a\kappa_i \\\tilde{\boldsymbol{y}}_j=D^j([\tilde{\boldsymbol{f}}_j;f_{\hat{\imath}}];\boldsymbol{\theta}_d) \\f_{\hat{\imath}}=E^i(x_{\hat{\imath}};\boldsymbol{\theta}_e)\in\mathbb{R}^{d_f\times d_f\times d_c}   \tilde{\boldsymbol{f}}_j=E^j(\tilde{\boldsymbol{x}}_j;\boldsymbol{\theta}_e) \\\tilde{y}_{j}=D^{j}([\tilde{f}_{j};f_{sum}];\theta_{d}),\quad f_{sum}=\sum_{i=1}^{N}\alpha_{j,i}f_{i} \\\hat{i}=\underset{i}{\operatorname*{argmax}}s_{ji}</script><blockquote><p>α~j,i~ is ith element of α~j~ = ρ([s~j1~; …; s~jN~ ]) ∈ R^N^ and ρ is a softmax operation</p></blockquote><p>attention方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaledDotProductAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; Scaled Dot-Product Attention &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, temperature, attn_dropout=<span class="number">0.1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.temperature = temperature</span><br><span class="line">        self.sparsemax = Sparsemax(dim=<span class="number">1</span>)</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, q, k, v, sparse=<span class="literal">True</span></span>):</span></span><br><span class="line">        attn_orig = torch.bmm(k, q.transpose(<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">        attn_orig = attn_orig / self.temperature</span><br><span class="line">        <span class="keyword">if</span> sparse:</span><br><span class="line">            attn_orig = self.sparsemax(attn_orig)  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            attn_orig = self.softmax(attn_orig)  </span><br><span class="line">        attn = torch.unsqueeze(torch.unsqueeze(attn_orig, <span class="number">3</span>), <span class="number">4</span>)  </span><br><span class="line">        output = attn * v  <span class="comment"># (batch,4,channel,size,size)</span></span><br><span class="line">        output = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line">        <span class="keyword">return</span> output, attn_orig.transpose(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">AdditiveAttentin</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># self.dropout = nn.Dropout(attn_dropout)</span></span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        self.sparsemax = Sparsemax(dim=<span class="number">1</span>)</span><br><span class="line">        self.linear_feat = nn.Linear(<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        self.linear_context = nn.Linear(<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        self.linear_out = nn.Linear(<span class="number">128</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, q, k, v, sparse=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="comment"># q (batch,1,128)</span></span><br><span class="line">        <span class="comment"># k (batch,4,128)</span></span><br><span class="line">        <span class="comment"># v (batch,4,channel,size,size)</span></span><br><span class="line">        temp1 = self.linear_feat(k)  <span class="comment"># (batch,4,128)</span></span><br><span class="line">        temp2 = self.linear_context(q)  <span class="comment"># (batch,1,128)</span></span><br><span class="line">        attn_orig = self.linear_out(temp1 + temp2)  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        <span class="keyword">if</span> sparse:</span><br><span class="line">            attn_orig = self.sparsemax(attn_orig)  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            attn_orig = self.softmax(attn_orig)  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        attn = torch.unsqueeze(torch.unsqueeze(attn_orig, <span class="number">3</span>), <span class="number">4</span>)  <span class="comment"># (batch,4,1,1,1)</span></span><br><span class="line">        output = attn * v</span><br><span class="line">        output = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line">        <span class="keyword">return</span> output, attn_orig.transpose(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneralDotProductAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; Scaled Dot-Product Attention &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, query_size, key_size, attn_dropout=<span class="number">0.1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.sparsemax = Sparsemax(dim=<span class="number">1</span>)</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        self.linear = nn.Linear(query_size, key_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Msg size: &#x27;</span>,query_size,<span class="string">&#x27;  Key size: &#x27;</span>, key_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, q, k, v, sparse=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="comment"># q (batch,1,128)</span></span><br><span class="line">        <span class="comment"># k (batch,4,128)</span></span><br><span class="line">        <span class="comment"># v (batch,4,channel*size*size)</span></span><br><span class="line">        query = self.linear(q)  <span class="comment"># (batch,1,key_size)</span></span><br><span class="line">        attn_orig = torch.bmm(k, query.transpose(<span class="number">2</span>, <span class="number">1</span>))  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        <span class="keyword">if</span> sparse:</span><br><span class="line">            attn_orig = self.sparsemax(attn_orig)  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            attn_orig = self.softmax(attn_orig)  <span class="comment"># (batch,4,1)</span></span><br><span class="line">        attn = torch.unsqueeze(torch.unsqueeze(attn_orig, <span class="number">3</span>), <span class="number">4</span>)  <span class="comment"># (batch,4,1,1,1)</span></span><br><span class="line">        output = attn * v  <span class="comment"># (batch,4,channel,size,size)</span></span><br><span class="line">        output = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line">        <span class="keyword">return</span> output, attn_orig.transpose(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="when2comm-2020"><a href="#when2comm-2020" class="headerlink" title="when2comm 2020"></a>when2comm 2020</h3><p>who2comm的同作者.</p><p>在 Who2com 的基础上，When2com引入了缩放一般注意力来决定何时与他人交流。这样，自我代理只有在信息不足时才会与他人交流，从而有效地节省了协作资源。</p><p><img data-src="https://s2.loli.net/2024/02/29/COiPgxUSrsYvqQL.png" alt="image-20240229162328653"></p><p>when2comm的代码就要复杂的多,它构建了很多块.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KmGenerator</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, out_size=<span class="number">128</span>, input_feat_sz=<span class="number">32.0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(KmGenerator, self).__init__()</span><br><span class="line">        feat_map_sz = input_feat_sz // <span class="number">4</span></span><br><span class="line">        self.n_feat = <span class="built_in">int</span>(<span class="number">256</span> * feat_map_sz * feat_map_sz)</span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">            nn.Linear(self.n_feat, <span class="number">256</span>),  <span class="comment">#</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">256</span>, <span class="number">128</span>),  <span class="comment">#</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, out_size),</span><br><span class="line">        )  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, features_map</span>):</span></span><br><span class="line">        outputs = self.fc(features_map.view(-<span class="number">1</span>, self.n_feat))</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolicyNet4</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_channels=<span class="number">13</span>, input_feat_sz=<span class="number">32</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(PolicyNet4, self).__init__()</span><br><span class="line">        feat_map_sz = input_feat_sz // <span class="number">4</span></span><br><span class="line">        self.n_feat = <span class="built_in">int</span>(<span class="number">256</span> * feat_map_sz * feat_map_sz)</span><br><span class="line">        self.lidar_encoder = LidarEncoder(height_feat_size=in_channels)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Encoder</span></span><br><span class="line">        <span class="comment"># down 1</span></span><br><span class="line">        self.conv1 = Conv2DBatchNormRelu(<span class="number">512</span>, <span class="number">512</span>, k_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.conv2 = Conv2DBatchNormRelu(<span class="number">512</span>, <span class="number">256</span>, k_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.conv3 = Conv2DBatchNormRelu(<span class="number">256</span>, <span class="number">256</span>, k_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># down 2</span></span><br><span class="line">        self.conv4 = Conv2DBatchNormRelu(<span class="number">256</span>, <span class="number">256</span>, k_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.conv5 = Conv2DBatchNormRelu(<span class="number">256</span>, <span class="number">256</span>, k_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, features_map</span>):</span></span><br><span class="line">        _, _, _, _, outputs1 = self.lidar_encoder(features_map)</span><br><span class="line">        outputs = self.conv1(outputs1)</span><br><span class="line">        outputs = self.conv2(outputs)</span><br><span class="line">        outputs = self.conv3(outputs)</span><br><span class="line">        outputs = self.conv4(outputs)</span><br><span class="line">        outputs = self.conv5(outputs)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LidarEncoder</span>(<span class="params">Backbone</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The encoder class. Encodes input features in forward pass.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, height_feat_size=<span class="number">13</span>, compress_level=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(height_feat_size, compress_level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().encode(x)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LidarDecoder</span>(<span class="params">Backbone</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The decoder class. Decodes input features in forward pass.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, height_feat_size=<span class="number">13</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(height_feat_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, x_1, x_2, x_3, x_4, batch, kd_flag=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().decode(x, x_1, x_2, x_3, x_4, batch, kd_flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先使用encode进行降采样,选择某一层采样后的输出,利用采样后的输出计算q,k,v使用注意力机制融合.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.key_net = KmGenerator(</span><br><span class="line">    out_size=self.key_size, input_feat_sz=image_size / <span class="number">32</span></span><br><span class="line">)</span><br><span class="line">self.attention_net = MIMOGeneralDotProductAttention(</span><br><span class="line">    self.query_size, self.key_size, self.warp_flag</span><br><span class="line">)</span><br><span class="line"><span class="comment"># # Message generator</span></span><br><span class="line">self.query_key_net = PolicyNet4(in_channels=in_channels)</span><br><span class="line"><span class="keyword">if</span> self.has_query:</span><br><span class="line">    self.query_net = KmGenerator(</span><br><span class="line">        out_size=self.query_size, input_feat_sz=image_size / <span class="number">32</span></span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用query_key_net生成特征,再利用key_net生成key,query_net生成query,使用attention_net利用注意力机制进行融合.val_mat就是采样后的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key_mat = torch.cat(<span class="built_in">tuple</span>(key_list), <span class="number">1</span>)</span><br><span class="line">query_mat = torch.cat(<span class="built_in">tuple</span>(query_list), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>用的就是点积注意力,然后使用decoder回去.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># hand-shake</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MIMOGeneralDotProductAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Scaled Dot-Product Attention&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, query_size, key_size, warp_flag, attn_dropout=<span class="number">0.1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.sparsemax = Sparsemax(dim=<span class="number">1</span>)</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        self.linear = nn.Linear(query_size, key_size)</span><br><span class="line">        self.warp_flag = warp_flag</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Msg size: &quot;</span>, query_size, <span class="string">&quot;  Key size: &quot;</span>, key_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, qu, k, v, sparse=<span class="literal">True</span></span>):</span></span><br><span class="line">      </span><br><span class="line">        query = self.linear(qu)  <span class="comment"># (batch,5,key_size)</span></span><br><span class="line">        attn_orig = torch.bmm(</span><br><span class="line">            k, query.transpose(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        )  </span><br><span class="line">        attn_orig_softmax = self.softmax(attn_orig)  <span class="comment"># (batch,5,5)</span></span><br><span class="line"></span><br><span class="line">        attn_shape = attn_orig_softmax.shape</span><br><span class="line">        bats, key_num, query_num = attn_shape[<span class="number">0</span>], attn_shape[<span class="number">1</span>], attn_shape[<span class="number">2</span>]</span><br><span class="line">        attn_orig_softmax_exp = attn_orig_softmax.view(</span><br><span class="line">            bats, key_num, query_num, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.warp_flag == <span class="number">1</span>:</span><br><span class="line">            v_exp = v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v_exp = torch.unsqueeze(v, <span class="number">2</span>)</span><br><span class="line">            v_exp = v_exp.expand(-<span class="number">1</span>, -<span class="number">1</span>, query_num, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        output = attn_orig_softmax_exp * v_exp  <span class="comment"># (batch,5,channel,size,size)</span></span><br><span class="line">        output_sum = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output_sum, attn_orig_softmax</span><br></pre></td></tr></table></figure><p>训练的时候基本就拿这些特征给分类和回归的head做输出了.但是inference的时候设置了多种输出.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> inference == <span class="string">&#x27;softmax&#x27;</span>:</span><br><span class="line">              action = torch.argmax(prob_action, dim=<span class="number">2</span>)</span><br><span class="line">              num_connect = <span class="number">4</span></span><br><span class="line">              <span class="keyword">return</span> pred, prob_action, action, num_connect</span><br><span class="line">          <span class="keyword">elif</span> inference == <span class="string">&#x27;argmax_test&#x27;</span>:</span><br><span class="line">              action = torch.argmax(prob_action, dim=<span class="number">2</span>)</span><br><span class="line">              feat_argmax, num_connect = self.argmax_select(feat_map1, feat_map2, feat_map3, feat_map4, feat_map5,</span><br><span class="line">                                                            action, batch_size)</span><br><span class="line">              featmaps_argmax = feat_argmax.detach()</span><br><span class="line">              pred_argmax = self.decoder(featmaps_argmax)</span><br><span class="line">              <span class="keyword">return</span> pred_argmax, prob_action, action, num_connect</span><br><span class="line">          <span class="keyword">elif</span> inference == <span class="string">&#x27;activated&#x27;</span>:</span><br><span class="line">              feat_act, action, num_connect = self.activated_select(vals, prob_action)</span><br><span class="line">              featmaps_act = feat_act.detach()</span><br><span class="line">              pred_act = self.decoder(featmaps_act)</span><br><span class="line">              <span class="keyword">return</span> pred_act, prob_action, action, num_connect</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Incorrect inference mode&#x27;</span>)</span><br></pre></td></tr></table></figure><p>argmax_select和activated分别如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">argmax_select</span>(<span class="params">self, val_mat, prob_action</span>):</span></span><br><span class="line">        <span class="comment"># v(batch, query_num, channel, size, size)</span></span><br><span class="line">        cls_num = prob_action.shape[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#  进行one hot编码,</span></span><br><span class="line">        coef_argmax = F.one_hot(prob_action.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>],  num_classes=cls_num).<span class="built_in">type</span>(torch.cuda.FloatTensor)</span><br><span class="line">        coef_argmax = coef_argmax.transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        attn_shape = coef_argmax.shape</span><br><span class="line">        bats, key_num, query_num = attn_shape[<span class="number">0</span>], attn_shape[<span class="number">1</span>], attn_shape[<span class="number">2</span>]</span><br><span class="line">        coef_argmax_exp = coef_argmax.view(bats, key_num, query_num, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        v_exp = torch.unsqueeze(val_mat, <span class="number">2</span>)</span><br><span class="line">        v_exp = v_exp.expand(-<span class="number">1</span>, -<span class="number">1</span>, query_num, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        output = coef_argmax_exp * v_exp  <span class="comment"># (batch,4,channel,size,size)</span></span><br><span class="line">        feat_argmax = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute connect</span></span><br><span class="line">        count_coef = copy.deepcopy(coef_argmax)</span><br><span class="line">        ind = np.diag_indices(self.agent_num)</span><br><span class="line">        count_coef[:, ind[<span class="number">0</span>], ind[<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">        num_connect = torch.nonzero(count_coef).shape[<span class="number">0</span>] / (self.agent_num * count_coef.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> feat_argmax, coef_argmax, num_connect</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">activated_select</span>(<span class="params">self, val_mat, prob_action, thres=<span class="number">0.2</span></span>):</span></span><br><span class="line"></span><br><span class="line">        coef_act = torch.mul(prob_action, (prob_action &gt; thres).<span class="built_in">float</span>())</span><br><span class="line">        attn_shape = coef_act.shape</span><br><span class="line">        bats, key_num, query_num = attn_shape[<span class="number">0</span>], attn_shape[<span class="number">1</span>], attn_shape[<span class="number">2</span>]</span><br><span class="line">        coef_act_exp = coef_act.view(bats, key_num, query_num, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        v_exp = torch.unsqueeze(val_mat, <span class="number">2</span>)</span><br><span class="line">        v_exp = v_exp.expand(-<span class="number">1</span>, -<span class="number">1</span>, query_num, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        output = coef_act_exp * v_exp  <span class="comment"># (batch,4,channel,size,size)</span></span><br><span class="line">        feat_act = output.<span class="built_in">sum</span>(<span class="number">1</span>)  <span class="comment"># (batch,1,channel,size,size)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute connect</span></span><br><span class="line">        count_coef = coef_act.clone()</span><br><span class="line">        ind = np.diag_indices(self.agent_num)</span><br><span class="line">        count_coef[:, ind[<span class="number">0</span>], ind[<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">        num_connect = torch.nonzero(count_coef).shape[<span class="number">0</span>] / (self.agent_num * count_coef.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> feat_act, coef_act, num_connect\</span><br></pre></td></tr></table></figure><h3 id="where2comm-2022"><a href="#where2comm-2022" class="headerlink" title="where2comm 2022"></a>where2comm 2022</h3><p><img data-src="https://s2.loli.net/2024/02/28/5jYTmRyw2iIEQeb.png" alt="image-20240228210811764"></p><p><img data-src="https://s2.loli.net/2024/02/28/Cj1SE42UmL9IWYR.png" alt="image-20240228170628090"></p><p>其中 where2comm 包括observation encoder、spatial confidence generator、the spatial confidence-aware communication module、the spatial confidence-aware message fusion和detection decoder.</p><p>在五个模块中，<strong>spatial confidence generator</strong>可生成空间置信度图,基于该空间置信度图，<strong>空间置信度感知通信</strong>(spatial confidence-aware communication)可生成紧凑的信息和稀疏的通信图，以节省通信带宽.<strong>spatial confidence-aware message fusion</strong> module利用信息丰富的空间置信度先验来实现更好的聚合.</p><p>我们使用检测解码器结构来生成检测置信度图。给定第 k 轮通信的特征图 F (k) i，相应的空间置信度图为</p><script type="math/tex; mode=display">\mathbf{C}_i^{(k)}=\Phi_\text{generator}(\mathcal{F}_i^{(k)})\in[0,1]^{H\times W}</script><p>为了在不影响感知的情况下减少通信带宽，我们利用空间置信度图来选择特征图中信息量最大的空间区域（在哪里通信），并决定最有利的合作对象（谁来通信）。</p><p>这个communication包括message packing。message packing决定了要发送的信息中应包含哪些信息。包括：i) 一张request图，表明代理需要了解哪些空间区域的更多信息；ii) 一张空间稀疏但感知关键的特征图。</p><h3 id="what2comm-2023"><a href="#what2comm-2023" class="headerlink" title="what2comm 2023"></a>what2comm 2023</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>多智能体协同感知作为驾驶场景的新兴应用受到越来越多的关注。尽管以前的方法取得了进步，但由于<strong>冗余的通信模式</strong>和<strong>脆弱的协作过程</strong>，挑战仍然存在。</p><p>为了解决这些问题，我们提出了What2comm，一个<strong>端到端协作感知框架，以实现感知性能和通信带宽之间的权衡</strong>。我们的新奇性在于三个方面</p><p>首先，我们设计了一种基于<strong>特征解耦的高效通信机制</strong>，在异构代理之间传输排他的和共同的特征映射，以提供感知上的整体消息。</p><p>其次，<strong>引入了一个时空协作模块来整合来自协作者的互补信息和时间自我线索</strong>，从而形成一个<strong>针对传输延迟和定位误差</strong>的鲁棒协作过程。</p><p>最后，我们提出了一种<strong>公共感知的融合策略</strong>来细化具有信息共同特征的最终表示。</p><p>在真实世界和模拟场景中进行的综合实验证明了What2通信的有效性。</p><p>DAIR-V2X:第一个用于支持协作感知的大规模真实世界数据集，它包含了标记的车辆和基础设施的激光雷达点云。它包括100个自动驾驶场景和18000个数据样本，其中训练/验证/测试集以5：2：3的比例被分割。</p><p>V2XSet </p><p>OPV2V</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>元数据编码和特征投影、基于解耦的通信机制、时空协作模块、common感知融合策略和检测解码器。</p><p> This framework comprises five parts: metadata encoding and feature projection, decoupling-based communication mechanism, spatio-temporal collaboration module, common-aware</p><p>fusion strategy, and detection decoders</p><blockquote><p><strong>特征解耦</strong>前提是学习特征，<strong>解耦是分离出任务相关特征和无关特征</strong>，以分类为例，解耦的是类别特征和无关的背景及样式等特征。特征解耦一般利用信息熵或者变换空间后的数学特性来完成。</p><p>只要两个对象之间存在一方依赖一方的关系，那么我们就称这两个对象之间存在耦合。</p><p>作者：大虎甜面酱<br>链接：<a href="https://www.jianshu.com/p/67dc5f5e05da">https://www.jianshu.com/p/67dc5f5e05da</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p><img data-src="https://s2.loli.net/2024/02/28/Jr9OnUyvfEkcxtD.png" alt="image-20240228101157638"></p><p><img data-src="https://s2.loli.net/2024/02/28/WFc8MJjfDOny1Zt.png" alt="image-20240228165036544"></p><p>创新点:feature decoupling,latency-aware 使用过去的特征.</p><h3 id="how2comm-2023"><a href="#how2comm-2023" class="headerlink" title="how2comm 2023"></a>how2comm 2023</h3><p>系what2comm同作者</p><h2 id="Spatio-Temporal-Domain-Awareness-for-Multi-Agent-Collaborative-Perception"><a href="#Spatio-Temporal-Domain-Awareness-for-Multi-Agent-Collaborative-Perception" class="headerlink" title="Spatio-Temporal Domain Awareness for Multi-Agent Collaborative Perception"></a>Spatio-Temporal Domain Awareness for Multi-Agent Collaborative Perception</h2><p>在接收到自我代理播放的元数据（如姿势和外部特征）后，合作者将其本地激光雷达点云投射到自我代理的坐标系中。同样，<strong>自我代理之前的点云帧也会同步到当前帧</strong>。</p><p>给定第 k 个代理在时间戳 t 处的点云 X (t) k，提取的特征为 F (t) k =f enc (X (t) k )∈R C ×H ×W ，其中 f enc (-) 是所有代理共享的 PointPillar编码器，C、H、W 分别代表通道、高度和宽度。</p><h3 id="Context-aware-Information-Aggregation"><a href="#Context-aware-Information-Aggregation" class="headerlink" title="Context-aware Information Aggregation"></a>Context-aware Information Aggregation</h3><p>解决latency的问题</p><p><img data-src="https://s2.loli.net/2024/03/04/4Qqgwk9uGciJBYj.png" alt="image-20240304214842491"></p><p>遗憾的是，目前的多机器人协作总是专注于探索当前帧，而忽略了之前帧的上下文线索。由于点云的稀疏性和不足，单帧解决方案无法有效检测快速移动的物体（如周围的车辆）。为此，我们提出了一个情境感知信息聚合（CIA）组件，用于捕捉自我代理<strong>之前帧的时空表征，以融合有价值的语义</strong>。</p><p>选择性信息过滤。这一阶段的目的是通过过滤目标 F (t) i ∈R C ×H ×W 中的冗余特征，并从先前的 F^(t-τ)^~i~ ∈R τ ×C×H×W 中提炼出有意义的特征，从而提取精炼信息，其中 τ 是时间偏移。</p><p>具体来说，首先利用通道平均和最大池化运算 Ψ a/m (-) 聚合丰富的通道语义</p><script type="math/tex; mode=display">\mathcal{U}=\sigma\cdot\aleph(\mathcal{M}_{a}^{(t)}\|\mathcal{M}_{m}^{(t)}+\mathcal{M}_{a}^{(\tau)}\|\mathcal{M}_{m}^{(\tau)})\in\mathbb{R}^{H\times W}</script><p>将过去帧相加做个max与avg池化然后concat起来,当前的帧也同样处理,然后加起来做个conv.将这些细化的特征图结合起来，就能得到一个精心选择的空间选择图</p><script type="math/tex; mode=display">H_i^{(\tau)}=(1-\mathcal{U})\odot tanh(F_i^{(t)})+\mathcal{U}\odot F_i^{(t-\tau)}</script><h4 id="Spatio-temporal-Feature-Integration"><a href="#Spatio-temporal-Feature-Integration" class="headerlink" title="Spatio-temporal Feature Integration."></a>Spatio-temporal Feature Integration.</h4><p>为了整合historical prototype以提高当前表征的感知能力，我们引入了金字塔 LSTM来学习帧间特征 F (t) i ∥H (τ ) i 的上下文依赖关系。</p><p>在实践中，多尺度空间特征是通过在不同尺度之间连续进行两次二维卷积，然后进行批量归一化和 ReLU 激活来提取的。为了实现多层次空间语义融合，<strong>降低采样率的特征会通过横向连接逐步插值到提高采样率的层</strong>。</p><h3 id="Confidence-aware-Cross-agent-Collaboration"><a href="#Confidence-aware-Cross-agent-Collaboration" class="headerlink" title="Confidence-aware Cross-agent Collaboration"></a>Confidence-aware Cross-agent Collaboration</h3><p>跨代理协作的目标是通过聚合协作者共享特征的互补语义来增强自我代理的视觉表征。</p><p>现有研究提出了基于注意力的per-location特征融合方法，但这种方法容易受到定位误差的影响，而且忽略了点云的稀疏性。为了解决这些问题，我们采用了a <strong>novel Confidenceaware Cross-agent Collaboration (CCC) component</strong></p><p><img data-src="https://s2.loli.net/2024/03/04/4zjauARgEMekoSt.png" alt="image-20240304221451619"></p><p>CCC 组件将特征和置信度图编码为三个尺度，<strong>并在每个尺度上进行特征融合</strong>。</p><p>F^(t)^~k,l~ 和 S^(t)^~k,l~ 表示第 l 个尺度的特征图和置信度图.</p><p>为了预测包含有意义物体信息的空间位置，我们将所有置信度图的元素求和.</p><p>由于置信度图反映的是空间临界水平，S^(t)^~sum,l~ 显示的是探测范围内目标的潜在位置，称为参考点。</p><p>因此，我们采用基于阈值的选择函数 fsel(-) 来提取参考点 S^(t)^~re,l~。这种设计可以积极引导后续的融合网络集中在重要的空间区域。</p><p><strong>Deformable Cross-attention Module</strong> 我们在参考点提取自我代理的特征 F^(t)^ ~i,l~ 作为初始查询嵌入，并<strong>应用线性层将参考点的位置编码为位置嵌入</strong></p><p>为了解决特征图的不对齐问题，并获得更稳健的表征以抵御定位误差，可变形交叉注意模块（DCM）通过可变形交叉注意层聚合来自采样关键点的信息</p><script type="math/tex; mode=display">\mathrm{DCM}(q)=\sum_{a=1}^{\Lambda}W_{a}[\sum_{k=1}^{K}\sum_{m=1}^{M}\phi(W_{b}F_{i,l}^{(t)}(q))F_{k,l}^{(t)}(q+\Delta q_{m})],</script><p>Wa/b 是可学习权重，φ(-) 是软最大函数。最后，我们得出一个填充操作，根据初始位置 q 将 DCM(q) 填充到自我代理的特征 F (t) i,l 中，并输出 Z(t) i,l</p><p>三个尺度下的输出增强特征被编码成相同的大小，并在通道维度上进行串联。我们利用 1 × 1 卷积层融合三个尺度的信息，得到最终的协作特征 Z^(t)^~i~∈ R^C×H×W^</p><h3 id="Importance-aware-Adaptive-Fusion"><a href="#Importance-aware-Adaptive-Fusion" class="headerlink" title="Importance-aware Adaptive Fusion"></a>Importance-aware Adaptive Fusion</h3><p>尽管之前的研究通过汇总协作信息的自我特征取得了令人印象深刻的性能，但它们可能会受到异步测量的协作者带来的噪声干扰。A promising solution is to <strong>consider purely ego-centered characteristics</strong>, which contain the natural perception advantages of the target agent.</p><p>我们提出了一种重要性感知自适应融合（IAF）组件，根据多源特征的互补性对其进行融合。</p><script type="math/tex; mode=display">\mathcal{H}_{i}^{(t)},\mathcal{Z}_{i}^{(t)},\mathcal{S}_{i}^{(t)}=\sigma\cdot\Psi_{m}(f_{gen}(H_{i}^{(t)},Z_{i}^{(t)},F_{i}^{(t)}))</script><script type="math/tex; mode=display">\mathcal{E}_{\mathcal{H}}^{(t)}=\phi(\mathcal{H}_{i}^{(t)})=\frac{exp(\mathcal{H}_{i}^{(t)})}{exp(\mathcal{H}_{i}^{(t)})+exp(\mathcal{Z}_{i}^{(t)})+exp(\mathcal{S}_{i}^{(t)})}.$$​$$\mathcal{F}_i^{(t)}=\mathcal{E}_{\mathcal{H}}^{(t)}\odot H_i^{(t)}+\mathcal{E}_{\mathcal{Z}}^{(t)}\odot Z_i^{(t)}+\mathcal{E}_{\mathcal{S}}^{(t)}\odot F_i^{(t)}.</script><h3 id="FPV-RCNN-2021"><a href="#FPV-RCNN-2021" class="headerlink" title="FPV-RCNN 2021"></a>FPV-RCNN 2021</h3><p><a href="https://arxiv.org/abs/2109.11615">[2109.11615] Keypoints-Based Deep Feature Fusion for Cooperative Vehicle Detection of Autonomous Driving (arxiv.org)</a></p><h3 id="Collaborative-3d-object-detection-for-automatic-vehicle-systems-via-learnable-communications-2022"><a href="#Collaborative-3d-object-detection-for-automatic-vehicle-systems-via-learnable-communications-2022" class="headerlink" title="Collaborative 3d object detection for automatic vehicle systems via learnable communications 2022"></a>Collaborative 3d object detection for automatic vehicle systems via learnable communications 2022</h3><p><a href="https://arxiv.org/pdf/2205.11849.pdf">2205.11849.pdf (arxiv.org)</a></p><p><img data-src="https://s2.loli.net/2024/02/29/RANi2pLbKPZslu5.png" alt="image-20240229172548113"></p><p><img data-src="https://s2.loli.net/2024/02/29/RP1nMsk5h2B4pzj.png" alt="image-20240229172522190"></p><h2 id="Customized-Loss"><a href="#Customized-Loss" class="headerlink" title="Customized Loss"></a>Customized Loss</h2><p>除了分类和回归损失之外，虽然 V2V 通信为自我车辆提供了相对丰富的感知视野，但<strong>共享信息的冗余性</strong>和<strong>不确定性</strong>带来了新的挑战。</p><p>在协作场景中，邻居代理提供的类似信息对自我车辆来说是冗余的。为了有效利用协作信息，Luo 等人提出了一种互补增强和冗余最小化的协作网络（CRCNet）。具体来说，CRCNet 有两个模块来引导网络。在互补性增强模块中，CRCNet 利用对比学习来增强信息增益。在冗余最小化模块中，CRCNet 利用互信息鼓励融合特征对中的依赖性。在上述模块的指导下，CRCNet 能够在融合特征时从相邻代理中选择互补信息。</p><script type="math/tex; mode=display">P_{i}=P_{i}+W_{k\rightarrow i}^{C}\odot P_{k\rightarrow i}\odot W_{k\rightarrow i}^{s} \\\delta_{k}=\sum_{n}L_{cls}\big(p_{j}^{n}(P_{i}),y_{j}^{n}\big)-\sum_{n}L_{cls}\big(p_{j}^{n}(P_{i}+T_{i}^{k}),y_{j}^{n}\big) \\L_{eff}=\sum_k\min(\delta_k-\delta_{thd},0)^2 \\I[T_i^k;T_i^l]=\sum\limits_{x\in T_i^k}\sum\limits_{y\in T_i^l}p(x,y)\log\frac{p(x,y)}{p(x)p(y)} \\\begin{aligned}I[T_{i}^{k};T_{i}^{l}]=& \mathbb{E}_{p(T_{i}^{k};T_{i}^{l})}[\logq_{\theta_{2}}(T_{i}^{l}/T_{i}^{k})]  \\&-\mathbb{E}_{p(T_{i}^{k})}\mathbb{E}_{p(T_{i}^{l})}[\logq_{\theta_{2}}(T_{i}^{l}/T_{i}^{k})],\end{aligned} \\L_{red}=\sum_k\sum_l[\logq_{\theta_2}(T_i^l/T_i^k)-\logq_{\theta_2}(T_i^l/T_n^k)]\\min_{Q}L_{KL}=KL(p(T_i^k/T_i^l)||q_{\theta_2}(T_i^k/T_i^l) \\L=L_{cls}+L_{loc}+L_{red}+L_{eff}\\</script><p><img data-src="https://s2.loli.net/2024/02/29/a5NIGnJloEwK4Hp.png" alt="image-20240229180846509"></p><p>除了冗余信息，协作信息还包含感知上的不确定性，这反映了感知上的不准确或传感器噪声。Su 等人首先探讨了协作感知中的不确定性。具体来说，他们设计了一种量身定制的移动块引导方法来估计模型和数据的不确定性，并设计了一个良好的损失函数来直接捕捉数据的不确定性。实验表明，在不同的协作方案中，不确定性估计可以减少不确定性并提高准确性。</p><h3 id="FeaCo-2023-MM"><a href="#FeaCo-2023-MM" class="headerlink" title="FeaCo 2023 MM"></a>FeaCo 2023 MM</h3><p><img data-src="https://github.com/jmgu0212/FeaCo/raw/main/images/Overview.png" alt="FeaCo_Overview"></p><p>主要看其中的融合模块</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240401134935564.png" alt="image-20240401134935564"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码还是很重要的,虽然发现有些代码库不怎么样.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>transformer and attention(二):various attention modules</title>
    <link href="https://www.sekyoro.top/2024/01/23/transformer-and-attention-%E4%BA%8C-various-attention-modules/"/>
    <id>https://www.sekyoro.top/2024/01/23/transformer-and-attention-%E4%BA%8C-various-attention-modules/</id>
    <published>2024-01-23T12:18:17.000Z</published>
    <updated>2024-01-24T06:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>介绍现在的各种各样(空间上,通道上)的attention模块以及相关代码.<br><span id="more"></span></p><h2 id="Squeeze-and-Excitation-Networks-2018"><a href="#Squeeze-and-Excitation-Networks-2018" class="headerlink" title="Squeeze-and-Excitation Networks 2018"></a>Squeeze-and-Excitation Networks 2018</h2><p><img data-src="https://s2.loli.net/2024/01/10/Lq6VRkQuoUpYSmc.png" alt="image-20240110094833740"></p><blockquote><ol><li>SENet通过学习channel之间的相关性，筛选出了针对通道的注意力，稍微增加了一点计算量，但是效果提升较明显</li><li>Squeeze-and-Excitation(SE) block是一个子结构，可以有效地嵌到其他分类或检测模型中。</li><li>SENet的核心思想在于通过网络根据loss去学习feature map的特征权重来使模型达到更好的结果</li><li>SE模块本质上是一种attention机制</li></ol></blockquote><p><img data-src="https://s2.loli.net/2024/01/10/ZrhKeEALunoDxpF.png" alt="image-20240110095007870"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># implement SEAttention</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SEAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel=<span class="number">512</span>, reduction=<span class="number">16</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SEAttention, self).__init__()</span><br><span class="line">        self.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">            nn.Linear(channel, channel // reduction),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(channel // reduction, channel),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">                init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">                init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                init.normal_(m.weight, std=<span class="number">0.001</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        b, c, _, _ = x.size()</span><br><span class="line">        y = self.avg_pool(x).view(b, c)</span><br><span class="line">        y = self.fc(y).view(b, c, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x * y.expand_as(x)</span><br></pre></td></tr></table></figure><h2 id="Bottlenet-attention-Module-BAM-2018"><a href="#Bottlenet-attention-Module-BAM-2018" class="headerlink" title="Bottlenet attention Module (BAM) 2018"></a>Bottlenet attention Module (BAM) 2018</h2><p><img data-src="https://s2.loli.net/2024/01/23/7XzeCTDLwFEuiSM.png" alt="image-20240123200825093"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> init</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flatten</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>.view(<span class="built_in">input</span>.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,channel,reduction:<span class="built_in">int</span>=<span class="number">16</span>,num_layer:<span class="built_in">int</span>=<span class="number">3</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        gate_channels = [channel]</span><br><span class="line">        gate_channels += [channel // reduction] * num_layer</span><br><span class="line">        gate_channels += [channel]</span><br><span class="line"></span><br><span class="line">        self.ca = nn.Sequential()</span><br><span class="line">        self.ca.add_module(<span class="string">&#x27;flatten&#x27;</span>,Flatten())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_layer):</span><br><span class="line">            self.ca.add_module(<span class="string">&#x27;fc&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i),nn.Linear(gate_channels[i],gate_channels[i+<span class="number">1</span>]))</span><br><span class="line">            self.ca.add_module(<span class="string">&#x27;bn%d&#x27;</span> % i, nn.BatchNorm1d(gate_channels[i+<span class="number">1</span>]))</span><br><span class="line">            self.ca.add_module(<span class="string">&#x27;relu&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i),nn.ReLU())</span><br><span class="line"></span><br><span class="line">        self.ca.add_module(<span class="string">&#x27;last_fc&#x27;</span>,nn.Linear(gate_channels[-<span class="number">2</span>],gate_channels[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        res = self.avg_pool(x)</span><br><span class="line">        res = self.ca(res)</span><br><span class="line">        <span class="keyword">return</span> res.unsqueeze(-<span class="number">1</span>).unsqueeze(-<span class="number">1</span>).expand_as(x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpatialAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,channel,reduction=<span class="number">16</span>,num_layers=<span class="number">3</span>,dia_val=<span class="number">2</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.sa = nn.Sequential()</span><br><span class="line">        self.sa.add_module(<span class="string">&#x27;conv_reduce1&#x27;</span>,nn.Conv2d(in_channels=channel,out_channels=channel//reduction,kernel_size=<span class="number">1</span>))</span><br><span class="line">        self.sa.add_module(<span class="string">&#x27;bn_reduce1&#x27;</span>,nn.BatchNorm2d(channel//reduction))</span><br><span class="line">        self.sa.add_module(<span class="string">&#x27;relu_reduce1&#x27;</span>,nn.ReLU())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_layers):</span><br><span class="line">            self.sa.add_module(<span class="string">&#x27;conv_%d&#x27;</span> % i,nn.Conv2d(in_channels=channel//reduction,out_channels=channel//reduction,kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>,dilation=dia_val))</span><br><span class="line">            self.sa.add_module(<span class="string">&#x27;bn_%d&#x27;</span> % i,nn.BatchNorm2d(channel//reduction))</span><br><span class="line">            self.sa.add_module(<span class="string">&#x27;relu_%d&#x27;</span> % i,nn.ReLU())</span><br><span class="line">        self.sa.add_module(<span class="string">&#x27;conv_last&#x27;</span>,nn.Conv2d(in_channels=channel//reduction,out_channels=channel,kernel_size=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        res = self.sa(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.expand_as(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BAMBlock</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,channel:<span class="built_in">int</span>=<span class="number">512</span>,reduction:<span class="built_in">int</span>=<span class="number">16</span>,dia_val:<span class="built_in">int</span>=<span class="number">2</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.ca = ChannelAttention(channel=channel,reduction=reduction)</span><br><span class="line">        self.sa = SpatialAttention(channel=channel,reduction=reduction,dia_val=dia_val)</span><br><span class="line">        self.sigmoid = nn.Sigmoid()</span><br><span class="line">        self.init_weights()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        b, c, _, _ = x.size()</span><br><span class="line">        sa_out = self.sa(x)</span><br><span class="line">        ca_out = self.ca(x)</span><br><span class="line">        weight = self.sigmoid(sa_out + ca_out)</span><br><span class="line">        out = (<span class="number">1</span> + weight) * x</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># initial weights for the model</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_in&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m,nn.BatchNorm2d):</span><br><span class="line">                init.constant_(m.weight,<span class="number">1</span>)</span><br><span class="line">                init.constant_(m.bias,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m,nn.Linear):</span><br><span class="line">                init.normal_(m.weight,std=<span class="number">0.001</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    init.constant_(m.bias,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/01/23/3PEUjp2y9aMLI8u.png" alt="image-20240123200842336"></p><h2 id="DANet-Dual-Attention-Network-2018"><a href="#DANet-Dual-Attention-Network-2018" class="headerlink" title="DANet: Dual Attention Network 2018"></a>DANet: Dual Attention Network 2018</h2><p><img data-src="https://s2.loli.net/2024/01/23/R9GMVDrs23ca7Qp.png" alt="image-20240123210612879"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionAttentionModule</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,d_model=<span class="number">512</span>,kernel_size=<span class="number">3</span>,H=<span class="number">7</span>,W=<span class="number">7</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.cnn=nn.Conv2d(d_model,d_model,kernel_size=kernel_size,padding=(kernel_size-<span class="number">1</span>)//<span class="number">2</span>)</span><br><span class="line">        self.pa=ScaledDotProductAttention(d_model,d_k=d_model,d_v=d_model,h=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        bs,c,h,w=x.shape</span><br><span class="line">        y=self.cnn(x)</span><br><span class="line">        y=y.view(bs,c,-<span class="number">1</span>).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#bs,h*w,c</span></span><br><span class="line">        y=self.pa(y,y,y) <span class="comment">#bs,h*w,c</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelAttentionModule</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,d_model=<span class="number">512</span>,kernel_size=<span class="number">3</span>,H=<span class="number">7</span>,W=<span class="number">7</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.cnn=nn.Conv2d(d_model,d_model,kernel_size=kernel_size,padding=(kernel_size-<span class="number">1</span>)//<span class="number">2</span>)</span><br><span class="line">        self.pa=SimplifiedScaledDotProductAttention(H*W,h=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        bs,c,h,w=x.shape</span><br><span class="line">        y=self.cnn(x)</span><br><span class="line">        y=y.view(bs,c,-<span class="number">1</span>) <span class="comment">#bs,c,h*w</span></span><br><span class="line">        y=self.pa(y,y,y) <span class="comment">#bs,c,h*w</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DAModule</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,d_model=<span class="number">512</span>,kernel_size=<span class="number">3</span>,H=<span class="number">7</span>,W=<span class="number">7</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.position_attention_module=PositionAttentionModule(d_model=<span class="number">512</span>,kernel_size=<span class="number">3</span>,H=<span class="number">7</span>,W=<span class="number">7</span>)</span><br><span class="line">        self.channel_attention_module=ChannelAttentionModule(d_model=<span class="number">512</span>,kernel_size=<span class="number">3</span>,H=<span class="number">7</span>,W=<span class="number">7</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span></span><br><span class="line">        bs,c,h,w=<span class="built_in">input</span>.shape</span><br><span class="line">        p_out=self.position_attention_module(<span class="built_in">input</span>)</span><br><span class="line">        c_out=self.channel_attention_module(<span class="built_in">input</span>)</span><br><span class="line">        p_out=p_out.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>).view(bs,c,h,w)</span><br><span class="line">        c_out=c_out.view(bs,c,h,w)</span><br><span class="line">        <span class="keyword">return</span> p_out+c_out</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CBAM-Convolutional-Block-Attention-Module-2018"><a href="#CBAM-Convolutional-Block-Attention-Module-2018" class="headerlink" title="CBAM: Convolutional Block Attention Module 2018"></a>CBAM: Convolutional Block Attention Module 2018</h2><p><img data-src="https://s2.loli.net/2024/01/10/uPRhgXEveC9JbFS.png" alt="image-20240110104503985"></p><p>通道注意力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_planes, ratio=<span class="number">16</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ChannelAttention, self).__init__()</span><br><span class="line">        self.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        self.max_pool = nn.AdaptiveMaxPool2d(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.fc1   = nn.Conv2d(in_planes, in_planes // <span class="number">16</span>, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.relu1 = nn.ReLU()</span><br><span class="line">        self.fc2   = nn.Conv2d(in_planes // <span class="number">16</span>, in_planes, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        self.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        avg_out = self.fc2(self.relu1(self.fc1(self.avg_pool(x))))</span><br><span class="line">        max_out = self.fc2(self.relu1(self.fc1(self.max_pool(x))))</span><br><span class="line">        out = avg_out + max_out</span><br><span class="line">        <span class="keyword">return</span> self.sigmoid(out)</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/01/10/wxDGep963Qzs5tq.png" alt="image-20240110104513785"></p><p>空间注意力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpatialAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, kernel_size=<span class="number">7</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SpatialAttention, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> kernel_size <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">7</span>), <span class="string">&#x27;kernel size must be 3 or 7&#x27;</span></span><br><span class="line">        padding = <span class="number">3</span> <span class="keyword">if</span> kernel_size == <span class="number">7</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">2</span>, <span class="number">1</span>, kernel_size, padding=padding, bias=<span class="literal">False</span>)</span><br><span class="line">        self.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        avg_out = torch.mean(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        max_out, _ = torch.<span class="built_in">max</span>(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        x = torch.cat([avg_out, max_out], dim=<span class="number">1</span>)</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> self.sigmoid(x)</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/01/10/hyUFPErbDKB3TwI.png" alt="image-20240110104523806"></p><script type="math/tex; mode=display">\begin{aligned}\mathbf{F^{\prime}=M_c(F)\otimes F,}\\\mathbf{F^{\prime\prime}=M_s(F^{\prime})\otimes F^{\prime},}\end{aligned}</script><script type="math/tex; mode=display">\begin{gathered}\mathbf{M_{c}}(\mathbf{F}) =\sigma(MLP(AvgPool(\mathbf{F}))+MLP(MaxPool(\mathbf{F}))) \\=\sigma(\mathbf{W_1}(\mathbf{W_0}(\mathbf{F_{avg}^c}))+\mathbf{W_1}(\mathbf{W_0}(\mathbf{F_{max}^c}))), \end{gathered}</script><script type="math/tex; mode=display">\begin{aligned}\mathbf{M_{s}}(\mathbf{F})& =\sigma(f^{7\times7}([AvgPool(\mathbf{F});MaxPool(\mathbf{F})]))  \\&=\sigma(f^{7\times7}([\mathbf{F_{avg}^{s}};\mathbf{F_{max}^{s}}])),\end{aligned}</script><p><img data-src="https://s2.loli.net/2024/01/10/MQNWLjZP2yH8cwd.png" alt="image-20240110142553774"></p><h2 id="Non-Local-2018"><a href="#Non-Local-2018" class="headerlink" title="Non-Local 2018"></a>Non-Local 2018</h2><p><img data-src="https://s2.loli.net/2024/01/11/IW6cKRTQN178kp4.png" alt="image-20240111161108109"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonLocalNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_dim=<span class="number">64</span>, output_dim=<span class="number">64</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NonLocalNet, self).__init__()</span><br><span class="line">        intermediate_dim = input_dim // <span class="number">2</span></span><br><span class="line">        self.to_q = nn.Conv2d(input_dim, intermediate_dim, <span class="number">1</span>)</span><br><span class="line">        self.to_k = nn.Conv2d(input_dim, intermediate_dim, <span class="number">1</span>)</span><br><span class="line">        self.to_v = nn.Conv2d(input_dim, intermediate_dim, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.conv = nn.Conv2d(intermediate_dim, output_dim, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        q = self.to_q(x).squeeze()</span><br><span class="line">        k = self.to_k(x).squeeze()</span><br><span class="line">        v = self.to_v(x).squeeze()</span><br><span class="line"></span><br><span class="line">        u = torch.bmm(q, k.transpose(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        u = torch.softmax(u, dim=<span class="number">1</span>)</span><br><span class="line">        out = torch.bmm(u, v)</span><br><span class="line">        out = out.unsqueeze(<span class="number">2</span>)</span><br><span class="line">        out = self.conv(out)</span><br><span class="line">        <span class="keyword">return</span> out + x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/01/19/9eNWHCpuiFsYLtU.png" alt="image-20240119110302126"></p><h2 id="SKNet-2019"><a href="#SKNet-2019" class="headerlink" title="SKNet 2019"></a>SKNet 2019</h2><p><img data-src="https://s2.loli.net/2024/01/23/ypZfsSKPBq9iLV6.png" alt="image-20240123192700386"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKConv</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    https://arxiv.org/pdf/1903.06586.pdf</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, feature_dim, WH, M, G, r, stride=<span class="number">1</span>, L=<span class="number">32</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Constructor</span></span><br><span class="line"><span class="string">         Args:</span></span><br><span class="line"><span class="string">             features: input channel dimensionality.</span></span><br><span class="line"><span class="string">             WH: input spatial dimensionality, used for GAP kernel size.</span></span><br><span class="line"><span class="string">             M: the number of branchs.</span></span><br><span class="line"><span class="string">             G: num of convolution groups.</span></span><br><span class="line"><span class="string">             r: the radio for compute d, the length of z.</span></span><br><span class="line"><span class="string">             stride: stride, default 1.</span></span><br><span class="line"><span class="string">             L: the minimum dim of the vector z in paper, default 32.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        d = <span class="built_in">max</span>(<span class="built_in">int</span>(feature_dim / r), L)</span><br><span class="line">        self.M = M</span><br><span class="line">        self.feature_dim = feature_dim</span><br><span class="line">        self.convs = nn.ModuleList()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">            self.convs.append(nn.Sequential(</span><br><span class="line">                nn.Conv2d(feature_dim, feature_dim, kernel_size=<span class="number">3</span> + i * <span class="number">2</span>, stride=stride, padding=<span class="number">1</span> + i, groups=G),</span><br><span class="line">                nn.BatchNorm2d(feature_dim),</span><br><span class="line">                nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">            ))</span><br><span class="line">        self.gap = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        self.fc = nn.Linear(feature_dim, d)</span><br><span class="line">        self.fcs = nn.ModuleList()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">            self.fcs.append(</span><br><span class="line">                nn.Linear(d, feature_dim)</span><br><span class="line">            )</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i, conv <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.convs):</span><br><span class="line">            feat = conv(x).unsqueeze_(dim=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                feas = feat</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                feas = torch.cat((feas, feat), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        fea_U = torch.<span class="built_in">sum</span>(feas, dim=<span class="number">1</span>)</span><br><span class="line">        fea_s = self.gap(fea_U).squeeze_()</span><br><span class="line">        fea_z = self.fc(fea_s)</span><br><span class="line">        <span class="keyword">for</span> i, fc <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.fcs):</span><br><span class="line">            vector = fc(fea_z).unsqueeze_(dim=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                attention_vectors = vector</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                attention_vectors = torch.cat((attention_vectors, vector), dim=<span class="number">1</span>)</span><br><span class="line">        attention_vectors = self.softmax(attention_vectors)</span><br><span class="line">        attention_vectors = attention_vectors.unsqueeze(-<span class="number">1</span>).unsqueeze(-<span class="number">1</span>)</span><br><span class="line">        fea_v = (feas*attention_vectors).<span class="built_in">sum</span>(dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> fea_v</span><br></pre></td></tr></table></figure><h2 id="CC-Net和Axial-Attention"><a href="#CC-Net和Axial-Attention" class="headerlink" title="CC-Net和Axial Attention"></a>CC-Net和Axial Attention</h2><p>看论文时提到了CC-Net使用了交叉注意了.</p><p>参考<a href="https://www.codenong.com/cs106760382/">Axial Attention 和 Criss-Cross Attention及其代码实现 | 码农家园 (codenong.com)</a>这篇blog,写的不错.</p><h2 id="Axial-Attention"><a href="#Axial-Attention" class="headerlink" title="Axial Attention"></a>Axial Attention</h2><p>轴向注意力,Axial Attention 的感受野是目标像素的同一行(或者同一列) 的W(或H)个像素</p><p>比如row attention</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现轴向注意力中的 row Attention</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Softmax</span><br><span class="line"></span><br><span class="line"><span class="comment"># device = torch.device(&#x27;cuda:0&#x27; if torch.cuda.is_available() else &#x27;cpu&#x27;)</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.device_count() &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RowAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_dim, q_k_dim, device</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        in_dim : int</span></span><br><span class="line"><span class="string">            channel of input img tensor</span></span><br><span class="line"><span class="string">        q_k_dim: int</span></span><br><span class="line"><span class="string">            channel of Q, K vector</span></span><br><span class="line"><span class="string">        device : torch.device</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>(RowAttention, self).__init__()</span><br><span class="line">        self.in_dim = in_dim</span><br><span class="line">        self.q_k_dim = q_k_dim</span><br><span class="line">        self.device = device</span><br><span class="line">        </span><br><span class="line">        self.query_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.q_k_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.key_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.q_k_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.value_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.in_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.softmax = Softmax(dim=<span class="number">2</span>)</span><br><span class="line">        self.gamma = nn.Parameter(torch.zeros(<span class="number">1</span>)).to(self.device)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        x : Tensor</span></span><br><span class="line"><span class="string">            4-D , (batch, in_dims, height, width) -- (b,c1,h,w)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">## c1 = in_dims; c2 = q_k_dim</span></span><br><span class="line">        b, _, h, w = x.size()</span><br><span class="line">        </span><br><span class="line">        Q = self.query_conv(x) <span class="comment">#size = (b,c2, h,w)</span></span><br><span class="line">        K = self.key_conv(x)   <span class="comment">#size = (b, c2, h, w)</span></span><br><span class="line">        V = self.value_conv(x) <span class="comment">#size = (b, c1,h,w)</span></span><br><span class="line">        </span><br><span class="line">        Q = Q.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(b*h, -<span class="number">1</span>,w).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#size = (b*h,w,c2)</span></span><br><span class="line">        K = K.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(b*h, -<span class="number">1</span>,w)  <span class="comment">#size = (b*h,c2,w)</span></span><br><span class="line">        V = V.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(b*h, -<span class="number">1</span>,w)  <span class="comment">#size = (b*h, c1,w)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#size = (b*h,w,w) [:,i,j] 表示Q的所有h的第 Wi行位置上所有通道值与 K的所有h的第 Wj列位置上的所有通道值的乘积，</span></span><br><span class="line">        <span class="comment"># 即(1,c2) * (c2,1) = (1,1)</span></span><br><span class="line">        row_attn = torch.bmm(Q,K) </span><br><span class="line">        <span class="comment">########</span></span><br><span class="line">        <span class="comment">#此时的 row_atten的[:,i,0:w] 表示Q的所有h的第 Wi行位置上所有通道值与 K的所有行的 所有列(0:w)的逐个位置上的所有通道值的乘积</span></span><br><span class="line">        <span class="comment">#此操作即为 Q的某个（i,j）与 K的（i,0:w）逐个位置的值的乘积，得到行attn</span></span><br><span class="line">        <span class="comment">########</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#对row_attn进行softmax</span></span><br><span class="line">        row_attn = self.softmax(row_attn) <span class="comment">#对列进行softmax，即[k,i,0:w] ，某一行的所有列加起来等于1，</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#size = (b*h,c1,w) 这里先需要对row_atten进行 行列置换，使得某一列的所有行加起来等于1</span></span><br><span class="line">        <span class="comment">#[:,i,j]即为V的所有行的某个通道上，所有列的值 与 row_attn的行的乘积，即求权重和</span></span><br><span class="line">        out = torch.bmm(V,row_attn.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)) </span><br><span class="line">        <span class="comment">#size = (b,c1,h,2)</span></span><br><span class="line">        out = out.view(b,h,-<span class="number">1</span>,w).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>)  </span><br><span class="line">        out = self.gamma*out + x </span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"><span class="comment">#实现轴向注意力中的 cols Attention</span></span><br><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>).to(device)</span><br><span class="line">row_attn = RowAttention(in_dim = <span class="number">8</span>, q_k_dim = <span class="number">4</span>,device = device).to(device)</span><br><span class="line"><span class="built_in">print</span>(row_attn(x).size())</span><br></pre></td></tr></table></figure><p>列注意力同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现轴向注意力中的 column Attention</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Softmax</span><br><span class="line"></span><br><span class="line"><span class="comment"># device = torch.device(&#x27;cuda:0&#x27; if torch.cuda.is_available() else &#x27;cpu&#x27;)</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.device_count() &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_dim, q_k_dim, device</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        in_dim : int</span></span><br><span class="line"><span class="string">            channel of input img tensor</span></span><br><span class="line"><span class="string">        q_k_dim: int</span></span><br><span class="line"><span class="string">            channel of Q, K vector</span></span><br><span class="line"><span class="string">        device : torch.device</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>(ColAttention, self).__init__()</span><br><span class="line">        self.in_dim = in_dim</span><br><span class="line">        self.q_k_dim = q_k_dim</span><br><span class="line">        self.device = device</span><br><span class="line">        </span><br><span class="line">        self.query_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.q_k_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.key_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.q_k_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.value_conv = nn.Conv2d(in_channels=in_dim, out_channels = self.in_dim, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.softmax = Softmax(dim=<span class="number">2</span>)</span><br><span class="line">        self.gamma = nn.Parameter(torch.zeros(<span class="number">1</span>)).to(self.device)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        x : Tensor</span></span><br><span class="line"><span class="string">            4-D , (batch, in_dims, height, width) -- (b,c1,h,w)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">## c1 = in_dims; c2 = q_k_dim</span></span><br><span class="line">        b, _, h, w = x.size()</span><br><span class="line">        </span><br><span class="line">        Q = self.query_conv(x) <span class="comment">#size = (b,c2, h,w)</span></span><br><span class="line">        K = self.key_conv(x)   <span class="comment">#size = (b, c2, h, w)</span></span><br><span class="line">        V = self.value_conv(x) <span class="comment">#size = (b, c1,h,w)</span></span><br><span class="line">        </span><br><span class="line">        Q = Q.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(b*w, -<span class="number">1</span>,h).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#size = (b*w,h,c2)</span></span><br><span class="line">        K = K.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(b*w, -<span class="number">1</span>,h)  <span class="comment">#size = (b*w,c2,h)</span></span><br><span class="line">        V = V.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(b*w, -<span class="number">1</span>,h)  <span class="comment">#size = (b*w,c1,h)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#size = (b*w,h,h) [:,i,j] 表示Q的所有W的第 Hi行位置上所有通道值与 K的所有W的第 Hj列位置上的所有通道值的乘积，</span></span><br><span class="line">        <span class="comment"># 即(1,c2) * (c2,1) = (1,1)</span></span><br><span class="line">        col_attn = torch.bmm(Q,K) </span><br><span class="line">        <span class="comment">########</span></span><br><span class="line">        <span class="comment">#此时的 col_atten的[:,i,0:w] 表示Q的所有W的第 Hi行位置上所有通道值与 K的所有W的 所有列(0:h)的逐个位置上的所有通道值的乘积</span></span><br><span class="line">        <span class="comment">#此操作即为 Q的某个（i,j）与 K的（i,0:h）逐个位置的值的乘积，得到列attn</span></span><br><span class="line">        <span class="comment">########</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#对row_attn进行softmax</span></span><br><span class="line">        col_attn = self.softmax(col_attn) <span class="comment">#对列进行softmax，即[k,i,0:w] ，某一行的所有列加起来等于1，</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#size = (b*w,c1,h) 这里先需要对col_atten进行 行列置换，使得某一列的所有行加起来等于1</span></span><br><span class="line">        <span class="comment">#[:,i,j]即为V的所有行的某个通道上，所有列的值 与 col_attn的行的乘积，即求权重和</span></span><br><span class="line">        out = torch.bmm(V,col_attn.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)) </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#size = (b,c1,h,w)</span></span><br><span class="line">        out = out.view(b,w,-<span class="number">1</span>,h).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        out = self.gamma*out + x </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">    </span><br><span class="line"><span class="comment">#实现轴向注意力中的 cols Attention</span></span><br><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>).to(device)</span><br><span class="line">col_attn = ColAttention(<span class="number">8</span>, <span class="number">4</span>, device = device)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(col_attn(x).size())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Criss-Cross-Attention-Module-2019"><a href="#Criss-Cross-Attention-Module-2019" class="headerlink" title="Criss-Cross Attention Module 2019"></a>Criss-Cross Attention Module 2019</h2><p><img data-src="https://pic4.zhimg.com/80/v2-322dae3099e1ed29c2751c7c7efd88b7_720w.webp" alt="img"></p><p>CC-Attention 的感受野是与目标像素的同一行和同一列的(H + W - 1)个像素,目标元素的同一行和同一列.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrissCrossAttention</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Criss-Cross Attention Module</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    reference: https://github.com/speedinghzl/CCNet</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CrissCrossAttention,self).__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.query_conv = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(in_dim,eps=<span class="number">1e-5</span>, momentum=<span class="number">0.01</span>, affine=<span class="literal">True</span>),</span><br><span class="line">                nn.ReLU()</span><br><span class="line">            )</span><br><span class="line">        self.key_conv = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(in_dim,eps=<span class="number">1e-5</span>, momentum=<span class="number">0.01</span>, affine=<span class="literal">True</span>),</span><br><span class="line">                nn.ReLU()</span><br><span class="line">            )</span><br><span class="line">        self.value_conv = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(in_dim,eps=<span class="number">1e-5</span>, momentum=<span class="number">0.01</span>, affine=<span class="literal">True</span>),</span><br><span class="line">                nn.ReLU()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.softmax = Softmax(dim=<span class="number">3</span>)</span><br><span class="line">        self.INF = INF</span><br><span class="line">        self.gamma = nn.Parameter(torch.zeros(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, query, key, value</span>):</span></span><br><span class="line">        m_batchsize, _, height, width = query.size()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        proj_query = self.query_conv(query)</span><br><span class="line">        proj_query_H = proj_query.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(m_batchsize*width,-<span class="number">1</span>,height).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        proj_query_W = proj_query.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(m_batchsize*height,-<span class="number">1</span>,width).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        proj_key = self.key_conv(key)</span><br><span class="line">        proj_key_H = proj_key.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(m_batchsize*width,-<span class="number">1</span>,height)</span><br><span class="line">        proj_key_W = proj_key.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(m_batchsize*height,-<span class="number">1</span>,width)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        proj_value = self.value_conv(value)</span><br><span class="line">        proj_value_H = proj_value.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>).contiguous().view(m_batchsize*width,-<span class="number">1</span>,height)</span><br><span class="line">        proj_value_W = proj_value.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(m_batchsize*height,-<span class="number">1</span>,width)</span><br><span class="line">        energy_H = (torch.bmm(proj_query_H, proj_key_H)+self.INF(m_batchsize, height, width)).view(m_batchsize,width,height,height).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">        energy_W = torch.bmm(proj_query_W, proj_key_W).view(m_batchsize,height,width,width)</span><br><span class="line">        concate = self.softmax(torch.cat([energy_H, energy_W], <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        att_H = concate[:,:,:,<span class="number">0</span>:height].permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).contiguous().view(m_batchsize*width,height,height)</span><br><span class="line">        att_W = concate[:,:,:,height:height+width].contiguous().view(m_batchsize*height,width,width)</span><br><span class="line">        out_H = torch.bmm(proj_value_H, att_H.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)).view(m_batchsize,width,-<span class="number">1</span>,height).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">        out_W = torch.bmm(proj_value_W, att_W.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)).view(m_batchsize,height,-<span class="number">1</span>,width).permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> self.gamma*(out_H + out_W) + value</span><br></pre></td></tr></table></figure><p><img data-src="https://pic4.zhimg.com/80/v2-03942c1de5a5a77aafbdb1a1fe697fb3_720w.webp" alt="img"></p><h2 id="Coordinate-Attention-2021"><a href="#Coordinate-Attention-2021" class="headerlink" title="Coordinate Attention 2021"></a>Coordinate Attention 2021</h2><p><img data-src="https://s2.loli.net/2024/01/19/ZrmAMkChLcbFpfg.png" alt="image-20240119195945841"></p><p>在通道注意力的基础上兼顾其位置关系，将通道注意力与空间注意力联合起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">h_sigmoid</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inplace=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(h_sigmoid, self).__init__()</span><br><span class="line">        self.relu = nn.ReLU6(inplace=inplace)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.relu(x + <span class="number">3</span>) / <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">h_swish</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inplace=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(h_swish, self).__init__()</span><br><span class="line">        self.sigmoid = h_sigmoid(inplace=inplace)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x * self.sigmoid(</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inp, reduction</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CA, self).__init__()</span><br><span class="line">        <span class="comment"># h:height(行)   w:width(列)</span></span><br><span class="line">        self.pool_h = nn.AdaptiveAvgPool2d((<span class="literal">None</span>, <span class="number">1</span>))  <span class="comment"># (b,c,h,w)--&gt;(b,c,h,1)</span></span><br><span class="line">        self.pool_w = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="literal">None</span>))  <span class="comment"># (b,c,h,w)--&gt;(b,c,1,w)</span></span><br><span class="line"></span><br><span class="line">         <span class="comment"># mip = max(8, inp // reduction)  论文作者所用</span></span><br><span class="line">        mip =  inp // reduction  </span><br><span class="line"> </span><br><span class="line">        self.conv1 = nn.Conv2d(inp, mip, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(mip)</span><br><span class="line">        self.act = h_swish()</span><br><span class="line"> </span><br><span class="line">        self.conv_h = nn.Conv2d(mip, inp, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line">        self.conv_w = nn.Conv2d(mip, inp, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        identity = x</span><br><span class="line"> </span><br><span class="line">        n, c, h, w = x.size()</span><br><span class="line">        x_h = self.pool_h(x)  <span class="comment"># (b,c,h,1)</span></span><br><span class="line">        x_w = self.pool_w(x).permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)  <span class="comment"># (b,c,w,1)</span></span><br><span class="line"> </span><br><span class="line">        y = torch.cat([x_h, x_w], dim=<span class="number">2</span>)</span><br><span class="line">        y = self.conv1(y)</span><br><span class="line">        y = self.bn1(y)</span><br><span class="line">        y = self.act(y)</span><br><span class="line"> </span><br><span class="line">        x_h, x_w = torch.split(y, [h, w], dim=<span class="number">2</span>)</span><br><span class="line">        x_w = x_w.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">        a_h = self.conv_h(x_h).sigmoid()</span><br><span class="line">        a_w = self.conv_w(x_w).sigmoid()</span><br><span class="line"> </span><br><span class="line">        out = identity * a_w * a_h</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="Attentional-Feature-Fusion-2021"><a href="#Attentional-Feature-Fusion-2021" class="headerlink" title="Attentional Feature Fusion  2021"></a>Attentional Feature Fusion  2021</h2><p><a href="https://openaccess.thecvf.com/content/WACV2021/html/Dai_Attentional_Feature_Fusion_WACV_2021_paper.html">WACV 2021 Open Access Repository (thecvf.com)</a></p><p><a href="https://github.com/YimianDai/open-aff">YimianDai/open-aff: code and trained models for “Attentional Feature Fusion” (github.com)</a></p><p>这些注意力模块通常用在一些block(或叫unit)块中,然后一般把这些块放到多尺度的网络下</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_43718675/article/details/106760382">Axial Attention 和 Criss-Cross Attention及其代码实现_cross attention代码-CSDN博客</a></li><li><a href="https://blog.csdn.net/qwedsaewq/article/details/89052643">sknet阅读笔记及pytorch实现代码_pytorch sknet-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_43427721/article/details/124652525?ops_request_misc=%7B%22request%5Fid%22%3A%22170601489116800226596213%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=170601489116800226596213&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124652525-null-null.nonecase&amp;utm_term=注意力&amp;spm=1018.2226.3001.4450">【注意力机制集锦】Channel Attention通道注意力网络结构、源码解读系列一_通道注意力机制结构图-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_43427721/article/details/124766242">【注意力机制集锦2】BAM&amp;SGE&amp;DAN原文、结构、源码详解_bam注意力机制-CSDN博客</a></li></ol><p>Thanks to <a href="https://github.com/lyp2333/External-Attention-pytorch/tree/master">lyp2333/External-Attention-pytorch (github.com)</a> and <a href="https://github.com/xmu-xiaoma666/External-Attention-pytorch">xmu-xiaoma666/External-Attention-pytorch: 🍀 Pytorch implementation of various Attention Mechanisms, MLP, Re-parameter, Convolution, which is helpful to further understand papers.⭐⭐⭐ (github.com)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍现在的各种各样(空间上,通道上)的attention模块以及相关代码.&lt;br&gt;</summary>
    
    
    
    <category term="deep learning" scheme="https://www.sekyoro.top/categories/deep-learning/"/>
    
    
    <category term="deep learning" scheme="https://www.sekyoro.top/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Golang学习:使用Gin</title>
    <link href="https://www.sekyoro.top/2024/01/17/Golang%E5%AD%A6%E4%B9%A0-%E4%BD%BF%E7%94%A8Gin/"/>
    <id>https://www.sekyoro.top/2024/01/17/Golang%E5%AD%A6%E4%B9%A0-%E4%BD%BF%E7%94%A8Gin/</id>
    <published>2024-01-17T10:17:45.000Z</published>
    <updated>2024-01-17T10:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Go语言simple并且easy,内置了很多有用的库,对并发支持比较好并且官方(指Google)还是比较重视的.<br><span id="more"></span><br>Go的官方资料就比较好学习<a href="https://go.dev/">The Go Programming Language</a>,有个tutorial还有个examples.写了个使用Colly用来爬取图片和Gin用来显示图片的代码.</p><p>目录结构比较简单</p><p><img data-src="https://s2.loli.net/2024/01/17/xMBdCzhvfZEgVAT.png" alt="image-20240117183718713"></p><p>使用Go的mod进行配置项目,比如<code>go mod init &lt;project name&gt;</code>初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;sekyoro.top/Goimg/routes&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">r := router.Group(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">router.Static(<span class="string">&quot;/img&quot;</span>, <span class="string">&quot;./imgs&quot;</span>)</span><br><span class="line">routes.DownloadPicRoutes(r)</span><br><span class="line">routes.ShowPicRoutes(r)</span><br><span class="line">routes.GetPicRoutes(r</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里设置了静态资源并使用分组路由构建路由到处理的方法.</p><p>在routes文件夹下就有对应的路由,比如在下载文件下,设置了两个路由.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routes</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;sekyoro.top/Goimg/handlers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownloadPicRoutes</span><span class="params">(router *gin.RouterGroup)</span></span> &#123;</span><br><span class="line">router.GET(<span class="string">&quot;/pix&quot;</span>, handlers.DownloadPixvisionPicHandler)</span><br><span class="line">router.GET(<span class="string">&quot;/booru/:type&quot;</span>, handlers.DownloadBooruPicHandler)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在downloader目录下写进行处理的方法.比如下面是<code>DownloadPixvisionPicHandler.go</code>去爬取图片并保存到本地</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handlers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gocolly/colly/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownloadPixvisionPicHandler</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">counter  := <span class="number">0</span></span><br><span class="line">allow_img_site := checkAllowSite()</span><br><span class="line"><span class="comment">// fmt.Println(allow_img_site)</span></span><br><span class="line">c := colly.NewCollector(colly.UserAgent(userAgent), colly.AllowedDomains(allow_img_site...),</span><br><span class="line">colly.Async())</span><br><span class="line">c.SetRequestTimeout(<span class="number">20</span> * time.Second)</span><br><span class="line"></span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;</span><br><span class="line">DomainGlob:  <span class="string">&quot;*pximg.*&quot;</span>,</span><br><span class="line">Parallelism: <span class="number">5</span>,</span><br><span class="line"><span class="comment">//Delay:      5 * time.Second,</span></span><br><span class="line">RandomDelay: <span class="number">500</span> * time.Duration(time.Millisecond),</span><br><span class="line">&#125;)</span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;</span><br><span class="line">DomainGlob:  <span class="string">&quot;*pixivision.*&quot;</span>,</span><br><span class="line">Parallelism: <span class="number">5</span>,</span><br><span class="line">Delay:       <span class="number">200</span> * time.Duration(time.Millisecond),</span><br><span class="line">RandomDelay: <span class="number">500</span> * time.Duration(time.Millisecond),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> proxy != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> proxy[<span class="string">&quot;http&quot;</span>] != <span class="literal">nil</span> &#123;</span><br><span class="line">err := c.SetProxy(fmt.Sprintf(<span class="string">&quot;http://%s&quot;</span>, proxy[<span class="string">&quot;http&quot;</span>].(<span class="keyword">string</span>)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panic(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> proxy[<span class="string">&quot;socks5&quot;</span>] != <span class="literal">nil</span> &#123;</span><br><span class="line">err := c.SetProxy(fmt.Sprintf(<span class="string">&quot;socks5://%s&quot;</span>, proxy[<span class="string">&quot;socks5&quot;</span>].(<span class="keyword">string</span>)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panic(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">limit_page, ok := conf[<span class="string">&quot;limit_page&quot;</span>].(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Panic(<span class="string">&quot;爬取图片目录数配置出错&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Panic(<span class="string">&quot;下载路径配置出错&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find and visit all links</span></span><br><span class="line">c.OnHTML(<span class="string">&quot;a[href]&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e.DOM.Parent().HasClass(<span class="string">&quot;arc__title&quot;</span>) &#123;</span><br><span class="line">log.Default().Println(<span class="string">&quot;Link found:&quot;</span>, e.Attr(<span class="string">&quot;href&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> counter &gt;= limit_page &#123;</span><br><span class="line">ctx.JSON(http.StatusOK, fmt.Sprintf(<span class="string">&quot;success! %d directory image&quot;</span>, limit_page))</span><br><span class="line">&#125;</span><br><span class="line">e.Request.Visit(e.Attr(<span class="string">&quot;href&quot;</span>))</span><br><span class="line">counter += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">c.OnHTML(<span class="string">&quot;div[class=&#x27;_article-main&#x27;]&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">title := e.ChildText(<span class="string">&quot;h1[class=&#x27;am__title&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment">// log.Default().Println(&quot;title:&quot;, title)</span></span><br><span class="line"><span class="comment">// p := Pics&#123;title: title, pics: make(map[string]string)&#125;</span></span><br><span class="line">err := os.MkdirAll(filepath.Join(download_root_folder, title), os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Default().Println(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">e.ForEach(<span class="string">&quot;div.article-item:not(._feature-article-body__paragraph) div.am__work__main&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, h *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">log.Default().Println(<span class="string">&quot;pic:&quot;</span>, h.ChildAttr(<span class="string">&quot;img&quot;</span>, <span class="string">&quot;src&quot;</span>))</span><br><span class="line">img_src := h.ChildAttr(<span class="string">&quot;img&quot;</span>, <span class="string">&quot;src&quot;</span>)</span><br><span class="line">h.Request.Visit(img_src)</span><br><span class="line">h.Request.Ctx.Put(<span class="string">&quot;title&quot;</span>, title)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">c.OnResponse(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Response)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> img_url URL_path = url_path(r.Request.URL.Path)</span><br><span class="line"><span class="comment">// log.Default().Println(&quot;img_name:&quot;, img_name)</span></span><br><span class="line"><span class="keyword">if</span> img_url.isPic() &#123;</span><br><span class="line">img_path := filepath.Join(download_root_folder,r.Ctx.Get(<span class="string">&quot;title&quot;</span>), <span class="keyword">string</span>(img_url.(url_path)))</span><br><span class="line">r.Save(img_path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">log.Default().Println(<span class="string">&quot;Visiting&quot;</span>, r.URL)</span><br><span class="line"><span class="keyword">if</span> r.URL.Host == <span class="string">&quot;i.pximg.net&quot;</span> &#123;</span><br><span class="line">r.Headers.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://www.pixivision.net/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">c.OnError(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Response, err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">log.Default().Println(<span class="string">&quot;Request URL:&quot;</span>, r.Request.URL, <span class="string">&quot;failed with response:&quot;</span>, <span class="keyword">string</span>(r.Body), <span class="string">&quot;\nError:&quot;</span>, err.Error())</span><br><span class="line">&#125;)</span><br><span class="line">c.Visit(pixivision_site)</span><br><span class="line">c.Wait()</span><br><span class="line">ctx.JSON(http.StatusOK, fmt.Sprintf(<span class="string">&quot;success! %d directory image&quot;</span>, limit_page))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>configure.yaml</code>中进行配置相关信息.</p><p>最后部署可以考虑使用render<a href="https://render.com/">Cloud Application Hosting for Developers | Render</a>,来玩玩吧<a href="https://go-img.onrender.com/api/show">https://go-img.onrender.com/api/show</a></p><p>完整代码可以在我的github<a href="https://github.com/drowning-in-codes/myGo">drowning-in-codes/myGo (github.com)</a>上看,我也上传了docker<a href="https://hub.docker.com/r/proanimer/goimg">proanimer/goimg - Docker Image</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull proanimer/goimg</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go语言simple并且easy,内置了很多有用的库,对并发支持比较好并且官方(指Google)还是比较重视的.&lt;br&gt;</summary>
    
    
    
    
    <category term="Golang" scheme="https://www.sekyoro.top/tags/Golang/"/>
    
    <category term="Gin" scheme="https://www.sekyoro.top/tags/Gin/"/>
    
  </entry>
  
  <entry>
    <title>gRPC学习</title>
    <link href="https://www.sekyoro.top/2024/01/05/grpc%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/01/05/grpc%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-01-05T11:16:58.000Z</published>
    <updated>2024-01-06T08:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>RPC是远程调用,而google实现了grpc比较方便地实现了远程调用,gRPC是一个现代的开源远程过程调用(RPC)框架<br><span id="more"></span></p><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p>在gRPC中，客户端应用程序可以直接调用另一台计算机上的服务器应用程序上的方法，就好像它是本地对象一样。</p><blockquote><p>远程过程调用是一个分布式计算的客户端-服务器（Client/Server）的例子，它简单而又广受欢迎。<br>远程过程调用总是由客户端对服务器发出一个执行若干过程请求，并用客户端提供的参数。执行结果将返回给客户端。<br>由于存在各式各样的变体和细节差异，对应地派生了各式远程过程调用协议，而且它们并不互相兼容。</p><p>为了允许不同的客户端均能访问服务器，<strong>许多标准化的 RPC 系统应运而生了。其中大部分采用接口描述语言（Interface Description Language，IDL），方便跨平台的远程过程调用</strong>。</p></blockquote><p>与许多RPC系统一样，gRPC基于定义服务的思想，指定可以通过其参数和返回类型远程调用的方法。在服务器端，服务器实现了这个接口，并运行gRPC服务器来处理客户端调用。在客户端，客户端有一个stub（在某些语言中称为客户端），它提供与服务器相同的方法。</p><p>它具有许多特性</p><ol><li><strong>强大的IDL特性</strong><br>RPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议，性能出众，得到了广泛的应用。</li><li>支持多种语言<br>支持C++、Java、Go、Python、Ruby、C#、Node.js、Android Java、Objective-C、PHP等编程语言。</li><li>基于<strong>HTTP/2</strong>标准设计</li></ol><p><img data-src="https://grpc.io/img/landing-2.svg" alt="Concept Diagram"></p><p>默认情况下，gRPC使用<strong>Protocol Buffers</strong>，这是谷歌成熟的开源机制，<strong>用于序列化结构化数据(尽管它可以与JSON等其他数据格式一起使用)</strong></p><h3 id="与REST差异"><a href="#与REST差异" class="headerlink" title="与REST差异"></a>与REST差异</h3><p>RPC 的消息传输可以通过 TCP、UDP 或者 HTTP等，所以有时候我们称之为 RPC over TCP、 RPC over HTTP。</p><p>RPC 通过 HTTP 传输消息的时候和 RESTful的架构是类似的，但是也有不同。</p><blockquote><ul><li>gRPC使用HTTP/2，而REST使用HTTP1.1</li><li>gRPC使用协议缓冲区数据格式，而不是REST API中通常使用的标准JSON数据格式</li><li>使用gRPC,可以利用HTTP/2功能，如服务器端流式传输、客户端流式传输，甚至双向流式传输</li></ul></blockquote><p>首先 RPC 的客户端和服务器端师紧耦合的，客户端需要知道调用的过程的名字，过程的参数以及它们的类型、顺序等。<strong>一旦服务器更改了过程的实现，客户端的实现很容易出问题</strong>。RESTful基于 http的语义操作资源，参数的顺序一般没有关系，也很容易的<strong>通过代理转换链接和资源位置</strong>，从这一点上来说，RESTful 更灵活。</p><p>其次，它们操作的对象不一样。 RPC 操作的是方法和过程，它要操作的是方法对象。 RESTful 操作的是资源(resource)，而不是方法。</p><p>第三，RESTful执行的是对资源的操作，增加、查找、修改和删除等,主要是CURD，所以如果你要实现一个特定目的的操作，比如为名字姓张的学生的数学成绩都加上10这样的操作，<br>RESTful的API设计起来就不是那么直观或者有意义。在这种情况下, RPC的实现更有意义，它可以实现一个直接的方法方法供客户端调用</p><p><strong>RPC over TCP可以通过长连接减少连接的建立所产生的花费</strong>，在调用次数非常巨大的时候(这是目前互联网公司经常遇到的情况,大并发的情况下)，这个花费影响是非常巨大的。<br>当然 RESTful 也可以通过 keep-alive 实现长连接, 但是它最大的一个问题是它的<strong>request-response模型是阻塞的</strong> (http1.0和 http1.1, http 2.0没这个问题)，<br>发送一个请求后只有等到response返回才能发送第二个请求 (有些http server实现了pipeling的功能，但不是标配), RPC的实现没有这个限制。</p><h3 id="其他RPC框架"><a href="#其他RPC框架" class="headerlink" title="其他RPC框架"></a>其他RPC框架</h3><p>目前的 RPC 框架大致有两种不同的侧重方向,一种<strong>偏重于服务治理</strong>,另一种<strong>偏重于跨语言调用</strong>。</p><p>服务治理型的 RPC 框架有Alibabs <strong>Dubbo</strong>、Motan 等，这类的 RPC 框架的特点是功能丰富，<strong>提供高性能的远程调用以及服务发现和治理功能</strong>，适用于大型服务的微服务化拆分以及管理，对于特定语言（Java）的项目可以十分友好的透明化接入。但缺点是语言耦合度较高，跨语言支持难度较大。</p><p>跨语言调用型的 RPC 框架有 Thrift、<strong>gRPC</strong>、Hessian、Finagle 等，<strong>这一类的 RPC 框架重点关注于服务的跨语言调用，能够支持大部分的语言进行语言无关的调用</strong>，非常适合于为不同语言提供通用远程服务的场景。但这类框架没有服务发现相关机制，实际使用时一般需要代理层进行请求转发和负载均衡策略控制。</p><p><a href="https://thrift.apache.org/">thrift</a>是Apache的一个跨语言的高性能的服务框架，也得到了广泛的应用。它的功能类似 gRPC, 支持跨语言，不支持服务治理。</p><p><a href="https://github.com/smallnest/rpcx">rpcx</a> 是一个分布式的Go语言的 RPC 框架，支持Zookepper、etcd、consul多种服务发现方式，多种服务路由方式， 是目前性能最好的 RPC 框架之一</p><h3 id="使用protobuf"><a href="#使用protobuf" class="headerlink" title="使用protobuf"></a>使用protobuf</h3><p>定义要在proto文件中序列化的数据的结构：这是一个扩展名为.proto的普通文本文件。协议缓冲区数据被构造为消息，其中每个消息都是一个包含一系列名值对（称为字段）的信息的小逻辑记录。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">bool</span> has_ponycopter = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定了数据结构,就可以<strong>使用协议缓冲区编译器protoc从proto定义中生成首选语言的数据访问类</strong>.</p><p>它们为每个字段提供了简单的访问器,如name()和set_name()，以及将整个结构序列化到原始字节/从原始字节解析整个结构的方法。</p><p>因此，例如，如果选择的语言是C++，那么在上面的示例中运行编译器将生成一个名为Person的类。然后，您可以在应用程序中使用此类来填充、序列化和检索Person协议缓冲区消息。</p><p>gRPC使用protoc和一个特殊的gRPC插件从proto文件中生成代码：<strong>可以获得生成的gRPC客户端和服务器代码，以及用于填充、序列化和检索消息类型的常规协议缓冲区代码。</strong>(截至目前protobuf最新版本是v3)</p><h2 id="gRPC-in-Go"><a href="#gRPC-in-Go" class="headerlink" title="gRPC in Go"></a>gRPC in Go</h2><h3 id="下载protoc"><a href="#下载protoc" class="headerlink" title="下载protoc"></a>下载protoc</h3><blockquote><p>虽然不是强制性的，但gRPC应用程序通常利用proto buffer进行服务定义和数据序列化。</p></blockquote><p><a href="https://github.com/protocolbuffers/protobuf/releases">Releases · protocolbuffers/protobuf (github.com)</a></p><p>protoc用于编译.proto文件，其中包含服务和消息定义,Linux或Mac直接使用对应包管理器下载即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y protobuf-compiler</span><br><span class="line">protoc --version  <span class="comment"># Ensure compiler version is 3+</span></span><br></pre></td></tr></table></figure><p>Windows在github上下载二进制包<a href="https://github.com/protocolbuffers/protobuf/releases">Releases · protocolbuffers/protobuf (github.com)</a></p><h3 id="protocol-compiler的Go插件"><a href="#protocol-compiler的Go插件" class="headerlink" title="protocol compiler的Go插件"></a>protocol compiler的Go插件</h3><h4 id="下载protoc-go-gen"><a href="#下载protoc-go-gen" class="headerlink" title="下载protoc-go-gen"></a>下载protoc-go-gen</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2</span><br><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28</span><br></pre></td></tr></table></figure><p>下载zip的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b v1.60.1 --depth 1 https://github.com/grpc/grpc-go</span><br></pre></td></tr></table></figure><h4 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto文件</h4><p>下面定义了服务</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface exported by the server.</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">RouteGuide</span> </span>&#123;</span><br><span class="line">  <span class="comment">// A simple RPC.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Obtains the feature at a given position.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// A feature with an empty name is returned if there&#x27;s no feature at the given</span></span><br><span class="line">  <span class="comment">// position.</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetFeature(Point) <span class="keyword">returns</span> (Feature) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A server-to-client streaming RPC.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Obtains the Features available within the given Rectangle.  Results are</span></span><br><span class="line">  <span class="comment">// streamed rather than returned at once (e.g. in a response message with a</span></span><br><span class="line">  <span class="comment">// repeated field), as the rectangle may cover a large area and contain a</span></span><br><span class="line">  <span class="comment">// huge number of features.</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> ListFeatures(Rectangle) <span class="keyword">returns</span> (stream Feature) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A client-to-server streaming RPC.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Accepts a stream of Points on a route being traversed, returning a</span></span><br><span class="line">  <span class="comment">// RouteSummary when traversal is completed.</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> RecordRoute(stream Point) <span class="keyword">returns</span> (RouteSummary) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A Bidirectional streaming RPC.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Accepts a stream of RouteNotes sent while a route is being traversed,</span></span><br><span class="line">  <span class="comment">// while receiving other RouteNotes (e.g. from other users).</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> RouteChat(stream RouteNote) <span class="keyword">returns</span> (stream RouteNote) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中涉及到一些参数message表示传递数据.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Points are represented as latitude-longitude pairs in the E7 representation</span></span><br><span class="line"><span class="comment">// (degrees multiplied by 10**7 and rounded to the nearest integer).</span></span><br><span class="line"><span class="comment">// Latitudes should be in the range +/- 90 degrees and longitude should be in</span></span><br><span class="line"><span class="comment">// the range +/- 180 degrees (inclusive).</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int32</span> latitude = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> longitude = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A latitude-longitude rectangle, represented as two diagonally opposite</span></span><br><span class="line"><span class="comment">// points &quot;lo&quot; and &quot;hi&quot;.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="comment">// One corner of the rectangle.</span></span><br><span class="line">  Point lo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The other corner of the rectangle.</span></span><br><span class="line">  Point hi = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A feature names something at a given point.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a feature could not be named, the name is empty.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Feature</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The name of the feature.</span></span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The point where the feature is detected.</span></span><br><span class="line">  Point location = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A RouteNote is a message sent while at a given point.</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">RouteNote</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The location from which the message is sent.</span></span><br><span class="line">  Point location = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The message to be sent.</span></span><br><span class="line">  <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 2;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">A</span> RouteSummary is received in response to a RecordRoute rpc.</span></span><br><span class="line"><span class="class">//</span></span><br><span class="line"><span class="class">// It contains the number of individual points received, the number of</span></span><br><span class="line"><span class="class">// detected features, and the total distance covered as the cumulative sum of</span></span><br><span class="line"><span class="class">// the distance between each point.</span></span><br><span class="line"><span class="class">message RouteSummary </span>&#123;</span><br><span class="line">  <span class="comment">// The number of points received.</span></span><br><span class="line">  <span class="built_in">int32</span> point_count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The number of known features passed while traversing the route.</span></span><br><span class="line">  <span class="built_in">int32</span> feature_count = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The distance covered in metres.</span></span><br><span class="line">  <span class="built_in">int32</span> distance = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The duration of the traversal in seconds.</span></span><br><span class="line">  <span class="built_in">int32</span> elapsed_time = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的两个文件包括message实现和用于server,client的代码</p><p>在pb.go文件中对于每个message实现了其type,比如对于<code>Rectangle</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">state         protoimpl.MessageState</span><br><span class="line">sizeCache     protoimpl.SizeCache</span><br><span class="line">unknownFields protoimpl.UnknownFields</span><br><span class="line"></span><br><span class="line"><span class="comment">// One corner of the rectangle.</span></span><br><span class="line">Lo *Point <span class="string">`protobuf:&quot;bytes,1,opt,name=lo,proto3&quot; json:&quot;lo,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// The other corner of the rectangle.</span></span><br><span class="line">Hi *Point <span class="string">`protobuf:&quot;bytes,2,opt,name=hi,proto3&quot; json:&quot;hi,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Rectangle)</span> <span class="title">Reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">*x = Rectangle&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> protoimpl.UnsafeEnabled &#123;</span><br><span class="line">mi := &amp;file_routeguide_route_guide_proto_msgTypes[<span class="number">1</span>]</span><br><span class="line">ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line">ms.StoreMessageInfo(mi)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Rectangle)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> protoimpl.X.MessageStringOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Rectangle)</span> <span class="title">ProtoMessage</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Rectangle)</span> <span class="title">ProtoReflect</span><span class="params">()</span> <span class="title">protoreflect</span>.<span class="title">Message</span></span> &#123;</span><br><span class="line">mi := &amp;file_routeguide_route_guide_proto_msgTypes[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> protoimpl.UnsafeEnabled &amp;&amp; x != <span class="literal">nil</span> &#123;</span><br><span class="line">ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line"><span class="keyword">if</span> ms.LoadMessageInfo() == <span class="literal">nil</span> &#123;</span><br><span class="line">ms.StoreMessageInfo(mi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ms</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mi.MessageOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Use Rectangle.ProtoReflect.Descriptor instead.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Rectangle)</span> <span class="title">Descriptor</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> file_routeguide_route_guide_proto_rawDescGZIP(), []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Rectangle)</span> <span class="title">GetLo</span><span class="params">()</span> *<span class="title">Point</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Lo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Rectangle)</span> <span class="title">GetHi</span><span class="params">()</span> *<span class="title">Point</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Hi</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Client来说,定义接口.首先使用grpc库中的<code>grpc.ClientConnInterface</code>作为routeGuideClient的成员.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> routeGuideClient <span class="keyword">struct</span> &#123;</span><br><span class="line">cc grpc.ClientConnInterface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给结构体<code>routeGuideClient</code>实现多个方法,并定义接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RouteGuideClient <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// A simple RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Obtains the feature at a given position.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A feature with an empty name is returned if there&#x27;s no feature at the given</span></span><br><span class="line"><span class="comment">// position.</span></span><br><span class="line">GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)</span><br><span class="line"><span class="comment">// A server-to-client streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Obtains the Features available within the given Rectangle.  Results are</span></span><br><span class="line"><span class="comment">// streamed rather than returned at once (e.g. in a response message with a</span></span><br><span class="line"><span class="comment">// repeated field), as the rectangle may cover a large area and contain a</span></span><br><span class="line"><span class="comment">// huge number of features.</span></span><br><span class="line">ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteGuide_ListFeaturesClient, error)</span><br><span class="line"><span class="comment">// A client-to-server streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Accepts a stream of Points on a route being traversed, returning a</span></span><br><span class="line"><span class="comment">// RouteSummary when traversal is completed.</span></span><br><span class="line">RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RecordRouteClient, error)</span><br><span class="line"><span class="comment">// A Bidirectional streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Accepts a stream of RouteNotes sent while a route is being traversed,</span></span><br><span class="line"><span class="comment">// while receiving other RouteNotes (e.g. from other users).</span></span><br><span class="line">RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RouteChatClient, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过<code>NewRouteGuideClient</code>返回结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouteGuideClient</span><span class="params">(cc grpc.ClientConnInterface)</span> <span class="title">RouteGuideClient</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;routeGuideClient&#123;cc&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现结构体的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *routeGuideClient)</span> <span class="title">GetFeature</span><span class="params">(ctx context.Context, in *Point, opts ...grpc.CallOption)</span> <span class="params">(*Feature, error)</span></span> &#123;</span><br><span class="line">out := <span class="built_in">new</span>(Feature)</span><br><span class="line">err := c.cc.Invoke(ctx, RouteGuide_GetFeature_FullMethodName, in, out, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *routeGuideClient)</span> <span class="title">ListFeatures</span><span class="params">(ctx context.Context, in *Rectangle, opts ...grpc.CallOption)</span> <span class="params">(RouteGuide_ListFeaturesClient, error)</span></span> &#123;</span><br><span class="line">stream, err := c.cc.NewStream(ctx, &amp;RouteGuide_ServiceDesc.Streams[<span class="number">0</span>], RouteGuide_ListFeatures_FullMethodName, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">x := &amp;routeGuideListFeaturesClient&#123;stream&#125;</span><br><span class="line"><span class="keyword">if</span> err := x.ClientStream.SendMsg(in); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := x.ClientStream.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果涉及stream还有新的结构,定义结构体,方法和接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> RouteGuide_ListFeaturesClient <span class="keyword">interface</span> &#123;</span><br><span class="line">Recv() (*Feature, error)</span><br><span class="line">grpc.ClientStream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> routeGuideListFeaturesClient <span class="keyword">struct</span> &#123;</span><br><span class="line">grpc.ClientStream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *routeGuideListFeaturesClient)</span> <span class="title">Recv</span><span class="params">()</span> <span class="params">(*Feature, error)</span></span> &#123;</span><br><span class="line">m := <span class="built_in">new</span>(Feature)</span><br><span class="line"><span class="keyword">if</span> err := x.ClientStream.RecvMsg(m); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于server类似,定义接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RouteGuideServer <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// A simple RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Obtains the feature at a given position.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A feature with an empty name is returned if there&#x27;s no feature at the given</span></span><br><span class="line"><span class="comment">// position.</span></span><br><span class="line">GetFeature(context.Context, *Point) (*Feature, error)</span><br><span class="line"><span class="comment">// A server-to-client streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Obtains the Features available within the given Rectangle.  Results are</span></span><br><span class="line"><span class="comment">// streamed rather than returned at once (e.g. in a response message with a</span></span><br><span class="line"><span class="comment">// repeated field), as the rectangle may cover a large area and contain a</span></span><br><span class="line"><span class="comment">// huge number of features.</span></span><br><span class="line">ListFeatures(*Rectangle, RouteGuide_ListFeaturesServer) error</span><br><span class="line"><span class="comment">// A client-to-server streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Accepts a stream of Points on a route being traversed, returning a</span></span><br><span class="line"><span class="comment">// RouteSummary when traversal is completed.</span></span><br><span class="line">RecordRoute(RouteGuide_RecordRouteServer) error</span><br><span class="line"><span class="comment">// A Bidirectional streaming RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Accepts a stream of RouteNotes sent while a route is being traversed,</span></span><br><span class="line"><span class="comment">// while receiving other RouteNotes (e.g. from other users).</span></span><br><span class="line">RouteChat(RouteGuide_RouteChatServer) error</span><br><span class="line">mustEmbedUnimplementedRouteGuideServer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现server和client"><a href="#实现server和client" class="headerlink" title="实现server和client"></a>实现server和client</h4><p>当使用protoc生成文件之后,就可以写server和client了.</p><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><p>定义结构体,注意定义时加上<code>pb.UnimplementedRouteGuideServer</code>这样避免有些方法没有实现.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> routeGuideServer <span class="keyword">struct</span> &#123;</span><br><span class="line">pb.UnimplementedRouteGuideServer</span><br><span class="line">savedFeatures []*pb.Feature <span class="comment">// read-only after initialized</span></span><br><span class="line"></span><br><span class="line">mu         sync.Mutex <span class="comment">// protects routeNotes</span></span><br><span class="line">routeNotes <span class="keyword">map</span>[<span class="keyword">string</span>][]*pb.RouteNote</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口满足的方法.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *routeGuideServer)</span> <span class="title">GetFeature</span><span class="params">(ctx context.Context, point *pb.Point)</span> <span class="params">(*pb.Feature, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *routeGuideServer)</span> <span class="title">ListFeatures</span><span class="params">(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer)</span></span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *routeGuideServer)</span> <span class="title">RecordRoute</span><span class="params">(stream pb.RouteGuide_RecordRouteServer)</span></span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *routeGuideServer)</span> <span class="title">RouteChat</span><span class="params">(stream pb.RouteGuide_RouteChatServer)</span></span></span><br></pre></td></tr></table></figure><p>然后使用tcp链接新建grpc服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;localhost:%d&quot;</span>, *port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> opts []grpc.ServerOption</span><br><span class="line"><span class="keyword">if</span> *tls &#123;</span><br><span class="line"><span class="keyword">if</span> *certFile == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">*certFile = data.Path(<span class="string">&quot;x509/server_cert.pem&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> *keyFile == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">*keyFile = data.Path(<span class="string">&quot;x509/server_key.pem&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">creds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Failed to generate credentials: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">opts = []grpc.ServerOption&#123;grpc.Creds(creds)&#125;</span><br><span class="line">&#125;</span><br><span class="line">grpcServer := grpc.NewServer(opts...)</span><br><span class="line">pb.RegisterRouteGuideServer(grpcServer, newServer())</span><br><span class="line">grpcServer.Serve(lis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面使用<code>pb.RegisterRouteGuideServer</code>注册服务,参数分别是grpc服务和<code>newServer</code>返回的结构体</p><h5 id="client"><a href="#client" class="headerlink" title="client"></a>client</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFeature</span><span class="params">(client pb.RouteGuideClient, point *pb.Point)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Getting feature for point (%d, %d)&quot;</span>, point.Latitude, point.Longitude)</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">feature, err := client.GetFeature(ctx, point)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;client.GetFeature failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(feature)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用context创建ctx和cancel,利用<code>client := pb.NewRouteGuideClient(conn)</code>创建client调用方法.</p><p><code>NewRouteGuideClient</code>返回对应的client接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouteGuideClient</span><span class="params">(cc grpc.ClientConnInterface)</span> <span class="title">RouteGuideClient</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;routeGuideClient&#123;cc&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gRPC面临的挑战"><a href="#gRPC面临的挑战" class="headerlink" title="gRPC面临的挑战"></a>gRPC面临的挑战</h2><p>虽然gRPC确实允许您使用这些较新的技术，但gRPC服务的原型设计更具挑战性，因为<strong>无法使用Postman HTTP客户端等工具来轻松地与您公开的gRPC服务交互</strong>。你确实有一些选择可以实现这一点，但这并不是一种在本地就可以获得的东西。</p><p>有一些选项可以使用诸如特使之类的工具来反转代理标准JSON请求，并将其转码为正确的数据格式，但这是一个额外的依赖项，对于简单的项目来说，设置它可能很困难。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://grpc.io/docs/">Documentation | gRPC</a></li><li><a href="https://tutorialedge.net/golang/go-grpc-beginners-tutorial/">Go gRPC Beginners Tutorial | TutorialEdge.net</a></li><li><a href="https://www.bookstack.cn/read/go-rpc-programming-guide/part1-gorpc.md">Go RPC开发简介 - 官方RPC库 - 《Go RPC开发指南 [中文文档]》 - 书栈网 · BookStack</a></li><li><a href="http://ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">RESTful API 最佳实践 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://grpc.io/docs/languages/go/basics/">Basics tutorial | Go | gRPC</a></li><li><a href="https://grpc.io/docs/what-is-grpc/">What is gRPC? | gRPC</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;RPC是远程调用,而google实现了grpc比较方便地实现了远程调用,gRPC是一个现代的开源远程过程调用(RPC)框架&lt;br&gt;</summary>
    
    
    
    
    <category term="grpc" scheme="https://www.sekyoro.top/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>gradio学习</title>
    <link href="https://www.sekyoro.top/2023/12/25/gradio%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2023/12/25/gradio%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-25T13:12:10.000Z</published>
    <updated>2023-12-26T04:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Gradio好啊,好啊,好啊.Hugging Face好啊,好啊.<br><span id="more"></span></p><blockquote><p>Gradio是一个开源Python包，允许您为机器学习模型、API或任何任意Python函数快速构建演示或web应用程序。然后，您可以使用Gradio的内置共享功能，在几秒钟内共享演示或web应用程序的链接。无需JavaScript、CSS或网络托管经验！</p></blockquote><h2 id="Hot-reload"><a href="#Hot-reload" class="headerlink" title="Hot reload"></a>Hot reload</h2><p><a href="https://www.gradio.app/guides/developing-faster-with-reload-mode">Developing Faster With Reload Mode (gradio.app)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradio run.py</span><br></pre></td></tr></table></figure><p>在使用重载模式时,Gradio专门在代码中寻找一个名为demo的Gradio Blocks/Interface演示。如果您将您的demo命名为其他名称，则需要将演示的名称作为代码中的第二个参数传入。所以，如果你的run.py文件是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> my_demo:</span><br><span class="line">    gr.Markdown(<span class="string">&quot;# Greetings from Gradio!&quot;</span>)</span><br><span class="line">    inp = gr.Textbox(placeholder=<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    out = gr.Textbox()</span><br><span class="line"></span><br><span class="line">    inp.change(fn=<span class="keyword">lambda</span> x: <span class="string">f&quot;Welcome, <span class="subst">&#123;x&#125;</span>!&quot;</span>,</span><br><span class="line">               inputs=inp,</span><br><span class="line">               outputs=out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_demo.launch()<span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> my_demo:</span><br><span class="line">    gr.Markdown(<span class="string">&quot;# Greetings from Gradio!&quot;</span>)</span><br><span class="line">    inp = gr.Textbox(placeholder=<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    out = gr.Textbox()</span><br><span class="line"></span><br><span class="line">    inp.change(fn=<span class="keyword">lambda</span> x: <span class="string">f&quot;Welcome, <span class="subst">&#123;x&#125;</span>!&quot;</span>,</span><br><span class="line">               inputs=inp,</span><br><span class="line">               outputs=out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_demo.launch()</span><br></pre></td></tr></table></figure><p>使用下面命令启动reload模式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradio run.py my_demo.</span><br></pre></td></tr></table></figure><p>我发现开发时使用reload最好把launch放在<strong>name</strong> == “<strong>main</strong>“下<a href="https://github.com/gradio-app/gradio/issues/4755">Unable to launch with reload mode with default port · Issue #4755 · gradio-app/gradio (github.com)</a></p><h3 id="launch参数"><a href="#launch参数" class="headerlink" title="launch参数"></a>launch参数</h3><p>在reload模式下没用,开发完毕后可以使用,用于改变端口、获得公网地址用于分享等.</p><h2 id="Interface-Class"><a href="#Interface-Class" class="headerlink" title="Interface Class"></a><strong><code>Interface</code> Class</strong></h2><p>Interface类旨在为机器学习模型创建演示，这些模型接受一个或多个输入，并返回一个或更多输出.</p><p>Interface类有三个核心参数：</p><ul><li>fn：包装用户界面（UI）的函数</li><li>inputs：用于输入的Gradio组件。组件的数量应与函数中的参数数量相匹配。</li><li>outputs：用于输出的Gradio组件。组件的数量应该与函数返回值的数量相匹配。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">demo = gr.Interface(</span><br><span class="line">    fn=greet,</span><br><span class="line">    inputs=[gr.components.Textbox(placeholder=<span class="string">&quot;input your words&quot;</span>), gr.Textbox(placeholder=<span class="string">&quot;&quot;</span>),gr.components.Slider()],</span><br><span class="line">    outputs=[<span class="string">&quot;text&quot;</span>,gr.Checkbox(label=<span class="string">&quot;选择&quot;</span>)],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以多个输入,多个输出,输出由fn计算得到,但是貌似这只能构建一个单组件.</p><h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><blockquote><p>Blocks是Gradio的低级API，它允许您创建比Interfaces更多的自定义web应用程序和演示（但仍然完全使用Python）。</p></blockquote><p>与Interface类相比，Blocks提供了更多的灵活性和控制：</p><p>（1）组件的布局（</p><p>2）触发功能执行的事件</p><p>（3）数据流（例如，输入可以触发输出，这可以触发下一级的输出）</p><p>Blocks还提供了将相关演示分组在一起的方法，例如使用选项卡。块的基本用法如下：创建一个块对象，然后将其用作上下文（使用“with”语句），然后在块上下文中定义布局、组件或事件。最后，调用launch（）方法来启动演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> + name + <span class="string">&quot;!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> demo:</span><br><span class="line">    gr.Markdown(<span class="string">&quot;## Hello World&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        textbox = gr.Textbox(placeholder=<span class="string">&quot;input your words&quot;</span>)</span><br><span class="line">        slider = gr.components.Slider()</span><br><span class="line">    btn = gr.Button(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">    btn.click(fn=update,<span class="built_in">input</span>=textbox,output=slider)</span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increase</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> demo:</span><br><span class="line">    a = gr.Number(label=<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    b = gr.Number(label=<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    atob = gr.Button(<span class="string">&quot;a &gt; b&quot;</span>)</span><br><span class="line">    btoa = gr.Button(<span class="string">&quot;b &gt; a&quot;</span>)</span><br><span class="line">    atob.click(increase, a, b)</span><br><span class="line">    btoa.click(increase, b, a)</span><br><span class="line"></span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><h2 id="TabbedInterface"><a href="#TabbedInterface" class="headerlink" title="TabbedInterface"></a>TabbedInterface</h2><p>TabbedInterface是通过提供一个接口列表来创建的，每个接口都在一个单独的选项卡中呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> + name + <span class="string">&quot;!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks(theme=gr.themes.Glass()) <span class="keyword">as</span> test:</span><br><span class="line">    gr.Markdown(<span class="string">&quot;## Hello World&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        textbox = gr.Textbox(placeholder=<span class="string">&quot;input your words&quot;</span>,label=<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        slider = gr.components.Slider(label=<span class="string">&quot;Greet&quot;</span>,interactive=<span class="literal">True</span>)</span><br><span class="line">    btn = gr.Button(<span class="string">&quot;Run&quot;</span>)</span><br><span class="line">    btn.click(fn=update, inputs=textbox, outputs=slider)</span><br><span class="line"></span><br><span class="line">stt_demo = gr.load(</span><br><span class="line">    <span class="string">&quot;huggingface/facebook/wav2vec2-base-960h&quot;</span>,</span><br><span class="line">    title=<span class="literal">None</span>,</span><br><span class="line">    inputs=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;Let me try to guess what you&#x27;re saying!&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">demo = gr.TabbedInterface([stt_demo,test],[<span class="string">&quot;STT&quot;</span>,<span class="string">&quot;Hello World&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    demo.launch()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ChatInterface"><a href="#ChatInterface" class="headerlink" title="ChatInterface"></a>ChatInterface</h2><blockquote><p>聊天机器人是大型语言模型的一个流行应用程序。使用gradio，您可以轻松地构建聊天机器人模型的演示并与用户共享，或者使用直观的聊天机器人UI自己尝试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_response</span>(<span class="params">message, history</span>):</span></span><br><span class="line"> <span class="keyword">return</span> random.choice([<span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;No&quot;</span>])</span><br><span class="line"></span><br><span class="line">gr.ChatInterface(random_response).launch()</span><br></pre></td></tr></table></figure><h3 id="streaming"><a href="#streaming" class="headerlink" title="streaming"></a>streaming</h3><p>如果应用程序预计流量会很大，请使用queue（）方法来控制处理速率。</p><p>可以搭配Openai或者Hugging Face上的大语言模型使用.同时搭配LangChain使用.</p><p>上面就是基本的四个大模块,此外还有许多组件,重点是<strong>一些组件如何组合</strong>,一般来说使用<code>gr.Blocks</code>进行构建.</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li><a href="https://www.gradio.app/guides">Gradio Guides</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gradio好啊,好啊,好啊.Hugging Face好啊,好啊.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
