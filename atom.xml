<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sekyoro的博客小屋</title>
  
  
  <link href="https://www.sekyoro.top/atom.xml" rel="self"/>
  
  <link href="https://www.sekyoro.top/"/>
  <updated>2024-05-20T02:09:10.305Z</updated>
  <id>https://www.sekyoro.top/</id>
  
  <author>
    <name>Sekyoro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>协同感知学习(二)</title>
    <link href="https://www.sekyoro.top/2024/05/17/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E7%AE%97%E6%B3%95-%E4%BA%8C/"/>
    <id>https://www.sekyoro.top/2024/05/17/%E5%8D%8F%E5%90%8C%E6%84%9F%E7%9F%A5%E7%AE%97%E6%B3%95-%E4%BA%8C/</id>
    <published>2024-05-17T14:42:49.000Z</published>
    <updated>2024-05-20T02:09:10.305Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>随着大模型时代的到来,原先通过修改模型结构提升性能写论文的方式已经有点out of date了,同时写文章的倾向已经从改架构成SOTA慢慢转变为回归任务背景以及讲好一个完整故事并给出自己的findings和insight了.也因此,在协作感知方面,论文方向也逐渐在转变,这里看看最近的文章整理一下思路.</p><span id="more"></span><h2 id="Domain-gap"><a href="#Domain-gap" class="headerlink" title="Domain gap"></a>Domain gap</h2><h3 id="Bridging-the-Domain-Gap-for-Multi-Agent-Perception"><a href="#Bridging-the-Domain-Gap-for-Multi-Agent-Perception" class="headerlink" title="Bridging the Domain Gap for Multi-Agent Perception"></a>Bridging the Domain Gap for Multi-Agent Perception</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>现有的多智能体感知算法通常选择在智能体之间共享从原始感知数据中提取的深度神经特征，以实现精度和通信带宽限制之间的权衡.然而,<strong>这些方法假设所有智能体具有相同的神经网络，这在现实世界中可能是不实用的</strong>。</p><p>当模型不同时,传递的特征可能存在较大的<strong>领域差距</strong>(domain gap)，导致多智能体感知性能急剧下降.</p><p>在本文中，我们提出了第一个轻量级框架来为多智能体感知弥合这种领域鸿沟,它可以作为大多数现有系统的插件模块,同时保持机密性.</p><p>我们的框架包括一个可学习的特征成形模来对齐多个维度的特征,以及一个用于领域自适应的稀疏跨域转换器.在公开的多智能体感知数据集V2XSet上的大量实验表明,对于基于点云的三维目标检测,我们的方法可以有效地弥合不同领域特征之间的差距,并显著优于其他基线方法至少8%。</p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>最近的研究表明，通过利用车联网( Vehicle-to- Everything，V2X )通信技术共享视觉信息，多智能体感知系统可以通过透视遮挡和感知更远的范围来显著提高单智能体系统的性能.</p><p>现有方法通常不共享原始感知数据或检测输出,而是共享由传感器数据计算得到的中间神经特征,因为它们可以在精度和带宽需求之间实现最佳权衡.</p><p>此外,传递的中间特征对GPS噪声和通信延迟的鲁棒性更强.</p><p>这忽略了一个关键的事实<strong>:为所有智能体部署相同的模型是不现实的,特别是对于连接的自动驾驶</strong>.</p><p>不同公司的网联自动驾驶汽车( CAV )和基础设施产品的检测模型通常是不同的。即使对于同一公司,由于车载软件版本的不同,也可能存在不同的检测模型.当共享特征来自不同的骨干时,存在一个明显的域间隙,这很容易削弱协作的好处。</p><p>在本文中,我们深入研究了多智能体感知中,特别是自动驾驶中这一尚未解决的实际问题.我们首先仔细<strong>研究了不同特征图的领域差距</strong>,然后在分析的基础上提出了我们的框架.</p><p><img data-src="https://s2.loli.net/2024/05/17/R4nUZOVyzfJCTcw.png" alt="image-20240517150815672"></p><h4 id="Learnable-Feature-Resizer"><a href="#Learnable-Feature-Resizer" class="headerlink" title="Learnable Feature Resizer"></a>Learnable Feature Resizer</h4><p>在ego代理上计算特征图作为source domain,接受其他代理的特征作为target domain.</p><p>特征缩放器Φ的目标是以可学习的方式将源域特征的维度与目标域进行对齐</p><script type="math/tex; mode=display">F_T^{'}=\Phi(F_T),\mathrm{~s.t.~}F_T^{'}\in\mathbb{R}^{N\times H_S\times W_S\times C_S}</script><p>我们将Φ与多智能体检测模型联合训练，使其能够智能地学习调整特征尺寸的最优方法，这与双线性插值等简单的尺寸调整方法有根本的不同。</p><p>可学习特征成形模的体系结构设计所示,它包括四个主要组件:通道对齐器，FAX成形模，跳跃连接和res - block。</p><p><strong>Channel Aligner</strong>:使用一个简单的1 × 1卷积层对齐通道维度,其输入通道数为$C_{in}$ = 2$C_S$,输出CS通道。当$C^T &gt; C^{in}$时,随机丢弃$C^{in} - C^{T}$通道,应用1 × 1卷积层得到新的特征.我们在$F^T$上重复这个过程n次,得到$n×H^T×W^T×C^S$维度的特征，并沿第一个维度进行平均。</p><p>通过这种方式,我们改善了由于信道衰落造成的信息丢失.当$C<em>T$ &lt; $C</em>{in}$时，我们从FT中随机选择通道进行填充,以满足1 × 1卷积所需的输入通道数。</p><p><strong>FAX Resizer</strong></p><p>由于LiDAR特征通常由于空体素而具有稀疏性,应用大核卷积获取全局信息可能会将无意义的信息扩散到重要区域.因此,我们在双线性缩放之前应用了融合的轴向( FAX )注意力块,以获得更好的特征表示.</p><p><strong>跳跃连接</strong>:在跳跃连接中,使用了双线性特征调整方法,以使学习更容易。</p><p><strong>残差块</strong>( Res-Block ):在重新调整特征图大小后执行标准残差块r次,以进一步细化特征图.</p><h4 id="Sparse-Cross-Domain-Transformer"><a href="#Sparse-Cross-Domain-Transformer" class="headerlink" title="Sparse Cross-Domain Transformer"></a>Sparse Cross-Domain Transformer</h4><p>在检索到缩放后的特征$F^′_{T}$后,需要将其模式从domain classifier中转换为不可区分的模式,以获得领域不变特征.为了达到这个目的,我们需要有效地从局部和全局两个方面来推理$F^{′}_T$和$F_S$之间的相关性.因此,我们提出了稀疏跨域变压器,在避免昂贵计算的同时,享受了变压器架构带来的动态和全局关注的好处.</p><script type="math/tex; mode=display">Q=W_{Q}(F_{T}^{'}),\quad K=W_{K}(F_{S}),\quad V=W_{V}(F_{S}),\\\hat{F_{T}^{'}}=Q+LN(FAX(Q,K,V)),\\F_{T}^{''}=\hat{F_{T}^{'}}+LN(FFN(\hat{F_{T}^{'}})),</script><p>其中LN是层标准化,Q是查询,K是键,V是值.然后,我们将$F^{′′}_T$和$F_S$配对在一起，并将它们送入域分类器和多智能体融合模块.</p><h4 id="Domain-Classifier"><a href="#Domain-Classifier" class="headerlink" title="Domain Classifier"></a>Domain Classifier</h4><p>设X为可能来自源域或目标域的特征图,h:X→{ 0,1 }为域分类器,试图预测源域样本$X_S$为0,目标域样本$X_T$为1</p><script type="math/tex; mode=display">\max_G\min_{h\in H}\left(\mathbf{E}_S(h(X))+\mathbf{E}_T(h(X))\right.</script><h4 id="Multi-Agent-Fusion"><a href="#Multi-Agent-Fusion" class="headerlink" title="Multi-Agent Fusion"></a>Multi-Agent Fusion</h4><p>在这项工作中，我们选择了一个最先进的模型V2X - ViT作为我们的多智能体融合算法。V2X - ViT依次采用异构多智能体自注意力块和多尺度窗口注意力块,对不同智能体的特征进行智能融合。</p><script type="math/tex; mode=display">\min_{G,M}(\mathbf{E}_D(V)),\quad V=M(F_S,F_T^{''})</script><h3 id="MACP-Efficient-Model-Adaptation-for-Cooperative-Perception"><a href="#MACP-Efficient-Model-Adaptation-for-Cooperative-Perception" class="headerlink" title="MACP: Efficient Model Adaptation for Cooperative Perception"></a>MACP: Efficient Model Adaptation for Cooperative Perception</h3><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><p>车对车（V2V）通信通过信息共享实现了 “看穿遮挡物”，极大地增强了联网和自动驾驶车辆（CAV）的感知能力，从而显著提高了性能。然而，当现有的单个代理模型显示出卓越的泛化能力时，从头开始开发和训练复杂的多代理感知模型可能既昂贵又没有必要。在本文中，我们提出了一个名为 MACP 的新框架，它能使预先训练好的单个代理模型具备合作能力。为了实现这一目标，我们<strong>确定了从单一代理转向合作设置所面临的关键挑战，并通过冻结大部分参数和添加一些轻量级模块来调整模型</strong>。我们在实验中证明，所提出的框架可以有效地利用合作观察，并在模拟和真实世界合作感知基准中优于其他最先进的方法，同时所需的可调参数大大减少，通信成本也降低了。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>我们的目标是求解一个最佳模型 $f^{∗}$，该模型能够检测和划定周围物体的边界框，并分配适当的标签.</p><p>为了简化符号，我们用一个 d′维向量 $y_j∈R^{d′}$ 来表示每个边界框及其类别标签。</p><p>在不失一般性的前提下，物体检测模型 f 是一个从点云空间到边界框及其标签的联合空间 f : X → Y 的映射，经过训练的模型理想地描述了以观测点云集 x 为条件观测边界框集 y 的概率，其值为</p><script type="math/tex; mode=display">p(\mathbf{y}|\mathbf{x};f)=\frac{p(\mathbf{x},\mathbf{y})}{p(\mathbf{x})}</script><p>如果我们用 pS (x) 表示在单个代理感知中观察到点云集的边际概率，用 pC(x) 表示在合作感知中观察到精确点云集的概率，由于 V2V 通信共享了额外的点云，这两个概率可能不同，即 pS (x) ̸= pC(x) 。</p><p>预训练模型给出的点云和边界框的联合分布偏离合作环境下的地面实况联合分布</p><script type="math/tex; mode=display">\hat{p}_{\mathcal{C}}(\mathbf{x},\mathbf{y};f)=\frac{p_{\mathcal{S}}(\mathbf{x},\mathbf{y})}{p_{\mathcal{S}}(\mathbf{x})}\cdot p_{\mathcal{C}}(\mathbf{x})\neq p_{\mathcal{C}}(\mathbf{x},\mathbf{y}) \\g^*=\underset{g\in\mathcal{G}}{\text{argmin}\mathcal{L}}\left(p_{\mathcal{C}}(\mathbf{x},\mathbf{y}),\hat{p}_{\mathcal{C}}(\mathbf{x},\mathbf{y};f\cdot g)\right) \\p(\mathbf{y}|\mathbf{x};f\cdot g)=g\left\lfloor\frac{p_{\mathcal{S}}(\mathbf{x},\mathbf{y})}{p_{\mathcal{S}}(\mathbf{x})}\right\rfloor</script><p><img data-src="https://s2.loli.net/2024/05/08/GZMfEleua21jYVv.png" alt="image-20240508151535055"></p><h4 id="Convolution-Adapter"><a href="#Convolution-Adapter" class="headerlink" title="Convolution Adapter"></a>Convolution Adapter</h4><p>ConAda 模块是特征编码器的关键组件。特征编码器网络是卷积块的级联，其中卷积层的输出经过 ConAda 模块，并通过残差连接加回自身。我们只在训练过程中训练 ConAda 参数，并在卷积层和 ConAda 模块之后的其他层中冻结预训练参数。</p><p>同时，ConAda 还充当车辆之间的通信通道。在通信过程中，ConAda 模块中的下卷积层和激活层帮助压缩和加密编码特征，以便进行广播，而上卷积层则用于解压缩接收信号，以便进行特征融合。</p><h4 id="SSF-Operator-for-Fused-Feature"><a href="#SSF-Operator-for-Fused-Feature" class="headerlink" title="SSF Operator for Fused Feature"></a>SSF Operator for Fused Feature</h4><p>我们在连续的神经网络层中执行 SSF 算子，以考虑域偏移.</p><p>假设卷积层的输出特征图由 $X^{output}_{i,j}$ ∈ $R^{H′×W ′×C′}$ 给出，我们使用缩放因子 $\gamma$∈ $R^{C′}$和移动因子 β ∈ $R^{C′}$更新特征图</p><script type="math/tex; mode=display">X_{i,j}^{\mathrm{output}}=\gamma\odot X_{i,j}^{\mathrm{output}}+\beta</script><p>最后,基于 ConAda 的通信信道可以灵活压缩信号传输,从而缓解通信瓶颈.</p><p><img data-src="https://s2.loli.net/2024/05/08/AjeXstVr2Ih6E5g.png" alt="image-20240508165439383"></p><p>这篇文章主要基于微调的方法和思想,使用的是Adapter,此外还有LoRA等.关于大模型压缩技术还有剪枝、蒸馏以及量化等等,感觉都可以试试.</p><h3 id="DI-V2X-Learning-Domain-Invariant-Representation-for-Vehicle-Infrastructure-Collaborative-3D-Object-Detection"><a href="#DI-V2X-Learning-Domain-Invariant-Representation-for-Vehicle-Infrastructure-Collaborative-3D-Object-Detection" class="headerlink" title="DI-V2X: Learning Domain-Invariant Representation for Vehicle-Infrastructure Collaborative 3D Object Detection"></a>DI-V2X: Learning Domain-Invariant Representation for Vehicle-Infrastructure Collaborative 3D Object Detection</h3><p><strong>Task</strong> Collaborative 3D Object Detection</p><p><strong>method</strong> learn domain-invariant representation</p><p><strong>inner thoughts</strong>  distillation</p><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><p>车对物（V2X）协同感知最近获得了极大关注，因为它能够通过整合来自不同代理（如车辆和基础设施）的信息来增强场景理解能力。<strong>然而，目前的研究通常对来自每个代理的信息一视同仁，忽略了每个代理使用不同激光雷达传感器所造成的固有领域差距，从而导致性能不尽如人意</strong>。</p><blockquote><p>也就是不同的LiDAR传感器本身的不同会导致一种domain gap,会使性能下降.这种说法看起来make sense,但加上一些示意图补充可能更好.这篇文章就加了一张.</p></blockquote><p>提出了 DI-V2X,旨在通过一个<strong>新的蒸馏框架来学习领域不变表征</strong>,以减轻 V2X 3D 物体检测中的领域差异。</p><p>DI-V2X 包括三个基本组件：域混合实例增强（DMA）模块、渐进式域不变性蒸馏（PDD）模块和域自适应融合（DAF）模块.</p><p>具体来说,DMA 在训练过程中为教师模型和学生模型建立了一个领域混合三维实例库，从而形成对齐的数据表示.接下来,PDD 鼓励来自不同领域的学生模型逐步学习与教师领域无关的特征表示,并利用代理之间的重叠区域作为指导,促进提炼过程.</p><p>此外,DAF 通过校准感知领域自适应注意力,缩小了学生之间的领域差距.在具有挑战性的 DAIR-V2X 和 V2XSet 基准数据集上进行的大量实验表明,DI-V2X 性能卓越,超过了之前所有的 V2X 模型.</p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>它充分利用从不同代理（即车辆和路边基础设施）收集到的传感器数据，精确感知复杂的驾驶场景.例如,在车辆视线可能受阻的情况下,由于基础设施的视角不同,它们提供的信息可以作为重要的冗余.</p><p>与以往的单车自动驾驶系统相比,这种合作从根本上扩大了感知范围,减少了盲点,提高了整体感知能力.</p><p>为了有效融合来自不同代理的信息,领先的 V2X 方法倾向于采用基于特征的中间协作,即中间融合）。这种方法在特征层保留了每个代理的基本信息，然后对其进行压缩以提高效率。因此，中间融合确保了性能与带宽的权衡，优于早期融合或后期融合方法，前者需要在代理之间传输原始点云数据，而后者则容易受到每个模型产生的不完整结果的影响。</p><p>然而，当前的中间融合模型主要集中在增强来自不同代理的特征之间的交互。</p><p>如图 1(a)所示，<strong>车辆和基础设施可能拥有不同类型的激光雷达传感器，因此直接融合不同来源的点云数据或中间特征难免会影响最终性能</strong>。因此，在这种情况下，如何从多源数据中明确学习域不变表示仍有待探索。</p><p><img data-src="https://s2.loli.net/2024/05/13/D38nvIVKNeUi6xB.png" alt="image-20240513150627484"></p><p>为此，DI-V2X 引入了一种新的师生提炼模型.<strong>在训练过程中，我们强制要求学生模型（即车辆和基础设施）学习与早期融合的教师模型一致的领域不变表示法</strong>,即把来自多个视角的点云整合为一个整体视图来训练教师。<strong>在推理过程中，只保留学生模型</strong>。具体来说，DI-V2X 由三个必要组件组成：领域混合实例增强（DMA）模块、渐进式领域不变性提炼（PDD）模块和领域自适应融合（DAF）模块</p><blockquote><p>其实基础思想就是蒸馏,搞一个结构相似但参数量更小的模型替代原本较大的模型. 关键是让小模型学会大模型的”知识”</p></blockquote><p>DMA 的目的是在训练过程中建立一个mixed ground-truth instance bank，以对齐教师和学生的点云输入，其中的实例来自车侧、路侧或融合侧。</p><p>之后，PDD 的目标是在不同阶段，即在领域适应性融合之前和之后，逐步将信息从教师传递给学生.例如,在融合之前,引导学生在<strong>非重叠区域分别学习领域不变的表征</strong>。而在融合之后，我们将重点放在重叠区域内的提炼上，因为信息已经得到了很好的汇总.</p><p>在 DAF 模块中，来自不同领域的特征会根据其空间重要性进行自适应融合。此外，DAF 还通过整合校准偏移来增强模型对姿态误差的适应能力，从而确保 V2X 检测性能的稳健性。</p><p><img data-src="https://s2.loli.net/2024/05/13/kZdD3lKJYPfWLue.png" alt="image-20240513214314409"></p><p>在DMA中,对于教师模型,使用车端数据,路端数据以及早期融合后的数据(就是转换到统一坐标系后的点云结果)利用PointPillars的decoder进行增强,使用增强后的$P_e$,再使用VoxelNet处理成BEV的二维特征图$B_t$.</p><p>学生模型结构跟教师模型类似,处理$P_v$和$P_i$提取得到对应特征图.然后使用DAF进行融合得到$B_f$</p><p>在训练的时候,在DAF融合之前和之后会有一个PDD模型将学生模型得到的特征和老师模型得到的特征利用overlapping area进行对齐.</p><p>DMA本是类似一个数据增强模块,首先将 $P<em>i$ 投影到自我车辆的坐标系上，这样 $P^T_i$ =$T(i→v)$$P^T_i$,其中 $T(i→v)$ ∈ $R^{4×4} $是基础设施到车辆系统的变换矩阵.然后,我们利用地面实况边界框 $B</em>{gt}$ = {$b<em>k$} 从 $P_v$ 和 $P_i$ 获取实例.来自不同domain、对应于同一地面实况对象的实例将被合并，得到一个早期融合实例 pk = Concat($p^v_k$, $p^i_k$) ∈ $R^{N</em>{k}×4}$，其中 $p^v_k$∈ Pv 和 $p^i_k$∈ Pi 是来自两个领域、以 $b_k$为索引的实例点。由于代理之间的相对位置会随着自我车辆的运动而发生动态变化，因此有些实例可能仅来自单个域，而另一些实例则可能直接来自早期融合的重叠区域。为了确定每个实例的域来源，我们通过计算来自每个域的点比例，将这些实例分为三类：</p><script type="math/tex; mode=display">\begin{aligned}&D_{i} =\{\mathbf{p}_k|N_k^v/(N_k^v+N_k^i)<\tau_l\}  \\&D_{f} =\{\mathbf{p}_k|\tau_l<N_k^v/(N_k^v+N_k^i)<\tau_h\}  \\&D_{v} =\{\mathbf{p}_k|N_k^v/(N_k^v+N_k^i)>\tau_h\} \end{aligned}</script><p>$N^{v}<em>{k}$ 和 $N^{i}</em>{k}$ 分别代表车辆侧和基础设施侧的点数，τl、τh 表示阈值.然后，得到一个实例库$D<em>{mixed}$ = $D_i$ ∪ $D_f$ ∪ $D_v$，其中包含来自所有领域（即包括融合领域）的混合实例。在训练过程中，我们按照一定的概率从$D</em>{mixed}$中随机抽取实例，并将这些实例添加给教师和学生.</p><p>通过涉及不同领域的实例<strong>增强了训练数据的多样性</strong>.此外,从每个学生的角度来看,来自其他领域的信息也会通过实例级混合被纳入其中（Zhang 等人，2018 年）.这种方法从根本上调整了教师模型和学生模型之间的数据分布,从而在随后的知识提炼过程中产生了更具普适性的特征。</p><p>为了获得跟域无关的特征,采用了两阶段蒸馏策略，即在领域自适应融合（DAF）模块之前和之后进行蒸馏。第一个蒸馏阶段是将学生的分布与教师模型相一致，作为 DAF 的输入，这对准确的信息融合至关重要。</p><p>然而，根据经验发现，直接对学生和教师之间的整个特征图进行蒸馏会产生次优性能.为此选择在第一阶段对非重叠区域进行蒸馏.在第二阶段,由于学生特征已通过 DAF 得到很好的融合,我们可以集中精力对重叠区域进行蒸馏.这种两阶段的提炼过程可使学生模型与来自不同区域的教师模型的特征表示相匹配,从而缩小学生之间的差距.</p><p>在融合之前的蒸馏,首先需要计算重叠掩码,以确定重叠区域.</p><p>将基础设施一侧的感知区域转换到车辆一侧，得到一个新的矩形 $A<em>i$ = ($x_i,y_i,2R_x, 2R_y, θ_i$)。然后我们可以计算 $A_v$ 和 $A_i$ 之间的重叠区域，即 $P</em>{overlap}$ = Intersection($A<em>v$，$A_i$)。然后对得到的 $P</em>{overlap}$（即多边形）进行下采样,以匹配特征地图 $B_v$ ∈ $R^{H×W ×C}$ 的大小.</p><script type="math/tex; mode=display">\left.\mathbf{M}(i,j)=\left\{\begin{array}{cc}1&,&\mathrm{if~}(i,j)\in\mathbf{P}_{overlap}\\0&,&\mathrm{otherwise}\end{array}\right.\right.</script><p>M(i, j) ∈ 0, 1 表示（i, j）坐标处的二进制值。通过只对非重叠区域 进行提炼,我们允许每个学生集中学习与各自领域一致的表征。这就避免了强制要求不完整的学生特征向教师的完整特征学习的严格约束</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{da}& =\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_v\odot\tilde{\mathbf{M}}_v)+\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_i\odot\tilde{\mathbf{M}}_i)  \\&=\frac1{HW}\sum_m^H\sum_m^W|\mathbf{B}_t(m,n)-\mathbf{B}_v(m,n)|\times\tilde{\mathbf{M}}_v(m,n) \\&+\frac1{HW}\sum_m^H\sum_n^W|\mathbf{B}_t(m,n)-\mathbf{B}_i(m,n)|\times\tilde{\mathbf{M}}_i(m,n)\end{aligned}</script><p>在融合后的蒸馏,使用 DAF 模块有效地合并了来自不同领域的学生特征.因此,我们得到了一个能力很强的融合表征,用 Bf 表示,它可以与教师的特征表征 $B_t$ 配对.</p><p>直观地说,Bt 是通过混合点云数据的早期协作获得的,其本质上涉及最小的信息损失.通过强制中间融合特征 $B_f$ 逐步与$B_t$ 保持一致,可以有效地确保在整个学习过程中始终整合通过早期融合阶段获得的基本知识,从而形成与领域无关的特征表征.</p><p>此外，我们还可以超越特征级对齐，扩展到预测级对齐.由于我们的最终目标是从两个 $B_f$ 解码出最终的三维边界框，确保预测层面的对齐将进一步提高结果的一致性和准确性.</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{f}& =\mathcal{L}_1(\mathbf{B}_t,\mathbf{B}_f\odot\mathbf{M}_v)  \\&=\frac1{HW}\sum_m^H\sum_m^W|\mathbf{B}_t(m,n)-\mathbf{B}_f(m,n)|\times\tilde{\mathbf{M}}_v(m,n)\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{p}& =\mathcal{L}_{class}+\mathcal{L}_{regression}  \\&=\frac1K\sum_k^K(|\mathbf{c}_k-\mathbf{c}_k^s|+|\mathbf{r}_k-\mathbf{r}_k^s|)\end{aligned}</script><script type="math/tex; mode=display">\mathcal{L}=\mathcal{L}_{detect}+\lambda_{kd}(\mathcal{L}_{da}+\mathcal{L}_f+\mathcal{L}_p)</script><p>DAF 模块的目标是聚合车辆和基础设施的特征,创建一个包含各领域有价值信息的增强表示.然而,这一融合过程面临着两大挑战:双方姿势的潜在错位和设计合适的特征交互策略.</p><p><img data-src="https://s2.loli.net/2024/05/14/s9KUC8vfEXOgTNb.png" alt="image-20240514152437112"></p><p>由于<strong>传感器噪声</strong>、<strong>动态运动</strong>和不同时间戳的不一致性等原因，现实世界中车辆和基础设施的相对姿态很容易受到影响，这将影响 V2X 感知的准确性.为了解决这个问题,利用校准偏移来动态纠正潜在的姿势误差.</p><p>首先用卷积层预测校准偏移,使$B_i$与$B_v$更好地对齐,记为</p><script type="math/tex; mode=display">\Delta_{(i\to v)}=\text{Conv}(\text{Concat}(\mathbf{B}_v,\mathbf{B}_i))\in\mathbb{R}^{H\times W\times2}</script><script type="math/tex; mode=display">\mathbf{B}_i^{^{\prime}}(p_k)=\mathbf{B}_i(p_k+\mathbf{\Delta}_{(i\to v)}(p_k)),0\leq k<HW</script><script type="math/tex; mode=display">\mathbf{A}_d=\mathrm{Softmax}(\mathrm{Conv}(\mathbf{B}_{cat}))\in\mathbb{R}^{H\times W\times C\times2}\\\mathbf{A}_s=\mathrm{Conv}(\mathbf{B}_{cat})+\max(\mathbf{B}_{cat})\\\mathbf{B}_f=\mathrm{Conv}(\mathbf{A}_d\odot\mathbf{A}_s\cdot\mathbf{B}_{cat})\in\mathbb{R}^{H\times W\times C}</script><p>空间自适应注意力可以通过聚合多粒度特征,提供稳健而灵活的注意力图</p><p>最后结果展示包括在两个数据集上与No fusion,early和late fusion以及一些列经典中期融合模型对比.</p><p>然后证明domain generalization实验证明模型学到了域不变的特征.辞海还有消融实验,证明提出的每个组件的作用.</p><p><img data-src="https://s2.loli.net/2024/05/14/v4PD6HNOp1ercGx.png" alt="image-20240514172721623"></p><p><img data-src="https://s2.loli.net/2024/05/14/MA5Ia4qDBscdp1L.png" alt="image-20240514172919650"></p><h2 id="Sim2Real"><a href="#Sim2Real" class="headerlink" title="Sim2Real"></a>Sim2Real</h2><h3 id="S2R-ViT-for-Multi-Agent-Cooperative-Perception-Bridging-the-Gap-from-Simulation-to-Reality"><a href="#S2R-ViT-for-Multi-Agent-Cooperative-Perception-Bridging-the-Gap-from-Simulation-to-Reality" class="headerlink" title="S2R-ViT for Multi-Agent Cooperative Perception: Bridging the Gap from Simulation to Reality"></a>S2R-ViT for Multi-Agent Cooperative Perception: Bridging the Gap from Simulation to Reality</h3><h4 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h4><p>由于缺乏足够的真实多智能体数据且标注耗时，现有的多智能体协同感知算法通常选取模拟的传感器数据进行训练和验证。<strong>然而，当这些经过仿真训练的模型被部署到真实世界时，由于仿真数据和真实数据之间存在显著的领域差距，感知性能会下降</strong>。</p><p>在本文中，我们提出了第一个使用新型视觉转换器的多智能体协作感知的仿真到现实迁移学习框架，命名为S2R - ViT，它同时考虑了模拟数据和真实数据之间的部署差距和特征差距。</p><p>我们研究了这两种类型的域间隙的影响，并提出了一种新的不确定感知视觉转换器来有效地缓解部署间隙，并提出了一种基于代理的特征自适应模块，通过代理间和代理间的鉴别器来减小特征间隙。</p><p>在公开的多智能体协同感知数据集OPV2V和V2V4Real上的大量实验表明，本文提出的S2R - ViT方法能够有效地弥补仿真与现实之间的差距，在基于点云的三维目标检测中显著优于其他方法。</p><h4 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h4><p>多智能体协作感知的最新进展显示出克服单智能体感知受感知范围和遮挡挑战的局限性的潜力.多智能体协作感知系统通过利用智能体之间的通信技术共享信息，相比于单智能体感知，能够显著提升感知性能</p><p>由于在真实世界中收集具有通信的多智能体数据的困难，<strong>在多样化和复杂的真实世界环境中收集足够多的真实数据是昂贵且不容易的。此外，多智能体协同感知系统的地面真值数据标注和统一坐标投影尤为耗时。</strong>因此，现有的许多多智能体协同感知研究工作通常选取模拟数据进行模型训练和验证</p><p>然而，<strong>当我们将用模拟数据训练的模型应用于真实世界时，感知性能通常会下降。这种现象是由于模拟数据和真实数据之间存在显著的域差距</strong>。</p><p>在本文中，我们的研究重点是<strong>利用有标记的模拟数据和无标记的真实世界数据作为迁移学习，以减少多智能体协作感知的领域差距</strong>。</p><p><img data-src="https://s2.loli.net/2024/05/17/DbfYtlhCnFSpTE7.png" alt="image-20240517203347621"></p><p>我们观察到，多智能体协作感知从模拟到现实的领域差距包括以下两个角度</p><p><strong>部署间隙</strong>( Deployment Gap ):与理想的仿真环境不同,<strong>在现实世界的智能体通信过程中，由于不可避免的GPS误差和通信延迟(时间延迟),多个智能体可能存在定位(位置和航向)错误</strong></p><p><strong>特征间隙</strong>( Feature Gap ):<strong>现实世界的点云特征分布可能与仿真数据有显著差异,例如更复杂的驾驶场景、不同的激光雷达通道数、混合交通流、各种点云变化等。</strong></p><p>在本文中，我们提出了第一个使用新型视觉转换器( ViT )的多智能体协作感知的仿真到现实( S2R )迁移学习框架，命名为S2R - ViT，同时考虑了部署间隙和特征间隙。我们选择车辆到车辆( Vehicle-to-Vehicle，V2V )协同感知任务作为基于点云的三维目标检测的算法开发。具体来说，我们的框架将来自模拟的有标记点云数据和来自真实世界的无标记数据作为输入，从而大量地利用模拟数据。在机器学习研究中，这种设置被广泛称为从源域(模拟)到目标域(现实)的无监督域适应。</p><p>S2R - ViT包括两个关键部分：( 1 ) <strong>S2R-UViT：一种新型的S2R不确定感知视觉转换器，可以有效地缓解develomment gap带来的不确定性</strong>。具体来说，S2R - UViT包括一个<strong>局部和全局的多头自注意力( LG-MSA )模块</strong>，以<strong>增强所有智能体空间位置上的特征交互，以容忍不确定性的缺陷</strong>；<strong>还包括一个不确定性感知模块( UAM )，通过考虑不同不确定性水平的共享其他智能体特征来增强自我智能体的特征</strong>.(2)S2R-AFA：基于<strong>S2R Agent的特征自适应以缩小特征差距</strong>。<strong>S2RAFA利用智能体间和自我代理的判别器提取领域不变特征</strong>,以弥合feature gap。</p><blockquote><p>Uncertainty-aware vision Transformer,可有效缓解development gap带来的不确定性.</p><p>通过一个S2R agent-based feature adaptation利用代理间和自我代理判别器提取domain-invariant features. 注意这里domain-invariant features已经被之前的2024的DI-V2X文章提到了,但这里更偏重虚拟到显示,而DI-V2X偏重代理的不同.</p></blockquote><p><img data-src="https://s2.loli.net/2024/05/20/TyuX2Zsjb19mcvL.png" alt="image-20240520100453017"></p><p>与交换原始传感数据或检测输出相比,当代方法通常共享由神经网络提取的中间特征.</p><p>这种策略在精度和带宽需求之间提供了一个最佳的平衡.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着大模型时代的到来,原先通过修改模型结构提升性能写论文的方式已经有点out of date了,同时写文章的倾向已经从改架构成SOTA慢慢转变为回归任务背景以及讲好一个完整故事并给出自己的findings和insight了.也因此,在协作感知方面,论文方向也逐渐在转变,这里看看最近的文章整理一下思路.&lt;/p&gt;</summary>
    
    
    
    
    <category term="collaborative perception" scheme="https://www.sekyoro.top/tags/collaborative-perception/"/>
    
  </entry>
  
  <entry>
    <title>computer graphics:计算机图形学学习</title>
    <link href="https://www.sekyoro.top/2024/05/07/computer-graphics-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/05/07/computer-graphics-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-07T10:46:32.000Z</published>
    <updated>2024-05-19T15:20:43.342Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>简简单单学个概念.<br><span id="more"></span></p><p>早期的OpenGL使用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少有控制OpenGL如何进行计算的自由。而开发者迫切希望能有更多的灵活性。随着时间推移，规范越来越灵活，开发者对绘图细节有了更多的掌控。立即渲染模式确实容易使用和理解，但是效率太低。<strong>因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式(Core-profile)下进行开发</strong>，这个分支的规范完全移除了旧的特性。</p><p>当使用OpenGL的核心模式时，OpenGL迫使我们使用现代的函数。当我们试图使用一个已废弃的函数时，OpenGL会抛出一个错误并终止绘图。现代函数的优势是更高的灵活性和效率，然而也更难于学习。立即渲染模式从OpenGL<strong>实际</strong>运作中抽象掉了很多细节，因此它在易于学习的同时，也很难让人去把握OpenGL具体是如何运作的。现代函数要求使用者真正理解OpenGL和图形编程，它有一些难度，然而提供了更多的灵活性，更高的效率，更重要的是可以更深入的理解图形编程</p><p>使用GLAD和GLFW作为版本和窗口管理库.</p><ul><li><p>glfwWindowShouldClose函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回<code>true</code>，渲染循环将停止运行，之后我们就可以关闭应用程序。</p></li><li><p>glfwPollEvents函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</p></li><li><p>glfwSwapBuffers函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</p></li></ul><p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，<strong>实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的</strong>。图形渲染管线可以被划分为两个主要部分：<strong>第一部分把你的3D坐标转换为2D坐标</strong>，<strong>第二部分是把2D坐标转变为实际的有颜色的像素</strong>。</p><p><strong>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出</strong>。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，<strong>它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)</strong>。</p><p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。<strong>OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的</strong></p><p><img data-src="https://learnopengl-cn.github.io/img/01/04/pipeline.png" alt="img" style="zoom: 67%;" /></p><p><strong>图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段</strong></p><p>图形渲染管线的第一个部分是<strong>顶点着色器</strong>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标，同时顶点着色器允许我们对顶点属性进行一些基本处理</p><p>顶点着色器阶段的输出可以选择性地传递给<strong>几何着色器</strong>(Geometry Shader)。几何着色器将一组顶点作为输入，<strong>这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状</strong>。在这个例子中，它从给定的形状中生成第二个三角形。</p><blockquote><p>为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？<strong>做出的这些提示叫做图元(Primitive)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：GL_POINTS、GL_TRIANGLES、GL_LINE_STRIP</strong>。</p></blockquote><p><strong>图元装配</strong>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是GL_POINTS，那么就是一个顶点），并将所有的点装配成指定图元的形状</p><p>图元装配阶段的输出会被传入光栅化阶段(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p><p>片段着色器的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色</p><p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同</p><p><strong>然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</strong></p><p>在现代OpenGL中，我们<strong>必须</strong>定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p><p>OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把<strong>所有的</strong>3D坐标变换为屏幕上的2D像素；<strong>OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它</strong>。所有在这个范围内的坐标叫做标准化设备坐标(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p><p>通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</p><p>通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，标准化设备坐标(Normalized Device Coordinates)会变换为屏幕空间坐标(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p><p>我们通过顶点缓冲对象(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure><p>现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。。</p><p>顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个<strong>顶点和一个片段着色器</strong>。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">in</span> <span class="type">vec3</span> aPos;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_Position</span> = <span class="type">vec4</span>(aPos.x, aPos.y, aPos.z, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个<code>float</code>分量，包含的数量可以从它的后缀数字看出来</p><p>每个顶点都有一个3D坐标，我们就创建一个<code>vec3</code>输入变量aPos。我们同样也通过<code>layout (location = 0)</code>设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值.</p><p>写好glsl后,首先创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用glCreateShader创建这个着色器</p><h3 id="GAMES101"><a href="#GAMES101" class="headerlink" title="GAMES101"></a>GAMES101</h3><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>使用homegeneous coordinates,因为<strong>Translation cannot be represented in matrix form</strong></p><p><img data-src="https://s2.loli.net/2024/05/12/36b2pEjwCWGf7N8.png" alt="image-20240512215001385"></p><p><img data-src="https://s2.loli.net/2024/05/12/rA39m7M5WTFwQRD.png" alt="image-20240512223828687"></p><p><img data-src="https://s2.loli.net/2024/05/12/OxDF2GB7sUk8iRt.png" alt="image-20240512225758095"></p><p><img data-src="https://s2.loli.net/2024/05/12/yNZU6TEMkJw8vS5.png" alt="image-20240512231120803"></p><p><img data-src="https://s2.loli.net/2024/05/12/LjWzDSbx2McfVpa.png" alt="image-20240512231103788"></p><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><h5 id="HW0"><a href="#HW0" class="headerlink" title="HW0"></a>HW0</h5><p>学习Eigen库,二维和三维的空间变换,都可以拆成旋转,放缩和平移,但是平移无法使用与坐标维数相同的转换矩阵,可以通过homogeneous coordinates.</p><p>观测转换,视图和投影转换. 投影转换又可以分为正交和透视投影.</p><p>view transformation就是相机的摆放,包括位置,朝向和向上的方向.</p><p><img data-src="https://s2.loli.net/2024/05/19/yApJSIKMls4CZzF.png" alt="image-20240519160531237"></p><p> 又叫做ModelView Transformation.</p><p>相当于将相机连着物体一起做变换,使得相机朝着-Z,位置在原点,向上方向在Y.</p><p><img data-src="https://s2.loli.net/2024/05/19/U5DBHQOvcAd2wqp.png" alt="image-20240519163320086"></p><p>一般做view transformation就是先平移后旋转.</p><p><img data-src="https://s2.loli.net/2024/05/19/9EodBgHcTr5J874.png" alt="image-20240519164238487"></p><p>然后做投影,也就是将3D变为2D,先做透视再做正交. 做透视因为符合视觉系统,做正交将物体归一化并放在中心.</p><p><img data-src="https://s2.loli.net/2024/05/19/niHmVGBdhUIR2qv.png" alt="image-20240519164611669"></p><p>做正交矩阵如下.</p><p><img data-src="https://s2.loli.net/2024/05/19/ucndILDTHwEMpmW.png" alt="image-20240519164927743"></p><p><img data-src="https://s2.loli.net/2024/05/19/t85cSLD7JZ6Vaep.png" alt="image-20240519164732598"></p><p>做投影如下,</p><p><img data-src="https://s2.loli.net/2024/05/19/Hl7XgyvkEi8Gen9.png" alt="image-20240519164510132"></p><p>重点是关于透视矩阵的推理,首先因为等比例的坐标缩放,</p><p><img data-src="https://s2.loli.net/2024/05/19/Rv2IMdrlYDpk9Tq.png" alt="image-20240519181537968"></p><script type="math/tex; mode=display">\begin{pmatrix}x\\y\\z\\1\end{pmatrix}\Rightarrow\begin{pmatrix}nx/z\\ny/z\\\text{unknown}\\1\end{pmatrix}\overset{\text{mult by z}}{\operatorname*{==}}\begin{pmatrix}nx\\ny\\\text{still unknown}\\z\end{pmatrix}</script><p>这样就知道透视投影矩阵的三行信息</p><script type="math/tex; mode=display">M_{persp\to ortho}^{(4\times4)}\begin{pmatrix}x\\y\\z\\1\end{pmatrix}=\begin{pmatrix}nx\\ny\\\text{unknown}\\z\end{pmatrix} \\M_{persp\to ortho}=\begin{pmatrix}n&0&0&0\\0&n&0&0\\?&?&?&?\\0&0&1&0\end{pmatrix}</script><p>此外,有两点:在near plane也就是投影到的平面上的坐标经过这个矩阵转换后依然不变,而far plane上的坐标经过透视投影后z坐标不变.</p><p>对于near plane(x,y,n,1),由于转换后坐标相同得到(nx,ny,n^2^,n).</p><script type="math/tex; mode=display">\begin{pmatrix}0&0&A&B\end{pmatrix}\begin{pmatrix}x\\y\\n\\1\end{pmatrix}=n^2</script><p>所以第三行的值必须是(0,0,A,B).即有An+B=n^2^.</p><p>假设far plane上的一个点坐标是(x,y,f,1),也有Af+B=f^2^.解得</p><script type="math/tex; mode=display">\begin{aligned}An+B&=n^2\\Af+B&=f^2\end{aligned}\quad\begin{array}{c}A=n+f\\B=-nf\end{array}</script><p>所以透视矩阵如下,其中n是near plane上的点的z坐标,f是随便一个点的z坐标.</p><script type="math/tex; mode=display">M_{persp\to ortho}=\begin{pmatrix}n&0&0&0\\0&n&0&0\\0&0&n+f&-nf\\0&0&1&0\end{pmatrix}</script><p>有了透视矩阵后,正交矩阵比较简单.在进行投影时先透视后正交就得到投影矩阵了. 如果有了near plane的四个点坐标就方便进行视口变换,或者通过fovY和aspect ratio,前者是一个角度,可以通过这个角度知道视点与near plane平面的距离,aspect ratio是平面宽度/高度.</p><p><img data-src="https://s2.loli.net/2024/05/19/N5qEdQ7yZGDzgKn.png" alt="image-20240519231541738"></p><p><img data-src="https://s2.loli.net/2024/05/19/V6DlLH2M4jmpgXZ.png" alt="image-20240519224805373"></p><script type="math/tex; mode=display">\tan\frac{fovY}2=\frac t{|n|}\\aspect=\frac rt</script><p><img data-src="https://s2.loli.net/2024/05/19/PLHMImvQDRfVTUW.png" alt="image-20240519224814121"></p><p>在图形学的MVP(model transformation,view transformation,project transformation)之后,得到了规范的2D投影.然后需要将规范的cubde转到screen上,</p><p><img data-src="https://s2.loli.net/2024/05/19/vuFnfNzxKCAotEl.png" alt="image-20240519225110452"></p><p><img data-src="https://s2.loli.net/2024/05/19/rasPKwzLBvY7SUk.png" alt="image-20240519225120720"></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="缓冲对象"><a href="#缓冲对象" class="headerlink" title="缓冲对象"></a>缓冲对象</h4><p>比如顶点缓冲对象,顶点数组对象.</p><p>定义顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：<strong>顶点着色器</strong>。它<strong>会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡</strong>。顶点着色器接着会处理我们在内存中指定数量的顶点。</p><p>通过顶点缓冲对象(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p><h4 id="缓冲对象类型"><a href="#缓冲对象类型" class="headerlink" title="缓冲对象类型"></a>缓冲对象类型</h4><p>比如顶点缓冲对象类型,创建好的缓冲可以绑定到某种对象类型上.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br></pre></td></tr></table></figure><p>从这一刻起，我们使用的任何（在GL_ARRAY_BUFFER目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用glBufferData函数，它会把之前定义的顶点数据复制到缓冲的显存中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure><h4 id="shader与GLSL"><a href="#shader与GLSL" class="headerlink" title="shader与GLSL"></a>shader与GLSL</h4><p><strong>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出</strong>。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，<strong>它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)</strong>。</p><p>包括顶点着色器等等</p><h4 id="VAO"><a href="#VAO" class="headerlink" title="VAO"></a>VAO</h4><p>顶点数组对象(又称 VAO)可以像顶点缓冲区对象一样绑定,此后的顶点属性调用都将存储在 VAO 中.</p><h3 id="书籍和网站推荐"><a href="#书籍和网站推荐" class="headerlink" title="书籍和网站推荐"></a>书籍和网站推荐</h3><p><strong>书籍</strong></p><ol><li>Fundamentals of Computer Graphics<a href="https://github.com/FCG-Translators/FundamentalsOfComputerGraphics-CN">FCG-Translators/FundamentalsOfComputerGraphics-CN: 计算机图形学基础（中文译本） (github.com)</a></li><li><a href="https://book.douban.com/subject/35221845/">OpenGL超级宝典（第7版） (豆瓣) (douban.com)</a></li></ol><p><strong>网站</strong></p><ol><li><a href="https://learnopengl.com/">Learn OpenGL, extensive tutorial resource for learning Modern OpenGL</a></li><li><a href="https://www.scratchapixel.com/">Scratchapixel 4.0, Learn Computer Graphics Programming</a></li><li><a href="https://ogldev.org/">OpenGL Step by Step - OpenGL Development (ogldev.org)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;简简单单学个概念.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器简单JS逆向Tricks</title>
    <link href="https://www.sekyoro.top/2024/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8D%95JS%E9%80%86%E5%90%91Tricks/"/>
    <id>https://www.sekyoro.top/2024/05/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8D%95JS%E9%80%86%E5%90%91Tricks/</id>
    <published>2024-05-03T12:10:56.000Z</published>
    <updated>2024-05-06T15:08:52.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>因为平常会接触一些Web逆向一些API啥的,学习一些基本的浏览器Debug能力以及一些实战.这些知识可能比较散碎不够系统.<br><span id="more"></span></p><p>目前浏览器JS逆向在国内的教程都太散了,而且很多人教的并不好.我这里分一些基础工具使用,常遇到的逆向问题和实战, 不定期更新.注意,这里的逆向并不是逆向可执行程序.</p><h2 id="浏览器开发工具基本使用"><a href="#浏览器开发工具基本使用" class="headerlink" title="浏览器开发工具基本使用"></a>浏览器开发工具基本使用</h2><p>F12开发者工具是Web逆向最常用的,用谷歌或者Edge浏览器的开发者工具都比较强大,功能很多.</p><p>主要关注XHR断点,手动断点debug,DOM事件,查看堆栈函数,以及使用自己代码进行覆盖操作.</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDI1NjUxMg%3D%3D&amp;chksm=8d314fc8ba46c6de5e29f6001a7a9a3fd7705a16ec37bd77cf0f975d323fe91ce36017f8ee65&amp;idx=2&amp;mid=2651261863&amp;scene=21&amp;sn=1b8045af007d91be759d11c13d3844f0#wechat_redirect">Chrome调试工具常用功能整理 (qq.com)</a></p><p>一些常用技巧<a href="https://www.52pojie.cn/thread-1160287-1-1.html">js逆向技巧分享 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://zhuanlan.zhihu.com/p/108207751#:~:text=js逆向技巧分享 1 1. 搜索 2 2. debug 3,写js代码 7 7. 打印windows对象的值 8 8. 勾子 更多项目">js逆向技巧分享 - 知乎 (zhihu.com)</a></p><h2 id="通常遇到的问题"><a href="#通常遇到的问题" class="headerlink" title="通常遇到的问题"></a>通常遇到的问题</h2><h3 id="无限Debugger"><a href="#无限Debugger" class="headerlink" title="无限Debugger"></a>无限Debugger</h3><p><a href="https://cloud.tencent.com/developer/article/1986399">原创丨JavaScript 逆向过程中无限 Debug 的绕过方案-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/116652656">JS 逆向 —- 过无限debugge、hook、js混淆还原、控制流混淆_hook无线debug-CSDN博客</a></p><p>打开开发者工具就卡住.</p><h3 id="AST解混淆"><a href="#AST解混淆" class="headerlink" title="AST解混淆"></a>AST解混淆</h3><p><a href="https://www.bilibili.com/video/BV1Jz4y1M799?p=2&amp;vd_source=177ef88aa6608bc3652c72d71b0aa098">AST基础知识_哔哩哔哩_bilibili</a></p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>只要知道加密方式就不难了,加密方式一般</p><ul><li>线性散列算法（签名算法)MD5</li><li>对称性加密算法AES DES</li><li>非对称性加密算法 RSA</li></ul><p><a href="https://blog.csdn.net/qq_44159028/article/details/121732881">js逆向之加密算法介绍_js加密逆向-CSDN博客</a></p><p><a href="https://blog.csdn.net/Ig_thehao/article/details/119104016">对于js逆向过程中对加密方式识别的小技巧_怎么看密文是否aes-CSDN博客</a></p><p><a href="http://littleshark.space/2023/07/08/JS逆向笔记/JS逆向学习---加密算法梳理/#摘要算法">JS逆向—-加密算法 | LittleShark’s Space</a></p><h3 id="Webpack打包后的网站"><a href="#Webpack打包后的网站" class="headerlink" title="Webpack打包后的网站"></a>Webpack打包后的网站</h3><p>目前打包有Vite,webpack等等,不同的打包框架得到的网站代码还不一样.</p><p><a href="http://littleshark.space/2023/07/09/JS逆向笔记/JS逆向学习---webpack技术/">JS逆向—-webpack技术 | LittleShark’s Space</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://scrapecrow.com/reverse-engineering-intro.html">Scrapecrow - Introduction To Reverse Engineering The Web</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为平常会接触一些Web逆向一些API啥的,学习一些基本的浏览器Debug能力以及一些实战.这些知识可能比较散碎不够系统.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从论文中看AI绘画</title>
    <link href="https://www.sekyoro.top/2024/05/02/%E4%BB%8E%E8%AE%BA%E6%96%87%E4%B8%AD%E7%9C%8BAI%E7%BB%98%E7%94%BB/"/>
    <id>https://www.sekyoro.top/2024/05/02/%E4%BB%8E%E8%AE%BA%E6%96%87%E4%B8%AD%E7%9C%8BAI%E7%BB%98%E7%94%BB/</id>
    <published>2024-05-02T12:25:08.000Z</published>
    <updated>2024-05-16T13:27:59.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要看是看Diffusion Models,CLIP,ControlNet,IP-Adapter这种经典论文,尝试总结论文写作的一些方式以及图像生成模型的一些内在思想. 对于其中的数学原理和代码不过深究.<br><span id="more"></span></p><h3 id="DDPM"><a href="#DDPM" class="headerlink" title="DDPM"></a>DDPM</h3><p>使用扩散模型得到高质量图像,证明了这种方法在训练时与多种噪声等级下的去噪分数等同,在采样时与退火朗文动力学等价.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503150540112.png" alt="image-20240503150540112"></p><p>有forward precess和reversed process,</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503152315412.png" alt="image-20240503152315412"></p><p>对于正向过程,就是对图像的一个加噪过程, 逆向过程需要通过神经网络拟合,论文中没有考虑方差.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503164248521.png" alt="image-20240503164248521"></p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503164900128.png" alt="image-20240503164900128"></p><p>使用了重参数化,类似VAE中的思想.在加噪声时,通过使用高斯噪声和均值、方差.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503174343480.png" alt="image-20240503174343480" style="zoom:67%;" /></p><p>这样只要知道x_0以及超参数α和β就能得到后面加噪的数据.计算概率密度函数</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503180338927.png" alt="image-20240503180338927" style="zoom: 80%;" /></p><p>对于优化目标,需要让p和q的分布尽量接近,相当于让均值和方差类似.</p><script type="math/tex; mode=display">\sum_{t=2}^TE_{q(x_t|x_0)}[D_{KL}(q(x_{t-1}|x_t,x_0)||p_\theta(x_{t-1}|x_t)]</script><p>而方差是定值,对于均值</p><script type="math/tex; mode=display">\begin{aligned}\mu_{q}& =\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_{t}x_{0}+\sqrt{\alpha_{t}}(1-\bar{\alpha}_{t-1})x_{t}}{1-\bar{\alpha}_{t}}  \\&=\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_{t}\frac{x_{t}-\sqrt{1-\bar{\alpha}_{t}}\epsilon}{\sqrt{\bar{\alpha}_{t}}}+\sqrt{\alpha_{t}}(1-\bar{\alpha}_{t-1})x_{t}}{1-\bar{\alpha}_{t}} \\&=\frac{1}{\sqrt{\alpha_{t}}}(x_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\epsilon)\end{aligned}</script><p>模型使用了Unet和attention,残差连接预测噪声.得到噪声后可以得到$p<em>\theta(x</em>{t-1}|x_t)$</p><script type="math/tex; mode=display">x_{t-1}=\frac{1}{\sqrt{\alpha_{t}}}(x_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\epsilon_{\theta})+\sigma_{q}z</script><p>论文<a href="http://arxiv.org/abs/2006.11239">http://arxiv.org/abs/2006.11239</a> <a href="https://zhuanlan.zhihu.com/p/650394311">深入浅出扩散模型(Diffusion Model)系列：基石DDPM（人人都能看懂的数学原理篇） - 知乎 (zhihu.com)</a></p><h3 id="Improved-DDPM"><a href="#Improved-DDPM" class="headerlink" title="Improved DDPM"></a>Improved DDPM</h3><p>对DDPM做了改进.</p><ul><li>学习方差会让生成效果更好（DDPM 中只学习了均值，方差是一个常数）</li><li>提出了余弦加噪方法，比线性加噪效果更好</li></ul><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503192352123.png" alt="image-20240503192352123"></p><h3 id="DDIM-2020"><a href="#DDIM-2020" class="headerlink" title="DDIM 2020"></a>DDIM 2020</h3><p>为了加快采样速度，提出了去噪扩散隐含模型（DDIMs），这是一类更有效的迭代隐含概率模型，其训练过程与 DDPMs 相同。在 DDPMs 中，生成过程被定义为特定马尔可夫扩散过程的反向。</p><p>我们通过一类能实现相同训练目标的非马尔可夫扩散过程来推广 DDPM。这些非马尔可夫过程可以对应于确定性的生成过程，从而产生能更快地生成高质量样本的隐式模型。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503193245982.png" alt="image-20240503193245982"></p><p><a href="https://zeqiang-lai.github.io/blog/posts/ai/ddim/">关于 DDIM 采样算法的推导 | Ze’s Blog (zeqiang-lai.github.io)</a></p><p>上面三个数学公式涉及比较多,比较偏学术,我的目的是想介绍一个脉络和抽象的概念和作用,使得使用一些开源AI绘画这类应用时更加得心应手,下面更多涉及到一些AI绘画功能层面上的东西.</p><p><img data-src="https://maciejdomagala.github.io/assets/images/Screenshot_2022-05-31_at_13.31.46.png" alt="img"></p><h3 id="Latent-Diffusion-Models-2022"><a href="#Latent-Diffusion-Models-2022" class="headerlink" title="Latent Diffusion Models 2022"></a>Latent Diffusion Models 2022</h3><blockquote><p>Stable Diffusion产品的背后模型</p></blockquote><p>将图像形成过程分解为一系列去噪自编码器的顺序应用，扩散模型（DMs）在图像数据及更广泛范围内实现了最先进的合成结果。此外，它们的表达允许一种引导机制来控制图像生成过程而无需重新训练。然而，由于这些模型通常直接在像素空间中操作，优化强大的DMs通常需要消耗数百个GPU天,论文提出的方法将它们在latent space中进行并使用预训练的autoencoder.并使用了cross-attention结构,现在看来也是非常经典了.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503210656442.png" alt="image-20240503210656442"></p><script type="math/tex; mode=display">\mathrm{Attention}(Q,K,V)=\mathrm{softmax}\left(\frac{QK^{T}}{\sqrt{d}}\right)\cdot V\\Q=W_Q^{(i)}\cdot\varphi_i(z_t),K=W_K^{(i)}\cdot\tau_\theta(y),V=W_V^{(i)}\cdot\tau_\theta(y)</script><script type="math/tex; mode=display">L_{DM}=\mathbb{E}_{x,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(x_t,t)\|_2^2\Big] \\L_{LDM}:=\mathbb{E}_{\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(z_t,t,\tau_\theta(y))\|_2^2\Big]</script><h3 id="CLIP-2021"><a href="#CLIP-2021" class="headerlink" title="CLIP 2021"></a>CLIP 2021</h3><blockquote><p>OpenAI用于DALLE的文字与图像匹配  利用不同的encoders将文字和图像联系了起来</p></blockquote><p>计算机视觉系统经过训练可以预测一组固定的预定对象类别。这种受限的监督形式限制了其通用性和可用性，因为要指定任何其他视觉概念，都需要额外的标记数据。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503203723416.png" alt="image-20240503203723416"  /></p><p>主要是解决利用文本信息监督图像,并实现zero-shot transfer.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503204548844.png" alt="image-20240503204548844" style="zoom:67%;" /></p><h3 id="ControlNet-2023"><a href="#ControlNet-2023" class="headerlink" title="ControlNet 2023"></a>ControlNet 2023</h3><blockquote><p>开创性的有价值的工作,使用pose,edge maps,segmentation map作为监督信息控制图像布局.  技术上利用微调技术并利用额外的pose等信息引导图像生成.</p></blockquote><p>Adding Conditional Control to Text-to-Image Diffusion Models</p><p>随着文字到图像扩散模型的出现，我们现在只需输入文字提示，就能创作出视觉效果极佳的图像。</p><p>然而，文本到图像模型对图像空间构成的控制能力有限；仅靠文本提示很难精确表达复杂的布局、姿势、形状和形态。要生成与我们的心理想象精确匹配的图像，往往需要反复编辑提示、检查生成的图像，然后重新编辑提示。</p><p>ControlNet利用了微调技术,冻结原始块,然后使用原本的权重处理额外信息c,c通过<strong>零卷积</strong>再加回去得到$y^{c}$</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503224707489.png" alt="image-20240503224707489"></p><p>为了给这样一个预训练的神经块添加一个controlnet网络，锁定(冻结)原始块的参数Θ，同时将该块克隆到一个参数为Θc的可训练拷贝</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240503225434997.png" alt="image-20240503225434997"></p><p>可训练副本以外部条件向量c作为输入。当这种结构应用于诸如稳定扩散( Stable Diffusion )这样的大型模型时，锁定的参数保留了用数十亿张图像训练的生产就绪模型，而可训练的副本则重用了这种大规模预训练的模型，以建立处理各种输入条件的深度、鲁棒和强大的骨干。</p><script type="math/tex; mode=display">y_{\mathfrak{c}}=\mathcal{F}(x;\Theta)+\mathcal{Z}(\mathcal{F}(x+\mathcal{Z}(c;\Theta_{\mathfrak{z}1});\Theta_{\mathfrak{c}});\Theta_{\mathfrak{z}2})</script><p>训练目标</p><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{\boldsymbol{z}_0,\boldsymbol{t},\boldsymbol{c}_t,\boldsymbol{c}_\mathrm{f},\epsilon\sim\mathcal{N}(0,1)}\left[\|\epsilon-\epsilon_\theta(\boldsymbol{z}_t,t,\boldsymbol{c}_t,\boldsymbol{c}_\mathrm{f}))\|_2^2\right]</script><p>在训练过程中，我们用空字符串随机替换50 %的文本提示ct。这种方法增加了controlnet网络在输入条件图像(例如,边缘,姿态,深度等。)中直接识别语义的能力，作为提示的替代。在训练过程中，由于零卷积不会给网络添加噪声，所以模型应该始终能够预测高质量的图像。我们观察到，模型并没有逐步学习控制条件，而是突然成功地跟随输入条件图像；通常在小于10K的优化步数。</p><p>在inference部分介绍了CFG以及组合多个controlnet.</p><script type="math/tex; mode=display">\epsilon_{\mathrm{prd}}=\epsilon_{\mathrm{uc}}+\beta_{\mathrm{cfg}}(\epsilon_{\mathrm{c}}-\epsilon_{\mathrm{uc}})</script><h3 id="T2I-Adapter-2023"><a href="#T2I-Adapter-2023" class="headerlink" title="T2I-Adapter 2023"></a>T2I-Adapter 2023</h3><p>T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models</p><p>大规模文本到图像( T2I )模型令人难以置信的生成能力已经显示出强大的学习复杂结构和有意义语义的能力.</p><p>Motivation:然而,<strong>仅仅依靠文本提示并不能充分地利用模型学习到的知识</strong>,尤其是需要灵活准确地控制(例如,颜色和结构)时.</p><p>具体来说，提出<strong>学习简单轻量级的T2I - Adapters来将T2I模型中的内部知识与外部控制信号对齐,同时冻结原始的大型T2I模型</strong></p><p>在本文中探讨是否有可能通过<strong>某种方式”挖掘出” T2I模型隐含学习到的能力</strong>，特别是高层结构和语义能力，然后<strong>明确地使用它们来更精确地控制生成</strong>。作者认为一个小型的适配器模型可以达到这个目的，因为它不是学习新的生成能力，而是学习T2I模型中从控制信息到内部知识的映射。也就是说，这里的主要问题是”对齐”问题，即内部知识和外部控制信号应该对齐。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504225616342.png" alt="image-20240504225616342"></p><script type="math/tex; mode=display">\left.\left\{\begin{array}{l}\mathbf{Q}=\mathbf{W}_Q\phi(\mathbf{Z}_t);\mathbf{K}=\mathbf{W}_K\tau(\mathbf{y});\mathbf{V}=\mathbf{W}_V\tau(\mathbf{y})\\Attention(\mathbf{Q},\mathbf{K},\mathbf{V})=softmax(\frac{\mathbf{Q}\mathbf{K}^T}{\sqrt d})\cdot\mathbf{V}\end{array}\right.\right.</script><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{\mathbf{Z}_t,\mathbf{C},\epsilon,t}(||\epsilon-\epsilon_\theta(\mathbf{Z}_t,\mathbf{C})||_2^2)</script><p>C表示条件信息，θ表示UNet去噪器的函数。</p><p>在推理过程中，输入的隐映射$Z^{T}$由随机高斯分布生成。给定$Z^{T}$，$\epsilon_{\theta}$在每一步t预测一个噪声估计，条件为C。噪声特征图通过减去它变得越来越清晰.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504224247416.png" alt="image-20240504224247416"></p><p>在每个尺度下，利用一个卷积层和两个残差块( RB )来提取条件特征Fck.最终形成多尺度条件特征Fc = { F$^{1}<em>{c}$，F$^{2}</em>{c}$，F$^{3}<em>{c}$，F$^{4}</em>{c}$ }。注意到Fc的维度与UNet去噪器编码器中的中间特征$F<em>{enc}$= { F$^{1}</em>{enc}$，F$^{2}<em>{enc}$，F$^{3}</em>{enc}$，F$^{4}<em>{enc}$ }相同,然后在每个尺度下，F$</em>{c}$与$F_{enc}$相加。</p><script type="math/tex; mode=display">\begin{aligned}&\mathbf{F}_{c}=\mathcal{F}_{AD}(\mathbf{C})\\&\hat{\mathbf{F}}_{enc}^{i}=\mathbf{F}_{enc}^{i}+\mathbf{F}_{c}^{i},i\in\{1,2,3,4\}\end{aligned}</script><p>C为条件输入。F$_{AD}$是T2I的适配器</p><p>除了使用单个适配器作为条件外，提出的T2I适配器还支持多种条件。注意这个策略不需要额外的训练。</p><script type="math/tex; mode=display">\mathbf{F}_c=\sum_{k=1}^K\omega_k\mathcal{F}_{AD}^k(\mathbf{C}_k)</script><h3 id="IP-Adapter-2023"><a href="#IP-Adapter-2023" class="headerlink" title="IP-Adapter 2023"></a>IP-Adapter 2023</h3><p>IP-Adapter:Text Compatible Image Prompt Adapter for Text-to-Image Diffusion Models</p><p>背景目的与结论:近年来，大型文本到图像扩散模型因其出色的生成能力创造出高保真度的图像而表现出强大的能力。然而，仅使用文本提示生成想要的图像是非常困难的，因为它往往涉及复杂的提示工程。文字提示的一种替代方式是图像提示，俗话说：”一张图像值一千个字”。虽然现有的从预训练模型直接微调的方法是有效的，但它们需要较大的计算资源，并且与其他基础模型、文本提示和结构控制不兼容</p><p>在本文中提出了IP - Adapter，一种有效的、轻量级的适配器，<strong>以实现预训练的文本到图像扩散模型的图像提示能力</strong>。我们的IP - Adapter的<strong>关键设计是解耦的交叉注意力机制，将文本特征和图像特征的交叉注意力层分离</strong>。</p><p>得益于解耦的交叉注意力策略，图像提示也可以很好地与文本提示协同工作，实现多模态图像生成。</p><blockquote><p>也是使用图像作为提示信息的工作</p></blockquote><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504191157767.png" alt="image-20240504191157767"></p><p>以往的工作通过替换text-encoder为image-encoder,本作强调在不修改原始模型的情况下实现图像提示功能.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504204508024.png" alt="image-20240504204508024"></p><p>文章认为,上述方法的主要问题在于文本到图像扩散模型的交叉注意力模块.对预训练扩散模型中的交叉注意力层的key和value投影权重进行训练,使其适应文本特征.</p><p>因此,将图像特征和文本特征融合到交叉注意力层只完成了图像特征到文本特征的对齐,但这可能会遗漏一些图像特有的信息,最终导致仅与参考图像进行粗粒度可控生成(例如,图像风格)。</p><script type="math/tex; mode=display">L_{\mathrm{simple}}=\mathbb{E}_{\boldsymbol{x}_0,\boldsymbol{\epsilon}\sim\mathcal{N}(\mathbf{0},\mathbf{I}),\boldsymbol{c},t}\|\epsilon-\epsilon_\theta(\boldsymbol{x}_t,\boldsymbol{c},t)\|^2</script><p>在CFG下</p><script type="math/tex; mode=display">\hat{\epsilon}_\theta(x_t,c,t)=w\epsilon_\theta(x_t,c,t)+(1-w)\epsilon_\theta(x_t,t)</script><p>目前的适配器很难匹配微调的图像提示模型或从零开始训练的模型的性能。主要原因是<strong>图像特征不能有效地嵌入到预训练模型</strong>中。大多数方法只是简单地将串联的特征输入到冻结的交叉注意力层中，阻止了扩散模型从图像提示中捕获细粒度的特征。为了解决这个问题，提出了一种<strong>解耦的交叉注意力策略，通过新增加的交叉注意力层来嵌入图像特征</strong>。</p><p>插入图像特征的一种直接方法是将图像特征和文本特征进行拼接，然后将其输入到交叉注意力层中.然而,我们发现这种方法的有效性不足.相反提出了一种解耦的交叉注意力机制,其中文本特征和图像特征的交叉注意力层是分开的。</p><script type="math/tex; mode=display">\mathbf{Z}''=\text{Attention}(\mathbf{Q},\mathbf{K}',\mathbf{V}')=\text{Softmax}(\frac{\mathbf{Q}(\mathbf{K}')^\top}{\sqrt{d}})\mathbf{V}'</script><script type="math/tex; mode=display">\mathbf{Z}^{new}=\mathrm{Softmax}(\frac{\mathbf{Q}\mathbf{K}^{\top}}{\sqrt{d}})\mathbf{V}+\mathrm{Softmax}(\frac{\mathbf{Q}(\mathbf{K}^{\prime})^{\top}}{\sqrt{d}})\mathbf{V}^{\prime}\\\mathrm{where~}\mathbf{Q}=\mathbf{Z}\mathbf{W}_q,\mathbf{K}=c_t\mathbf{W}_k,\mathbf{V}=c_t\mathbf{W}_v,\mathbf{K}^{\prime}=c_i\mathbf{W}_k^{\prime},\mathbf{V}^{\prime}=c_i\mathbf{W}_v^{\prime}</script><p>由于冻结了原始的UNet模型，在上述解耦的交叉注意力中，只有W′k和W′v是可训练的.</p><script type="math/tex; mode=display">L_{\mathrm{simple}}=\mathbb{E}_{\boldsymbol{x}_0,\boldsymbol{\epsilon},\boldsymbol{c}_t,\boldsymbol{c}_i,t}\|\epsilon-\epsilon_\theta(x_t,c_t,c_i,t)\|^2 \\\hat{\epsilon}_\theta(x_t,c_t,c_i,t)=w\epsilon_\theta(x_t,c_t,c_i,t)+(1-w)\epsilon_\theta(x_t,t)</script><p>我们还在训练阶段随机丢弃图像条件,以便在推理阶段实现无分类器指导.</p><p>由于文本交叉注意力和图像交叉注意力是分离的，我们还可以在推断阶段调整图像条件的权重</p><script type="math/tex; mode=display">\mathbf{Z}^{new}=\text{Attention}(\mathbf{Q},\mathbf{K},\mathbf{V})+\lambda\cdot\text{Attention}(\mathbf{Q},\mathbf{K}',\mathbf{V}')</script><p>为了训练IP - Adapter，从两个开源数据集LAION - 2B和COYO - 700M中构建了一个包含约1000万个文本-图像对的多模态数据集</p><h3 id="InstantID-2024"><a href="#InstantID-2024" class="headerlink" title="InstantID 2024"></a>InstantID 2024</h3><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504230014174.png" alt="image-20240504230014174"></p><p>利用Textual Inversion、DreamBooth、LoRA等方法进行个性化图像合成已经取得了显著的进展。然而，它们的实际应用受到<strong>高存储需求、长时间微调过程以及需要多个参考图像的限制</strong>。相反，现有的基于ID嵌入的方法，虽然只需要单一的前向推断，但面临挑战：它们要么需要在众多模型参数之间进行广泛的微调，缺乏与社区预训练模型的兼容性，要么不能保持高的人脸保真度</p><p>我InstantID，这是一个的基于扩散模型的解决方案,即插即用模块只使用一张人脸图像就能很好地处理各种风格的图像个性化，同时保证了高保真度。</p><p>为了实现这一点,设计了一个新颖的IdentityNet，通过强语义和弱空间条件，将面部和地标图像与文本提示相结合,以引导图像生成.</p><p><strong>生成精确保留人类主体错综复杂的身份细节的定制图像</strong>。</p><p>它包含三个关键部分：( 1 )能够捕获鲁棒语义人脸信息的ID嵌入；( 2 )一个轻量级的自适应模块，具有解耦的交叉注意力，便于使用图像作为视觉提示；( 3 )提出了一种基于额外空间控制的编码参考人脸图像细节特征的IdentityNet。</p><p>首先采用<strong>人脸编码器代替CLIP提取语义人脸特征</strong>,并使用可训练的投影层将其投影到文本特征空间.</p><p>然后，引入解耦交叉注意力的轻量级自适应模块，以支持图像作为提示。</p><p>在IdentityNet中,生成过程完全由人脸嵌入引导,无需任何文本信息.只更新新增加的模块,而预训练的文本到图像模型保持冻结,以确保灵活性.</p><p>在训练过程中，<strong>只对Image Adapter和Identity Net的参数进行优化</strong>，而对预训练的扩散模型的参数保持冻结。我们在具有人类主题的图像-文本对上训练整个InstantID流水线，采用了类似于原始稳定扩散工作中使用的训练目标</p><script type="math/tex; mode=display">\mathcal{L}=\mathbb{E}_{z_t,t,C,C_i,\epsilon\sim\mathcal{N}(0,1)}[\|\epsilon-\epsilon_\theta(z_t,t,C,C_i)\|_2^2]</script><p>$C_{i}$​为IdentityNet上的任务特定图像条件。值得注意的是，在训练过程中，我们不会随意丢弃文本或图片条件，因为我们已经去掉了IdentityNet中的文本提示条件。</p><h3 id="PhotoMaker-Customizing-Realistic-Human-Photos-via-Stacked-ID-Embedding"><a href="#PhotoMaker-Customizing-Realistic-Human-Photos-via-Stacked-ID-Embedding" class="headerlink" title="PhotoMaker:Customizing Realistic Human Photos via Stacked ID Embedding"></a>PhotoMaker:Customizing Realistic Human Photos via Stacked ID Embedding</h3><p>Background and Task:</p><p>Motivation:</p><p>Method:</p><p>Results and findings:</p><p>文本生成高清图像的最新进展在合成基于给定文本提示的真实感人类照片方面取得了显著的进展.</p><p>然而,现有的个性化生成方法无法同时满足高效率、高身份保真度和灵活的文本可控性等要求.在这项工作中,我们引入了一种高效的个性化文本到图像生成方法PhotoMaker,它主要将任意数量的输入ID图像编码成堆栈ID嵌入,以保留ID信息.</p><p>在这项工作中,我们引入了一种高效的个性化文本到图像生成方法PhotoMaker,它主要将任意数量的输入ID图像编码成堆栈ID嵌入,以保留ID信息.</p><p><img data-src="https://s2.loli.net/2024/05/16/djRDKObakQW3wm4.png" alt="image-20240516204600628"></p><p>对于所提出的PhotoMaker,首先分别从文本编码器和图像编码器中获得文本嵌入和图像嵌入.然后,通过合并相应的类嵌入(例如,男人和女人)和每个图像嵌入来提取融合嵌入.接下来,我们将所有的融合嵌入沿着长度维度进行拼接,形成堆叠的ID嵌入.最后将堆叠的ID嵌入反馈给所有的交叉注意力层,用于自适应地合并扩散模型中的ID内容.</p><p>在给定少量待定制ID图像的情况下,PhotoMaker的目标是生成一个新的具有照片真实感的人体图像,该图像保留了输入ID的特征,并在文本提示的控制下改变生成ID的内容或属性.</p><p>们使用CLIP 图像编码器$E<em>{img}$来提取图像嵌入,以使其与扩散模型中的原始文本表示空间对齐。在将每幅输入图像输入到图像编码器之前，我们用随机噪声填充特定ID的主体部分以外的图像区域，以消除其他ID和背景的影响。对于给定的文本提示T，我们使用预训练的CLIP文本编码器$E</em>{text}$提取文本嵌入$t∈R^{L × D}$，其中L表示嵌入的长度。</p><p>在输入中标注对应的类词(例如,男人和女人)。然后我们在文本嵌入中提取类词对应位置的特征向量。该特征向量将与每个图像嵌入$e_i$进行融合.</p><p>融合嵌入可以表示为{ ( $\hat{e}^{i}∈R^{D}$ | i = 1 . . . . N }。通过结合类别词的特征向量，该嵌入可以更全面地表示当前输入的ID图像。</p><p>在获得融合嵌入之后，我们将它们沿着长度维度进行拼接，形成堆叠的id嵌入</p><script type="math/tex; mode=display">s^*=\text{Concat}([\hat{e}^1,\ldots,\hat{e}^N])\quad s^*\in\mathbb{R}^{N\times D}</script><script type="math/tex; mode=display">\left.\left\{\begin{array}{l}\mathbf{Q}=\mathbf{W}_Q\cdot\phi(z_t);\mathbf{K}=\mathbf{W}_K\cdot t^*;\mathbf{V}=\mathbf{W}_V\cdot t^*\\\text{Attention}(\mathbf{Q},\mathbf{K},\mathbf{V})=\text{softmax}(\frac{\mathbf{Q}\mathbf{K}^T}{\sqrt d})\cdot\mathbf{V},\end{array}\right.\right.</script><p>我们利用扩散模型中固有的交叉注意力机制，自适应地合并堆叠ID嵌入中包含的ID信息。首先将原始文本嵌入t中类词对应位置的特征向量替换为堆叠的id嵌入$s^{ <em>}$得到更新的文本嵌入$t^{ </em>}∈R^{( L + N-1 ) × D}$</p><blockquote><p>上面五篇工作都是类似的,利用额外控制信息和改进一些模型进行微调使得捕获输入的图像.下面几篇工作是OPenAI与Google的文生图模型,已经作为产品级模型.</p></blockquote><h3 id="GLIDE-2021"><a href="#GLIDE-2021" class="headerlink" title="GLIDE 2021"></a>GLIDE 2021</h3><p>GLIDE能够根据自然语言描述生成图像，这意味着用户可以用文本提示来生成相应的视觉内容。</p><p>论文比较了两种引导扩散模型的技术——CLIP引导和无分类器引导（classifier-free guidance）。研究发现，无分类器引导在照片真实感和标题相似性方面更受人类评估者的青睐。GLIDE不仅能够进行零样本（zero-shot）图像生成，还能通过图像修复（inpainting）进行细粒度的图像编辑，使得用户可以迭代改进模型样本以匹配更复杂的文本提示。</p><p>Ho &amp; Salimans 提出了无分类器引导，一种用于引导扩散模型的技术，它不需要单独的分类器模型来进行训练。对于无分类器指导，在训练过程中，类条件扩散模型θ ( xt | y )中的标签y被一个固定概率的零标签∑所代替。为了用通用文本提示实现无分类器的指导，我们有时在训练过程中用空序列(其中,我们也称之为:)替换文本。</p><script type="math/tex; mode=display">\hat{\epsilon}_\theta(x_t|c)=\epsilon_\theta(x_t|\emptyset)+s\cdot(\epsilon_\theta(x_t|c)-\epsilon_\theta(x_t|\emptyset))</script><h3 id="DALLE2-2022"><a href="#DALLE2-2022" class="headerlink" title="DALLE2 2022"></a>DALLE2 2022</h3><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504230111721.png" alt="image-20240504230111721"></p><p>像CLIP这样的对比模型已经被证明可以学习到同时捕获语义和风格的图像的鲁棒表示。</p><p>为了利用这些表示进行图像生成,文中提出了一个两阶段模型：一个先验生成给定文本描述的CLIP图像嵌入，一个解码器生成以图像嵌入为条件的图像。</p><p>我们证明了显式地生成图像表示以最小的损失在照片真实性和字幕相似性中提高了图像的多样性。我们的解码器在图像表示的条件下也可以产生图像的变化，以保留其语义和风格，同时改变图像表示中不存在的非基本细节。此外，CLIP的联合嵌入空间可以在a z中实现语言引导的图像操作</p><h3 id="Imagen-2022"><a href="#Imagen-2022" class="headerlink" title="Imagen 2022"></a>Imagen 2022</h3><p>我们提出了Imagen，我们的关键发现是，通用的大语言模型(如：T5 )，在纯文本语料上进行预训练，在编码图像合成的文本时取得了惊人的效果：增加Imagen中语言模型的大小比增加图像扩散模型的大小更能提高样本保真度和图像文本对齐度。Imagen在COCO数据集上取得了7.27的最新FID得分，而没有对COCO进行过训练，人类评分员发现Imagen样本处于标准状态</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240504235247964.png" alt="image-20240504235247964" style="zoom:67%;" /></p><p>Imagen使用冻结的文本编码器将输入文本编码成文本嵌入。条件扩散模型将文本嵌入映射成一个64×64的图像。Imagen进一步利用文本条件的超分辨率扩散模型对图像进行上采样，先是64×64→256×256，然后是256×256→1024×1024。</p><p><strong>基模型</strong>采用IPPDMU - Net架构，用于我们的64 × 64文本到图像扩散模型。该网络通过池化嵌入向量对文本嵌入进行条件化，并加入类嵌入条件化方法的扩散时间步嵌入。我们进一步通过在多个分辨率的文本嵌入上添加交叉注意力来限定整个文本嵌入序列。</p><p><strong>超分辨率模型</strong>：对于64 × 64→256 × 256的超分辨率，采用改编自PPDMU的U - Net模型。为了提高内存效率、推理时间和收敛速度(我们的变体比文献[ 40,58 ]中使用的U - Net快2 - 3倍步数/秒)，我们对该U - Net模型进行了多次修改。我们称这种变体为Efficient U-Net </p><p>总结一下,关于DDPM的论文本身的数学理论还是挺强的,而相关的CLIP,Adapter作为某种辅助改进既是一种创新型的工作也很有价值,理论性研究起来也没有那么困难,这种工作做起来还是很舒服的.</p><h3 id="An-Image-is-Worth-One-Word-Personalizing-Text-to-Image-Generation-using-Textual-Inversion"><a href="#An-Image-is-Worth-One-Word-Personalizing-Text-to-Image-Generation-using-Textual-Inversion" class="headerlink" title="An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion"></a>An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion</h3><p>Task:Text-to-image models </p><p>Motivation: Yet, it is unclear how such freedom can be exercised to generate images of specific unique concepts, modify their appearance, or compose them in new roles and novel scenes</p><p>Method:Using only 3-5 images of a user-provided concept, like an object or a style, we learn to represent it through new “words” in the embedding space of a frozen text-to-image model. These “words” can be composed into natural language sentences, guiding personalized creation in an intuitive way.</p><p>Results and findings:Notably, we find evidence that a single word embedding is sufficient for capturing unique and varied concepts. We compare our approach to a wide range of baselines, and demonstrate that it can more faithfully portray the concepts across a range of applications and tasks.</p><p>作为用户,我们怎样才能要求文本到图像的模型来设计一个包含珍贵童年玩具的新奇场景.</p><p>在大规模模型中引入新的概念往往是困难的.为每个新概念重新训练一个具有扩展数据集的模型是非常昂贵的,<strong>在少数例子上进行微调通常会导致灾难性的遗忘</strong>.当面对新概念时,更多的测量方法冻结模型并训练转换模块以适应其输出.然而,这些方法仍然容易遗忘先验知识,或者在与新学习的概念同时访问时面临困难.</p><p>提出通过在预训练的T2I模型的textual embedding中寻找新词来克服这些挑战.</p><p>我们考虑文本编码过程的第一阶段.在这里,一个输入字符串首先被转换为一组令牌.然后将每个令牌替换为自己的嵌入向量,这些向量通过下游模型进行反馈.我们的目标是寻找新的嵌入向量来表示新的、特定的概念.</p><p>我们用一个新的pseudo-word表示一个新的嵌入向量，记为S <em>。然后，这个伪单词被当作其他单词一样对待，并且可以用来为生成模型组成新的文本查询。因此，人们可以要求”一幅S </em>在海滩上的照片”，”一幅S <em>挂在墙上的油画”，甚至可以组成两个概念，如”一幅S1 </em>在S2 *风格的绘画”。重要的是，这一过程没有触及生成模型。</p><p>这样，我们保留了在新任务上微调视觉和语言模型时通常会丢失的丰富的文本理解和泛化能力。</p><p>我们给出了一个固定的,经过预训练的文本到图像模型和一个小的图像集来描述这个概念.我们的目标是找到一个单词嵌入,使得形式为’ A photo of S * ‘的句子将导致从我们的小集合中重建图像。这种嵌入是通过一个优化过程发现的,称之为”文本反转” ( Textual Inversion )</p><p><img data-src="https://s2.loli.net/2024/05/16/NJi3nmBfztA9xwe.png" alt="image-20240516154802746"></p><p>为了找到这些新的嵌入使用了一组图像(一般为3 - 5个)，它描述了我们的目标概念,比如不同的背景或姿势.</p><p>设$c θ ( y )$是将一个条件输入y映射为一个条件向量的模型</p><script type="math/tex; mode=display">L_{LDM}:=\mathbb{E}_{z\sim\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_\theta(z_t,t,c_\theta(y))\|_2^2\Big]</script><p>通过直接优化,最小化从小集合中采样的图像上式(的LDM损失找到v *。</p><p>为了限制生成，我们从CLIP ImageNet模板中随机抽取中性上下文文本,</p><p>其中包含’ A photo of S <em> ‘,’ A rendition of S </em> ‘等形式的提示。在补充材料中提供了模板的完整列表</p><script type="math/tex; mode=display">v_{*}=\arg\min_{v}\mathbb{E}_{z\sim\mathcal{E}(x),y,\epsilon\sim\mathcal{N}(0,1),t}\Big[\|\epsilon-\epsilon_{\theta}(z_{t},t,c_{\theta}(y))\|_{2}^{2}\Big]</script><p>通过复用与原LDM模型相同的训练方案来实现，同时保持$c_θ$和θ都固定不变。值得注意的是，这是一个重建任务。因此，我们期望它能够激励学习到的嵌入来捕获概念所特有的精细视觉细节.</p><blockquote><p>说白了利用新的训练集数据对重新训练一个embedding层将想要的concept通过一个trigger word 文本S^*^嵌入生成的图像中.</p></blockquote><h3 id="DreamBooth-Fine-Tuning-Text-to-Image-Diffusion-Models-for-Subject-Driven-Generation"><a href="#DreamBooth-Fine-Tuning-Text-to-Image-Diffusion-Models-for-Subject-Driven-Generation" class="headerlink" title="DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation"></a>DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation</h3><p>Background and task:大型文本到图像模型在人工智能的演进中实现了令人瞩目的飞跃,能够从给定的文本提示中高质量和多样化地合成图像</p><p>Motivation:然而,这些模型缺乏在给定的参考集中模仿subjects的外观并在不同的上下文中合成他们的新版本的能力。</p><p>Method:在本文中,提出了一种新的方法来实现文本到图像扩散模型的”个性化”.给定一个主题的少量图像作为输入,我们微调一个预训练的文本到图像模型,使其学会将一个唯一的标识符与该特定主题绑定。通过利用嵌入在模型中的语义先验和新的自适应类特定先验保持损失，我们的技术能够在参考图像中没有出现的不同场景、姿势、视图和光照条件下合成主题</p><p>Results and findings:我们将我们的技术应用到几个以前无法解决的任务中，包括主题语境化、文本引导的视图合成和艺术渲染，同时保留了主题的关键特征。我们也为课题驱动式代这一新任务提供了新的数据集和评估方案.</p><p>最近开发的大型文本到图像模型显示出前所未有的能力，通过实现基于自然语言[编写的文本提示的高质量和多样化的图像合成。这类模型的主要优点之一是从大量的图像-字幕对集合中学习到的强语义先验。例如，这种先验学习将”狗”这个词与图像中可以出现在不同姿势和上下文中的各种狗的实例绑定在一起。虽然这些模型的综合能力是前所未有的，但它们<strong>缺乏在给定的参考集合中模仿受试者的外观，并在不同的上下文中合成相同受试者的新版本的能力。</strong>主要原因是它们的<strong>输出域表达能力有限；即使是对一个对象最详细的文字描述，也可能产生不同外观的实例</strong>.一旦新的字典嵌入到模型中，它就可以使用这些单词来合成新的主题真实感图像，在不同的场景中进行语境化，同时保留它们的关键识别特征.</p><p>更正式地说,给定一个主体的几幅图像,我们的目标是将主体植入模型的输出域,使其能够用<strong>唯一的标识符</strong>进行合成.为此提出一种技术,用少有的identifier表示给定的主题,并微调一个预训练的、基于扩散的文本到图像框架.</p><p>我们用输入的图像和文本提示微调文本到图像的模型,其中包含一个惟一的标识符,后面跟着主体的类名.</p><p>我们的方法是在词汇中找到稀有的标记,然后将这些标记转换到文本空间,以最小化标识符具有强先验的概率.</p><p><img data-src="https://s2.loli.net/2024/05/16/XByeJxlZGNnv7ER.png" alt="image-20240516162142224"></p><script type="math/tex; mode=display">\mathbb{E}_{\mathbf{x},\mathbf{c},\boldsymbol{\epsilon},\boldsymbol{\epsilon}^{\prime},t}[w_t\|\hat{\mathbf{x}}_\theta(\alpha_t\mathbf{x}+\sigma_t\boldsymbol{\epsilon},\mathbf{c})-\mathbf{x}\|_2^2+\\\lambda w_{t^{\prime}}\|\hat{\mathbf{x}}_\theta(\alpha_{t^{\prime}}\mathbf{x}_{\mathbf{pr}}+\sigma_{t^{\prime}}\boldsymbol{\epsilon}^{\prime},\mathbf{c}_{\mathbf{pr}})-\mathbf{x}_{\mathbf{pr}}\|_2^2]</script><p>两个关键问题:在小数据集上微调可能出现language drift或者灾难性遗忘.此外还有可能出现的多样性降低.</p><p>具体来说，在带有随机初始噪声$z<em>{t1}~N(0,I)$和条件向量$c</em>{pr}:=Γ (f(‘a[类名词]’))$的冷冻预训练扩散模型上使用祖先采样器生成数据$x<em>{pr} = [\hat{x}(z</em>{t1},c_{pr})]$.</p><p>前半部分让模型学习特定物品的表示,后半通过生成图片的监督防止模型忘记先验知识.</p><h3 id="Hypernetworks"><a href="#Hypernetworks" class="headerlink" title="Hypernetworks"></a>Hypernetworks</h3><p>这项工作探讨了超网络：一种使用一个网络(也称为超网络)为另一个网络生成权重的方法。超网络提供了一种类似于自然界中发现的抽象：基因型-超网络-和表型-主网络之间的关系。</p><h3 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h3><p>本身是一种微调技术,我在大模型一节中涉及到了,这里不赘述.</p><h3 id="Samplers-in-Stable-Diffusion"><a href="#Samplers-in-Stable-Diffusion" class="headerlink" title="Samplers in Stable Diffusion"></a>Samplers in Stable Diffusion</h3><p>在使用Stable Diffusion应用时想到的,采样器是什么,能起到多大的作用.</p><p>要生成图像，模型首先要在潜空间生成一个完全随机的图像.然后,噪声预测器估算图像的噪声。从图像中减去预测的噪声.这个过程要重复十几次.</p><p>这个去噪过程被称为采样,因为稳定扩散技术每一步都会生成一个新的样本图像.采样中使用的方法称为采样器或采样方法.</p><p>噪声图像是每步减去模型预测出的噪声，一点一点变成干净图像的。noise schedule 就是用来控制在每个采样步中噪声的强度的。噪声在第一步最大，慢慢降低，直到最后一步降为0。</p><p>在每一步中，采样器的工作就是根据 noise schedule 中对应的该步的噪声强度，减去对应的噪声，来产生该步的去噪图像。如果我们增大采样步数会有什么影响呢？每一步噪声下降的会更少，这有助于减少采样过程中的截断误差。</p><p>采样器可以分为经典基于微分公式,祖先采样器,Karras,</p><ul><li><strong>Euler</strong> – The simplest possible solver.</li><li><strong>Heun</strong> – A more accurate but slower version of Euler.</li><li><strong>LMS</strong> (Linear multi-step method) – Same speed as Euler but (supposedly) more accurate.</li></ul><p>祖先采样器在每个采样步骤中都会给图像添加噪声.它们是随机取样器,因为取样结果具有一定的随机性</p><ul><li>Euler a</li><li>DPM2 a</li><li>DPM++ 2S a</li><li>DPM++ 2S a Karras</li></ul><p>DPM（扩散概率模型求解器）和 DPM++ 是 2022 年发布的专为扩散模型设计的新型采样器.它们代表了结构相似的求解器系列。</p><p>DPM 和 DPM2 相似,只是 DPM2 是二阶的(更精确但更慢).DPM++ 是 DPM 的改进版。</p><p>UniPC(Unified Predictor-Corrector)是 2023年的一种新型采样器。它受到传统sampler中预测器-校正器方法的启发,可在 5-10 步内实现高质量图像生成。</p><p>一些代码实现可以在<a href="https://github.com/crowsonkb/k-diffusion">crowsonkb/k-diffusion: Karras et al. (2022) diffusion models for PyTorch (github.com)</a>找到.</p><p>可以利用一些语义分割和prompt分割实例更方便地做inpainting.</p><h3 id="SegmentAnything-Model"><a href="#SegmentAnything-Model" class="headerlink" title="SegmentAnything Model"></a>SegmentAnything Model</h3><p><a href="https://www.comet.com/site/blog/sam-stable-diffusion-for-text-to-image-inpainting/">SAM + Stable Diffusion for Text-to-Image Inpainting - Comet</a></p><p><img data-src="https://s2.loli.net/2024/05/16/vipLYs8BIod6S5y.png" alt="image-20240516145103520"></p><p><img data-src="https://s2.loli.net/2024/05/16/p64VkA97Lsy2mdK.png" alt="image-20240516145131501"></p><p><img data-src="https://s2.loli.net/2024/05/16/cWSidGqjVaNDI3R.png" alt="image-20240516145825637"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/mli/paper-reading?tab=readme-ov-file">mli/paper-reading: 深度学习经典、新论文逐段精读 (github.com)</a></li><li><a href="https://maciejdomagala.github.io/generative_models/2022/06/06/The-recent-rise-of-diffusion-based-models.html">The recent rise of diffusion-based models | Maciej Domagała (maciejdomagala.github.io)</a></li><li><a href="https://stable-diffusion-art.com/">Stable Diffusion Art - Tutorials, prompts and resources (stable-diffusion-art.com)</a></li><li><a href="https://jalammar.github.io/illustrated-stable-diffusion/">The Illustrated Stable Diffusion – Jay Alammar – Visualizing machine learning one concept at a time. (jalammar.github.io)</a></li><li><a href="https://arxiv.org/pdf/2206.00927">arxiv.org/pdf/2206.00927</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要看是看Diffusion Models,CLIP,ControlNet,IP-Adapter这种经典论文,尝试总结论文写作的一些方式以及图像生成模型的一些内在思想. 对于其中的数学原理和代码不过深究.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>编程语言的一些特性</title>
    <link href="https://www.sekyoro.top/2024/05/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/"/>
    <id>https://www.sekyoro.top/2024/05/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/</id>
    <published>2024-05-02T08:30:27.000Z</published>
    <updated>2024-05-02T09:19:26.277Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>学习到C#,Kotlin或者Dart这种特性多、语法糖不少的编程语言之后,就会出现一些新的问题,这里不定期更新一下学到的语法糖.特别说一下,在某些开发者眼里,C#,Kotlin,Go,Rust,Dart是 <strong>Most Popular New Programming Languages</strong>,都在不同程度上提升了开发效率和性能.<br><span id="more"></span></p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托Delegation本来算是一种设计思想,在C#和Kotlin这些语言里有专门的实现方式.</p><p>.NET 中,委托具有以下特点。</p><ul><li>委托类似于 C++函数指针,但与指针不同的是,委托是完全面向对象的、安全的数据类型。</li><li>委托允许将方法作为参数进行传递。</li><li>委托可用于定义回调方法。</li><li>委托可以把多个方法连接在一起,这样在触发事件时,可同时启动多个事件处理程序。</li></ul><blockquote><p>有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。委托模式使得我们可以用聚合来替代继承，它还使我们可以模拟mixin。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPrinter</span> </span>&#123; <span class="comment">// the &quot;delegate&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      System.out.print(<span class="string">&quot;something&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123; <span class="comment">// the &quot;delegator&quot;</span></span><br><span class="line">    RealPrinter p = <span class="keyword">new</span> RealPrinter(); <span class="comment">// create the delegate </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      p.print(); <span class="comment">// delegation</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// to the outside world it looks like Printer actually prints.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Printer printer = <span class="keyword">new</span> Printer();</span><br><span class="line">        printer.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;A: doing f()&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;A: doing g()&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;B: doing f()&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;B: doing g()&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="comment">// delegation</span></span><br><span class="line">    I i = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; i.f(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; i.g(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// normal attributes</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toA</span><span class="params">()</span> </span>&#123; i = <span class="keyword">new</span> A(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toB</span><span class="params">()</span> </span>&#123; i = <span class="keyword">new</span> B(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.f();     <span class="comment">// output: A: doing f()</span></span><br><span class="line">        c.g();     <span class="comment">// output: A: doing g()</span></span><br><span class="line">        c.toB();</span><br><span class="line">        c.f();     <span class="comment">// output: B: doing f()</span></span><br><span class="line">        c.g();     <span class="comment">// output: B: doing g()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java本身没有委托设计.而在C#中使用delegate可以使用定义委托赋值方法,作为参数或者多播、匿名委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">// 定义一个委托类型</span><br><span class="line">delegate void PrintDelegate(string message);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建委托实例并关联一个方法</span><br><span class="line">        PrintDelegate printDelegate = PrintMessage;</span><br><span class="line">        </span><br><span class="line">        // 使用委托调用方法</span><br><span class="line">        printDelegate(&quot;Hello, C#!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate int CalculationDelegate(int x, int y);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 调用方法，传递委托作为参数</span><br><span class="line">        int result = Calculate(5, 3, AddNumbers);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static int Calculate(int x, int y, CalculationDelegate calculation)</span><br><span class="line">    &#123;</span><br><span class="line">        return calculation(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static int AddNumbers(int x, int y)</span><br><span class="line">    &#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate void PrintDelegate(string message);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建多播委托</span><br><span class="line">        PrintDelegate printDelegate = PrintMessage1;</span><br><span class="line">        printDelegate += PrintMessage2;</span><br><span class="line">        </span><br><span class="line">        // 调用多播委托，会依次执行所有关联的方法</span><br><span class="line">        printDelegate(&quot;Hello, C#!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage1(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Message 1: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void PrintMessage2(string message)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;Message 2: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">delegate int CalculationDelegate(int x, int y);</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        // 使用匿名委托定义和调用方法</span><br><span class="line">        CalculationDelegate calculation = delegate(int x, int y)</span><br><span class="line">        &#123;</span><br><span class="line">            return x + y;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        int result = calculation(5, 3);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">        </span><br><span class="line">        // 使用 Lambda 表达式定义和调用方法</span><br><span class="line">        CalculationDelegate calculation2 = (x, y) =&gt; x + y;</span><br><span class="line">        </span><br><span class="line">        int result2 = calculation2(5, 3);</span><br><span class="line">        Console.WriteLine(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码类似定义方法的原型.</p><p>而在Kotlin中有类委托和属性委托.</p><p>类委托允许一个类将其接口的实现委托给另一个类。通过在类定义中使用 <code>by</code> 关键字，可以将接口的实现委托给另一个对象。被委托的对象必须实现相应的接口。</p><p>属性委托允许我们将属性的读取和写入操作委托给其他对象。Kotlin 提供了一些内置的委托，例如 <code>Lazy</code>、<code>Observable</code> 和 <code>NotNull</code> 等。此外，我们还可以自定义属性委托.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sound</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatSound</span> : <span class="type">Sound &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeSound</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Meow!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(sound: Sound) : Sound <span class="keyword">by</span> sound</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> catSound = CatSound()</span><br><span class="line">    <span class="keyword">val</span> animal = Animal(catSound)</span><br><span class="line">    animal.makeSound() <span class="comment">// 输出 &quot;Meow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> property: String <span class="keyword">by</span> CustomDelegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">        println(<span class="string">&quot;Getting property value: <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, newValue: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Setting property value: <span class="variable">$newValue</span>&quot;</span>)</span><br><span class="line">        value = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = Example()</span><br><span class="line">    example.property = <span class="string">&quot;Hello, Kotlin!&quot;</span> <span class="comment">// 输出 &quot;Setting property value: Hello, Kotlin!&quot;</span></span><br><span class="line">    println(example.property) <span class="comment">// 输出 &quot;Getting property value: Hello, Kotlin!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习到C#,Kotlin或者Dart这种特性多、语法糖不少的编程语言之后,就会出现一些新的问题,这里不定期更新一下学到的语法糖.特别说一下,在某些开发者眼里,C#,Kotlin,Go,Rust,Dart是 &lt;strong&gt;Most Popular New Programming Languages&lt;/strong&gt;,都在不同程度上提升了开发效率和性能.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LLM论文阅读</title>
    <link href="https://www.sekyoro.top/2024/05/01/LLM%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <id>https://www.sekyoro.top/2024/05/01/LLM%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</id>
    <published>2024-05-01T07:39:46.000Z</published>
    <updated>2024-05-15T08:29:31.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近大语言模型及其相关应用实在是太火了,可以在一些公司或者个人博客查看最前沿进展,也可以通过代码项目、课程学习,还可以看看经典论文.这里就看看一些LLM的论文学习学习.<br><span id="more"></span></p><p>下面论文都可以在Arxiv上找到.</p><h2 id="A-Survey-of-Large-Language-Models"><a href="#A-Survey-of-Large-Language-Models" class="headerlink" title="A Survey of Large Language Models"></a>A Survey of Large Language Models</h2><p>这篇文章有80多页,引用有40页.</p><h4 id="Scaling-laws"><a href="#Scaling-laws" class="headerlink" title="Scaling laws"></a>Scaling laws</h4><script type="math/tex; mode=display">\begin{aligned}&L(N)&&=\quad\left(\frac{N_c}N\right)^{\alpha_N},\quad\alpha_N\sim0.076,N_c\sim8.8\times10^{13}\\&L(D)&&=\quad\left(\frac{D_c}D\right)^{\alpha_D},\quad\alpha_D\sim0.095,D_c\sim5.4\times10^{13}\\&L(C)&&=\quad\left(\frac{C_c}C\right)^{\alpha_C},\quad\alpha_C\sim0.050,C_c\sim3.1\times10^8\end{aligned}</script><p><strong>KM scaling law</strong> </p><p>Scaling laws for neural language models首次提出了神经语言模型的模型性能与<strong>模型大小</strong>（N）、<strong>数据集大小</strong>（D）和<strong>训练计算量</strong>（C）三大因素的幂律关系模型。</p><p>$N<em>{c}$、$D</em>{c}$ 和 Cc 分别以非嵌入参数数、训练标记数和 FP 日数来衡量。</p><p>L(-) 表示 nats 中的交叉熵损失，OpenAI 的后续研究 表明，语言建模损失可分解为两部分，即不可还原损失（真实数据分布的熵）和可还原损失（真实分布和模型分布之间 KL 分歧的估计值）。</p><p>在一些假设条件下(如一个因素的分析不应受到其他两个因素的瓶颈限制),通过拟合不同数据量(2200 万到 2300 亿个 token)、模型大小(768 万到 1500 亿个非嵌入参数)和训练计算的模型性能,得出了这三个定律.他们的研究表明,模型性能与三个因素有很强的依赖关系.</p><p><strong>Chinchilla scaling law</strong></p><p>霍夫曼等人提出了另一种缩放定律形式，用于指导 LLM 的计算优化训练.其中E = 1.69, A = 406.4, B = 410.7, α = 0.34 and β = 0.28</p><script type="math/tex; mode=display">L(N,D)=E+\frac{A}{N^\alpha}+\frac{B}{D^\beta}</script><p>通过优化 C ≈ 6N D 约束条件下的损失 L(N，D),他们证明了计算预算对模型大小和数据大小的最优分配如下</p><script type="math/tex; mode=display">N_{opt}(C)=G{\left(\frac C6\right)}^a,\quad D_{opt}(C)=G^{-1}{\left(\frac C6\right)}^b</script><p>a = α/(α+β) , b = β/(α+β) ,G 是一个缩放系数,可由 A、B、α 和 β 计算得出。</p><h4 id="涌现能力"><a href="#涌现能力" class="headerlink" title="涌现能力"></a>涌现能力</h4><p>在Emergent abilities of large language models中LLMs 的涌现能力被正式定义为 “在小型模型中不存在而在大型模型中出现的能力”，这是 LLMs 区别于以往 PLMs 的最显著特征之一。它进一步引入了出现突发性能力时的一个显著特征：<strong>当规模达到一定程度时，性能会明显高于随机水平。通过类比，这种突现模式与物理学中的相变现象有着密切联系</strong>。原则上，新兴能力可以根据某些复杂任务来定义，而我们更关注的是可用于解决各种任务的一般能力。</p><p>简要介绍 LLMs 的三种典型涌现能力以及具备这种能力的代表性模型: 1)In-context learning 2) Instruction following 3)step-by-step reasoning</p><p>GPT-3正式引入了语境中学习（ICL）能力：假设语言模型已经获得了自然语言指令和/或多个任务演示，那么它就可以<strong>通过完成输入文本的词序来生成测试实例的预期输出，而无需额外的训练或梯度更新</strong>。</p><p>通过对自然语言描述格式的多任务数据集进行微调（称为指令微调）,LLM 在同样以指令形式描述的未见任务上表现出色。<strong>通过指令调整，LLMs 可以在不使用明确示例的情况下，根据任务指令完成新任务，从而提高泛化能力</strong>.</p><p>对于小型语言模型而言，通常很难解决涉及多个推理步骤的复杂任务，例如数学文字问题.相比之下,使用思维链（CoT）提示策略,LLM 可以利用提示机制来解决此类任务,这种机制涉及到推导最终答案的中间推理步骤.</p><p><img data-src="https://s2.loli.net/2024/05/06/F5zWu6VldQqDBjs.png" alt="image-20240506105955822"></p><p>LLM 经过漫长的发展才达到了目前的状态：通用的、有能力的学习者。在发展过程中，人们提出了许多重要技术，这些技术在很大程度上提高了 LLM 的能力,包括scaling,training,ability eliciting,Alignment tuning等等.</p><p><img data-src="https://s2.loli.net/2024/05/06/hFNoCHDY23OmxiR.png" alt="image-20240506110530834"></p><p><img data-src="https://s2.loli.net/2024/05/06/FcjiyX4oesVva2B.png" alt="image-20240506110409299"></p><h3 id="PEFT方法"><a href="#PEFT方法" class="headerlink" title="PEFT方法"></a>PEFT方法</h3><p><img data-src="https://s2.loli.net/2024/05/14/JQUyVlr7xCc4I2m.png" alt="image-20240514232554910"></p><h4 id="Prefix-Tuning"><a href="#Prefix-Tuning" class="headerlink" title="Prefix Tuning"></a>Prefix Tuning</h4><p>Prefix Tuning在语言模型的每个transformer层中预置一系列前缀,这些前缀是一组可训练的连续向量.这些前缀向量是针对特定任务的,可视为虚拟标记嵌入。为了优化前缀向量，有人提出了一种重参数化技巧 ,即学习一个 MLP 函数，将一个较小的矩阵映射到前缀的参数矩阵，而不是直接优化前缀。</p><h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>在本文中,我们提出了前缀调整技术,它是自然语言生成任务中微调技术的轻量级替代方案,可<strong>保持语言模型参数不变,但会优化一个小的连续任务特定向量</strong>(称为前缀).</p><p><strong>Prefix-tuning draws inspiration from prompting, allowing subsequent tokens to attend to this prefix as if it were “virtual tokens”</strong>.</p><p>相当于让模型参数不变,优化连续的任务相关数据,让模型关注增加的前缀.</p><p>我们发现,只需学习 0.1% 的参数,前缀调整就能在全数据环境下获得与之相当的性能,在低数据环境下优于微调,并能更好地推断出训练期间未见过主题的示例.</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>我们认为适当的语境<strong>可以在不改变 LM 参数的情况下引导 LM</strong>。例如，如果我们希望 LM 生成一个单词（如 Obama），我们可以将其常见搭配作为上下文（如 Barack）的前置词，这样 LM 就会为所需单词分配更高的概率。</p><p>我们可以将指令优化为连续的单词嵌入，而不是对离散的标记进行优化，其效果将向上传播到所有转换器激活层，并向右传播到后续标记。</p><p>前缀调整为自回归 LM 预置前缀,得到 z = [PREFIX;x;y],或为编码器和编码器预置前缀,得到 z = [PREFIX;x;PREFIX′;y]。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505224532005.png" alt="image-20240505224532005"></p><script type="math/tex; mode=display">h_i=\begin{cases}P_\theta[i,:],&\text{if }i\in\mathsf{P_{idx}},\\\mathsf{LM}_\phi(z_i,h_{<i}),&\text{otherwise.}\end{cases}</script><p>前缀调整初始化一个维度为 |$P<em>{idx}$| × dim($h</em>{i}$) 的可训练矩阵 $P<em>{θ}$（参数为 θ）,用于存储前缀参数.$P</em>{idx}$ 表示前缀索引序列,我们用 |$P_{idx}$| 表示前缀长度.语言模型参数 φ 是固定的,前缀参数 θ 是唯一可训练的参数.</p><p>$h<em>{i}$（对于所有 i）是可训练 $P</em>{θ}$ 的函数。</p><p>Prefix Tuning<code>是</code>PEFT<code>方法之一，</code>Prefix Tuning<code>之前的工作主要是人工设计模板或者自动化搜索模板，也是</code>prompt<code>范式的第一阶段，就是在输入上加上</code>prompt<code>文本，再对输出进行映射。这种离散模板对模型的鲁棒性很差。所以后续的研究都将离散的方式转成连续。</code>Prefix Tuning在<strong>模型输入前添加一个连续的且任务特定的向量序列称之为prefix</strong><code>，固定</code>PLM(预训练模型)<code>的所有参数，只更新优化特定任务的</code>prefix</p><h4 id="P-tuning-V1-amp-amp-V2"><a href="#P-tuning-V1-amp-amp-V2" class="headerlink" title="P-tuning V1&amp;&amp;V2"></a>P-tuning V1&amp;&amp;V2</h4><p>提示调整只对使用冻结语言模型的连续提示进行调整,从而大大减少了训练时每个任务的存储和内存使用量.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505223449790.png" alt="image-20240505223449790"></p><p>在情感分析中,我们可以将样本（如 “了不起的电影！”）与提示语 “这部电影是[MASK]”连接起来，然后要求预先训练好的语言模型预测屏蔽标记为 “好 “和 “坏 “的概率,从而决定样本的标签.</p><p>提示法完全不需要训练,只需存储一份模型参数。</p><p>Prompt tuning2 是一种只对连续提示进行调整的想法.在原始输入词嵌入序列中添加可训练的连续嵌入(也称为连续提示)</p><p><code>P-Tuning v2</code>（论文： <strong>P-Tuning v2: Prompt Tuning Can Be Comparable to Fine-tuning Universally Across Scales and Tasks</strong>）,该方法在<strong>每一层</strong>都加入了<code>Prompts tokens</code>作为输入，而不是仅仅加在输入层，这带来两个方面的好处：</p><ul><li>更多可学习的参数（从<code>P-Tuning</code>和<code>Prompt Tuning</code>的0.01%增加到0.1%-3%），同时也足够参数高效。</li><li>加入到更深层结构中的<code>Promp</code>能给模型预测带来更直接的影响</li></ul><p>大模型的<code>Prompt</code>构造方式严重影响下游任务的效果。比如：<code>GPT-3</code>采用人工构造的模版来做上下文学习<code>(in-context learning)</code>，但人工设计的模版的变化特别敏感，加一个词或者少一个词，或者变动位置都会造成比较大的变化</p><h4 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h4><p>自然语言处理的一个重要范式是在一般领域数据上进行大规模预训练，然后适应特定任务或领域。随着我们预训练的模型越来越大，重新训练所有模型参数的全面微调就变得不那么可行了。以 GPT-3 175B 为例，部署微调模型的独立实例（每个实例有 175B 个参数）的成本过高。我们提出了（Low-Rank Adaptation，简称 LoRA）技术，它<strong>可以冻结预训练模型权重，并将可训练的等级分解矩阵注入 Transformer 架构的每一层(injects trainable rank decomposition matrices into each layer of the Transformer architecture)，从而大大减少下游任务的可训练参数数量</strong>.</p><p>LoRA 允许我们通过优化密集层在适应过程中的变化的秩分解矩阵来间接训练神经网络中的某些密集层,同时保持预先训练的权重不变.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505231432035.png" alt="image-20240505231432035" style="zoom:67%;" /></p><p>神经网络包含许多执行矩阵乘法的密集层.这些层中的<strong>权重矩阵通常具有全秩</strong>。Aghajanyan 等人（2020）的研究表明,在适应特定任务时,<strong>预训练的语言模型具有较低的 “本征维度”，即使随机投影到较小的子空间，仍能高效学习</strong>.受此启发，我们假设权重更新在适应过程中也具有较低的 “本征等级”。</p><p>对于一个预先训练好的权重矩阵 $W<em>{0}∈R^{d×k}$, d是满秩,r是低秩.我们用一个低秩分解 $W</em>{0} + ∆W = W<em>{0} + BA$ 来表示后者,其中 B∈$R</em>{d×r}$, A∈$R_{r×k}$, 秩为 r&lt;&lt; min(d,k).</p><p>在训练过程中,$W_{0}$被冻结,不会接收梯度更新,而 A 和 B 则包含可训练参数.</p><p>注意,$W_{0}$ 和 ∆W = BA 都与相同的输入相乘.它们各自的输出向量按坐标相加.</p><p>对 A 使用随机高斯初始化,对 B 使用零初始化,因此训练开始时 ∆W = BA 为零.然后，我们用 α/r 对 $∆Wx$​ 进行缩放,其中 α 是 r 中的一个常数.在使用Adam进行优化时,如果我们适当缩放初始化,调整 α 与调整学习率大致相同.因此,我们只需将 α 设为我们尝试的第一个 r,而无需调整.</p><script type="math/tex; mode=display">h=W_0x+\Delta Wx=W_0x+BAx</script><p>1、选择目标层</p><p>2、初始化映射矩阵和逆映射矩阵</p><p>为目标层创建两个较小的矩阵<code>A</code>和<code>B</code>，然后进行变换</p><p><code>A</code>是映射矩阵(一般用随机高斯分布初始化，维度上是降维）</p><p><code>B</code>是逆映射矩阵(用0矩阵初始化)，维度上是升维</p><p>之后做参数变换：将目标层的原始参数矩阵W通过映射矩阵<code>A</code>和逆映射矩阵<code>B</code>进行变换，计算公式为：<code>W&#39; = W + A * B</code>，这里<code>W&#39;</code>是变换后的参数矩阵</p><p>3、微调模型</p><p>使用新的参数矩阵<code>W&#39;</code>替换目标层的原始参数矩阵<code>W</code>，然后在特定任务的训练数据上对模型进行微调</p><p>4、梯度更新</p><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>适配器调整将小型神经网络模块（称为适配器）纳入transformer模型 .为了实现适配器模块,中提出了一种瓶颈架构,它首先将原始特征向量压缩到较小的维度（然后进行非线性变换）,然后将其恢复到原始维度.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240505231734946.png" alt="image-20240505231734946" style="zoom:67%;" /></p><p>在 NLP 中，微调大型预训练模型是一种有效的传输机制。然而，在有许多下游任务的情况下，微调的参数效率很低：每个任务都需要一个全新的模型。作为替代方案，我们建议<strong>使用适配器模块进行转移。适配器模块产生了一个紧凑且可扩展的模型；它们只为每个任务添加少量可训练参数，并且可以添加新任务，而无需重新检查之前的任务</strong>。原始网络的参数保持不变，从而实现了高度的参数共享。</p><h3 id="Prompt-Tuning"><a href="#Prompt-Tuning" class="headerlink" title="Prompt Tuning"></a>Prompt Tuning</h3><p>Prompt Tuning主要侧重于在输入层加入可训练的提示向量.</p><p>在离散提示的情况下（Schick 和 Schütze, 2020）,提示标记 {“它”、”是”、”[MASK]”} ⊂ V 可用来对电影评论进行分类。</p><p>Lester 等人引入了可训练连续提示,作为自然语言提示的替代,用于冻结预训练语言模型的参数的 NLU。给定可训练连续嵌入[h0, …, hi],输入嵌入序列被写成[e(x), h0, …, hi, e(“[MASK]”)], 事实证明,在简单的分类任务中,即时调整的效果与对百亿参数模型进行微调的效果相当.</p><p><img data-src="https://limokii.github.io/2023/12/24/Parameter%20Efficient%20Fine-Tuning(PEFT" alt="image-20240107102116261">%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20240107102116261.png)</p><p>在这项工作中，我们探索了 “提示调整”，这是一种简单而有效的机制，用于学习 “软提示”，使冻结语言模型能够执行特定的下游任务。与 GPT-3 使用的离散文本提示不同，软提示是通过反向传播学习的，可以进行调整，以纳入来自任意数量标注示例的信号</p><h3 id="Quantization方法"><a href="#Quantization方法" class="headerlink" title="Quantization方法"></a>Quantization方法</h3><p>在模型压缩领域,量化已成为一种广受欢迎的技术，可减轻深度学习模型的存储和计算开销.<strong>传统表示法采用浮点数，而量化则将其转换为整数或其他离散形式</strong>.这种转换大大降低了存储要求和计算复杂度。虽然会有一些固有的精度损失,但仔细的量化技术可以在实现大量模型压缩的同时，将精度降低到最低程度.目前量化方法主要分为PTQ和QAT,前者不需要训练,后者需要数据重新训练,LLMs包含大量的参数,PTQ方法的计算成本远低于QAT方法,因而更受青睐。</p><p>这方面可以看看<a href="https://www.deeplearning.ai/short-courses/">Short Courses | Learn Generative AI from DeepLearning.AI</a>上的视频,质量很高.</p><p>在神经网络压缩中,量化通常指从浮点数到整数的映射过程,尤其是 8 位整数量化(即 INT8 量化).对于神经网络模型，通常有两类数据需要量化，即权重（模型参数）和激活（隐藏激活），这两类数据最初用浮点数表示。</p><p>为了说明模型量化的基本思想，介绍一个简单但常用的量化函数：$x<em>{q} = R(x/S)-Z$，它将浮点数 x 转换为量化值 $x</em>{q}$。在这个函数中,S 和 Z 分别表示缩放因子（涉及两个参数 α 和 β,决定clipping range和zero-point factor(决定对称或不对称量化),R(-) 表示四舍五入运算,将缩放浮动值转换为近似整数。作为逆过程，去量化相应地从量化值中恢复出原始值: x= S - (xq + Z)。量化误差计算为原始值 x 与恢复值 ̃ x 之间的数值差。范围参数 α 和 β 对量化性能有很大影响，通常需要根据实际数据分布进行静态（离线）或动态（运行时）校准。</p><p>经常使用的线性quantizaiton,</p><p><img data-src="https://s2.loli.net/2024/05/11/XQ7vgiNjn9oLkAc.png" alt="image-20240511194833581"></p><p>q=int(round(r/s+z))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_with_scale_and_zero_point</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    tensor, scale, zero_point, dtype = torch.int8</span>):</span></span><br><span class="line"></span><br><span class="line">    scaled_and_shifted_tensor = tensor / scale + zero_point</span><br><span class="line"></span><br><span class="line">    rounded_tensor = torch.<span class="built_in">round</span>(scaled_and_shifted_tensor)</span><br><span class="line"></span><br><span class="line">    q_min = torch.iinfo(dtype).<span class="built_in">min</span></span><br><span class="line">    q_max = torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    q_tensor = rounded_tensor.clamp(q_min,q_max).to(dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> q_tensor</span><br></pre></td></tr></table></figure><p>这样得到量化后的结果再转回去与原本的差距,就是quantizaiton error.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### a dummy tensor to test the implementation</span></span><br><span class="line">test_tensor=torch.tensor(</span><br><span class="line">    [[<span class="number">191.6</span>, -<span class="number">13.5</span>, <span class="number">728.6</span>],</span><br><span class="line">     [<span class="number">92.14</span>, <span class="number">295.5</span>,  -<span class="number">184</span>],</span><br><span class="line">     [<span class="number">0</span>,     <span class="number">684.6</span>, <span class="number">245.5</span>]]</span><br><span class="line">)</span><br><span class="line"><span class="comment">### these are random values for &quot;scale&quot; and &quot;zero_point&quot;</span></span><br><span class="line"><span class="comment">### to test the implementation</span></span><br><span class="line">scale = <span class="number">3.5</span></span><br><span class="line">zero_point = -<span class="number">70</span></span><br><span class="line">quantized_tensor = linear_q_with_scale_and_zero_point(</span><br><span class="line">    test_tensor, scale, zero_point)</span><br><span class="line">dequantized_tensor = scale * (quantized_tensor.<span class="built_in">float</span>() - zero_point)</span><br><span class="line">(dequantized_tensor - test_tensor).square().mean()</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/11/FRJflki8SWwLBN4.png" alt="image-20240511211342622"></p><p>要计算s和z,首先我们知道r_min,r_max以及q_min,q_max,由此得到s,再通过s,q_min和r_min计算得到z.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q_scale_and_zero_point</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    q_min, q_max = torch.iinfo(dtype).<span class="built_in">min</span>, torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line">    r_min, r_max = tensor.<span class="built_in">min</span>().item(), tensor.<span class="built_in">max</span>().item()</span><br><span class="line"></span><br><span class="line">    scale = (r_max - r_min) / (q_max - q_min)</span><br><span class="line"></span><br><span class="line">    zero_point = q_min - (r_min / scale)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clip the zero_point to fall in [quantized_min, quantized_max]</span></span><br><span class="line">    <span class="keyword">if</span> zero_point &lt; q_min:</span><br><span class="line">        zero_point = q_min</span><br><span class="line">    <span class="keyword">elif</span> zero_point &gt; q_max:</span><br><span class="line">        zero_point = q_max</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># round and cast to int</span></span><br><span class="line">        zero_point = <span class="built_in">int</span>(<span class="built_in">round</span>(zero_point))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scale, zero_point</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/11/Ui7bAhFEXkIqLQs.png" alt="image-20240511211741798"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_quantization</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    scale, zero_point = get_q_scale_and_zero_point(tensor, </span><br><span class="line">                                                   dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(tensor,</span><br><span class="line">                                                          scale, </span><br><span class="line">                                                          zero_point, </span><br><span class="line">                                                          dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale , zero_point</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_dequantization</span>(<span class="params">q_tensor,scale,zero_point</span>):</span></span><br><span class="line">    tensor = (q_tensor.<span class="built_in">float</span>()-zero_point)*scale</span><br><span class="line">    <span class="keyword">return</span> tensor</span><br></pre></td></tr></table></figure><p>在线性量化中有对称和非对称模式,非对称就是上面的方式.对称模式将[-$r<em>{max}$,$r</em>{max}$]投影到[-$q<em>{max}$,$q</em>{max}$],$r<em>{max}$是max(|$r</em>{tensor}$|)</p><p>计算公式是</p><script type="math/tex; mode=display">\begin{cases}q=int(round(r/s))\\s=r_{\max}/q_{\max}\end{cases}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q_scale_symmetric</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    r_max = tensor.<span class="built_in">abs</span>().<span class="built_in">max</span>().item()</span><br><span class="line">    q_max = torch.iinfo(dtype).<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return the scale</span></span><br><span class="line">    <span class="keyword">return</span> r_max/q_max</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric</span>(<span class="params">tensor, dtype=torch.int8</span>):</span></span><br><span class="line">    scale = get_q_scale_symmetric(tensor)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(tensor,</span><br><span class="line">                                                     scale=scale,</span><br><span class="line">                   <span class="comment"># in symmetric quantization zero point is = 0    </span></span><br><span class="line">                                                    zero_point=<span class="number">0</span>,</span><br><span class="line">                                                      dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比,对称模式会导致有些量化范围的值用不上,但是它比较简单而且不用存0值. 在量化到更低位时考虑使用非对称模式。</p><p>量化的不同粒度,包括per tensor,per channel,per group.</p><p>对于通道来说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(output_dim):</span><br><span class="line">    sub_tensor = test_tensor.select(dim,index)</span><br><span class="line">    <span class="comment"># print(sub_tensor)</span></span><br><span class="line">    scale[index] = get_q_scale_symmetric(sub_tensor)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric_per_channel</span>(<span class="params">r_tensor, dim, dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    output_dim = r_tensor.shape[dim]</span><br><span class="line">    <span class="comment"># store the scales</span></span><br><span class="line">    scale = torch.zeros(output_dim)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(output_dim):</span><br><span class="line">        sub_tensor = r_tensor.select(dim, index)</span><br><span class="line">        scale[index] = get_q_scale_symmetric(sub_tensor, dtype=dtype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># reshape the scale</span></span><br><span class="line">    scale_shape = [<span class="number">1</span>] * r_tensor.dim()</span><br><span class="line">    scale_shape[dim] = -<span class="number">1</span></span><br><span class="line">    scale = scale.view(scale_shape)</span><br><span class="line">    quantized_tensor = linear_q_with_scale_and_zero_point(</span><br><span class="line">        r_tensor, scale=scale, zero_point=<span class="number">0</span>, dtype=dtype)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line">dequantized_tensor_0 = linear_dequantization(</span><br><span class="line">    quantized_tensor_0, scale_0, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plot_quantization_errors(</span><br><span class="line">    test_tensor, quantized_tensor_0, dequantized_tensor_0)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_q_symmetric_per_group</span>(<span class="params">tensor, group_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 dtype=torch.int8</span>):</span></span><br><span class="line">    </span><br><span class="line">    t_shape = tensor.shape</span><br><span class="line">    <span class="keyword">assert</span> t_shape[<span class="number">1</span>] % group_size == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> tensor.dim() == <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    tensor = tensor.view(-<span class="number">1</span>, group_size)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor, scale = linear_q_symmetric_per_channel(</span><br><span class="line">                                tensor, dim=<span class="number">0</span>, dtype=dtype)</span><br><span class="line">    </span><br><span class="line">    quantized_tensor = quantized_tensor.view(t_shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quantized_tensor, scale</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_dequantization_per_group</span>(<span class="params">quantized_tensor, scale, </span></span></span><br><span class="line"><span class="params"><span class="function">                                    group_size</span>):</span></span><br><span class="line">    </span><br><span class="line">    q_shape = quantized_tensor.shape</span><br><span class="line">    quantized_tensor = quantized_tensor.view(-<span class="number">1</span>, group_size)</span><br><span class="line">    </span><br><span class="line">    dequantized_tensor = linear_dequantization(quantized_tensor, </span><br><span class="line">                                               scale, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    dequantized_tensor = dequantized_tensor.view(q_shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dequantized_tensor</span><br></pre></td></tr></table></figure><p>量化权重和激活.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantized_linear_W8A32_without_bias</span>(<span class="params"><span class="built_in">input</span>, q_w, s_w, z_w</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">input</span>.dtype == torch.float32</span><br><span class="line">    <span class="keyword">assert</span> q_w.dtype == torch.int8</span><br><span class="line"></span><br><span class="line">    dequantized_weight = q_w.to(torch.float32) * s_w + z_w</span><br><span class="line">    output = torch.nn.functional.linear(<span class="built_in">input</span>, dequantized_weight)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/14/tz9cBO5UowfKvqg.png" alt="image-20240514215518321"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output = quantized_linear_W8A32_without_bias(<span class="built_in">input</span>,                                            q_w,                                            s_w,                                             <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">W8A16LinearLayer</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,in_features,out_features,bias=<span class="literal">True</span>,dtype=torch.float32</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.register_buffer(</span><br><span class="line">            <span class="string">&quot;int8_weights&quot;</span>,</span><br><span class="line">            torch.randint(</span><br><span class="line">                -<span class="number">128</span>, <span class="number">127</span>, (out_features, in_features), dtype=torch.int8</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        self.register_buffer(<span class="string">&quot;scales&quot;</span>,</span><br><span class="line">                             torch.randn((out_features), dtype=dtype))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            self.register_buffer(<span class="string">&quot;bias&quot;</span>,</span><br><span class="line">                                 torch.randn((<span class="number">1</span>, out_features),</span><br><span class="line">                                             dtype=dtype))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bias = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quantize</span>(<span class="params">self, weights</span>):</span></span><br><span class="line">        w_fp32 = weights.clone().to(torch.float32)</span><br><span class="line"></span><br><span class="line">        scales = w_fp32.<span class="built_in">abs</span>().<span class="built_in">max</span>(dim=-<span class="number">1</span>).values / <span class="number">127</span></span><br><span class="line">        scales = scales.to(weights.dtype)</span><br><span class="line"></span><br><span class="line">        int8_weights = torch.<span class="built_in">round</span>(weights</span><br><span class="line">                                   / scales.unsqueeze(<span class="number">1</span>)).to(torch.int8)</span><br><span class="line">        self.int8_weights = int8_weights</span><br><span class="line">        self.scales = scales</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> w8_a16_forward(self.int8_weights,</span><br><span class="line">                              <span class="built_in">input</span>, self.scales, self.bias)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w8_a16_forward</span>(<span class="params">weight, <span class="built_in">input</span>, scales, bias=<span class="literal">None</span></span>):</span></span><br><span class="line">casted_weights = weight.to(<span class="built_in">input</span>.dtype)</span><br><span class="line">output = F.linear(<span class="built_in">input</span>, casted_weights) * scales</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">output = output + bias</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>量化线性层,可以替代一些模型的线性层,因为它自带quantize方法可以量化线性层的权重,这里的量化方法都是指的linear quantization,也就是通过原本值的范围和量化后的计算得到的scale和zero_point来将原本的矩阵进行量化.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_linear_with_target</span>(<span class="params">module,</span></span></span><br><span class="line"><span class="params"><span class="function">                               target_class, module_name_to_exclude</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name, child <span class="keyword">in</span> module.named_children():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(child, nn.Linear) <span class="keyword">and</span> <span class="keyword">not</span> \</span><br><span class="line">                <span class="built_in">any</span>([x == name <span class="keyword">for</span> x <span class="keyword">in</span> module_name_to_exclude]):</span><br><span class="line">            old_bias = child.bias</span><br><span class="line"></span><br><span class="line">            new_module = target_class(child.in_features,</span><br><span class="line">                                      child.out_features,</span><br><span class="line">                                      old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>,</span><br><span class="line">                                      child.weight.dtype)</span><br><span class="line">            <span class="built_in">setattr</span>(module, name, new_module)</span><br><span class="line">            <span class="keyword">if</span> old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">getattr</span>(module, name).bias = old_bias</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Recursively call the function for nested modules</span></span><br><span class="line">            replace_linear_with_target(</span><br><span class="line">                child, target_class, module_name_to_exclude)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_linear_with_target_and_quantize</span>(<span class="params">module, </span></span></span><br><span class="line"><span class="params"><span class="function">                               target_class, module_name_to_exclude</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name, child <span class="keyword">in</span> module.named_children():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(child, nn.Linear) <span class="keyword">and</span> <span class="keyword">not</span> \</span><br><span class="line">        <span class="built_in">any</span>([x == name <span class="keyword">for</span> x <span class="keyword">in</span> module_name_to_exclude]):</span><br><span class="line">            old_bias = child.bias</span><br><span class="line">            old_weight = child.weight</span><br><span class="line"></span><br><span class="line">            new_module = target_class(child.in_features, </span><br><span class="line">                                      child.out_features, </span><br><span class="line">                                      old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, </span><br><span class="line">                                      child.weight.dtype)</span><br><span class="line">            <span class="built_in">setattr</span>(module, name, new_module)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">getattr</span>(module, name).quantize(old_weight)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> old_bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">              <span class="built_in">getattr</span>(module, name).bias = old_bias</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Recursively call the function for nested modules</span></span><br><span class="line">            replace_linear_with_target_and_quantize(child, </span><br><span class="line">                     target_class, module_name_to_exclude)</span><br></pre></td></tr></table></figure><p>搭配huggingface量化大模型.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer, pipeline</span><br><span class="line"></span><br><span class="line">model_id = <span class="string">&quot;./models/Salesforce/codegen-350M-mono&quot;</span></span><br><span class="line"></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(model_id, </span><br><span class="line">                                    torch_dtype=torch.bfloat16, </span><br><span class="line">                                             low_cpu_mem_usage=<span class="literal">True</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipe = pipeline(<span class="string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)</span><br><span class="line">replace_linear_with_target_and_quantize(model, </span><br><span class="line">                                        W8A16LinearLayer, [<span class="string">&quot;lm_head&quot;</span>])</span><br><span class="line">                                        <span class="built_in">print</span>(pipe(<span class="string">&quot;def hello_world():&quot;</span>, max_new_tokens=<span class="number">20</span>, </span><br><span class="line">           do_sample=<span class="literal">False</span>)[<span class="number">0</span>][<span class="string">&quot;generated_text&quot;</span>])</span><br></pre></td></tr></table></figure><h4 id="Weight-packing"><a href="#Weight-packing" class="headerlink" title="Weight packing"></a>Weight packing</h4><p>将可以使用int2,int4保存的多个数据使用一个或多个int8保存起来,也就是pack.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_weights</span>(<span class="params">uint8tensor, bits</span>):</span></span><br><span class="line">    <span class="keyword">if</span> uint8tensor.shape[<span class="number">0</span>] * bits % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;The input shape needs to be a mutiple \</span></span><br><span class="line"><span class="string">        of <span class="subst">&#123;<span class="number">8</span> / bits&#125;</span> - got <span class="subst">&#123;uint8tensor.shape[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    num_values = uint8tensor.shape[<span class="number">0</span>] * bits // <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    num_steps = <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    unpacked_idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    packed_tensor = torch.zeros((num_values), dtype=torch.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 0 3 2 - 01 00 11 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># [0000 0000] -&gt; 0000 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0000 - 0000 0000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0000 0011 - 0011 0000 - 0011 0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1011 0001</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_values):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">            packed_tensor[i] |= uint8tensor[unpacked_idx] &lt;&lt; (bits * j)</span><br><span class="line">            unpacked_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> packed_tensor</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_weights</span>(<span class="params">uint8tensor, bits</span>):</span></span><br><span class="line">    num_values = uint8tensor.shape[<span class="number">0</span>] * <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    num_steps = <span class="number">8</span> // bits</span><br><span class="line"></span><br><span class="line">    unpacked_tensor = torch.zeros((num_values), dtype=torch.uint8)</span><br><span class="line"></span><br><span class="line">    unpacked_idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 0 3 2 - 01 00 11 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># [00000000 00000000 00000000 00000000]</span></span><br><span class="line">    <span class="comment"># [10110001 00101100 00001011 00000010]</span></span><br><span class="line">    <span class="comment"># [00000001 00000000 00000011 00000010]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10110001</span></span><br><span class="line">    <span class="comment"># 00000011</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 00000001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1: [10110001]</span></span><br><span class="line">    <span class="comment"># 2: [00101100]</span></span><br><span class="line">    <span class="comment"># 3: [00001011]</span></span><br><span class="line"></span><br><span class="line">    mask = <span class="number">2</span> ** bits - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(uint8tensor.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">            unpacked_tensor[unpacked_idx] |= uint8tensor[i] &gt;&gt; (bits * j)</span><br><span class="line">            unpacked_idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    unpacked_tensor &amp;= mask</span><br><span class="line">    <span class="keyword">return</span> unpacked_tensor</span><br></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2024/05/15/Q3Ax1eLJoGz42ZS.png" alt="image-20240515101338582"></p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>在收集大量文本数据后，必须对数据进行预处理，以构建预训练语料库，特别是去除噪声、冗余、不相关和潜在有毒的数据]，这些数据可能会在很大程度上影响 LLM 的容量和性能。为了方便数据处理,最近的一项研究为 LLMs 提出了一个有用的数据处理系统,名为 Data-Juicer<a href="https://github.com/modelscope/data-juicer">modelscope/data-juicer: A one-stop data processing system to make data higher-quality, juicier, and more digestible for LLMs! 🍎 🍋 🌽 ➡️ ➡️🍸 🍹 🍷为大语言模型提供更高质量、更丰富、更易”消化“的数据！ (github.com)</a>,它提供了 50 多个处理算子和工具.在这一部分将回顾详细的数据预处理策略,以提高所收集数据的质量。</p><h4 id="Quality-Filtering"><a href="#Quality-Filtering" class="headerlink" title="Quality Filtering"></a>Quality Filtering</h4><p>为了从收集到的语料库中剔除低质量数据,现有工作一般采用两种方法：(1) 基于分类器的方法；(2) 基于启发式的方法。前一种方法基于高质量文本训练选择分类器,并利用它来识别和过滤低质量数据。然而一些研究发现基于分类器的方法可能会导致方言、口语和社会方言语言中高质量文本的无意删除，这可能会导致预训练语料中的偏见，并减弱语料的多样性。</p><p>作为第二种方法，一些研究，如BLOOM 和Gopher，采用启发式方法，通过一组精心设计的规则来消除低质量文本，这些规则可以概括为：</p><p>·<strong>基于语言的过滤。</strong>如果LLM主要用于某些语言的任务，则可以过滤其他语言的文本。</p><p>·<strong>基于度量的过滤</strong>。生成文本的评价指标，例如困惑度，可以用来检测和去除不自然的句子。</p><p>·<strong>基于统计的过滤</strong>。语料库的统计特征，如标点符号分布，符词比和句子长度，可以用来衡量文本质量和过滤低质量数据。</p><p>·<strong>基于关键词的过滤</strong>。基于特定的关键字集合，噪声或无用的</p><h4 id="De-duplication"><a href="#De-duplication" class="headerlink" title="De-duplication"></a>De-duplication</h4><p><strong>现有工作发现语料库中的重复数据会降低语言模型的多样性，这可能会导致训练过程变得不稳定</strong>，从而影响模型性能。因此，有必要对重复数据删除语料进行预训练。特别地，重复数据删除可以在不同粒度下进行，包括句子级、文档级和数据集级重复数据删除。首先<strong>，应该去除包含重复单词和短语的低质量句子，因为它们可能会在语言建模中引入重复模式</strong>。在文档层面，现有研究<strong>大多依靠文档之间的表面特征重叠率</strong>(例如,单词和n元词串重叠)来检测和去除包含相似内容的重复文档。此外，为了避免数据污染问题，防止训练集和评估集之间的重叠也是至关重要的，通过从训练集中移除可能的重复文本。研究表明，这3个层次的去重对提高LLMs的训练是有益的，应该在实际中联合使用。</p><h4 id="Privacy-Reduction"><a href="#Privacy-Reduction" class="headerlink" title="Privacy Reduction"></a>Privacy Reduction</h4><p>大多数预训练文本数据是从Web来源获得的，包括用户生成的涉及敏感或个人信息的内容，这可能会增加隐私泄露的风险。因此，有必要从预训练语料中移除个人身份信息( PII )。一种直接而有效的方法是使用基于规则的方法，如关键字检测，来检测和去除PII，如名称，地址和电话号码。此外，研究人员还发现LLMs在隐私攻击下的脆弱性可以归因于预训练语料中存在重复的PII数据</p><h4 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h4><p>normalization是为了去除不需要的空白,小写以及口音.</p><p>pre-tokenization会生成每个word的偏移量.Model就是BPE等方法.</p><p><img data-src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter6/tokenization_pipeline.svg" alt="The tokenization pipeline."></p><p>标记化也是数据预处理的关键步骤。它的目的是将原始文本分割成一系列单独的令牌序列,然后将这些令牌序列作为LLMs的输入.在传统的NLP研究(例如,利用条件随机场进行序列标注)中,基于词的标记化是最主要的方法,它更符合人类的语言认知.主要有word-,character-以及<strong>subword</strong>-的分词方式.</p><blockquote><p>训练tokenizer是一个统计过程，它试图确定哪些子词是特定语料的最佳选择，而选择子词的具体规则取决于标记化算法。它是确定性的，这意味着在同一语料库上使用同一算法进行训练时，总会得到相同的结果。</p></blockquote><h5 id="Byte-Pair-encoding"><a href="#Byte-Pair-encoding" class="headerlink" title="Byte-Pair encoding"></a>Byte-Pair encoding</h5><p>它从一组基本符号(例如,字母和边界字符)开始,迭代地将语料库中频繁出现的连续两个token对组合为新的token (称为merge ).对于每一个合并,选择标准是基于两个连续标记的共现频率:选择最高的频繁对.合并过程一直持续到达到预定义的大小.</p><p>开始通过word分词得到类似下面的数据</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Vocabulary:</span> [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;ug&quot;</span>]</span><br><span class="line"><span class="symbol">Corpus:</span>(<span class="string">&quot;h&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;n&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;n&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;g&quot;</span> <span class="string">&quot;s&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>在获得基本词汇后,会通过学习合并规则来添加新的标记词,直到达到所需的词汇量为止,合并规则就是将现有词汇中的两个元素合并成一个新词汇.因此,一开始这些合并会产生两个字符的词库,然后随着训练的进行,会产生更长的子词.</p><p>在标记符训练过程中的任何一步，BPE 算法都会搜索现有标记符中出现频率最高的一对（这里的 “一对 “指的是一个词中连续出现的两个标记符）。这对频率最高的词对将被合并，然后我们重复下一步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">word_freqs = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> corpus:</span><br><span class="line">    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)</span><br><span class="line">    new_words = [word <span class="keyword">for</span> word, offset <span class="keyword">in</span> words_with_offsets]</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> new_words:</span><br><span class="line">        word_freqs[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">alphabet = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> word_freqs.keys():</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> alphabet:</span><br><span class="line">            alphabet.append(letter)</span><br><span class="line">alphabet.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alphabet)</span><br><span class="line">vocab = [<span class="string">&quot;&lt;|endoftext|&gt;&quot;</span>] + alphabet.copy() <span class="comment"># 针对不同llm可能会有special tokens.</span></span><br><span class="line">splits = &#123;word: [c <span class="keyword">for</span> c <span class="keyword">in</span> word] <span class="keyword">for</span> word <span class="keyword">in</span> word_freqs.keys()&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_pair_freqs</span>(<span class="params">splits</span>):</span></span><br><span class="line">    pair_freqs = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> word, freq <span class="keyword">in</span> word_freqs.items():</span><br><span class="line">        split = splits[word]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(split) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(split) - <span class="number">1</span>):</span><br><span class="line">            pair = (split[i], split[i + <span class="number">1</span>])</span><br><span class="line">            pair_freqs[pair] += freq</span><br><span class="line">    <span class="keyword">return</span> pair_freqs</span><br><span class="line">pair_freqs = compute_pair_freqs(splits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(pair_freqs.keys()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;pair_freqs[key]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>      </span><br><span class="line">best_pair = <span class="string">&quot;&quot;</span></span><br><span class="line">max_freq = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pair, freq <span class="keyword">in</span> pair_freqs.items():</span><br><span class="line">    <span class="keyword">if</span> max_freq <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> max_freq &lt; freq:</span><br><span class="line">        best_pair = pair</span><br><span class="line">        max_freq = freq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_pair</span>(<span class="params">a, b, splits</span>):</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> word_freqs:</span><br><span class="line">        split = splits[word]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(split) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(split) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> split[i] == a <span class="keyword">and</span> split[i + <span class="number">1</span>] == b:</span><br><span class="line">                split = split[:i] + [a + b] + split[i + <span class="number">2</span> :]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        splits[word] = split</span><br><span class="line">    <span class="keyword">return</span> splits</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokenize</span>(<span class="params">text</span>):</span></span><br><span class="line">    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)</span><br><span class="line">    pre_tokenized_text = [word <span class="keyword">for</span> word, offset <span class="keyword">in</span> pre_tokenize_result]</span><br><span class="line">    splits = [[l <span class="keyword">for</span> l <span class="keyword">in</span> word] <span class="keyword">for</span> word <span class="keyword">in</span> pre_tokenized_text]</span><br><span class="line">    <span class="keyword">for</span> pair, merge <span class="keyword">in</span> merges.items():</span><br><span class="line">        <span class="keyword">for</span> idx, split <span class="keyword">in</span> <span class="built_in">enumerate</span>(splits):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(split) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> split[i] == pair[<span class="number">0</span>] <span class="keyword">and</span> split[i + <span class="number">1</span>] == pair[<span class="number">1</span>]:</span><br><span class="line">                    split = split[:i] + [merge] + split[i + <span class="number">2</span> :]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            splits[idx] = split</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(splits, [])</span><br></pre></td></tr></table></figure><h5 id="SentencePiece"><a href="#SentencePiece" class="headerlink" title="SentencePiece"></a>SentencePiece</h5><p>SentencePiece 是一种用于文本预处理的tokenization,它将文本视为 Unicode 字符序列，并用特殊字符 ▁ 替换空格.与 Unigram 算法结合使用，它甚至不需要预标记步骤,这对于不使用空格字符的语言（如中文或日文）非常有用</p><h5 id="WordPiece"><a href="#WordPiece" class="headerlink" title="WordPiece"></a>WordPiece</h5><p>与 BPE 类似,WordPiece 也是从一个小词库开始的,其中包括模型使用的特殊标记和初始字母表.由于它是通过添加前缀（如 BERT 的 ##）来识别子词的,因此每个词最初都是通过将前缀添加到词内的所有字符来分割的.</p><p>同样的例子.</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;hug&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;pug&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;pun&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;bun&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;hugs&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>拆开后有</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span> <span class="string">&quot;#<span class="subst">#s</span>&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>WordPiece 学习合并规则.主要区别在于选择要合并的词对的方式.它不是选择最频繁的词对.</p><p>通过将词对的频率除以各部分频率的乘积,该算法会优先合并词汇中各部分频率较低的词对.</p><p>初始词汇将是[“b”、”h”、”p”、”##g”、”##n”、”##s”、”##u”]（如果我们暂时不考虑特殊标记的话）。出现频率最高的词对是（”##u”，”##g”）（出现 20 次），但 “##u “的单个出现频率非常高，因此它的得分并不是最高的（1/36）。所有含有 “##u “的词对实际上都有相同的得分（1/36），因此得分最高的词对是（”##g”, “##s”）—唯一一个没有 “##u “的词对，得分是 1/20，第一次合并的结果是（”##g”, “##s”）-&gt;（”##gs”）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vocabulary: [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#s</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#u</span>&quot;</span>, <span class="string">&quot;#<span class="subst">#gs</span>&quot;</span>]</span><br><span class="line">Corpus: (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#g</span>&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;p&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">12</span>), (<span class="string">&quot;b&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#n</span>&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;h&quot;</span> <span class="string">&quot;#<span class="subst">#u</span>&quot;</span> <span class="string">&quot;#<span class="subst">#gs</span>&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="Unigram"><a href="#Unigram" class="headerlink" title="Unigram"></a>Unigram</h5><p>Unigram 算法常用于 SentencePiece，而 SentencePiece 是 AlBERT、T5、mBART、Big Bird 和 XLNet 等模型使用的tokenization算法。</p><p>与 BPE 和 WordPiece 相比,Unigram 的工作方向相反:它从一个大词汇量开始，然后从中删除词组,直到达到所需的词汇量.有几种方法可以用来建立基本词库:例如,我们可以在预先标注的单词中提取最常见的子串,或者在初始语料库中应用 BPE,以获得较大的词汇量.</p><p>有几种方法可以用来建立基础词汇:例如,我们可以从预先标注的单词中选取最常见的子串,或者在初始语料库中应用 BPE,使其具有较大的词汇量。</p><p>在训练的每一步,Unigram 算法都会根据当前的词汇量计算语料库的损失.然后,对于词汇表中的每个符号,算法都会计算如果删除该符号,整体损失会增加多少,并寻找损失增加最少的符号.这些符号对语料库总体损失的影响较小,因此从某种意义上说,它们 “不那么需要”,是删除的最佳候选。</p><h3 id="Retrieve-Augmented-Generation-RAG"><a href="#Retrieve-Augmented-Generation-RAG" class="headerlink" title="Retrieve Augmented Generation(RAG)"></a>Retrieve Augmented Generation(RAG)</h3><p>由 LLM 驱动的聊天机器人可处理用户提示并生成回复.该聊天机器人旨在与用户进行互动,并就广泛的主题与用户进行交流.</p><p>但是,它的回复仅限于所提供的上下文和基础培训数据.例如,GPT-4 的知识截止日期是 2021 年 9 月,这意味着它不了解这一时期之后发生的事件.此外,用于训练 LLM 的数据不包括个人笔记或公司产品手册等机密信息.<img data-src="https://github.com/microsoft/generative-ai-for-beginners/raw/main/15-rag-and-vector-databases/images/encoder-decode.png?WT.mc_id=academic-105485-koreyst" alt="drawing showing how RAGs architecture"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/luban-agi/Awesome-AIGC-Tutorials?tab=readme-ov-file#-multimodal">luban-agi/Awesome-AIGC-Tutorials: Curated tutorials and resources for Large Language Models, AI Painting, and more. (github.com)</a></li><li><a href="https://github.com/mlabonne/llm-course">mlabonne/llm-course: Course to get into Large Language Models (LLMs) with roadmaps and Colab notebooks. (github.com)</a></li><li><a href="https://github.com/BradyFU/Awesome-Multimodal-Large-Language-Models">BradyFU/Awesome-Multimodal-Large-Language-Models: :sparkles::sparkles:Latest Papers and Datasets on Multimodal Large Language Models, and Their Evaluation. (github.com)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近大语言模型及其相关应用实在是太火了,可以在一些公司或者个人博客查看最前沿进展,也可以通过代码项目、课程学习,还可以看看经典论文.这里就看看一些LLM的论文学习学习.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>论文引用转换小工具</title>
    <link href="https://www.sekyoro.top/2024/05/01/%E8%AE%BA%E6%96%87%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.sekyoro.top/2024/05/01/%E8%AE%BA%E6%96%87%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2024-05-01T05:47:06.000Z</published>
    <updated>2024-05-01T07:23:54.604Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>起因是最近写论文,引用参考文献时图方便直接用arxiv的citation了,但是貌似这样不太好,已经发表的论文依然显示publisher是arxiv,所以就想写个工具转换一下.<br><span id="more"></span></p><p>首先我在网上找了找类似的工具,出现比较多的是<a href="https://github.com/yuchenlin/rebiber">yuchenlin/rebiber: A simple tool to update bib entries with their official information (e.g., DBLP or the ACL anthology). (github.com)</a>,还有个在线体验地址<a href="https://huggingface.co/spaces/yuchenlin/Rebiber">Rebiber - a Hugging Face Space by yuchenlin</a>.</p><p>这个工具主要利用NLP会议的一些信息来转换,但是有些还是无法成功.</p><p>比如有一篇2023CVPR的论文我转换就失败了,依然显示arxiv的链接.</p><p>所以我就想了个办法(我之前也找到了其他人也用的类似这个方法,但我找不到链接了),使用谷歌学术上的引用.处理逻辑很简单,分析bib文件中的每个条目,看哪些是arxiv的然后就在谷歌学术上搜索并替换,当然不排除有的文章很牛但还是只有arxiv版本,特别是在深度学习中,一些大牛这样干.</p><p>上面的方法会出一些问题,比如爬着爬着就出现谷歌的验证,因为没有js,会提示不允许访问,需要进行验证,所以只能再变成selenium的方式,使用webdriver通过验证.</p><p>全部代码如下.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bibtexparser <span class="keyword">as</span> bp</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.compat <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.edge.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">scholar_site = <span class="string">&quot;https://scholar.google.com/scholar&quot;</span>  <span class="comment"># https://scholar.google.com/scholar</span></span><br><span class="line">bib_url = <span class="string">&quot;https://scholar.google.cz/scholar&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paser</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parse_type=<span class="string">&#x27;b&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> parse_type == <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            edge_ops = Options()</span><br><span class="line">            <span class="comment"># edge_ops.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">            self.driver = webdriver.Edge(options=edge_ops)</span><br><span class="line">            self.flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_thesis</span>(<span class="params">self, title: <span class="built_in">str</span></span>):</span></span><br><span class="line">        response = requests.get(scholar_site, params=&#123;<span class="string">&#x27;q&#x27;</span>: title, <span class="string">&#x27;hl&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>&#125;)</span><br><span class="line">        root = etree.HTML(response.text)</span><br><span class="line">        nodes = root.xpath(<span class="string">&#x27;//div[@id=&quot;gs_res_ccl_mid&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(nodes) == <span class="number">1</span>, <span class="string">&quot;No thesis found.&quot;</span></span><br><span class="line">        node = nodes[<span class="number">0</span>]</span><br><span class="line">        first_theis = node.xpath(<span class="string">&#x27;//div[contains(@class, &quot;gs_r&quot;) and contains(@class, &quot;gs_or&quot;) and contains(@class, &#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;gs_scl&quot;) and @data-cid]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(first_theis) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;No thesis found.&quot;</span>)</span><br><span class="line">        data_cid = first_theis[<span class="number">0</span>].get(<span class="string">&quot;data-cid&quot;</span>)</span><br><span class="line">        res = requests.get(bib_url,</span><br><span class="line">                           params=&#123;<span class="string">&#x27;q&#x27;</span>: <span class="string">f&quot;info:<span class="subst">&#123;data_cid&#125;</span>:scholar.google.com/&quot;</span>, <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;cite&#x27;</span>, <span class="string">&#x27;hl&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">                                   <span class="string">&#x27;scirp&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_bib_from_scholar(res.text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bib_from_scholar</span>(<span class="params">self, res: <span class="built_in">str</span></span>):</span></span><br><span class="line">        root = etree.HTML(res)</span><br><span class="line">        bibtex_url = root.xpath(<span class="string">&#x27;//div[@id=&quot;gs_citi&quot;]&#x27;</span>)[<span class="number">0</span>].xpath(<span class="string">&#x27;//a&#x27;</span>)[<span class="number">0</span>].get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        bib_res = requests.get(bibtex_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> bib_res.text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_thesis_from_browser</span>(<span class="params">self, title: <span class="built_in">str</span></span>):</span></span><br><span class="line">        url_query = urljoin(scholar_site, <span class="string">f&quot;?q=<span class="subst">&#123;title&#125;</span>&amp;hl=&#x27;zh-CN&#x27;&quot;</span>)</span><br><span class="line">        self.driver.get(url_query)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Searching thesis information.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.flag:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                captcha = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;gs_captcha_c&quot;]&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> captcha:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Captcha detected.&quot;</span>)</span><br><span class="line">                    self.driver.implicitly_wait(<span class="number">100</span>)</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Please solve the captcha.&quot;</span>)</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> captcha.is_displayed():</span><br><span class="line">                            self.flag = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Retrieving thesis information.&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        ref = self.driver.find_element(By.XPATH, <span class="string">&#x27;//div[@id=&quot;gs_res_ccl_mid&quot;]/*[1]//div[@class=&quot;gs_fl gs_flb&quot;]/a[2]&#x27;</span>)</span><br><span class="line">        ref.click()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        bib_link = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;gs_citi&quot;]/a[1]&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        bib_link.click()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        bib_text = self.driver.find_element(By.TAG_NAME, <span class="string">&#x27;pre&#x27;</span>).text</span><br><span class="line">        <span class="keyword">return</span> bib_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_bib</span>(<span class="params">file_path: <span class="built_in">str</span>, output_file_path: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> archiveprefix</span><br><span class="line">    <span class="keyword">if</span> output_file_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        output_file_path = Path(file_path).stem + <span class="string">&quot;_parsed.bib&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Path(output_file_path).exists():</span><br><span class="line">        Path(output_file_path).touch()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    bib_content = bp.parse_file(file_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bib_content.failed_blocks) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(</span><br><span class="line">            <span class="string">&#x27;\033[92m&#x27;</span> + <span class="string">&quot;Some blocks failed to parse. Check the entries of `library.failed_blocks`.&quot;</span> + <span class="string">&#x27;\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;All blocks parsed successfully&quot;</span>)</span><br><span class="line">    parser = Paser()</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bib_content.entries)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            publisher = bib_content.entries[idx][<span class="string">&#x27;publisher&#x27;</span>]</span><br><span class="line">            publisher = publisher.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            publisher = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                archiveprefix = bib_content.entries[idx][<span class="string">&#x27;archiveprefix&#x27;</span>]</span><br><span class="line">                archiveprefix = archiveprefix.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                archiveprefix = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> publisher == <span class="string">&quot;arXiv&quot;</span> <span class="keyword">or</span> archiveprefix == <span class="string">&quot;arxiv&quot;</span>:</span><br><span class="line">            title = bib_content.entries[idx][<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">            title = title.replace(<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            key = bib_content.entries[idx].key</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                lib = bp.parse_string(parser.search_thesis_from_browser(title=title))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            lib.entries[<span class="number">0</span>].key = key</span><br><span class="line">            new_bibtex_str = bp.write_string(lib)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_bibtex_str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lib = bp.Library()</span><br><span class="line">            lib.add(bib_content.entries[idx])</span><br><span class="line">            lib_str = bp.write_string(lib)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(lib_str)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(bib_content.entries) == <span class="built_in">len</span>(bp.parse_file(output_file_path).entries), <span class="string">&quot;Some entries are missing.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;File saved to <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse_bib(<span class="string">&#x27;references.bib&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解析bib文件使用bibtexparser这个库.</p><p>这里我使用Edge浏览器,换成谷歌浏览器也可以,另外如果在国内,需要开全局代理.</p><p>处理完后建议检查一下.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://bibtexparser.readthedocs.io/en/main/bibtexparser.html#bibtexparser-library-the-class-containing-the-parsed-library">Full API — BibtexParser latest documentation</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是最近写论文,引用参考文献时图方便直接用arxiv的citation了,但是貌似这样不太好,已经发表的论文依然显示publisher是arxiv,所以就想写个工具转换一下.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>利用CF或Vercel部署应用</title>
    <link href="https://www.sekyoro.top/2024/04/26/CF-workers%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2024/04/26/CF-workers%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</id>
    <published>2024-04-26T02:22:53.000Z</published>
    <updated>2024-04-26T10:22:16.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前用过CloudFlare(以下简称CF)的一些服务,但是对于它具体一些应用还不太清楚.简单来说,它是一些云巨头的强力竞争者.专注于云与边缘计算.</p><p>之前我想部署一些API服务时,要么用VPS、服务器,在服务器上部署应用.</p><p>要么使用Vercel,Vercel也提供一些应用的运行时,但是serverless,有一定限制.</p><p>还可以使用render,heroku(Heroku已停止免费提供服务)或者Netlify.此外也推荐<a href="https://fly.io/">Deploy app servers close to your users · Fly</a>,这些服务都类似,可以提供数据库等比较集成的功能,看你喜欢哪个.</p><p>CF的workers更类似Vercel的serverless函数但更强大也更快(理论上).这里我先使用Hono.js与其搭配更方便地部署一些简单的应用.<br><span id="more"></span></p><h2 id="Hono-js"><a href="#Hono-js" class="headerlink" title="Hono.js"></a>Hono.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hono &#125; <span class="keyword">from</span> <span class="string">&#x27;hono&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Hono()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.text(<span class="string">&#x27;Hono!&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app</span><br></pre></td></tr></table></figure><blockquote><p>Hono—是为了边缘计算的一个小巧、简单、超快的网络框架。它适用于任何 JavaScript 运行时：<strong>Cloudflare Workers</strong>、Fastly Compute、Deno、Bun、<strong>Vercel</strong>、<strong>AWS Lambda</strong>、Lambda@Edge 和 <strong>Node.js</strong>。</p></blockquote><p>可以看到它比较现代,还适合Deno和Bun.也能与Vercel与CF搭配。</p><p>本身语法跟express类似,没有太大的学习压力.</p><h2 id="Cloudflare-Workers"><a href="#Cloudflare-Workers" class="headerlink" title="Cloudflare Workers"></a>Cloudflare Workers</h2><blockquote><p>Cloudflare Workers 提供serverless开放式外部链接执行环境，使您能够创建新应用程序或增强现有应用程序，而无需配置或维护基础设施。</p></blockquote><p>使用Wrangler作为命令行创建部署项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wrangler --save-dev</span><br></pre></td></tr></table></figure><p>Cloudflare Workers 在 Cloudflare 的全球网络上运行，外部链接遍布全球数百个城市，提供免费和付费计划。</p><p>有一篇文章将CF workers与Vercel的serverless function做了比较<a href="https://moiva.io/blog/vercel-serverless-functions-vs-cloudflare-workers/">Vercel Serverless Functions vs Cloudflare Workers | Moiva.io Blog</a></p><blockquote><p>Vercel 本质上是一种将<strong>静态网站自动部署</strong>到全球数据中心网络的解决方案。Vercel 不仅如此，它还为<strong>Serverless Functions</strong>提供了一个解决方案，该解决方案运行得非常出色和流畅。</p><p>Cloudflare Workers 基本上是一个将无服务器功能部署到全球数据中心网络的平台。他们的文档说，Workers 也可用于部署静态应用程序，但我还没有研究或评估过。我知道 Cloudflare 还在开发另一种部署/托管静态应用程序的解决方案—Cloudflare Pages。</p></blockquote><p>作者认为CF workers在serverless功能上比Vercel更强大,并且也有CF pages作为部署静态网站的服务.</p><p>免费plan中允许每天100k请求,我测试了一下国内也能访问.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426171159806.png" alt="image-20240426171159806"></p><p>创建worker或者pages都可以,我拿例子创建了一个<a href="https://worker-ancient-voice-b446.13227671027806.workers.dev/">worker-ancient-voice-b446.13227671027806.workers.dev</a>,适合拿来写点简单API.数据库这种需要搭配一些第三方云服务比如supabase,目前还是Beta阶段,此外也可以使用KV存储.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426171829887.png" alt="image-20240426171829887"></p><p>相比来说Vercel有自带的Pgsql,另外还有一堆付费的AI功能,比如文生图等.</p><p>CloudFlare相比Vercel部署优点貌似就是边缘节点多,访问可能要好一点. 但在使用上其实生态两者差别不大,甚至Vercel要好一些.这种serverless的部署方式(因为部署时的文件路径有要求). 不过我看到</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240426173140993.png" alt="image-20240426173140993"></p><p>目前看我我最不爽的一点就是本地开发完之后又要改一些配置或者改一些数据库啥的然后上线继续测试.不过以后可以考虑使用CF而不是Vercel部署试试了.</p><h2 id="Vercel-Function"><a href="#Vercel-Function" class="headerlink" title="Vercel Function"></a>Vercel Function</h2><p>Vercel的文档看起来要舒服一些.支持serverless和Edge</p><blockquote><p>Vercel 功能的基础结构和能力由您选择的运行时决定：</p><p>Node.js 运行时（serverless）：让您可以访问所有 Node.js 应用程序接口，这是您在网络上编写程序所期望的，同时还能配置机器资源和依赖关系。<br>边缘运行时（Edge）：当您需要在用户附近执行轻量级 JavaScript 函数时，可选择这种经济高效的方法</p></blockquote><p>官网展示了使用Next的例子,运行时可以选择Edge或者Node.js.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dynamic = <span class="string">&quot;force-dynamic&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> runtime = <span class="string">&#x27;nodejs&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span>  <span class="function"><span class="keyword">function</span> <span class="title">GET</span>(<span class="params">request: Request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">`Hello from <span class="subst">$&#123;process.env.VERCEL_REGION&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还支持Go,Python,Ruby的运行时,不过都在Beta,</p><blockquote><p>Functions using the Edge Runtime, are ideal for a cost-effective option that use a limited set of Web Standard APIs that make sense on the server. The Edge runtime is built on top of the <a href="https://v8.dev/">V8 engine</a>, allowing it to run in isolated execution environments that don’t require a container or virtual machine.</p><p>Functions using the Edge runtime execute in the data center is closest to the user, <a href="https://vercel.com/docs/functions/concepts#functions-and-your-data-source">or in a region near your databases</a>. This can result in a much lower latency and allows you to provide personalization at speed.</p></blockquote><p>使用Hono如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hono &#125; <span class="keyword">from</span> <span class="string">&#x27;hono&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; handle &#125; <span class="keyword">from</span> <span class="string">&#x27;@hono/node-server/vercel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; PageConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config: PageConfig = &#123;</span><br><span class="line">  <span class="attr">api</span>: &#123;</span><br><span class="line">    <span class="attr">bodyParser</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Hono().basePath(<span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/hello&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.json(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello from Hono!&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handle(app)</span><br></pre></td></tr></table></figure><p>当然Hono也可以用于其他很多地方,这里只是列举其优点.</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li><a href="https://www.youtube.com/watch?v=H7Qe96fqg1M&amp;ab_channel=CloudflareWorkers">(4) Learn Cloudflare Workers - Full Course for Beginners - YouTube</a></li><li><a href="https://github.com/honojs/hono">honojs/hono: Web Framework built on Web Standards (github.com)</a></li><li><a href="https://workers.cloudflare.com/">Cloudflare Workers®</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前用过CloudFlare(以下简称CF)的一些服务,但是对于它具体一些应用还不太清楚.简单来说,它是一些云巨头的强力竞争者.专注于云与边缘计算.&lt;/p&gt;
&lt;p&gt;之前我想部署一些API服务时,要么用VPS、服务器,在服务器上部署应用.&lt;/p&gt;
&lt;p&gt;要么使用Vercel,Vercel也提供一些应用的运行时,但是serverless,有一定限制.&lt;/p&gt;
&lt;p&gt;还可以使用render,heroku(Heroku已停止免费提供服务)或者Netlify.此外也推荐&lt;a href=&quot;https://fly.io/&quot;&gt;Deploy app servers close to your users · Fly&lt;/a&gt;,这些服务都类似,可以提供数据库等比较集成的功能,看你喜欢哪个.&lt;/p&gt;
&lt;p&gt;CF的workers更类似Vercel的serverless函数但更强大也更快(理论上).这里我先使用Hono.js与其搭配更方便地部署一些简单的应用.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Web开发目前的统治者:SpringMVC</title>
    <link href="https://www.sekyoro.top/2024/04/09/Web%E5%BC%80%E5%8F%91%E7%9B%AE%E5%89%8D%E7%9A%84%E7%BB%9F%E6%B2%BB%E8%80%85-SpringMVC/"/>
    <id>https://www.sekyoro.top/2024/04/09/Web%E5%BC%80%E5%8F%91%E7%9B%AE%E5%89%8D%E7%9A%84%E7%BB%9F%E6%B2%BB%E8%80%85-SpringMVC/</id>
    <published>2024-04-09T13:43:30.000Z</published>
    <updated>2024-04-11T09:05:09.354Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前我写过某些语言的Web框架分析,得出的结论是如果你面向工作或者当前高效的框架学习,那就直接向Java看齐,其他的类似C#或者Go都还差点(Go的web生态并没有想的那么好,C#本身很不错,它的很多框架也很不错.但是微软的一些举动会造成人员流失<a href="https://www.zhihu.com/question/377803052">为什么叫.NET？它和C#是什么关系？ - 知乎 (zhihu.com)</a>,而这些人员多半是相对独立的开发者),复古派(我随便取得名字)PHP或者Ruby(主要是ROR)本身语言的学习精力以及与所谓主流可能不太相容(我知道有很多人会力争PHP或者Ruby在web上的依然流行).</p><p>综合考虑,Java的Spring依然是主流,这里会对SpringMVC,或者说是SpringBoot写几个小例子,来显示其与其他语言的Web开发有什么差异.</p><span id="more"></span><p>Spring的核心是依赖注入(核心是IoC)与AOP.不要过于纠结这些概念.这些东西可以是框架设计和使用时的思想.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/helloworld&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greet&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Greetings from Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ol><li><a href="https://spring.io/">Spring | Home</a></li><li>或者你厌倦了Java和它的生态<a href="https://dotnet.microsoft.com/zh-cn/">.NET | 构建。测试。部署。 (microsoft.com)</a></li></ol><p><img data-src="https://dotnet.microsoft.com/static/images/redesign/shared/tech-empower-results.svg" alt="在 TechEmpower 基准检验中，.NET 每秒处理了 702 万个请求，Node.js 处理了 66 万个请求，Java Servlet 处理了 220 万个请求。" style="zoom: 33%;" /></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我写过某些语言的Web框架分析,得出的结论是如果你面向工作或者当前高效的框架学习,那就直接向Java看齐,其他的类似C#或者Go都还差点(Go的web生态并没有想的那么好,C#本身很不错,它的很多框架也很不错.但是微软的一些举动会造成人员流失&lt;a href=&quot;https://www.zhihu.com/question/377803052&quot;&gt;为什么叫.NET？它和C#是什么关系？ - 知乎 (zhihu.com)&lt;/a&gt;,而这些人员多半是相对独立的开发者),复古派(我随便取得名字)PHP或者Ruby(主要是ROR)本身语言的学习精力以及与所谓主流可能不太相容(我知道有很多人会力争PHP或者Ruby在web上的依然流行).&lt;/p&gt;
&lt;p&gt;综合考虑,Java的Spring依然是主流,这里会对SpringMVC,或者说是SpringBoot写几个小例子,来显示其与其他语言的Web开发有什么差异.&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://www.sekyoro.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>DiveintoCpp:from OpenGL</title>
    <link href="https://www.sekyoro.top/2024/04/03/DiveintoCpp-from-OpenGL/"/>
    <id>https://www.sekyoro.top/2024/04/03/DiveintoCpp-from-OpenGL/</id>
    <published>2024-04-03T12:12:23.000Z</published>
    <updated>2024-04-03T15:06:01.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>起因是看到有人在Reddit上推荐通过SDL这种库上手学习C/Cpp,我看了一下发现很不错,于是进一步看了看了解了SFML.最后决定通过写写openGL学习一下c/c++.<br><span id="more"></span></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>绘图API包括OpenGL,Vulkan,DirectX,Metal等等,其中</p><ul><li>DX11、<a href="https://www.nvidia.com/en-sg/geforce/technologies/dx12/">DX12</a>：<a href="https://zh.wikipedia.org/wiki/微軟">微软</a>公司在<a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Windows</a>系统上所开发的3D图形编程接口</li><li><a href="https://www.opengl.org/">OpenGL</a>：OpenGL是一套跨语言、跨平台的API，它的实现存在于Windows、部分UNIX和Mac OS，这些实现一般由显卡厂商提供，而且非常依赖于该厂商提供的硬件。</li><li><a href="https://www.vulkan.org/">Vulkan</a>：下一代的OpenGL，相比之下，Vulkan更接近底层，并且能很好地分配CPU核心来执行并行任务</li><li><a href="https://developer.apple.com/metal/">Metal</a>：Metal API 由苹果公司提供，它旨在为<a href="https://en.wikipedia.org/wiki/IOS">iOS</a>、<a href="https://en.wikipedia.org/wiki/IPadOS">iPadOS</a>、<a href="https://en.wikipedia.org/wiki/MacOS">macOS</a>和<a href="https://en.wikipedia.org/wiki/TvOS">tvOS</a>上的应用程序提供对GPU硬件的低级访问来提高性能，它与Vulkan、DX12都属于低级别的API</li></ul><p>此外的SDL与SFML是多媒体开发库,包含了绘图和网络,音频等功能,比较全面.</p><h3 id="SDL"><a href="#SDL" class="headerlink" title="SDL"></a>SDL</h3><p>SDL是一个跨平台的多媒体开发库，用于游戏开发和其他多媒体应用。以下是SDL的特点：</p><p>2D图形渲染： SDL提供了2D图形渲染的功能，虽然不如SFML那样高级，但仍然足够满足一般的2D游戏需求。<br>音频： SDL支持音频播放，但相较于SFML而言，其音频功能较为基础。<br>窗口和事件处理： 提供了创建窗口、处理鼠标、键盘事件的功能。<br>低级硬件访问： SDL也提供了对硬件的低级访问，使得开发者可以更灵活地操作硬件。</p><h3 id="SFML"><a href="#SFML" class="headerlink" title="SFML"></a>SFML</h3><p>SFML是一个现代、面向对象的多媒体库，专注于2D游戏开发和多媒体应用程序。以下是SFML的特点：</p><p>2D图形渲染： SFML提供了简单易用的2D图形渲染接口，使得创建2D游戏非常容易。<br>音频： SFML支持音频播放和音频捕获功能，可以用来添加音乐、音效等。<br>窗口和事件处理： 提供了创建窗口、处理鼠标、键盘事件的功能。<br>网络： SFML包含网络模块，允许游戏之间进行网络通信。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用C++开发,环境搭建不是小问题.Linux上配置makefile或者CMake添加lib和dll库,而windows还是使用vs添加lib和头文件即可.下面使用Windows搭建环境.</p><p>首先安装GLFW,它之前是freeglut和glut</p><blockquote><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它<strong>允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入</strong></p></blockquote><p>从官网下载<a href="https://www.glfw.org/download.html">Download | GLFW</a>,然后将头文件目录和lib库目录配置到vs的C++配置中,再将dll放到执行程序所在目录.</p><blockquote><p>如果你是Windows平台，<strong>opengl32.lib</strong>已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将<strong>opengl32.lib</strong>添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是<strong>opengl32.lib</strong>（和32位版本一样），虽然很奇怪但确实如此。</p></blockquote><p>事实上这样就能执行一些程序了.</p><blockquote><p>因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用</p></blockquote><p>静态链接和动态链接的相关介绍<a href="https://www.runoob.com/w3cnote/cpp-static-library-and-dynamic-library.html">C++静态库与动态库 | 菜鸟教程 (runoob.com)</a>,c++引入第三方库就是使用这些库.如果你想的是使用C++开发成熟的应用,那还是推荐使用Qt.这里的库更多的还是去造轮子或者是学习的,<del>毕竟c++就是干这个的</del></p><p>此外还需要其他工具,因为OpenGL只是一个标准/规范，<strong>具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询</strong>。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法<a href="https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions">因平台而异</a>，</p><p>OpenGL被认为是一个API(Application Programming Interface, 应用程序编程接口)，包含了一系列可以操作图形、图像的函数。然而，OpenGL本身并不是一个API，它仅仅是一个由<a href="http://www.khronos.org/">Khronos组织</a>制定并维护的规范(Specification)。</p><p>OpenGL规范严格规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现(Implement)的，将由OpenGL库的开发者自行决定（译注：这里开发者是指编写OpenGL库的人）。因为OpenGL规范并没有规定实现的细节，具体的OpenGL库允许使用不同的实现，只要其功能和结果与规范相匹配（亦即，作为用户不会感受到功能上的差异）。</p><p>早期的OpenGL使用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少有控制OpenGL如何进行计算的自由。而开发者迫切希望能有更多的灵活性。随着时间推移，规范越来越灵活，开发者对绘图细节有了更多的掌控。立即渲染模式确实容易使用和理解，但是效率太低。因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式(Core-profile)下进行开发，这个分支的规范完全移除了旧的特性</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是看到有人在Reddit上推荐通过SDL这种库上手学习C/Cpp,我看了一下发现很不错,于是进一步看了看了解了SFML.最后决定通过写写openGL学习一下c/c++.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Go Web框架小赏</title>
    <link href="https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/04/02/Go-Web%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-04-02T03:23:04.000Z</published>
    <updated>2024-04-02T04:31:41.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.</p><p><img data-src="https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png" alt="img" style="zoom: 33%;" /></p><span id="more"></span><p>Go的web框架生态依旧零零碎碎,没有一个大的统一框架,不过这也正常,目前除了Java,其他都难说.</p><p>目前Go管理包都使用mod了,不用去看网上老教程的什么GO PATH配一堆.</p><h2 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := gin.Default()</span><br><span class="line">  r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin应该是最常使用的了,star数目前75.1k,官方例子也比较多<a href="https://gin-gonic.com/zh-cn/docs/">文档 | Gin Web Framework (gin-gonic.com)</a></p><h2 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/labstack/echo/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">&quot;:1323&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁高性能扩展性强的web框架,看起来跟gin没有什么太大的差别.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.HTML(http.StatusOK, <span class="string">&quot;&lt;strong&gt;Hello, World!&lt;/strong&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iris"><a href="#Iris" class="headerlink" title="Iris"></a>Iris</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/kataras/iris/v12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  app := iris.New()</span><br><span class="line">  app.Use(iris.Compression)</span><br><span class="line">  app.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="string">&quot;Hello &lt;strong&gt;%s&lt;/strong&gt;!&quot;</span>, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := iris.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v1</span></span><br><span class="line">    v1 := app.Party(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v1.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple group: v2</span></span><br><span class="line">    v2 := app.Party(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.Post(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">        v2.Post(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.Listen(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><p>号称是受express影响的框架,看代码还是不错的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := fiber.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /api/register</span></span><br><span class="line">    app.Get(<span class="string">&quot;/api/*&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;✋ %s&quot;</span>, c.Params(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; ✋ register</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /flights/LAX-SFO</span></span><br><span class="line">    app.Get(<span class="string">&quot;/flights/:from-:to&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;💸 From: %s, To: %s&quot;</span>, c.Params(<span class="string">&quot;from&quot;</span>), c.Params(<span class="string">&quot;to&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 💸 From: LAX, To: SFO</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /dictionary.txt</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:file.:ext&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;📃 %s.%s&quot;</span>, c.Params(<span class="string">&quot;file&quot;</span>), c.Params(<span class="string">&quot;ext&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 📃 dictionary.txt</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john/75</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name/:age/:gender?&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;👴 %s is %s years old&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>), c.Params(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; 👴 john is 75 years old</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /john</span></span><br><span class="line">    app.Get(<span class="string">&quot;/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c fiber.Ctx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;Hello, %s 👋!&quot;</span>, c.Params(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> c.SendString(msg) <span class="comment">// =&gt; Hello john 👋!</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    log.Fatal(app.Listen(<span class="string">&quot;:3000&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后部署可以使用Render<a href="https://docs.render.com/">Docs + Quickstarts | Render Docs</a>,还有一些go的web框架,但感觉文档不是很好或者目前用的人还不多,所以就先不说了.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;说实话,Go这边热度下降了不少,主要市场还是在云原生以及少许微服务.它本身的标准库已经非常够用了搭配健全的官方package仓库,用起来很顺畅.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.jetbrains.com/wp-content/uploads/2021/02/11-2x-2.png&quot; alt=&quot;img&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vitepress:SSG框架使用</title>
    <link href="https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sekyoro.top/2024/04/01/Vitepress-SSG%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-01T12:34:30.000Z</published>
    <updated>2024-04-26T11:53:27.165Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro<a href="https://docs.astro.build/zh-cn/getting-started/">入门指南 | Docs (astro.build)</a>,这个框架默认服务端渲染.<br><span id="more"></span></p><p>对于前端,可选的文档框架还是很多的,我最推荐vitepress(这也是本篇文章主要讲的),或者你也可以使用vuepress.</p><h3 id="Vitepress"><a href="#Vitepress" class="headerlink" title="Vitepress"></a>Vitepress</h3><p>vue的团队打造,很好用.自带的样式不错,自定义性强.</p><p>配置文件配置主题的标题,描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vitepress/config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// site-level options</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;VitePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Just playing around.&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// theme-level options</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主题配置包括logo,nav,siderbar,footer等.我试用了一下,适合写<strong>产品文档</strong>,它本身的官网<a href="https://vitepress.dev/">VitePress | Vite &amp; Vue Powered Static Site Generator</a>就是vitepress写的.</p><p>可以在这个配置里写nav和sidebar的信息.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vitepress&quot;</span>;</span><br><span class="line"><span class="comment">// https://vitepress.dev/reference/site-config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;protools&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;tools which I learn and use&quot;</span>,</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="comment">// https://vitepress.dev/reference/default-theme-config</span></span><br><span class="line">    <span class="attr">search</span>: &#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Web框架&quot;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Node&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/node_web&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">text</span>: <span class="string">&quot;Python&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;/python_web&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">footer</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Released under the MIT License.&quot;</span>,</span><br><span class="line">      <span class="attr">copyright</span>: <span class="string">`Copyright ©<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()&#125;</span>.Made with ❤ &lt;a href=&quot;https://sekyoro.top&quot;&gt;Sekyoro&lt;/a&gt;`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">socialLinks</span>: [</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">&quot;github&quot;</span>, <span class="attr">link</span>: <span class="string">&quot;https://github.com/drowning-in-codes&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Home page作为主页,layout设置为<code>home</code>,其他的可以设置为<code>doc</code></p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240401233049341.png" alt="image-20240401233049341"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section"># https://vitepress.dev/reference/default-theme-home-page</span></span><br><span class="line">layout: home</span><br><span class="line"></span><br><span class="line">hero:</span><br><span class="line">  name: &quot;protools&quot;</span><br><span class="line">  text: &quot;tools which I learn and use&quot;</span><br><span class="line">  tagline: Help me and others to learn and use.</span><br><span class="line">  image:</span><br><span class="line"><span class="code">    src: /logo.png</span></span><br><span class="line"><span class="code">    alt: protools</span></span><br><span class="line"><span class="code">  actions:</span></span><br><span class="line"><span class="code">    - theme: brand</span></span><br><span class="line"><span class="code">      text: &#x27;Web框架&#x27;</span></span><br><span class="line"><span class="code">      link: &#x27;/node_web&#x27; </span></span><br><span class="line"><span class="code">features:</span></span><br><span class="line"><span class="code">  - title: Learn </span></span><br><span class="line"><span class="code">    details: No features</span></span><br><span class="line"><span class="code">---</span></span><br></pre></td></tr></table></figure><p>在写markdown时可以多利用vitepress自带的一些特性,</p><p>写完之后build一下把.vitepress目录下的dist拿来部署就行.我就部署在了vercel上,整个过程很顺畅<a href="https://protool-ten.vercel.app/">protools (protool-ten.vercel.app)</a></p><p>但是也有缺点,比如markdown增加了一些东西增加学习成本.不过官方文档还是写得很清楚的.</p><h3 id="Docusaurus"><a href="#Docusaurus" class="headerlink" title="Docusaurus"></a>Docusaurus</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-docusaurus@latest my-website classic</span><br></pre></td></tr></table></figure><p>比较新的东西,使用react写界面</p><h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h3><p>也是js的静态网站生成器<a href="https://docsify.js.org/#/?id=docsify">docsify</a>.不过都有vitepress了,感觉必要性不是很大,这种东西没必要搞几个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p>启动完成后，你可以在 ./docs 子目录下看到文件列表。</p><ul><li>作为入口文件的 index.html</li><li>作为主页的 README.md</li><li>.nojekyll 阻止 GitHub 页面忽略以下划线开头的文件</li></ul><p>下面是Python的文档生成器.适合Python写的库</p><h3 id="Mkdocs"><a href="#Mkdocs" class="headerlink" title="Mkdocs"></a>Mkdocs</h3><p><a href="https://www.mkdocs.org/">mkdocs.org</a>看界面就有Python那种感觉了,毕竟Python的文档经常长这种样子.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install mkdocs</span><br><span class="line">mkdocs new my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p><img data-src="https://www.mkdocs.org/img/initial-layout.png" alt="The initial MkDocs layout"></p><p>在<code>mkdocs.yml</code>配置中加上网站信息和nav等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site_url:</span> <span class="string">https://example.com/</span></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">readthedocs</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdocs build</span><br></pre></td></tr></table></figure><p>这种网站可以部署在<a href="https://www.pythonanywhere.com/">Host, run, and code Python in the cloud: PythonAnywhere (www.pythonanywhere.com)</a>和github pages上,vercel上目前不太行.</p><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p><a href="https://zh-sphinx-doc.readthedocs.io/en/latest/tutorial.html">Sphinx初尝 — Sphinx 使用手册 (zh-sphinx-doc.readthedocs.io)</a></p><p>不推荐,本身不支持markdown,使用的是<code>reStructuredText</code>编写,界面也一般.</p><h3 id="Read-the-Docs"><a href="#Read-the-Docs" class="headerlink" title="Read the Docs"></a>Read the Docs</h3><p>免费托管项目,可以使用Sphinx或者Mkdocs.通过<a href="https://link.zhihu.com/?target=https%3A//recommonmark.readthedocs.io/en/latest/">recommonmark</a> 来支持markdown.</p><p>其他的相当于类似在线服务了,基本上不需要配置直接粘贴内容就行</p><h3 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h3><p>本身还是很不错的服务<a href="https://www.gitbook.com/">GitBook – Knowledge management for technical teams</a></p><p>很多人拿来制作电子书</p><h3 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h3><p><a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具 (yuque.com)</a>国内的平台,正如介绍一样,可以拿来写文档和提供知识</p><p>最后总结一下,如果写偏技术性文档,偏前端的技术或者产品使用vitepress,其他用read the docs或者mkdocs(也可以都是用vitepress,主要是前端的风格跟vitepress很搭)</p><p>如果面向大众的那种知识文档,用gitbook就行.</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ol><li><a href="https://blog.csdn.net/m0_46521785/article/details/119812280">几款文档框架：Mkdocs、Sphinx、Teadocs、docsify-CSDN博客</a></li><li><a href="https://vitepress.dev/guide/getting-started">Getting Started | VitePress</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近想着把一些框架总结的东西放到一个在线文档而不是博客里,于是又在网上搜寻了一些静态网站生成器(事实上现在我用的hexo也算是),这类框架把类似markdown这种build成html,适合文档、博客这种没有后台服务的. 如果你想要复杂的,可以试试Astro&lt;a href=&quot;https://docs.astro.build/zh-cn/getting-started/&quot;&gt;入门指南 | Docs (astro.build)&lt;/a&gt;,这个框架默认服务端渲染.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node后端框架小赏</title>
    <link href="https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/"/>
    <id>https://www.sekyoro.top/2024/03/30/Node%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%B5%8F/</id>
    <published>2024-03-30T12:49:50.000Z</published>
    <updated>2024-04-01T15:12:51.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.<br><span id="more"></span><br>这里就写写Express,Koa,Fastify以及Nest这几个框架的介绍以及示例代码,以供后续技术选型使用.</p><p>首先完全可以不使用框架写一些api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> parsedURL = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">   <span class="keyword">if</span> (parsedURL.pathname === <span class="string">&#x27;/api&#x27;</span>) &#123;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class="line">      res.end(<span class="string">`Hey <span class="subst">$&#123;parsedURL.query.name&#125;</span> <span class="subst">$&#123;parsedURL.query.lastname&#125;</span>`</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>久经考验的node后端小框架,本身功能挺少的,感觉还不如Flask.没有特重载,需要使用nodemon.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.get(<span class="string">&#x27;/api/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params)</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: req.params.name,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>重要概念是Middleware,通过使用这个中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET method route</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;sddsaf&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/api/:name/:age&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params);</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    <span class="attr">name</span>: req.params.name,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST method route</span></span><br><span class="line">app.post(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;POST request to the homepage&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> myLogger = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;LOGGED&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line">app.use(myLogger);</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&quot;/secret&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Accessing the secret section ...&quot;</span>);</span><br><span class="line">  next(); <span class="comment">// pass control to the next handler</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>express的可魔改性挺高的,可以使用多种中间件以及重载express的API</p><p>中间件分为应用级,路由级以及一些自带的和第三方的.</p><h3 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h3><p>应用级直接使用app.use()也可以使用app.get等.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 使用use可以连续定义多个中间件</span><br><span class="line">app.use(<span class="string">&#x27;/user/:id&#x27;</span>, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"># 使用app.<span class="built_in">get</span>可以连续定义多个中间件</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOriginalUrl</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const logStuff = [logOriginalUrl, logMethod]</span><br><span class="line">app.<span class="built_in">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, logStuff, (req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">res</span>.send(<span class="string">&#x27;User Info&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要跳过一个路由的中间件中的其他中间件函数，可调用 next(‘route’) 将控制权传递给下一个路由。注意：next(‘route’) 只适用于通过 app.METHOD() 或 router.METHOD() 函数加载的中间件函数。</p><blockquote><p>注意区分对应路由的handler和middleware.(感觉差别其实不是很大)前者一般负责主要事务逻辑比较多,后者负责一些logging啥的.</p></blockquote><h3 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time:&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span></span><br><span class="line">router.use(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request URL:&#x27;</span>, req.originalUrl)</span><br><span class="line">  next()</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Request Type:&#x27;</span>, req.method)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// handler for the /user/:id path, which renders a special page</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params.id)</span><br><span class="line">  res.render(<span class="string">&#x27;special&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mount the router on the app</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><p>使用 router.use() 和 router.METHOD() 函数加载路由器级中间件。相当于细分颗粒度了,使用一个router的中间件作为app级别的中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// predicate the router with a check and bail out when needed</span></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.headers[<span class="string">&#x27;x-auth&#x27;</span>]) <span class="keyword">return</span> next(<span class="string">&#x27;router&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello, user!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the router and 401 anything falling through</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, router, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendStatus(<span class="number">401</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码使用路由中间件,如果访问没有x-auth头,就跳过其他中间件直到handlers</p><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自带中间件</p><ul><li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static</a> serves static assets such as HTML files, images, and so on.</li><li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li><li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li></ul><p>第三方中间件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// load the cookie-parsing middleware</span></span><br><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure><h3 id="重写express-API"><a href="#重写express-API" class="headerlink" title="重写express API"></a>重写express API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.response.sendStatus = <span class="function"><span class="keyword">function</span> (<span class="params">statusCode, type, message</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code is intentionally kept simple for demonstration purpose</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.contentType(type)</span><br><span class="line">    .status(statusCode)</span><br><span class="line">    .send(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(app.request, <span class="string">&#x27;ip&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&#x27;Client-IP&#x27;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>express的模板引擎可以使用Pug,Mustache,Ejs等</p><p>错误处理函数,包括一个默认的,这个默认的错误处理中间件函数被添加到中间件函数栈的末尾,也可添加自定义的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa的中间件想法跟express不太一样,而且本身没有route.比如下面的输出依次是logger,res,start,1,Hello,GET / - 1ms</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;logger&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.get(<span class="string">&#x27;X-Response-Time&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;res&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  <span class="built_in">console</span>.log(ms)</span><br><span class="line">  ctx.set(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="comment">// html</span></span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">    <span class="comment">// json</span></span><br><span class="line">   <span class="comment">// ctx.body = &#123; foo: &#x27;bar&#x27; &#125;;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>koa中有个context,可以给它增加属性.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.context.db = db();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.db);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ctx里面包含了基本所有需要的东西,包括request和response.</p><ul><li><code>ctx.header</code></li><li><code>ctx.headers</code></li><li><code>ctx.method</code></li><li><code>ctx.method=</code></li><li><code>ctx.url</code></li><li><code>ctx.url=</code></li><li><code>ctx.originalUrl</code></li><li><code>ctx.origin</code></li><li><code>ctx.href</code></li><li><code>ctx.path</code></li><li><code>ctx.path=</code></li><li><code>ctx.query</code></li><li><code>ctx.query=</code></li><li><code>ctx.querystring</code></li><li><p><code>ctx.querystring=</code>等</p></li><li><p><code>ctx.body</code></p></li><li><code>ctx.body=</code></li><li><code>ctx.status</code></li><li><code>ctx.status=</code></li><li><code>ctx.message</code></li><li><code>ctx.message=</code></li><li><code>ctx.length=</code></li><li><code>ctx.length</code></li><li><code>ctx.type=</code></li><li><code>ctx.type</code></li><li><code>ctx.headerSent</code></li><li><code>ctx.redirect()</code></li><li><code>ctx.attachment()</code></li><li><code>ctx.set()</code></li><li><code>ctx.append()</code></li><li><code>ctx.remove()</code></li><li><code>ctx.lastModified=</code></li><li><code>ctx.etag=</code></li></ul><p>路由还需要下载<code>koa-router</code>,koa本身不包含中间件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Home Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;About Page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server started on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  log.error(<span class="string">&#x27;server error&#x27;</span>, err, ctx)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>总价一下,koa本身比较简洁,使用中间件的逻辑有点怪,使用await会调用下一个中间件,如果没有其他中间件了再调用handler,然后再回去.没有自带路由,而且对模板引擎支持力度也不够,适合写API.</p><h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><p>特点就是快,而且github上star挺多的,一般表明生态不会太差.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p>fastify也有中间件这种叫做插件plugin的东西.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&quot;fastify&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = fastify(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">logger</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">app, options</span>) </span>&#123;</span><br><span class="line">    app.get(<span class="string">&#x27;/hi&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;hi&#x27;</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.register(routes)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`Hey <span class="subst">$&#123;req.query.name&#125;</span> <span class="subst">$&#123;req.query.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> app.listen(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        app.log.error(err)</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  start()</span><br></pre></td></tr></table></figure><p>此外还有数据验证和序列化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">someKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">someOtherKey</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.post(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">schema</span>: &#123;</span><br><span class="line">    <span class="attr">response</span>: &#123;</span><br><span class="line">      <span class="number">200</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: &#123;</span><br><span class="line">          <span class="attr">hello</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.get(<span class="string">&#x27;/&#x27;</span>, opts, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于数据验证,该路由接受一个schema键，该schema键包含body、querystring、params和标头。</p><p>对于序列化,可以将序列化速度提高 2-3 倍。这还有助于防止潜在敏感数据的泄漏，因为 Fastify 将只序列化响应模式中的数据。</p><p>感觉它的文档写的不是很好啊,不过如果有其他框架基础倒还是好写.</p><p>对这种精小的框架,有对比<a href="https://plainenglish.io/blog/fastify-express-benchmark-4c4aebb726d6">I Built the Same API With Fastify, Express &amp; Bare Node.js. Here Are the Differences (plainenglish.io)</a>表明express还是占大头,即使fastify性能好一些,毕竟现在性能并不是一个应用的全部.</p><h2 id="Nest-js"><a href="#Nest-js" class="headerlink" title="Nest.js"></a>Nest.js</h2><p>Nest是针对项目的,简单的几个api的话还是用express这种吧.Nest有controller,provider,interceptor这种东西了,还全面支持ts,相当于向spring MVC迈进.</p><blockquote><p>app.controller.ts 带有单一路由的基本控制器。<br>app.controller.spec.ts 控制器的单元测试。<br>app.module.ts 应用程序的根模块。<br>app.service.ts 带有单一方法的基本服务。<br>main.ts 应用程序的入口文件，使用核心函数 NestFactory 创建 Nest 应用程序实例。</p></blockquote><p>要创建 Nest 应用程序实例需要使用核心 NestFactory 类。NestFactory 提供了几个静态方法，用于创建应用程序实例。create() 方法会返回一个应用程序对象，该对象符合 INestApplication 接口。该对象提供了一系列方法.</p><h3 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h3><p>控制器负责处理接收到的请求，并将响应返回给客户端。</p><p><img data-src="https://docs.nestjs.com/assets/Controllers_1.png" alt="img"></p><p>控制器的作用是接收应用程序的特定请求。<strong>路由机制控制哪个控制器接收哪些请求</strong>。通常情况下，每个控制器都有不止一个路由，不同的路由可以执行不同的操作。</p><p><strong>为了创建基本控制器，我们使用类和装饰器。装饰器将类与所需的元数据关联起来，使 Nest 能够创建路由图</strong>（将请求绑定到相应的控制器）。</p><p>一个module下包括controller和provider(service).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Controller,</span><br><span class="line">  Get,</span><br><span class="line">  Req,</span><br><span class="line">  Post,</span><br><span class="line">  Res,</span><br><span class="line">  Param,</span><br><span class="line">  HttpCode,</span><br><span class="line">  Body,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  findAll(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action returns all cats&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  find(<span class="meta">@Req</span>() request: Request, <span class="meta">@Param</span>() param): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> param.id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action adds a new cat&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以看到在modules.ts中写controller和provider,相当于把handler和route都写了.有很多修饰器可以使用</p><div class="table-container"><table><thead><tr><th>装饰器</th><th>方法</th></tr></thead><tbody><tr><td><code>@Request(), @Req()</code></td><td><code>req</code></td></tr><tr><td><code>@Response(), @Res()</code><strong>*</strong></td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(key?: string)</code></td><td><code>req.params</code> / <code>req.params[key]</code></td></tr><tr><td><code>@Body(key?: string)</code></td><td><code>req.body</code> / <code>req.body[key]</code></td></tr><tr><td><code>@Query(key?: string)</code></td><td><code>req.query</code> / <code>req.query[key]</code></td></tr><tr><td><code>@Headers(name?: string)</code></td><td><code>req.headers</code> / <code>req.headers[name]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table></div><h3 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h3><p>Nest 中的许多基本类都可以被视为提供者，如服services, repositories, factories, helpers等。提供者的主要理念是它可以作为依赖注入；这意味着对象之间可以创建各种关系，而 “连接 “这些对象的功能在很大程度上可以委托给 Nest 运行时系统。</p><p><img data-src="https://docs.nestjs.com/assets/Components_1.png" alt="img"></p><p>可以创建一个service作为provider,@Injectable() 装饰器附加了元数据，声明 CatsService 是一个可由 Nest IoC 容器管理的类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> cats: Cat[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params">cat: Cat</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cats.push(cat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findAll(): Cat[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cats;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Cat &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Post, Body &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-cat.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">&#x27;./interfaces/cat.interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;Cat[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CatsService 是通过类构造函数注入的。请注意 private 语法的使用。这种速记方法允许我们在同一位置立即声明和初始化 catsService 成员。</p><p>现在已经定义了一个提供者（CatsService），并且有了该服务的消费者（CatsController），我们需要向 Nest 注册该服务，以便它能执行注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>controller中访问provider利用<strong>依赖注入</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>模块是一个用 @Module() 装饰器注解的类。@Module() 装饰器提供了 Nest 用来组织应用程序结构的元数据</p><p><img data-src="https://docs.nestjs.com/assets/Modules_1.png" alt="img"></p><p>每个应用程序至少有一个模块，即根模块。根模块是 Nest 用来构建应用程序图的起点—Nest 用来解决模块和提供程序之间的关系和依赖关系的内部数据结构。</p><p>建议将模块作为组织组件的有效方式。因此，对于大多数应用程序而言，最终架构将采用多个模块，每个模块封装一组密切相关的功能。</p><div class="table-container"><table><thead><tr><th>模块中内容</th><th>作用</th></tr></thead><tbody><tr><td><code>providers</code></td><td>the providers that will be instantiated by the Nest injector and that may be shared at least across this module</td></tr><tr><td><code>controllers</code></td><td>the set of controllers defined in this module which have to be instantiated</td></tr><tr><td><code>imports</code></td><td>the list of imported modules that export the providers which are required in this module</td></tr><tr><td><code>exports</code></td><td>the subset of <code>providers</code> that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (<code>provide</code> value)</td></tr></tbody></table></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同一个modules中的不同controller可以共享provider,此外不同modules可以import还可以导出provider</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogController &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./dog.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController, DogController],</span><br><span class="line">  <span class="attr">providers</span>: [AppService, DogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>每个模块都自动成为共享模块。一<strong>旦创建，任何模块都可以重复使用</strong>。假设我们想在其他几个模块之间共享一个 CatsService 实例。为此，我们首先需要导出 CatsService 提供者，将其添加到模块的导出数组中</p><p><img data-src="https://docs.nestjs.com/assets/Shared_Module_1.png" alt="img"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>现在，任何导入 CatsModule 的模块都可以访问 CatsService，并与所有导入该模块的其他模块共享同一个实例。此外还有全局modules和动态modules,</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, Global &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [CatsController],</span><br><span class="line">  <span class="attr">providers</span>: [CatsService],</span><br><span class="line">  <span class="attr">exports</span>: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>中间件是在路由处理程序之前调用的函数。中间件函数可以访问请求和响应对象，以及应用程序请求-响应循环中的 next() 中间件函数。下一个中间件函数通常用名为 next 的变量来表示。</p><p>中间件功能可执行以下任务：</p><ul><li>执行任何代码。</li><li>更改请求和响应对象。</li><li>结束请求-响应循环。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前中间件函数没有结束请求-响应循环，则必须调用 next() 将控制权传递给下一个中间件函数。否则，请求将被挂起。</li></ul><p><img data-src="https://docs.nestjs.com/assets/Middlewares_1.png" alt="img"></p><p>创建中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerMiddleware</span> <span class="title">implements</span> <span class="title">NestMiddleware</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request...&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承<code>use</code>方法,使用req,res以及next方法.</p><p>使用中间件,使用模块类的 configure() 方法来设置它们。包含中间件的模块必须实现 NestModule 接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoggerMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/middleware/logger.middleware&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./cats/cats.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> <span class="title">implements</span> <span class="title">NestModule</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>)</span> &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(LoggerMiddleware)</span><br><span class="line">      .forRoutes(<span class="string">&#x27;cats&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现NestModule接口并继承configure方法,使用consumer类</p><p>它提供了多种内置方法来管理中间件。所有这些方法都能以流畅的方式简单地串联起来。forRoutes() 方法可以接受一个字符串、多个字符串、一个 RouteInfo 对象以及controller类.使用consumer应用中间件在路由和controller类上.</p><p>此外也有全局中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.use(logger);</span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="Exception-filtes"><a href="#Exception-filtes" class="headerlink" title="Exception filtes"></a>Exception filtes</h3><p>自带了一堆异常</p><ul><li><code>BadRequestException</code></li><li><code>UnauthorizedException</code></li><li><code>NotFoundException</code></li><li><code>ForbiddenException</code></li><li><code>NotAcceptableException</code></li><li><code>RequestTimeoutException</code></li><li><code>ConflictException</code></li><li><code>GoneException</code></li><li><code>HttpVersionNotSupportedException</code></li><li><code>PayloadTooLargeException</code></li><li><code>UnsupportedMediaTypeException</code></li><li><code>UnprocessableEntityException</code></li><li><code>InternalServerErrorException</code></li><li><code>NotImplementedException</code></li><li><code>ImATeapotException</code></li><li><code>MethodNotAllowedException</code></li><li><code>BadGatewayException</code></li><li><code>ServiceUnavailableException</code></li><li><code>GatewayTimeoutException</code></li><li><code>PreconditionFailedException</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.service.findAll()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(&#123;</span><br><span class="line">      <span class="attr">status</span>: HttpStatus.FORBIDDEN,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&#x27;This is a custom message&#x27;</span>,</span><br><span class="line">    &#125;, HttpStatus.FORBIDDEN, &#123;</span><br><span class="line">      <span class="attr">cause</span>: error</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自己继承HttpException.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ForbiddenException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&#x27;Forbidden&#x27;</span>, HttpStatus.FORBIDDEN);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要更好的控制,可以继承<code>ExceptionFilter</code>使用catch专门处理某些异常.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>(HttpException)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpExceptionFilter</span> <span class="title">implements</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">catch</span>(exception: HttpException, <span class="attr">host</span>: ArgumentsHost) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</span><br><span class="line">    <span class="keyword">const</span> status = exception.getStatus();</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">      .status(status)</span><br><span class="line">      .json(&#123;</span><br><span class="line">        <span class="attr">statusCode</span>: status,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">        <span class="attr">path</span>: request.url,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好filter后进行绑定到某个路由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UseFilters</span>(HttpExceptionFilter)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pipes-and-guards"><a href="#pipes-and-guards" class="headerlink" title="pipes and guards"></a>pipes and guards</h3><p>pipes 是一个使用 @Injectable() 装饰器注解的类，它实现了 PipeTransform 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Pipe_1.png" alt="img"></p><p>管道用于转换和校验数据.</p><ul><li><code>ValidationPipe</code></li><li><code>ParseIntPipe</code></li><li><code>ParseFloatPipe</code></li><li><code>ParseBoolPipe</code></li><li><code>ParseArrayPipe</code></li><li><code>ParseUUIDPipe</code></li><li><code>ParseEnumPipe</code></li><li><code>DefaultValuePipe</code></li><li><code>ParseFilePipe</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, ParseIntPipe) id: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.catsService.findOne(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括做数据类型转换的默认值等的pipe,还可以自定义pipe</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个pipe管道都必须实现 transform() 方法以实现 PipeTransform 接口。该方法有两个参数：</p><ul><li>值</li><li>元数据</li></ul><p>数据校验也有很多种方法,下面是最简单的.创建数据类型.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCatDto</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还可以使用<code>zod</code>第三方库.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save zod</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; PipeTransform, ArgumentMetadata, BadRequestException &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ZodSchema  &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ZodValidationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> schema: ZodSchema</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">transform</span>(<span class="params">value: unknown, metadata: ArgumentMetadata</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parsedValue = <span class="built_in">this</span>.schema.parse(value);</span><br><span class="line">      <span class="keyword">return</span> parsedValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&#x27;Validation failed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用 schema.parse() 方法，根据提供的模式验证输入的参数。</p><p>需要执行以下操作才能使用 ZodValidationPipe：</p><ul><li>创建一个 ZodValidationPipe 实例</li><li>在pipe的类构造函数中传递特定于上下文的 Zod 模式</li><li>将pipe绑定到方法</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCatSchema = z</span><br><span class="line">  .object(&#123;</span><br><span class="line">    <span class="attr">name</span>: z.string(),</span><br><span class="line">    <span class="attr">age</span>: z.number(),</span><br><span class="line">    <span class="attr">breed</span>: z.string(),</span><br><span class="line">  &#125;)</span><br><span class="line">  .required();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> CreateCatDto = z.infer&lt;<span class="keyword">typeof</span> createCatSchema&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用pipe</span></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UsePipes</span>(<span class="keyword">new</span> ZodValidationPipe(createCatSchema))</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guard 是一个使用 @Injectable() 装饰器注解的类，它实现了 CanActivate 接口。</p><p><img data-src="https://docs.nestjs.com/assets/Guards_1.png" alt="img"></p><p>guard根据运行时存在的某些条件（如权限、角色、ACL 等），决定路由处理程序是否处理给定请求。这通常被称为授权.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> validateRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个guard都必须实现 canActivate() 函数。该函数应返回一个布尔值，表明当前请求是否被允许。它可以同步或异步（通过 Promise 或 Observable）返回响应。Nest 使用返回值来控制下一步操作.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RolesGuard</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(RolesGuard)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局guard.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalGuards(<span class="keyword">new</span> RolesGuard());</span><br></pre></td></tr></table></figure><h3 id="interceptors"><a href="#interceptors" class="headerlink" title="interceptors"></a>interceptors</h3><p>拦截器是一个使用 @Injectable() 装饰器注解并实现 NestInterceptor 接口的类</p><p><img data-src="https://docs.nestjs.com/assets/Interceptors_1.png" alt="img"></p><p>受面向方面编程（AOP）技术的启发，拦截器具有一系列有用的功能。它们可以</p><ul><li>在方法执行前/后绑定额外逻辑</li><li>转换函数返回的结果</li><li>转换函数抛出的异常</li><li>扩展基本函数行为</li><li>根据特定条件（如缓存目的）完全重写函数</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="title">implements</span> <span class="title">NestInterceptor</span> </span>&#123;</span><br><span class="line">  intercept(context: ExecutionContext, <span class="attr">next</span>: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Before...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定interceptor.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UseInterceptors</span>(LoggingInterceptor)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>全局拦截器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor());</span><br></pre></td></tr></table></figure><p>自定义装饰器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> User = createParamDecorator(</span><br><span class="line">  <span class="function">(<span class="params">data: unknown, ctx: ExecutionContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> request.user;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params"><span class="meta">@User</span>() user: UserEntity</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="websocket与socket-io"><a href="#websocket与socket-io" class="headerlink" title="websocket与socket.io"></a>websocket与socket.io</h2><p><img data-src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="img"></p><blockquote><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</p><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection open ...&quot;</span>); </span><br><span class="line">  ws.send(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">&quot;Received Message: &quot;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>上面是客户端的写法,服务端可以利用ws<a href="https://github.com/websockets/ws">websockets/ws: Simple to use, blazing fast and thoroughly tested WebSocket client and server for Node.js (github.com)</a>或socket.io库<a href="https://github.com/socketio/socket.io">socketio/socket.io: Realtime application framework (Node.JS server) (github.com)</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入WebSocket模块:</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用Server类:</span></span><br><span class="line"><span class="keyword">const</span> WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化:</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[SERVER] connection()`</span>);</span><br><span class="line">    ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[SERVER] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">        ws.send(<span class="string">`ECHO: <span class="subst">$&#123;message&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`[SERVER] error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>客户端请求既可以在浏览器,也可以使用模块的客户端.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开WebSocket连接后立刻发送一条消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] open()`</span>);</span><br><span class="line">    ws.send(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应收到的消息:</span></span><br><span class="line">ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[CLIENT] Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>WebSocket协议本身不要求同源策略（Same-origin Policy），也就是某个地址为<code>http://a.com</code>的网页可以通过WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送<code>Origin</code>的HTTP头给服务器，服务器可以根据<code>Origin</code>拒绝这个WebSocket请求。所以，是否要求同源要看服务器端如何检查。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> httpServer = createServer();</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">    io.emit(<span class="string">&quot;message&quot;</span>, data); <span class="comment">// 广播消息给所有客户端</span></span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;event&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;receive:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;disconnet&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">httpServer.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 客户端</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.socket.io/4.7.5/socket.io.min.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> message = input.value;</span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">&quot;message&quot;</span>, message);</span></span><br><span class="line"><span class="javascript">        input.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter message&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取某个namespace(跟某个路由类似)下连接的客户端的数量</span></span><br><span class="line"><span class="keyword">const</span> socketCount = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Connected clients:&quot;</span>, socketCount);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(); <span class="comment">// or io(&quot;/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;https://example.com&quot;</span>); <span class="comment">// or io(&quot;https://example.com/&quot;), the main namespace</span></span><br><span class="line"><span class="keyword">const</span> orderSocket = io(<span class="string">&quot;https://example.com/orders&quot;</span>); <span class="comment">// the &quot;orders&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> userSocket = io(<span class="string">&quot;https://example.com/users&quot;</span>); <span class="comment">// the &quot;users&quot; namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置cors</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;https://example.com&quot;</span>,</span><br><span class="line">    <span class="attr">allowedHeaders</span>: [<span class="string">&quot;my-custom-header&quot;</span>],</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>socket.io中server,socket都是重要概念,而且socket.io库本身与websocket并不相容.</p><blockquote><p>尽管 Socket.IO 在可能的情况下确实使用 WebSocket 进行传输，但它会在每个数据包中添加额外的元数据。这就是为什么 WebSocket 客户端无法成功连接到 Socket.IO 服务器，而 Socket.IO 客户端也无法连接到纯 WebSocket 服务器。</p></blockquote><p>server可以对应多个namespace和client,掌管多个sockets.</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240331182812851.png" alt="image-20240331182812851"></p><p><code>io.of</code>与<code>`io.in</code>分别表示在某个namespace下和某个room或者id的socket</p><p>获取连接的客户端的数目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = io.engine.clientsCount;</span><br><span class="line"><span class="comment">// may or may not be similar to the count of Socket instances in the main namespace, depending on your usage</span></span><br><span class="line"><span class="keyword">const</span> count2 = io.of(<span class="string">&quot;/&quot;</span>).sockets.size;</span><br></pre></td></tr></table></figure><p>此外server可以管理rooms,后者相当于隔离.比如下面代码是拉进房间与拉出房间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances join the &quot;room1&quot; room</span></span><br><span class="line">io.socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room join the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsJoin([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace join the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsJoin(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsJoin(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances leave the &quot;room1&quot; room</span></span><br><span class="line">io.socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room leave the &quot;room2&quot; and &quot;room3&quot; rooms</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).socketsLeave([<span class="string">&quot;room2&quot;</span>, <span class="string">&quot;room3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace leave the &quot;room2&quot; room</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).socketsLeave(<span class="string">&quot;room2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.in(theSocketId).socketsLeave(<span class="string">&quot;room1&quot;</span>);</span><br></pre></td></tr></table></figure><p>下面是关闭socket连接以及获取对应的socket.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make all Socket instances disconnect</span></span><br><span class="line">io.disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room disconnect (and discard the low-level connection)</span></span><br><span class="line">io.in(<span class="string">&quot;room1&quot;</span>).disconnectSockets(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace disconnect</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line">io.of(<span class="string">&quot;/admin&quot;</span>).in(theSocketId).disconnectSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the main namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// return all Socket instances in the &quot;room1&quot; room of the &quot;admin&quot; namespace</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.of(<span class="string">&quot;/admin&quot;</span>).in(<span class="string">&quot;room1&quot;</span>).fetchSockets();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this also works with a single socket ID</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.in(theSocketId).fetchSockets();</span><br></pre></td></tr></table></figure><p>serverSideEmit允许向集群中的其他 Socket.IO 服务器发出事件(多server中)(需要配置adapter)</p><p>socket可以<code>emit</code>,<code>join</code>,<code>leave</code>以及<code>disconnet</code>等操作,属性包括id,handshake(包含头,客户端地址等重要信息),rooms以及包含的数据. 它是与客户端交互的基本类。它继承了 Node.js EventEmitter 的所有方法，如 emit、on、once 或 removeListener。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: <span class="comment">/* the headers of the initial request */</span></span><br><span class="line">  query: <span class="comment">/* the query params of the initial request */</span></span><br><span class="line">  auth: <span class="comment">/* the authentication payload */</span></span><br><span class="line">  time: <span class="comment">/* the date of creation (as string) */</span></span><br><span class="line">  issued: <span class="comment">/* the date of creation (unix timestamp) */</span></span><br><span class="line">  url: <span class="comment">/* the request URL string */</span></span><br><span class="line">  address: <span class="comment">/* the ip of the client */</span></span><br><span class="line">  xdomain: <span class="comment">/* whether the connection is cross-domain */</span></span><br><span class="line">  secure: <span class="comment">/* whether the connection is secure */</span></span><br><span class="line">&#125;</span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt; &#125;</span></span><br><span class="line">  socket.join(<span class="string">&quot;room1&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(socket.rooms); <span class="comment">// Set &#123; &lt;socket.id&gt;, &quot;room1&quot; &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// server A</span></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  socket.data.username = <span class="string">&quot;alice&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// server B</span></span><br><span class="line"><span class="keyword">const</span> sockets = <span class="keyword">await</span> io.fetchSockets();</span><br><span class="line"><span class="built_in">console</span>.log(sockets[<span class="number">0</span>].data.username); <span class="comment">// &quot;alice&quot;</span></span><br></pre></td></tr></table></figure><p>客户端使用对应的库<code>`socket.io-client</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span><br><span class="line">  socket.on(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Connected to server&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received message:&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message-input&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = input.value;</span><br><span class="line">    socket.emit(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    input.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Hapi.js,Adonis.js,Egg.js等等,不过基本逻辑都一样了.让我推荐的话,还是express,大型的上nest.js. 还要说一句,js的后端框架中文文档质量还有待提升,其实包括英文文档看起来还是有点老旧.</p><p>Python的Web术语里面还是讲视图views,模型models,urls这种的(受Django,Flask的影响?),而Node这边后端框架还是在说路由这种.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写了Python,现在写点NodeJS的,当然目前JS的运行时还有Deno和Bun,不过还是需要时间检验.而Node的后端框架也不少,其中佼佼者当属Nest.js,而更小的有Express这种.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题网站总结</title>
    <link href="https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://www.sekyoro.top/2024/03/30/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-30T04:40:59.000Z</published>
    <updated>2024-03-31T07:34:08.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.<br><span id="more"></span></p><h2 id="工作刷题型"><a href="#工作刷题型" class="headerlink" title="工作刷题型"></a>工作刷题型</h2><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><p>用的最多,我个人感觉不用纠结用.cn还是.com的,也有周赛和企业题</p><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a>牛客网</h3><p>更加本土化,本地企业的题库更多吧</p><h2 id="学习型"><a href="#学习型" class="headerlink" title="学习型"></a>学习型</h2><h3 id="codewars"><a href="#codewars" class="headerlink" title="codewars"></a>codewars</h3><p>我个人比较喜欢的网站,适合练练手,题倒是不难.</p><p><img data-src="https://s2.loli.net/2024/03/30/ewEQhUAfYzPDgyi.png" alt="image-20240330160405991"></p><h3 id="hackerrank"><a href="#hackerrank" class="headerlink" title="hackerrank"></a>hackerrank</h3><p>有各种技能的练习,也有不同层次的练习题.看个人爱好了.</p><h2 id="竞赛型"><a href="#竞赛型" class="headerlink" title="竞赛型"></a>竞赛型</h2><p>下面就是动真格的了</p><h3 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h3><p><img data-src="https://s2.loli.net/2024/03/30/wK2Lj76fsRHQcNM.png" alt="image-20240330161209680"></p><h3 id="Topcoder"><a href="#Topcoder" class="headerlink" title="Topcoder"></a>Topcoder</h3><p>这个平台与其说拿来刷题,不如拿来赚钱.</p><p><img data-src="https://s2.loli.net/2024/03/30/PF2gaYGQUVqrdnD.png" alt="image-20240330161514807"></p><h3 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder"></a>Atcoder</h3><p><img data-src="https://s2.loli.net/2024/03/30/vjXfSmzR4l9QsKd.png" alt="image-20240330161747680" style="zoom:50%;" /></p><p>从难度上说相比cf更适合新手了.</p><p><a href="https://www.cnblogs.com/wawcac-blog/articles/12245307.html">一种程序设计竞赛的训练方法（译） - wawcac - 博客园 (cnblogs.com)</a></p><h2 id="练习语言"><a href="#练习语言" class="headerlink" title="练习语言"></a>练习语言</h2><h3 id="python-type-challenge"><a href="#python-type-challenge" class="headerlink" title="python-type-challenge"></a>python-type-challenge</h3><p><a href="https://github.com/laike9m/Python-Type-Challenges">laike9m/Python-Type-Challenges: Master Python typing (type hints) with interactive online exercises! (github.com)</a></p><p>python的typing不如ts,但是合适的使用一些效果还是不错的.</p><h3 id="type-challenges"><a href="#type-challenges" class="headerlink" title="type-challenges"></a>type-challenges</h3><p><img data-src="https://s2.loli.net/2024/03/30/f4CrVLp8lKYXjEi.png" alt="image-20240330160751891" style="zoom:50%;" /></p><p>练习ts的typing,</p><p>解析<a href="https://blog.maxiaobo.com.cn/type-challenge/dist/">关于本文档 | TS 类型挑战通关手册 (maxiaobo.com.cn)</a></p><h3 id="type-hero"><a href="#type-hero" class="headerlink" title="type-hero"></a>type-hero</h3><p>同上,练习ts的typing,但是题目不一样.</p><p>除了上面之外其实还有很多OJ网站,但是我想这么多也没必要一一列举.</p><p>目前我个人常用的就是Leetcode刷题,Codewars随便练练手以及Codeforces去观摩大佬.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;做这些主要还是锻炼手感,不要忘了一些基础知识.此外还包含python和typescript的typing问题.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python的Web框架比较</title>
    <link href="https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/"/>
    <id>https://www.sekyoro.top/2024/03/27/python%E7%9A%84Web%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/</id>
    <published>2024-03-27T14:22:39.000Z</published>
    <updated>2024-03-29T15:52:22.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把<strong>框架</strong>(framework)与<strong>库</strong>(library)区分一下.<br><span id="more"></span></p><p>之前我也写过(或者说想过)一些类似生态以及作用的框架进行比较,大多都是看看网上评价以及star数,现在我想大概使用以下感受一下氛围,毕竟现在找工作一般也不会强调用python的web(事实上python的web确实要比Java的生态啥的要差).</p><p>根据github的star与网上观察,我对Django,Flask,FastAPI,Tornado,Sanic上手浅尝一下,毕竟其他框架还不到10k star,未来可期.</p><p>首先使用Python开发web的主要目的还是开发效率高,可用的第三方库可以说是数一<del>数二</del>,而web框架本身很多时候就是在传参CRUD搞来搞去,所以相关生态和社区活跃度应该是最重要的因素之一了.这也是我选择star数高的框架原因,我看见有些推荐的某些框架已经几年没有新的commit了,所以现在趁着有空看看目前Python web情况.另外可以订阅<a href="https://pycoders.com/">PyCoder’s Weekly | A Weekly Python Email Newsletter (pycoders.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/28/1VRMny34mdt9b6f.png" alt="image-20240328234239085"></p><p><img data-src="https://i.imgur.com/7paYgeL.jpg" alt="img"></p><p>扎心了….2015年的回答,还是很领先的.所以Python的强项还是偏计算,做一些有效的上层的应用.或者去研究一下CPython做东西.</p><p>而目前Flask,Django都已支持异步网络模型,所以做个小项目应该是没啥差别的.以下使用poetry管理包环境.</p><p><img data-src="https://s2.loli.net/2024/03/29/PMb2aJfliZdmTH8.png" alt="image-20240329235216575"></p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p><a href="https://docs.djangoproject.com/zh-hans/5.0/intro/overview/">初识 Django | Django 文档 | Django (djangoproject.com)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry add django</span><br><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建项目,一个项目下有很多应用.</p><blockquote><p>一个 Python 包 —— 即一个代码目录 — 它包含 Django 的一个实例中所有的设置。这包括数据库配置，Django 的特定选项和特定应用程序设置</p></blockquote><p>文件结构如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.<span class="keyword">py</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">        settings.<span class="keyword">py</span></span><br><span class="line">        urls.<span class="keyword">py</span></span><br><span class="line">        asgi.<span class="keyword">py</span></span><br><span class="line">        wsgi.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>在<code>views.py</code>中创建<strong>视图</strong>,在创建<code>urls.py</code>作为url配置进行映射,然后在mysite/urls.py创建urlpatterns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>作为web框架需要思考的几个问题就是 数据库的CRUD,在Django的setting.py下修改相关配置.比如配置数据库的连接以及账户,密码等信息.此外这个文件中还有一些默认安装的应用,这些应用有些也会创建数据表在使用之前需要在数据库中创建一些表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p>许多web框架都强调这一点,然而模型到底是什么？<code>数据库结构设计和附加的其它元数据</code></p><blockquote><p>一个模型就是单个定义你的数据的信息源。模型中包含了不可缺少的数据区域和你存储数据的行为。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>创建好后就能直接使用django提供的工具,先创建python写的sql语句,再利用语句创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>我这里使用默认的sqlite数据库,还是很方便的.</p><p><img data-src="https://s2.loli.net/2024/03/29/HThLi4fXlgpUcsu.png" alt="image-20240329200022851"></p><p>当然定义里模型之后还要激活模型才能创建迁移语句.激活语句就是在setting.py中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;polls.apps.PollsConfig&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>还可以进shell,通过创建的models直接进行添加字段.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>也就是直接利用继承了models.Model的python对象操作数据库字段.</p><p>此外还可以创建超级用户通过web修改.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>还需要在admin.py中注册一下可以在管理员中查看.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>Django把对于request的相应叫做views,本身它也有个貌似叫做MVT的概念?其实跟MVC差不多,model,view以及template.这些概念其实早就在其它语言的web框架深深渗透了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;ans&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure><p>再在urls中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&quot;what&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>视图可以从数据库里读取记录，可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的），可以生成一个 PDF 文件，可以输出一个 XML，创建一个 ZIP 文件，你可以做任何你想做的事，使用任何你想用的 Python 库。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用一个模板作为视图的返回值.可以看到setting中的设置</p><p>在视图中,可以使用HttpResponse和template.render返回html,或者是直接使用render.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><blockquote><p>载入模板，填充上下文，再返回由它生成的 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 对象」是一个非常常用的操作流程。于是 Django 提供了一个快捷函数，用它来重写 <code>index()</code> 视图</p></blockquote><p>可以抛出404错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>传入参数可供模板调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还能使用urls.py中的name修改模板中的硬编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>这里模板中使用<code>&#123;% url 'detail'%&#125;</code>就表示</p><p>还可以给url名称添加命名空间.为了避免多个应用views冲突.在urls.py中添加app.name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_name = &quot;polls&quot;</span><br></pre></td></tr></table></figure><p>还可以使用<code>HttpResponseRedirect</code>的<code>`reverse()</code>的函数构造URL字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure><p>使用通用视图,通用视图将常见的模式抽象到了一个地步，以至于你甚至不需要编写 Python 代码来创建一个应用程序。例如，<a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.list.ListView"><code>ListView</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/5.0/ref/class-based-views/generic-display/#django.views.generic.detail.DetailView"><code>DetailView</code></a> 通用视图分别抽象了 “显示对象列表” 和 “显示特定类型对象的详细页面” 的概念。</p><blockquote><p>这些视图反映基本的网络开发中的一个常见情况：<strong>根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做 “通用视图” 系统</strong>。</p></blockquote><p>使用通用视图需要修改urlconf和视图.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = &quot;polls&quot;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&quot;&quot;, views.IndexView.as_view(), <span class="type">name</span>=&quot;index&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/&quot;, views.DetailView.as_view(), <span class="type">name</span>=&quot;detail&quot;),</span><br><span class="line">    path(&quot;&lt;int:pk&gt;/results/&quot;, views.ResultsView.as_view(), <span class="type">name</span>=&quot;results&quot;),</span><br><span class="line">    path(&quot;&lt;int:question_id&gt;/vote/&quot;, views.vote, <span class="type">name</span>=&quot;vote&quot;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是使用改好的通用视图跟url配对.对于ListView和DetailView不太一样,ListView的context命名是<model_name>_list,所以需要使用<code>context_object_name</code>,而DetailView默认是<model_name></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">generic.ListView</span>):</span></span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/results.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="comment"># same as above, no changes needed.</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>视图中配置好模板,模型还可以修改传入的context变量名字<code>context_object_name</code></p><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionModelTests</span>(<span class="params">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">        is in the future.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py test polls</span><br></pre></td></tr></table></figure><p>在模板中使用静态文件,默认目录是<code>static</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外我们还可以修改Django后台的表单和界面等.</p><p><a href="https://djangopackages.org/">Django Packages : Reusable apps, sites and tools directory for Django</a></p><p>可以看到django不愧是python内活跃度和生态数一数二的框架了,快速开发还是很方便的,内置了很多东西,不只是单纯的restfulAPI.当然Django也有个rest framework<a href="https://www.django-rest-framework.org/">Home - Django REST framework (django-rest-framework.org)</a>更加适合写API</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>相比于Django,Flask更偏向单纯写API,插件生态没有Django多,数据库一般使用sqlalchemy.</p><p>但是Flask包括了html模板,路由,静态文件,sessions应该有的功能.我也拿它写个小web程序,这里不赘述了.<a href="https://proanimer.com/arxiv/result">论文查 (proanimer.com)</a></p><p><a href="https://github.com/drowning-in-codes/paper-reader">drowning-in-codes/paper-reader (github.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/29/DEFAU7eBNqKTmnX.png" alt="image-20240329225756697"></p><p>上面这两个框架用于生产环境时还需要使用WSGI服务器,比如uWSGI,gunicorn等.</p><h3 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h3><p>很火的异步web框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install <span class="string">&quot;uvicorn[standard]&quot;</span></span><br></pre></td></tr></table></figure><p>看看下面基本示例,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>写法还是很朴素的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你的代码里会出现 async / await，请使用 async def：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>特点包括:异步(Starlette支持),数据验证Pydantic,交互式文档(使用swagger UI生成)</p><p>很容易上手学习,官方推荐数据库ORM也是SQLAlchemy.</p><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.Event().wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>也是异步框架,适合websockets等.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure><p>我看了一下文档,感觉不是很好上手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()    </span><br></pre></td></tr></table></figure><p>Tornado 大致可分为四个主要部分：</p><ul><li>Web框架（包括 <a href="https://www.osgeo.cn/tornado/web.html#tornado.web.RequestHandler"><code>RequestHandler</code></a> 它是创建Web应用程序和各种支持类的子类）。</li><li>HTTP的客户端和服务器端实现 (<a href="https://www.osgeo.cn/tornado/httpserver.html#tornado.httpserver.HTTPServer"><code>HTTPServer</code></a> 和 <a href="https://www.osgeo.cn/tornado/httpclient.html#tornado.httpclient.AsyncHTTPClient"><code>AsyncHTTPClient</code></a> ）</li><li>包含类的异步网络库 <a href="https://www.osgeo.cn/tornado/ioloop.html#tornado.ioloop.IOLoop"><code>IOLoop</code></a> 和 <a href="https://www.osgeo.cn/tornado/iostream.html#tornado.iostream.IOStream"><code>IOStream</code></a> 作为HTTP组件的构建块，也可以用于实现其他协议。</li><li>协作程序库 (<a href="https://www.osgeo.cn/tornado/gen.html#module-tornado.gen"><code>tornado.gen</code></a> ）它允许异步代码以比链接回调更简单的方式写入。这类似于Python3.5中引入的本地协同工作特性。</li></ul><h3 id="Sanic"><a href="#Sanic" class="headerlink" title="Sanic"></a>Sanic</h3><p>我第一次看到是一个开源项目再用,目前更新还是比较频繁的.可以说是除了FastAPI最有前途的了.</p><p><img data-src="https://s2.loli.net/2024/03/29/y8Uda4LGTKlDkXM.png" alt="image-20240329231255284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sanic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;MyHelloWorldApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Hello, world.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官网的文档也强调了其关注performance,flexibility和易于使用.我觉得这些跟python比较契合.</p><p>连接数据库,app注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">attach_db</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    app.ctx.db = Database()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># app registry 相当于在一个地方给它挂Sanic上</span></span><br><span class="line"><span class="comment"># ./path/to/server.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/somewhere_else.py</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"></span><br><span class="line">app = Sanic.get_app(<span class="string">&quot;my_awesome_server&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">app = Sanic(<span class="string">&#x27;myapp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config.DB_NAME = <span class="string">&#x27;appdb&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;DB_USER&#x27;</span>] = <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line"></span><br><span class="line">db_settings = &#123;</span><br><span class="line">    <span class="string">&#x27;DB_HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_NAME&#x27;</span>: <span class="string">&#x27;appdb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DB_USER&#x27;</span>: <span class="string">&#x27;appuser&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">app.config.update(db_settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ./path/to/server.py 工厂模式得到app并使用sanic path.to.server:create_app运行</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> .path.to.config <span class="keyword">import</span> MyConfig</span><br><span class="line"><span class="keyword">from</span> .path.to.some.blueprint <span class="keyword">import</span> bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">config=MyConfig</span>) -&gt; Sanic:</span></span><br><span class="line">    app = Sanic(<span class="string">&quot;MyApp&quot;</span>, config=config)</span><br><span class="line">    app.blueprint(bp)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>handlers,request,response等都是老话了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/foo&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo_handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;I said foo!&quot;</span>)</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/typed&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">typed_handler</span>(<span class="params">request: Request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&#x27;OK&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Sanic提供了Listener,看起来像在生命周期内添加hook.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.reload_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">reload_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; reload_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.main_process_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_start</span>(<span class="params">*_</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; main_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">before_start</span>(<span class="params">*_</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; before_start &lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_1</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_2</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_start&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_3</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_4</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;before_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_5</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_6</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&quot;after_server_stop&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_7</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_server_stop</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">listener_8</span>(<span class="params">app, loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;listener_8&quot;</span>)</span><br></pre></td></tr></table></figure><p>Sanic跟Flask一样提供了蓝图.</p><blockquote><p>蓝图是一种可用于应用程序内子路由的对象。蓝图定义了用于添加路由的类似方法，而不是将路由添加到应用程序实例中，然后以灵活和可插拔的方式将路由注册到应用程序中。</p><p>蓝图对大型应用程序尤其有用，因为在大型应用程序中，应用程序逻辑可被分解为多个组或责任区。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ./my_blueprint.py</span><br><span class="line">from sanic.response import json</span><br><span class="line">from sanic import Blueprint</span><br><span class="line"></span><br><span class="line">bp = Blueprint(&quot;my_blueprint&quot;)</span><br><span class="line"></span><br><span class="line">@bp.route(&quot;/&quot;)</span><br><span class="line">async def bp_root(request):</span><br><span class="line">    return json(&#123;&quot;my&quot;: &quot;blueprint&quot;&#125;)</span><br><span class="line"></span><br><span class="line">from sanic import Sanic</span><br><span class="line">from my_blueprint import bp</span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.blueprint(bp)</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>此外还有Starlette,Quart,Falcon等异步网络框架(其实没必要这么强调异步).但鉴于还没有那么多生态就先不品鉴了.</p><p>后面有空应该还会品鉴一下Node的后端框架,比如koa,express,nest等.PHP框架还有Laravel,Sympfony,ThinkPHP以及基于Swoole,workerman的hyperf<a href="https://hyperf.wiki/2.0/#/">Hyperf</a>,webman框架等等,不过我可能更看好Laravel(不用太在意其性能).除了这些语言,Java,C#,Go就是Web常客了(不过.Net发展有点曲折),它们的web框架比较集中也成熟,工作上也用得很多.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前好像写过一些关于Python的Web框架?现在再按照ASGI与原本的WSGI区分一下,顺便把&lt;strong&gt;框架&lt;/strong&gt;(framework)与&lt;strong&gt;库&lt;/strong&gt;(library)区分一下.&lt;br&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://www.sekyoro.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt变天了?了解Qt6相关技术</title>
    <link href="https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.sekyoro.top/2024/03/24/Qt%E5%8F%98%E5%A4%A9%E4%BA%86-%E4%BA%86%E8%A7%A3Qt6%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</id>
    <published>2024-03-24T10:37:06.000Z</published>
    <updated>2024-03-27T12:14:10.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.<br><span id="more"></span></p><p>目前跨平台的解决方案还是琳琅满目,但其中比较成熟的开发效率不低的,网上教程多的又成了凤毛麟角.让我说的话,有Flutter,.Net MAUI以及Qt等等</p><p>Flutter就不多提了,我是最推荐这个的.</p><p>.Net相关项目在微软操持下,生不如死.最成熟的是WPF本身不支持跨平台,此外的Avalonia,Uno等跨平台并不是微软首推. 微软目前首推MAUI与Blazor,后者是Web框架,此外还有UWP的继任者WinUI3目前也不成熟(其目的应该是占据WPF的部分市场).<a href="https://www.cnblogs.com/duwenlong/p/17462010.html">聊聊MAUI、WinUI3和WPF的优势及劣势 - 杜文龙 - 博客园 (cnblogs.com)</a></p><p><img data-src="https://s2.loli.net/2024/03/25/6WmE12y9JhZRXaO.png" alt="image-20240325123001580"></p><p><img data-src="https://github.com/robloo/PublicDocs/raw/master/XAMLFrameworkEvolution.png?raw=true" alt="img"></p><p>此外还有移动端跨平台的React Native,Jetpack Compose(Compose Multiplatform)等等,桌面应用还有Electron,Tauri(目前也能在移动端使用)等,国内生态下还有微信小程序,Uniapp,Taro等.</p><p><img data-src="https://s2.loli.net/2024/03/25/V3DjN1wpYhmUSZF.png" alt="image-20240325123020037"></p><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose?hl=zh-cn">Jetpack Compose</a> 是一款新型工具包，旨在帮助简化界面开发。该工具包将响应式编程模型与简洁易用的 Kotlin 编程语言相结合，并采用完全声明式的代码编写方式，让您可以通过调用一系列函数来描述界面，这些函数会将数据转换为界面层次结构。当底层数据发生变化时，框架会自动重新执行这些函数，为您更新界面层次结构。简单来说,包括Flutter,这些都是使用代码声明UI的,而.Net下许多UI框架使用xaml,这与之前的安卓开发类似.</p></blockquote><p>上面说了这么多,做技术选型来个总结的话,当然首先需要顾及团队人员,最好结合工期和团队技术栈选择.如果是个人开发者,由于目前Flutter对web和桌面支持还是不太成熟,我个人其实想推荐.Net的技术,或者你也可以考虑Electron做桌面(强调软件性能或者容错性考虑WPF,Qt等),移动端用Flutter或React Native(Compose目前跨平台也不太成熟,如果只考虑安卓可以试试)</p><p>而今天要谈到的Qt,在工业领域用得多,感觉还是因为历史沉淀.这几天看了Qt官网,其推出了Design Studio软件,Qt Creator貌似也支持了AI辅助编码,说明还是跟上了潮流,而Qt6的优势就是跟Qt quick更好结合了.目前下载Qt也不像之前那么麻烦,现在用一个unified-downloader联网下载以及后续更新就行了.</p><h2 id="新的Qt"><a href="#新的Qt" class="headerlink" title="新的Qt"></a>新的Qt</h2><p>Qt主要还是在桌面、嵌入式多,但其实移动端也可以,相信其跨平台能力.Qt6与Qt5基本可以无缝转换.</p><blockquote><p>Qt 6 is highly compatible with <a href="https://doc.qt.io/qt-5.15/">Qt 5</a>. Developers of Qt 5 applications can move seamlessly to Qt 6 while retaining the applications’ functionality.</p></blockquote><p><img data-src="https://s2.loli.net/2024/03/25/b8UsBofHexM9gZ6.png" alt="image-20240325132130083"></p><p>Qt目前提供了设计,开发,测试和优化的工具,主要使用前两者即可.</p><h3 id="对于UI设计"><a href="#对于UI设计" class="headerlink" title="对于UI设计"></a>对于UI设计</h3><p><img data-src="https://doc.qt.io/qtcreator/images/qtcreator-project-qt-quick.webp" alt="{New Project dialog}"></p><p>如果想要在移动端或者需要丝滑的动画,那就用Qt Quick.可以使用Qt Design Studio辅助设计.</p><p><img data-src="https://s2.loli.net/2024/03/25/9nFhjdfoMGsXUyV.png" alt="image-20240325143557948"></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="title">Rectangle</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> page</span></span><br><span class="line">    <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="string">&quot;#ffffff&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用qml描述界面</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> todayTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> thisWeekTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">ListModel</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> laterTasksListModel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">Column</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> column</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">spacing</span>: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> todayTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: <span class="number">180</span></span><br><span class="line">            <span class="attribute">listModel</span>: todayTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Today&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: todayTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> thisWeekTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y - <span class="number">60</span></span><br><span class="line">            <span class="attribute">listModel</span>: thisWeekTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;This week&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: thisWeekTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title">TasksList</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> laterTasks</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">width</span>: column.width</span><br><span class="line">            <span class="attribute">maxHeight</span>: column.height - y</span><br><span class="line">            <span class="attribute">listModel</span>: laterTasksListModel</span><br><span class="line">            <span class="attribute">headerText</span>: qsTr(<span class="string">&quot;Later&quot;</span>)</span><br><span class="line">            <span class="attribute">tasksCount</span>: laterTasksListModel.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我在使用的时候感觉很像安卓的compose或者WPF的xaml开发,也是声明式,Flutter也是声明式,这可能就是趋势吧.类似js通过findelementById再到React,Vue的声明式UI.</p><h3 id="使用QtWidget"><a href="#使用QtWidget" class="headerlink" title="使用QtWidget"></a>使用QtWidget</h3><p><img data-src="https://doc.qt.io/qt-6/images/notepad2.png" alt="&quot;Qt Creator New Project dialog&quot;"></p><p><img data-src="https://doc.qt.io/qt-6/images/qtdesigner.png" alt="&quot;Qt Designer opened from Qt Creator&quot;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;notepad.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Notepad w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用QtWidget是传统开发方式,这里就不赘述了.</p><p>目前我在Qt官网以及开发工具上找到了一堆tutorial,可惜目前没多少时间学习,可以预见的是,虽然Qt在互联网以及开源软件领域基本没什么市场占有率(目前被Web技术占着,要么就是Flutter或者.Net),但是在使用c++比较多的工业领域或是使用Python进行Qt开发应该是一个技术上不错的选择了.比如下面代码就是用python执行qml.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtGui <span class="keyword">import</span> QGuiApplication</span><br><span class="line"><span class="keyword">from</span> PySide6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line">QML = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import QtQuick</span></span><br><span class="line"><span class="string">import QtQuick.Controls</span></span><br><span class="line"><span class="string">import QtQuick.Layouts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Window &#123;</span></span><br><span class="line"><span class="string">    width: 300</span></span><br><span class="line"><span class="string">    height: 200</span></span><br><span class="line"><span class="string">    visible: true</span></span><br><span class="line"><span class="string">    title: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    readonly property list&lt;string&gt; texts: [&quot;Hallo Welt&quot;, &quot;Hei maailma&quot;,</span></span><br><span class="line"><span class="string">                                           &quot;Hola Mundo&quot;, &quot;Привет мир&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function setText() &#123;</span></span><br><span class="line"><span class="string">        var i = Math.round(Math.random() * 3)</span></span><br><span class="line"><span class="string">        text.text = texts[i]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ColumnLayout &#123;</span></span><br><span class="line"><span class="string">        anchors.fill:  parent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Text &#123;</span></span><br><span class="line"><span class="string">            id: text</span></span><br><span class="line"><span class="string">            text: &quot;Hello World&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        Button &#123;</span></span><br><span class="line"><span class="string">            text: &quot;Click me&quot;</span></span><br><span class="line"><span class="string">            Layout.alignment: Qt.AlignHCenter</span></span><br><span class="line"><span class="string">            onClicked:  setText()</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QGuiApplication(sys.argv)</span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line">    engine.loadData(QML.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> engine.rootObjects():</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    exit_code = app.<span class="built_in">exec</span>()</span><br><span class="line">    <span class="keyword">del</span> engine</span><br><span class="line">    sys.exit(exit_code)</span><br></pre></td></tr></table></figure><p>下面是常见的用python写qtwidget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PySide6 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.hello = [<span class="string">&quot;Hallo Welt&quot;</span>, <span class="string">&quot;Hei maailma&quot;</span>, <span class="string">&quot;Hola Mundo&quot;</span>, <span class="string">&quot;Привет мир&quot;</span>]</span><br><span class="line"></span><br><span class="line">        self.button = QtWidgets.QPushButton(<span class="string">&quot;Click me!&quot;</span>)</span><br><span class="line">        self.text = QtWidgets.QLabel(<span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">                                     alignment=QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        self.layout = QtWidgets.QVBoxLayout(self)</span><br><span class="line">        self.layout.addWidget(self.text)</span><br><span class="line">        self.layout.addWidget(self.button)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.magic)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.Slot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magic</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.text.setText(random.choice(self.hello))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication([])</span><br><span class="line"></span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    widget.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></table></figure><p>目前QtWidget与Qt quick没有绝对优劣,官网也是推荐在使用动画和移动端触摸时使用qml,事实上这两者也可以结合使用. 而安卓方面Compose已经成了趋势,但传统xml开发也需要掌握用来维护旧项目以及新项目缺少的组件.</p><p>其他技术可以看看这篇文章总结得不错<a href="https://zhuanlan.zhihu.com/p/547806659">桌面软件开发框架大赏 - 知乎 (zhihu.com)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前c/s架构的应用开发已经有了足够多的选择,其中跨平台的开发也非常多.比如Dart的Flutter,C++的Qt,.Net的MAUI等等,不过其中坑不是外行能一眼看透的,尤其是微软相关的UI技术栈分支实在多,跨平台相关能力不明(微软这方面的文档感觉还是有点乱),学习资料不够充足,而Qt并不开源,但是最近我看到其官网又更新了一波技术,感觉很亮眼,咱们来看看.&lt;br&gt;</summary>
    
    
    
    
    <category term="技术栈" scheme="https://www.sekyoro.top/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何开始写一篇现代八股论文</title>
    <link href="https://www.sekyoro.top/2024/03/16/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E7%AF%87%E7%8E%B0%E4%BB%A3%E5%85%AB%E8%82%A1%E8%AE%BA%E6%96%87/"/>
    <id>https://www.sekyoro.top/2024/03/16/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E7%AF%87%E7%8E%B0%E4%BB%A3%E5%85%AB%E8%82%A1%E8%AE%BA%E6%96%87/</id>
    <published>2024-03-16T02:28:08.000Z</published>
    <updated>2024-05-17T07:42:23.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>通过阅读一系列文章,分析摘要、介绍每个section的组织形式,方便写出一些列现代八股文.<br><span id="more"></span></p><blockquote><p>整篇论文(除了类似综述之外的)就是为了讲述一个故事(或者产品)并验证它的有效性.</p></blockquote><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>大概五到六句话. 首先介绍背景,关键知识. 然后一转提到不足,引出Motivation. 再说本篇文章提出了什么,补一句介绍以及大致方法. 最后做实验证明了什么. 最后可以补一句代码链接.</p><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>分四段,最后贡献写三点. 介绍部分可以加张综合的图,比如有的论文将一些综合的benchmark放在了intro部分.</p><p>降低成本的一个直观方法是利用现有单个代理感知模型的通用潜力，将它们调整为合作感知模型。预先训练好的单个代理模型已经证明了极佳的可移植性，这就为重新使用它们对观察结果的通用表征提供了可能性.</p><p>首先第一段介绍背景,它的光明前景,优点. 第二段介绍最新情况,开始diss. 第三段讲讲可以怎么做,从而转进第四段介绍自己的方法.</p><h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><p>介绍涉及到的主要领域,通常2-3个,每个领域简单介绍一些背景然后对现有方法简单分类并据一些最近的方法,然后进行diss说明不足,可以写一点本篇工作的差异.</p><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><h2 id="Experiments实验"><a href="#Experiments实验" class="headerlink" title="Experiments实验"></a>Experiments实验</h2><blockquote><p>实验部分介绍使用的数据集,评价指标,实现细节(实验设置),定量分析,定性分析以及消融实验等.</p></blockquote><p>首先介绍论文进行了comprehensive的实验,然后分别介绍数据集,随后介绍评价指标.</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>介绍使用的框架、工具以及训练的GPU设备.然后介绍训练时的细节,比如使用的optimizer和lr_scheduler,batch_size,epochs等.然后介绍自己的算法中的参数设置,最后介绍一些细节等</p><h3 id="定量分析"><a href="#定量分析" class="headerlink" title="定量分析"></a>定量分析</h3><p>使用不同指标进行对比.</p><p>定量分析这一节的写法</p><blockquote><p>Table 1 shows the 3D detection performance comparison results on the three datasets. We compare the following methods. No Fusion as a baseline considers only the point cloud data of ego vehicles without collaboration. Late Fusion allows agents to exchange detected results and utilizes non-maximum suppression to produce the final outputs. Early Fusion means the raw LiDAR point clouds are shared to complete the perception view. Meanwhile, the existing state-of-the-art (SOTA) models are fully considered, including When2com [20], V2VNet [28], AttFuse [37], V2X-ViT [36], DiscoNet [17], CoBEVT [34], and Where2comm [10]. Intuitively, the proposed SCOPE outperforms No Fusion, Late Fusion, and Early Fusion by large margins across all datasets, demonstrating the superiority of our perception paradigm. Moreover, our method significantly outperforms previous SOTA models in simulated and real-world (DAIR-V2X) scenarios. In particular, the SOTA performance is improved by 3.63% and 7.41% on the V2XSet and OPV2V datasets separately in AP@0.7. Compared to single-frame and collaborationonly based efforts [10, 17, 20, 28, 36], SCOPE proves the effectiveness and rationality of simultaneously considering the temporal context, collaboration, and ego characteristics.</p><p>We first test the methods on noisy settings with only localization error at different levels of 𝜎𝑙𝑜𝑐 , as shown in Fig 5. The results showed that early fusion and some state-of-theart intermediate methods could detect and predict object vehicles with high precision in ideal settings, but their detection precision degraded quickly as the degree of error increased. Methods with robust designs, such as V2X-ViT [25] and ICP and OT [18], exhibit higher precision in noisy settings, but their performance still decrease significantly in intense noise conditions. In contrast, our FeaCo demonstrate high robustness and retain similar precision levels in high pose-error environments, attributed to the effect of our PRM and multi-scale CAM. Furthermore, methods are compared in V2V4Real dataset [24] to better illustrate the effectiveness of FeaCo in noisy environments. As results displayed in 1, classic [3, 26] and SOTA[23, 25] methods show different degrees of degradation in high-noise settings. In constrast, FeaCo successfully maintains the best performance and robustness in real-world environment, especially in intense noise conditions. We then evaluate the methods on environments with both localization and heading errors, which are common in real-world settings. We set the 𝜎𝑙𝑜𝑐 and 𝜎ℎ𝑒𝑎𝑑 to the same value to unify the noise level. Our experiments are based on two given test sets, 𝐷𝑒 𝑓 𝑎𝑢𝑙𝑡 𝑇 𝑒𝑠𝑡 in Tab 2 and 𝑇 𝑒𝑠𝑡 𝐶𝑢𝑙𝑣𝑒𝑟 𝐶𝑖𝑡𝑦 in Tab 3, validating that our FeaCo outperform all the other methods in various noise settings and remain detection robustness in noisy conditions close to reality. Overall, our evaluation demonstrated the superior performance and robustness of FeaCo in various environment settings, making it a promising collaborative perception framework for real-world applications.</p></blockquote><h2 id="Latex常用"><a href="#Latex常用" class="headerlink" title="Latex常用"></a>Latex常用</h2><blockquote><p>众所周知,不用latex写出来的只能是文章,不能是论文(暴言).</p></blockquote><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240402155937242.png" alt="image-20240402155937242"></p><p>LATEX 中单引号 ‘ 和 ’ 分别用 ` 和 ‘ 输入；双引号 “ 和 ” 分别用 `` 和 ‘’ 输入</p><h3 id="文章标题、作者注解"><a href="#文章标题、作者注解" class="headerlink" title="文章标题、作者注解"></a>文章标题、作者注解</h3><p>主要用于表示一些共一、通信作者,作者与单位的关系以及一些额外信息等.</p><p>有几种不同方式.</p><p>使用<code>\footnote</code> 命令可以在页面底部生成一个脚注.</p><p>有些情况下（比如在表格环境、各种盒子内）使用 \footnote 并不能正确生成脚注。我们 可以分两步进行，先使用 \footnotemark 为脚注计数，再在合适的位置用 \footnotetext 生成脚注。</p><p>对于单位或者邮箱,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;\tt\small $\&#123;$test,test2$\&#125;$@xxx.edu.cn&#125;</span><br><span class="line"># 使用\vspace \quad空格</span><br></pre></td></tr></table></figure><p><code>\fnsymbol</code> 一系列符号，用于 <code>\thanks</code> 命令生成的脚注</p><h3 id="对文字操作"><a href="#对文字操作" class="headerlink" title="对文字操作"></a>对文字操作</h3><p>比如<code>\textbf</code>等等能使文字改变(包括公式),这些还是非常有用的.</p><p>引入宏包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\usepackage&#123;amssymb&#125;</span><br><span class="line">\usepackage&#123;bm&#125;</span><br></pre></td></tr></table></figure><p>对于排版数学公式,主要使用amsmath宏,而amssymb提供许多数学符号</p><p><code>\underline</code> 命令生成下划线的样式不够灵活，不同的单词可能生成高低各异的下划线，并 且无法换行。<code>ulem</code> 宏包提供了更灵活的解决方案，它提供的 <code>\uline</code> 命令能够轻松生成自动换行的下划线</p><h4 id="行内和行间公式"><a href="#行内和行间公式" class="headerlink" title="行内和行间公式"></a>行内和行间公式</h4><blockquote><p>数学公式有两种排版方式：其一是与文字混排，称为行内公式;其二是单独列为一行排版, 称为行间公式。</p></blockquote><p>简单来说行内公式使用$$$$,行间公式使用<code>\equation</code>.</p><p>equation 环境为公式自动生成一 个编号，<strong>这个编号可以用 \label 和 \ref 生成交叉引用，amsmath 的 \eqref 命令甚至为引用 自动加上圆括号</strong>；还可以用 \tag 命令手动修改公式的编号，或者用 \notag 命令取消为公式编 号</p><p>如果需要<strong>直接使用不带编号的行间公式</strong>，则将公式用命令 [ 和 ] 包裹，与之等效的是 displaymath 环境。有的人更喜欢 equation* 环境，体现了带星号和不带星号的环境之间的区别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation*&#125;</span><br><span class="line">a^2 + b^2 = c^2</span><br><span class="line">\end&#123;equation*&#125;</span><br><span class="line">For short:</span><br><span class="line">\[ a^2 + b^2 = c^2 \]</span><br><span class="line">Or if you like the long one:</span><br><span class="line">\begin&#123;displaymath&#125;</span><br><span class="line">a^2 + b^2 = c^2</span><br><span class="line">\end&#123;displaymath&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当用户使用 $ 开启行内公式输入，或是使用 [ 命令、equation 环境时，LATEX 就进入了 数学模式。</p></blockquote><ul><li>数学模式中输入的空格被忽略。数学符号的间距默认由符号的性质（关系符号、运算符等） 决定。需要人为引入间距时，使用 \quad 和 \qquad 等命令</li><li><p>不允许有空行（分段）。行间公式中也无法用 \ 命令手动换行，排版多行公式需要使用其他环境</p></li><li><p>所有的字母被当作数学公式中的变量处理，字母间距与文本模式不一致，也无法生成单词 之间的空格。想在数学公式中输入正体的文本，简单情况下可用  \mathrm 命令。或者用 amsmath 提供的 \text 命令</p></li></ul><h5 id="一般符号"><a href="#一般符号" class="headerlink" title="一般符号"></a>一般符号</h5><p>希腊字母符号的名称就是其英文名称，如 α (\alpha)、β (\beta) 等等。大写的希腊字母为 首字母大写的命令，如 Γ (\Gamma)、∆ (\Delta) 等等。无穷大符号为 ∞ (\infty)。</p><h5 id="hyperref"><a href="#hyperref" class="headerlink" title="hyperref"></a>hyperref</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    Please visit my \href&#123;https://www.example.com&#125;&#123;website&#125;.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line">\hypersetup&#123;</span><br><span class="line">colorlinks=true,</span><br><span class="line">linkcolor=cyan,</span><br><span class="line">filecolor=blue,      </span><br><span class="line">urlcolor=red,</span><br><span class="line">citecolor=green,</span><br><span class="line">pagebackref=true,</span><br><span class="line">    breaklinks=true,</span><br><span class="line">    letterpaper=true,</span><br><span class="line">    bookmarks=false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>colorlinks就是说超链接是否带颜色；<br>linkcolor就是目录，公式，图表等内部链接的颜色；<br>filecolor就是文件型链接的颜色；<br>urlcolor就是网页链接的颜色；<br>citecolor就是参考文献连接的颜色</p><p>pagebackref=true<code>：在参考文献中添加返回页码的链接。</code>breaklinks=true`：允许链接跨行断开。</p><p>letterpaper=true：将页面大小设置为Letter纸张尺寸。</p><p>bookmarks=false：禁用书签生成。</p></blockquote><p>amssymb 宏包提供了一些次常用的符号.</p><p>hyperref 宏包提供了直接书写超链接的命令，用于在 PDF 中生成 URL： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\url&#123;⟨url⟩&#125; \nolinkurl&#123;⟨url⟩&#125;</span><br></pre></td></tr></table></figure><h5 id="xcolor"><a href="#xcolor" class="headerlink" title="xcolor"></a>xcolor</h5><p>文本设置颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xcolor&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    \textcolor&#123;red&#125;&#123;这是红色的文本。&#125;</span><br><span class="line"></span><br><span class="line">    \colorbox&#123;blue!30&#125;&#123;这是一个蓝色背景的盒子。&#125;</span><br><span class="line"></span><br><span class="line">    \definecolor&#123;mygreen&#125;&#123;rgb&#125;&#123;0,0.5,0&#125;</span><br><span class="line">    \textcolor&#123;mygreen&#125;&#123;这是自定义的绿色文本。&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="soul"><a href="#soul" class="headerlink" title="soul"></a>soul</h5><p>下划线和删除线等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\st&#123;This text has a strikethrough.&#125;</span><br><span class="line">\hl&#123;\ul&#123;Highlighted and underlined text.&#125;&#125;</span><br><span class="line">\st&#123;\ul&#123;Strikethrough and underlined text.&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="times"><a href="#times" class="headerlink" title="times"></a>times</h5><p>times宏包用于将文档的字体设置为Times字体。使用\usepackage{times}命令导入该宏包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;times&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">This is some text in Times font.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="epsfig宏包"><a href="#epsfig宏包" class="headerlink" title="epsfig宏包"></a>epsfig宏包</h5><p><code>epsfig</code>宏包用于在LaTeX文档中插入EPS格式的图像文件。使用<code>\usepackage&#123;epsfig&#125;</code>命令导入该宏包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;epsfig&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \epsfig&#123;file=example.eps, width=0.5\textwidth&#125;</span><br><span class="line">    \caption&#123;An example EPS figure.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="graphicx"><a href="#graphicx" class="headerlink" title="graphicx"></a>graphicx</h5><p><code>graphicx</code>宏包是LaTeX中最常用的图形处理宏包之一，用于插入和操作各种图像文件格式。使用<code>\usepackage&#123;graphicx&#125;</code>命令导入该宏包即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=0.5\textwidth]&#123;example.png&#125;</span><br><span class="line">    \caption&#123;An example PNG image.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\graphicspath&#123;&#123;resource/&#125;&#125;     % organize your images and other figures under resource/ folder</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="bbding"><a href="#bbding" class="headerlink" title="bbding"></a>bbding</h5><p><code>bbding</code>宏包提供了一系列特殊符号和图标，如手势、箭头、勾号、叉号等。使用<code>\usepackage&#123;bbding&#125;</code>命令导入该宏包即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;bbding&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\Checkmark \quad \XSolidBrush \quad \HandRight</span><br><span class="line">\end&#123;document&#125;</span><br><span class="line"># 打勾叉</span><br><span class="line">\Checkmark</span><br><span class="line">\CheckmarkBold</span><br><span class="line">\XSolid</span><br><span class="line">\XSolidBold</span><br><span class="line">\XSolidBrush</span><br></pre></td></tr></table></figure><h5 id="subcaption"><a href="#subcaption" class="headerlink" title="subcaption"></a>subcaption</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;subcaption&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \begin&#123;subfigure&#125;&#123;0.3\textwidth&#125;</span><br><span class="line">        \includegraphics[width=\linewidth]&#123;image1.png&#125;</span><br><span class="line">        \caption&#123;Subfigure 1&#125;</span><br><span class="line">    \end&#123;subfigure&#125;</span><br><span class="line">    \quad</span><br><span class="line">    \begin&#123;subfigure&#125;&#123;0.3\textwidth&#125;</span><br><span class="line">        \includegraphics[width=\linewidth]&#123;image2.png&#125;</span><br><span class="line">        \caption&#123;Subfigure 2&#125;</span><br><span class="line">    \end&#123;subfigure&#125;</span><br><span class="line">    \caption&#123;Example with subfigures.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As shown in Figure \ref&#123;fig:example&#125;, subfigure \subref&#123;subfig:1&#125; is interesting.</span><br></pre></td></tr></table></figure><p>使用<code>\subref</code>引用子图</p><h5 id="nicefrac"><a href="#nicefrac" class="headerlink" title="\nicefrac"></a>\nicefrac</h5><p><code>\nicefrac</code>命令是由<code>nicefrac</code>宏包提供的。它用于生成更紧凑的分数符号，比如1/2、3/4等。通常在文本模式下使用，可以将其用于正文、标注或其他地方需要使用分数的场景。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;nicefrac&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    The result is \nicefrac&#123;1&#125;&#123;2&#125;.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="microtype"><a href="#microtype" class="headerlink" title="microtype"></a>microtype</h5><p><code>microtype</code>宏包提供了微调字距和字形的功能，以改善文本的排版效果。它可以自动调整字符之间的间距、字号和字形，以提高视觉效果和可读性。要使用<code>microtype</code>宏包，只需在导言区使用<code>\usepackage&#123;microtype&#125;</code>命令导入即可。</p><h5 id="fancyhdr"><a href="#fancyhdr" class="headerlink" title="fancyhdr"></a>fancyhdr</h5><p><code>fancyhdr</code>宏包用于自定义页眉和页脚的样式。它允许在页面的顶部和底部添加自定义内容，如文档标题、章节标题、页码等。通过使用<code>fancyhdr</code>宏包，您可以灵活地控制和设计页面的页眉和页脚。要使用<code>fancyhdr</code>宏包，只需在导言区使用<code>\usepackage&#123;fancyhdr&#125;</code>命令导入即可。</p><h3 id="画表格"><a href="#画表格" class="headerlink" title="画表格"></a>画表格</h3><p>三线表在论文里面基本是必须的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tabular&#125;[⟨align⟩]&#123;⟨column-spec⟩&#125;</span><br><span class="line">⟨item1⟩ &amp; ⟨item2⟩ &amp; … \\</span><br><span class="line">\hline</span><br><span class="line">⟨item1⟩ &amp; ⟨item2⟩ &amp; … \\</span><br><span class="line">\end&#123;tabular&#125;</span><br></pre></td></tr></table></figure><p>表格有个列格式,包括l,c,r,p以及|和@{}.每行的数目不能多于列格式个数.还有简单法\</p><p>*{n}{<column-spec\>}.另外<code>\hline</code>可以用于绘制横线,但现在多用<code>\cline</code>替代可以绘制跨越部分单元格的横线.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">4 &amp; 9 &amp; 2 \\ \cline&#123;2-3&#125;</span><br><span class="line">3 &amp; 5 &amp; 7 \\ \cline&#123;1-1&#125;</span><br><span class="line">8 &amp; 1 &amp; 6 \\ \hline</span><br><span class="line">\end&#123;tabular&#125;</span><br></pre></td></tr></table></figure><blockquote><p>科技论文排版中广泛应用的表格形式是三线表，形式干净简明。三线表由 booktabs 宏包 支持，它提供了 \toprule、\midrule 和 \bottomrule 命令用以排版三线表的三条线，以及和 \cline 对应的 \cmidrule。除此之外，最好不要用其它横线以及竖线</p></blockquote><p>合并单元格可以使用<code>\multicolumn&#123;&lt;n&gt;&#125;&#123;&lt;column-spec&gt;&#125;&#123;&lt;item&gt;&#125;</code>以及<code>\multirow&#123;⟨n⟩&#125;&#123;⟨width⟩&#125;&#123;⟨item⟩&#125;</code></p><p>⟨width⟩ 为合并后单元格的宽度，可以填 * 以使用自然宽度</p><p><code>\cmidrule</code> 命令用于绘制带有中间规格线的表格。其中，<code>&lt;trim&gt;</code> 是用于控制规格线修剪的参数。</p><p><code>&lt;trim&gt;</code> 可以是以下几种取值之一：</p><ul><li><code>l</code>: 在左侧修剪规格线，使其不与左边界相连。</li><li><code>r</code>: 在右侧修剪规格线，使其不与右边界相连。</li><li><code>lr</code>: 在左右两侧修剪规格线，使其不与左右边界相连。</li></ul><p>或者在线生成<a href="https://www.tablesgenerator.com/">Create LaTeX tables online – TablesGenerator.com</a></p><h3 id="数字符号控制"><a href="#数字符号控制" class="headerlink" title="数字符号控制"></a>数字符号控制</h3><p>一些数字符号的形态在不同地方需要不一样,比如公式中</p><p>一般来说，不同的数学字体往往带有不同的语义，如矩阵、向量等常会使用粗体或粗斜体， 而数集常会使用 <code>\mathbb</code>表示。出于内容与格式分离以及方便书写的考虑，可以为它们定义新 的命令。</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240331213806915.png" alt="image-20240331213806915"></p><p>对于数学符号加粗,使用<code>\mathbf</code>获得直立加粗,也可以使用<code>bm</code>  宏包提供的<code>\bm</code>  命令得到粗斜体.<a href="https://www.cnblogs.com/make217/p/6123532.html">非常有用的LaTeX字体设置 - morxio - 博客园 (cnblogs.com)</a></p><h3 id="浮动体"><a href="#浮动体" class="headerlink" title="浮动体"></a>浮动体</h3><p>内容丰富的文章或者书籍往往包含许多图片和表格等内容。这些内容的尺寸往往太大，导致 分页困难。LATEX 为此引入了浮动体的机制，令大块的内容可以脱离上下文，放置在合适的位置</p><p>LATEX 预定义了两类浮动体环境 <strong>figure</strong> 和 <strong>table</strong>。习惯上 figure 里放图片，table 里放表格，但并没有严格限制，可以在任何一个浮动体里放置文字、公式、表格、图片等等任意内容</p><ul><li>h 当前位置（代码所处的上下文）</li><li>t 顶部 </li><li>b 底部 </li><li>p 单独成页</li><li>! 在决定位置时忽视限制</li></ul><p>双栏排版环境下，LATEX 提供了 table<em> 和 figure</em> 环境用来排版跨栏的浮动体。它们的用法与 table 和 figure 一样，不同之处为双栏的 ⟨placement⟩ 参数只能用 tp 两个位置.</p><p>浮动体的位置选取受到先后顺序的限制。如果某个浮动体由于参数限制、空间限制等原因在 当前页无法放置，就要推迟到之后处理，并使得之后的同类浮动体一并推迟。<code>\clearpage</code>命令会在另起一页之前，先将所有推迟处理的浮动体排版成页，此时 htbp 等位置限制被完全忽略。 </p><p>float 宏包为浮动体提供了 H 位置参数，不与 htbp 及 ! 混用。使用 H 位置参数时，会取消浮动机制，将浮动体视为一般的盒子插入当前位置。这在一些特殊情况下很有用（如使用 multicol 宏包排版分栏内容的时候），但尺寸过大的浮动体可能使得分页比较困难。</p><h3 id="标题页"><a href="#标题页" class="headerlink" title="标题页"></a>标题页</h3><p>LATEX 支持生成简单的标题页。首先需要给定标题和作者等信息： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\title&#123;⟨title⟩&#125; \author&#123;⟨author⟩&#125; \date&#123;⟨date⟩&#125;</span><br></pre></td></tr></table></figure><p>其中前两个命令是必须的（不用 \title 会报错；不用 \author 会警告），\date 命令可选。LATEX 还提供了一个 \today 命令自动生成当前日期，\date 默认使用 \today。</p><p><strong>在 \title、\author 等命令内可以使用 \thanks 命令生成标题页的脚注</strong>，用 \and 隔开多个人名。</p><h3 id="公式环境"><a href="#公式环境" class="headerlink" title="公式环境"></a>公式环境</h3><p>多行公式,amsmath 宏包的 <strong>multline 环境</strong>提供了书写折行长公式的方便环境。它允许用 \ 折行，将 公式编号放在最后一行。多行公式的首行左对齐，末行右对齐，其余行居中。多行公式的首行左对齐，末行右对齐，其余行居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;multline&#125;</span><br><span class="line">a + b + c + d + e + f</span><br><span class="line">+ g + h + i \\</span><br><span class="line">= j + k + l + m + n\\</span><br><span class="line">= o + p + q + r + s\\</span><br><span class="line">= t + u + v + x + z</span><br><span class="line">\end&#123;multline&#125;</span><br></pre></td></tr></table></figure><p>最常用的是 <strong>align 环境</strong>，它将公式用 &amp; 隔为两部分并对齐。分隔符通常放在等号左边</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">a =&#123;&#125; &amp; b + c \\</span><br><span class="line">=&#123;&#125; &amp; d + e + f + g + h + i</span><br><span class="line">+ j + k + l \notag \\</span><br><span class="line">&amp; + m + n + o \\</span><br><span class="line">=&#123;&#125; &amp; p + q + r + s</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure><p>align 环境会给每行公式都编号。然可以用 \notag 去掉某行的编号。为了对齐等号，将分隔符放在右侧，并且此时需要在等号后添加一对括号 {} 以产生正常的 间距</p><p>align 还能够对齐多组公式，除等号前的 &amp; 之外，公式之间也用 &amp; 分隔</p><p>如果不需要按等号对齐，只需罗列数个公式，<strong>gather</strong> 将是一个很好用的环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;gather&#125;</span><br><span class="line">a = b + c \\</span><br><span class="line">d = e + f + g \\</span><br><span class="line">h + i = j + k \notag \\</span><br><span class="line">l + m = n</span><br><span class="line">\end&#123;gather&#125;</span><br></pre></td></tr></table></figure><p>align 和 gather 有对应的不带编号的版本 align<em> 和 gather</em>。</p><p>另一个常见的需求是<strong>将多个公式组在一起公用一个编号，编号位于公式的居中位置</strong>。为此， amsmath 宏包提供了诸如 aligned、gathered 等环境，与 equation 环境套用。以 -ed 结尾的 环境用法与前一节不以 -ed 结尾的环境用法一一对应</p><p>amsmath 宏包提供了诸如 aligned、gathered 等环境，与 equation 环境套用。以 -ed 结尾的 环境用法与前一节不以 -ed 结尾的环境用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c \\</span><br><span class="line">d &amp;= e + f + g \\</span><br><span class="line">h + i &amp;= j + k \\</span><br><span class="line">l + m &amp;= n</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><p>区别是 split 只能 将每行的一个公式分两栏,aligned 允许每行多个公式多栏.</p><h3 id="空格与分段"><a href="#空格与分段" class="headerlink" title="空格与分段"></a>空格与分段</h3><p>空格键和 Tab 键输入的空白字符视为“空格”。连续的若干个空白字符视为一个空格。<strong>一行开头的空格忽略不计</strong>。</p><p><strong>行末的换行符视为一个空格</strong>；但连续两个换行符，<strong>也就是空行，会将文字分段。多个空行被 视为一个空行。也可以在行末使用 \par 命令分段</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It&#x27;s difficult to find \ldots\\</span><br><span class="line">It&#x27;s dif&#123;&#125;f&#123;&#125;icult to f&#123;&#125;ind \ldots</span><br></pre></td></tr></table></figure><h3 id="断行和断页"><a href="#断行和断页" class="headerlink" title="断行和断页"></a>断行和断页</h3><p>文字在单词间的“空格”处断行时，“空格”生成的间距随之舍去。我们可以使用字符 ~ 输入一个不会断行的空格.常用于图标等引用,这样使它们断行时在一起.</p><p>手动断行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\[⟨length⟩] \\*[⟨length⟩]</span><br><span class="line">\newline</span><br></pre></td></tr></table></figure><p>\ 可以带可选参数 ⟨length⟩，用于在断行处向下增加垂直间距（见 5.3.5 小节），而 \newline 不带可选参数；二是 \ 也在表格、公式等地方用于换行，而 \newline 只用于文本段落中。带星号的 \ 表示禁止在断行处分页</p><p>​    </p><p>断页的命令有两个： \newpage \clearpage</p><p>第一，在双栏排版模式中 \newpage 起到另起一栏的作用，\clearpage 则能够另起一页；第二，在涉及浮动体的排版上行为不同</p><h3 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\setlength&#123;\leftskip&#125;&#123;⟨length⟩&#125;</span><br><span class="line">\setlength&#123;\rightskip&#125;&#123;⟨length⟩&#125;</span><br><span class="line">\setlength&#123;\parindent&#125;&#123;⟨length⟩&#125;</span><br></pre></td></tr></table></figure><p>LATEX 还默认在 \chapter、\section 等章节标题命令之后的第一段不缩进,可以调用 indentfirst 宏包，令第一段的首行缩进照常。</p><p>段落间的垂直间距为 \parskip，如设置段落间距在 0.8ex 到 1.5ex 变动： \setlength{\parskip}{1ex plus 0.5ex minus 0.2ex}</p><p>设置段落的左缩进、右缩进和首行缩进,和设置行距的命令一样，在分段时生效</p><p>默认为将单词之间的“空格”转化为水平间距。如果需要在文中手动插入额外的水平间距，可使用 \hspace 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This\hspace&#123;1.5cm&#125;is a space</span><br><span class="line">of 1.5 cm.</span><br></pre></td></tr></table></figure><p>可以使用\stretch{⟨n⟩} 生成一个特殊弹性长度，参数 ⟨n⟩ 为权重。它的基础长度为 0pt，但可 以无限延伸，直到占满可用的空间。如果同一行内出现多个 \stretch{⟨n⟩}，这一行的所有可用 空间将按每个 \stretch 命令给定的权重 ⟨n⟩ 进行分配。 命令 \fill 相当于 \stretch{1}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x\hspace&#123;\stretch&#123;1&#125;&#125;</span><br><span class="line">x\hspace&#123;\stretch&#123;3&#125;&#125;</span><br><span class="line">x\hspace&#123;\fill&#125;x</span><br></pre></td></tr></table></figure><p>如果我们想要人为地增加段落之间的垂直间距，可以在两个段落之间的位置使用 <code>\vspace</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A paragraph.</span><br><span class="line">\vspace&#123;2ex&#125;</span><br><span class="line">Another paragraph.</span><br></pre></td></tr></table></figure><p>\vspace 命令生成的垂直间距在一页的顶端或底端可能被“吞掉”，类似 \hspace 在一行的 开头和末尾那样。对应地，\vspace* 命令产生不会因断页而消失的垂直间距。\vspace 也可用 \stretch 设置无限延伸的垂直长度。</p><h3 id="页眉页脚"><a href="#页眉页脚" class="headerlink" title="页眉页脚"></a>页眉页脚</h3><p>命令 <code>\pagestyle</code> 来修改页眉页脚的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\pagestyle&#123;⟨page-style⟩&#125;</span><br></pre></td></tr></table></figure><p>  <code>\thispagestyle</code> 只影响当页的页眉页脚样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\thispagestyle&#123;⟨page-style⟩&#125;</span><br></pre></td></tr></table></figure><p>预定义的页眉页脚样式如下</p><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240402151922023.png" alt="image-20240402151922023"></p><p>article 文档类，twoside 选项 偶数页为页码和节标题，奇数页为小节标题和页码</p><p>article 文档类，oneside 选项 页眉为节标题和页码；</p><p>\pagenumbering 命令令能够改变页眉页脚中的页码样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\pagenumbering&#123;⟨style⟩&#125;</span><br></pre></td></tr></table></figure><p>如果要手动更改页眉页脚的内容,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\markright&#123;⟨right-mark⟩&#125;</span><br><span class="line">\markboth&#123;⟨left-mark⟩&#125;&#123;⟨right-mark⟩&#125;</span><br></pre></td></tr></table></figure><p>LATEX 默认将页眉的内容都转为大写字母。如果需要保持字母的大小写，可以尝试以下代码  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\renewcommand\chaptermark[1]&#123;% \markboth&#123;Chapter \thechapter\quad #1&#125;&#123;&#125;&#125; \renewcommand\sectionmark[1]&#123;% \markright&#123;\thesection\quad #1&#125;&#125;</span><br></pre></td></tr></table></figure><p>对于 article 文档类，与两个页眉相关的命令分别为 \sectionmark 和 \subsectionmark。</p><p>可以使用fancyhdr定义页眉页脚,命令为: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\fancyhf[⟨position⟩]&#123;…&#125; \fancyhead[⟨position⟩]&#123;…&#125; \fancyfoot[⟨position⟩]&#123;…&#125;</span><br></pre></td></tr></table></figure><p>⟨position⟩ 为 L（左）/ C（中）/ R（右）以及与 O（奇数页）/ E（偶数页）字母的组合.</p><p>\fancyhf 用于同时定义页眉和页脚，习惯上使用 \fancyhf{} 来清空页眉页脚的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">% 在导言区使用此代码</span><br><span class="line">\usepackage&#123;fancyhdr&#125;</span><br><span class="line">\pagestyle&#123;fancy&#125;</span><br><span class="line">\renewcommand&#123;\chaptermark&#125;[1]&#123;\markboth&#123;#1&#125;&#123;&#125;&#125;</span><br><span class="line">\renewcommand&#123;\sectionmark&#125;[1]&#123;\markright&#123;\thesection\ #1&#125;&#125;</span><br><span class="line">\fancyhf&#123;&#125;</span><br><span class="line">\fancyfoot[C]&#123;\bfseries\thepage&#125;</span><br><span class="line">\fancyhead[LO]&#123;\bfseries\rightmark&#125;</span><br><span class="line">\fancyhead[RE]&#123;\bfseries\leftmark&#125;</span><br><span class="line">\renewcommand&#123;\headrulewidth&#125;&#123;0.4pt&#125; % 注意不用 \setlength</span><br><span class="line">\renewcommand&#123;\footrulewidth&#125;&#123;0pt&#125;</span><br></pre></td></tr></table></figure><p>fancyhdr 还支持用 \fancypagestyle 为自定义的页眉页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\fancypagestyle&#123;myfancy&#125;&#123;% \fancyhf&#123;&#125; \fancyhead&#123;...&#125; \fancyfoot&#123;...&#125; &#125; % 使用样式 </span><br><span class="line">\pagestyle&#123;myfancy&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>手工方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\cite&#123;⟨citation⟩&#125;</span><br><span class="line">\begin&#123;thebibliography&#125;&#123;⟨widest label⟩&#125;</span><br><span class="line">\bibitem[⟨item number⟩]&#123;⟨citation⟩&#125; ...</span><br><span class="line">\end&#123;thebibliography&#125;</span><br></pre></td></tr></table></figure><p>使用bibtex,</p><p>第一步：准备一份 BIBTEX 数据库，假设数据库文件名为 books.bib，和 LATEX 源代码一般 位于同一个目录下</p><p>第二步：在源代码中添加必要的命令。假设源代码名为 demo.tex</p><ol><li>首先需要使用命令 \bibliographystyle 设定参考文献的格式。 </li><li>其次，在<strong>正文中引用参考文献</strong>。</li><li>BIBTEX 程序在生成参考文献列表的时候，通常只列出用了 \cite 命令引用的那些。<strong>如果需要列出未被引用的文献，则需要 \nocite{⟨citation⟩} 命令； 而 \nocite{*} 则让所有未被引用的文献都列出</strong>。 </li><li>再次，在需要列出参考文献的位置，使用 \bibliography 命令代替 thebibliography 环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\bibliography&#123;⟨bib-name⟩&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://proanimer-img.oss-cn-shanghai.aliyuncs.com/alimg/image-20240402171725286.png" alt="image-20240402171725286" style="zoom:50%;" /></p><p>时下许多学术期刊比较喜欢使用人名——年份的引用方式，形如 (Axford et al., 2013)。natbib 宏包提供了对这种“自然”引用方式的处理。 除了 \cite 之外，natbib 宏包在正文中支持两种引用方式.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\citep&#123;⟨citation⟩&#125;</span><br><span class="line">\citet&#123;⟨citation⟩&#125;</span><br></pre></td></tr></table></figure><p>它们分别生成形如 (Axford et al., 2013) 和 Axford et al. (2013) 的人名——年份引用,</p><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><p>LATEX 本身不支持插图功能，需要由 <strong>graphicx 宏包</strong>辅助支持</p><p>我看通常使用的是pdf引入.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> \begin&#123;figure&#125;[t]</span><br><span class="line">  \centering</span><br><span class="line">  \includegraphics[width=\linewidth]&#123;imgs/temporal.pdf&#125;</span><br><span class="line">  \caption&#123;(a) The architecture of the proposed CIA component, including selective information filtering (\textit&#123;left&#125;) and spatio-temporal feature integration (\textit&#123;middle&#125;). (b) The multi-scale convolutional structure in the pyramid LSTM.</span><br><span class="line">  &#125;</span><br><span class="line">  \label&#123;temporal&#125;</span><br><span class="line">  \vspace&#123;-9pt&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><p>需要[t]表示在当页的顶部.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\includegraphics[⟨options⟩]&#123;⟨filename⟩&#125;</span><br></pre></td></tr></table></figure><p>文件名可能需要用相对路径或绝对路径表示。图片文件的扩展名一般可不写。另外一定要注意，文件名里既不要空格（类似 \include），也不要有多余的英文点号。另外 graphicx 宏包还提供了 \graphicspath 命令，用于声明一个或多个图片文件存放的目 录，使用这些目录里的图片时可不用写路径</p><h3 id="定义新命令"><a href="#定义新命令" class="headerlink" title="定义新命令"></a>定义新命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\newcommand&#123;\⟨name⟩&#125;[⟨num⟩]&#123;⟨definition⟩&#125;</span><br></pre></td></tr></table></figure><p><code>\newcommand</code> 的基本用法需要两个必选参数，第一个参数 ⟨name⟩ 是要定义的命令名称（带反斜线），第二个参数 ⟨definition⟩ 是命令的具体定义。方括号里的参数 ⟨num⟩ 是可选的，用于指定 新命令所需的参数数目（最多 9 个）。如果缺省可选参数，默认就是 0，也就是新定义的命令不带任何参数,如果使用多参数的话,在命令的定义中，标记 #1 代表指定的参数。 如果想使用多个参数，可以依次使用 #2、……、#9 等标记.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newcommand&#123;\sayHello&#125;[2]&#123;</span><br><span class="line">    Hi!\emph&#123;#1&#125;</span><br><span class="line">&#125;</span><br><span class="line">\sayHello&#123;Jack&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LATEX 不允许使用 \newcommand 定义一个与现有命令重名的命令。</p><p>如果需要修改命令定义 的话，使用 \renewcommand 命令。</p><p>它使用与命令 \newcommand 相同的语法。 </p><p>在某些情况之下，使用 \providecommand 命令是一种比较理想的方案：<strong>在命令未定义时，它相当于 \newcommand；在命令已定义时，沿用已有的定义</strong></p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>lshort<a href="https://github.com/CTeX-org/lshort-zh-cn/releases">Releases · CTeX-org/lshort-zh-cn (github.com)</a></li><li><a href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes">Learn LaTeX in 30 minutes - Overleaf, Online LaTeX Editor</a></li><li><a href="https://dmackinnon1.github.io/LaTeX101/">LaTeX101 (dmackinnon1.github.io)</a></li><li><a href="https://www.ctan.org/topic/class">CTAN: Class</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过阅读一系列文章,分析摘要、介绍每个section的组织形式,方便写出一些列现代八股文.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>attention mechanisms in CV</title>
    <link href="https://www.sekyoro.top/2024/03/03/attention-mechanisms-in-CV/"/>
    <id>https://www.sekyoro.top/2024/03/03/attention-mechanisms-in-CV/</id>
    <published>2024-03-03T07:19:50.000Z</published>
    <updated>2024-03-12T09:30:39.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>主要是在视觉领域以及二维的feature map上的注意力机制,不同于1D数据,一般不会用q,k,v来算.总结一下cv中attention的发展.</p><span id="more"></span><h2 id="Coordinate-Attention"><a href="#Coordinate-Attention" class="headerlink" title="Coordinate Attention"></a>Coordinate Attention</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://arxiv.org/pdf/2111.07624.pdf">2111.07624.pdf (arxiv.org)</a> 综述</li><li><a href="https://arxiv.org/pdf/2112.05561.pdf">2112.05561.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1807.06521.pdf">1807.06521.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/2103.02907.pdf">2103.02907.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1811.11721.pdf">1811.11721.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1711.07971.pdf">arxiv.org/pdf/1711.07971.pdf</a></li><li><a href="https://arxiv.org/pdf/1709.01507.pdf">1709.01507.pdf (arxiv.org)</a></li><li><a href="https://arxiv.org/pdf/1903.06586.pdf">1903.06586.pdf (arxiv.org)</a></li><li><a href="https://mlrad.io/combining-convolution-and-attention-mechanisms">Convolution-Attention Mechanism Fusion (mlrad.io)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是在视觉领域以及二维的feature map上的注意力机制,不同于1D数据,一般不会用q,k,v来算.总结一下cv中attention的发展.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>再回看扩散模型</title>
    <link href="https://www.sekyoro.top/2024/02/23/%E5%86%8D%E5%9B%9E%E7%9C%8B%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/"/>
    <id>https://www.sekyoro.top/2024/02/23/%E5%86%8D%E5%9B%9E%E7%9C%8B%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-02-23T08:53:30.000Z</published>
    <updated>2024-02-24T03:55:44.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近OpenAI的Sora模型又大火了一把,据说背后的技术是transformer+diffusion.之前我也大致介绍过stable diffusion的过程,这里我再稍微详细介绍一下经典的扩散模型以及改进之后的DDIM.其中我也有很多不太明白的,只有结合代码理解了.<br><span id="more"></span></p><p>相关论文<a href="https://arxiv.org/abs/2006.11239">[2006.11239] Denoising Diffusion Probabilistic Models (arxiv.org)</a>与<a href="https://arxiv.org/abs/2010.02502">[2010.02502] Denoising Diffusion Implicit Models (arxiv.org)</a>,<a href="https://arxiv.org/pdf/2112.10752.pdf">2112.10752.pdf (arxiv.org)</a></p><blockquote><p>Stable Diffusion is a latent text-to-image diffusion model.</p></blockquote><p>已经提出了几种基于扩散的生成模型，其下有类似的想法，包括扩散概率模型、噪声条件评分网络和去噪扩散概率模型。现在常说的基于扩散的生成模型通常指的后者DDPM或者改进的DDIM.</p><h2 id="前向扩散过程"><a href="#前向扩散过程" class="headerlink" title="前向扩散过程"></a>前向扩散过程</h2><p><img data-src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/DDPM.png" alt="img"></p><script type="math/tex; mode=display">q(\mathbf{x}_t|\mathbf{x}_{t-1})=\mathcal{N}(\mathbf{x}_t;\sqrt{1-\beta_t}\mathbf{x}_{t-1},\beta_t\mathbf{I})\quad q(\mathbf{x}_{1:T}|\mathbf{x}_0)=\prod_{t=1}^Tq(\mathbf{x}_t|\mathbf{x}_{t-1})</script><p>所谓的扩散就是给图片(或者是特征,比如stable diffusion就是在所谓latent空间上进行扩散的)加噪声,所加的噪声按照一定分布.</p><p>前向过程为一个马尔科夫链,使用重参数化(在VAE中也有),可以表示为</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{x}_t&=\sqrt{\alpha_t}\mathbf{x}_{t-1}+\sqrt{1-\alpha_t}\boldsymbol{\epsilon}_{t-1}&&\text{;where }\boldsymbol{\epsilon}_{t-1},\boldsymbol{\epsilon}_{t-2},\cdots\sim\mathcal{N}(\boldsymbol{0},\mathbf{I})\\&=\sqrt{\alpha_t\alpha_{t-1}}\mathbf{x}_{t-2}+\sqrt{1-\alpha_t\alpha_{t-1}}\boldsymbol{\bar{\epsilon}}_{t-2}&&\text{;where }\boldsymbol{\bar{\boldsymbol{\epsilon}}}_{t-2}\text{ merges two Gaussians }(*).\\&=\ldots\\&=\sqrt{\alpha}_t\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}&&\text{j}\\q(\mathbf{x}_t|\mathbf{x}_0)&=\mathcal{N}(\mathbf{x}_t;\sqrt{\alpha}_t\mathbf{x}_0,(1-\bar{\alpha}_t)\mathbf{I})\end{aligned}</script><p>其中α=1-β.$\bar{\alpha}<em>{t}=\prod</em>{i=1}^{t}\alpha_{i}$,β是从0到1中间的采样值,比如0.01,0.02..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_beta_schedule</span>(<span class="params">timesteps, start=<span class="number">0.0001</span>, end=<span class="number">0.02</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(start, end, timesteps)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_from_list</span>(<span class="params">vals, t, x_shape</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Returns a specific index t of a passed list of values vals</span></span><br><span class="line"><span class="string">    while considering the batch dimension.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    batch_size = t.shape[<span class="number">0</span>]</span><br><span class="line">    out = vals.gather(-<span class="number">1</span>, t.cpu())</span><br><span class="line">    <span class="keyword">return</span> out.reshape(batch_size, *((<span class="number">1</span>,) * (<span class="built_in">len</span>(x_shape) - <span class="number">1</span>))).to(t.device)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_diffusion_sample</span>(<span class="params">x_0, t, device=<span class="string">&quot;cpu&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Takes an image and a timestep as input and </span></span><br><span class="line"><span class="string">    returns the noisy version of it</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    noise = torch.randn_like(x_0)</span><br><span class="line">    sqrt_alphas_cumprod_t = get_index_from_list(sqrt_alphas_cumprod, t, x_0.shape)</span><br><span class="line">    sqrt_one_minus_alphas_cumprod_t = get_index_from_list(</span><br><span class="line">        sqrt_one_minus_alphas_cumprod, t, x_0.shape</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># mean + variance</span></span><br><span class="line">    <span class="keyword">return</span> sqrt_alphas_cumprod_t.to(device) * x_0.to(device) \</span><br><span class="line">    + sqrt_one_minus_alphas_cumprod_t.to(device) * noise.to(device), noise.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define beta schedule</span></span><br><span class="line">T = <span class="number">300</span></span><br><span class="line">betas = linear_beta_schedule(timesteps=T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-calculate different terms for closed form</span></span><br><span class="line">alphas = <span class="number">1.</span> - betas</span><br><span class="line">alphas_cumprod = torch.cumprod(alphas, axis=<span class="number">0</span>)</span><br><span class="line">alphas_cumprod_prev = F.pad(alphas_cumprod[:-<span class="number">1</span>], (<span class="number">1</span>, <span class="number">0</span>), value=<span class="number">1.0</span>)</span><br><span class="line">sqrt_recip_alphas = torch.sqrt(<span class="number">1.0</span> / alphas)</span><br><span class="line">sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)</span><br><span class="line">sqrt_one_minus_alphas_cumprod = torch.sqrt(<span class="number">1.</span> - alphas_cumprod)</span><br><span class="line">posterior_variance = betas * (<span class="number">1.</span> - alphas_cumprod_prev) / (<span class="number">1.</span> - alphas_cumprod)</span><br></pre></td></tr></table></figure><p>加噪声的schedule有多种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_beta_schedule</span>(<span class="params">timesteps, s=<span class="number">0.008</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    cosine schedule as proposed in https://arxiv.org/abs/2102.09672</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    steps = timesteps + <span class="number">1</span></span><br><span class="line">    x = torch.linspace(<span class="number">0</span>, timesteps, steps)</span><br><span class="line">    alphas_cumprod = torch.cos(((x / timesteps) + s) / (<span class="number">1</span> + s) * torch.pi * <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line">    alphas_cumprod = alphas_cumprod / alphas_cumprod[<span class="number">0</span>]</span><br><span class="line">    betas = <span class="number">1</span> - (alphas_cumprod[<span class="number">1</span>:] / alphas_cumprod[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> torch.clip(betas, <span class="number">0.0001</span>, <span class="number">0.9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(beta_start, beta_end, timesteps)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">return</span> torch.linspace(beta_start**<span class="number">0.5</span>, beta_end**<span class="number">0.5</span>, timesteps) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_beta_schedule</span>(<span class="params">timesteps</span>):</span></span><br><span class="line">    beta_start = <span class="number">0.0001</span></span><br><span class="line">    beta_end = <span class="number">0.02</span></span><br><span class="line">    betas = torch.linspace(-<span class="number">6</span>, <span class="number">6</span>, timesteps)</span><br><span class="line">    <span class="keyword">return</span> torch.sigmoid(betas) * (beta_end - beta_start) + beta_start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反向扩散过程"><a href="#反向扩散过程" class="headerlink" title="反向扩散过程"></a>反向扩散过程</h2><p>如果能将上述过程反向,就能从高斯噪声图像得到一整图像了.也就是需要知道$q(\mathbf{x}<em>{t-1}|\mathbf{x}</em>{t})$,这跟贝叶斯有点关系,可以使用神经网络近似这个条件概率,以便运行反向扩散过程.</p><script type="math/tex; mode=display">p_\theta(\mathbf{x}_{0:T})=p(\mathbf{x}_T)\prod_{t=1}^Tp_\theta(\mathbf{x}_{t-1}|\mathbf{x}_t)\quad p_\theta(\mathbf{x}_{t-1}|\mathbf{x}_t)=\mathcal{N}(\mathbf{x}_{t-1};\boldsymbol{\mu}_\theta(\mathbf{x}_t,t),\boldsymbol{\Sigma}_\theta(\mathbf{x}_t,t))</script><p>假设反向也是高斯,可以有条件概率</p><script type="math/tex; mode=display">q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_{t-1};\tilde{\boldsymbol{\mu}}(\mathbf{x}_t,\mathbf{x}_0),\color{red}{\tilde{\boldsymbol{\beta}}_t}\mathbf{I})</script><p>使用贝叶斯</p><script type="math/tex; mode=display">\begin{aligned}q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)& =q(\mathbf{x}_t|\mathbf{x}_{t-1},\mathbf{x}_0)\frac{q(\mathbf{x}_{t-1}|\mathbf{x}_0)}{q(\mathbf{x}_t|\mathbf{x}_0)}  \\&\propto\exp\left(-\frac12(\frac{(\mathbf{x}_t-\sqrt{\alpha_t}\mathbf{x}_{t-1})^2}{\beta_t}+\frac{(\mathbf{x}_{t-1}-\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0)^2}{1-\bar{\alpha}_{t-1}}-\frac{(\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0)^2}{1-\bar{\alpha}_t})\right) \\&=\exp\left(-\frac12(\frac{\mathbf{x}_t^2-2\sqrt{\alpha_t}\mathbf{x}_t\mathbf{x}_{t-1}+\alpha_t\mathbf{x}_{t-1}^2}{\beta_t}+\frac{\mathbf{x}_{t-1}^2-2\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0\mathbf{x}_{t-1}+\bar{\alpha}_{t-1}\mathbf{x}_0^2}{1-\bar{\alpha}_{t-1}}-\frac{(\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0)^2}{1-\bar{\alpha}_t})\right) \\&\left.=\exp\left(-\frac12(\color{red}{(\frac{\alpha_t}{\beta_t}+\frac1{1-\bar{\alpha}_{t-1}})x_{t-1}^2-(\frac{2\sqrt{\alpha_t}}{\beta_t}x_t+\frac{2\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}x_0)x_{t-1}+C(\mathbf{x}_t,\mathbf{x}_0)}\right)\right)\end{aligned}</script><p>根据一堆公式计算(这不是我擅长的),得到均值和方差.</p><script type="math/tex; mode=display">\begin{aligned}\tilde{\beta}_{t}& =1/(\frac{\alpha_t}{\beta_t}+\frac{1}{1-\bar{\alpha}_{t-1}})=1/(\frac{\alpha_t-\bar{\alpha}_t+\beta_t}{\beta_t(1-\bar{\alpha}_{t-1})})=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t  \\\tilde{\boldsymbol{\mu}}_t(\mathbf{x}_t,\mathbf{x}_0)& =(\frac{\sqrt{\alpha_t}}{\beta_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}\mathbf{x}_0)/(\frac{\alpha_t}{\beta_t}+\frac{1}{1-\bar{\alpha}_{t-1}})  \\&=(\frac{\sqrt{\alpha_t}}{\beta_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}}{1-\bar{\alpha}_{t-1}}\mathbf{x}_0)\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t \\&=\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\mathbf{x}_0\end{aligned}</script><p>由于$\mathbf{x}_0=\frac1{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t-\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t)$,有均值如下:</p><script type="math/tex; mode=display">\begin{aligned}\tilde{\boldsymbol{\mu}}_{t}& =\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\frac{1}{\sqrt{\bar{\alpha}_t}}(\mathbf{x}_t-\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t)  \\&=\color{red}{\frac1{\sqrt{\alpha_t}}\left(x_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\epsilon_t\right)}\end{aligned}</script><p>所以需要训练一个神经网络拟合这个概率分布,使用重参数化技巧,前向加噪声后,利用得到的图像数据得到高斯分布的参数μ</p><script type="math/tex; mode=display">\begin{aligned}\boldsymbol{\mu}_{\theta}(\mathbf{x}_{t},t)& =\color{red}{\frac1{\sqrt{\alpha_t}}\left(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\right)}  \\\Gamma\mathrm{hus~}\mathbf{x}_{t-1}& =\mathcal{N}(\mathbf{x}_{t-1};\frac{1}{\sqrt{\alpha_{t}}}\left(\mathbf{x}_{t}-\frac{1-\alpha_{t}}{\sqrt{1-\bar{\alpha}_{t}}}\boldsymbol{\epsilon}_{\theta}(\mathbf{x}_{t},t)\right),\boldsymbol{\Sigma}_{\theta}(\mathbf{x}_{t},t)) \end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}L_{t}& =\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac{1}{2\|\boldsymbol{\Sigma}_\theta(\mathbf{x}_t,t)\|_2^2}\|\tilde{\boldsymbol{\mu}}_t(\mathbf{x}_t,\mathbf{x}_0)-\boldsymbol{\mu}_\theta(\mathbf{x}_t,t)\|^2\Big]  \\&=\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac1{2\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\color{red}{\frac1{\sqrt{\alpha_t}}\left(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}}\boldsymbol{\epsilon}_t\right)}-\frac1{\sqrt{\alpha_t}}\Big(\mathbf{x}_t-\frac{1-\alpha_t}{\sqrt{1-\bar{\alpha}_t}} \\&=\mathbb{E}_{\mathbf{x}_0,\boldsymbol{\epsilon}}\Big[\frac{(1-\alpha_t)^2}{2\alpha_t(1-\bar{\alpha}_t)\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\Big] \\&=\mathbb{E}_{\mathbf{x}_0,\epsilon}\Big[\frac{(1-\alpha_t)^2}{2\alpha_t(1-\bar{\alpha}_t)\|\boldsymbol{\Sigma}_\theta\|_2^2}\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\Big]\end{aligned}</script><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><script type="math/tex; mode=display">\begin{aligned}L_{t}^{\operatorname{simple}}& =\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\boldsymbol{\epsilon}_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\right]  \\&=\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\boldsymbol{\epsilon}_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\right]\end{aligned}</script><p>最终目标优化函数</p><script type="math/tex; mode=display">L_\text{simple} = L_t^\text{simple} + C</script><p><img data-src="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/DDPM-algo.png" alt="img"></p><h2 id="加速扩散模型采样"><a href="#加速扩散模型采样" class="headerlink" title="加速扩散模型采样"></a>加速扩散模型采样</h2><p>DDPM生成样本很慢,可以通过经过多步后进行采样(也就是增加采样间隔),或者根据DDIM论文,跳过p(x~t~|x~t-1~)直接从p(x~t~|x~0~)出发.</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{X}_{t-1}& =\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}}\boldsymbol{\epsilon}_{t-1}  \\&=\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_t^2}\boldsymbol{\epsilon}_t+\sigma_t\boldsymbol{\epsilon} \\&=\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_t^2}\frac{\mathbf{x}_t-\sqrt{\bar{\alpha}_t}\mathbf{x}_0}{\sqrt{1-\bar{\alpha}_t}}+\sigma_t\boldsymbol{\epsilon} \\q_\sigma(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)& =\mathcal{N}(\mathbf{x}_{t-1};\sqrt{\bar{\alpha}_{t-1}}\mathbf{x}_{0}+\sqrt{1-\bar{\alpha}_{t-1}-\sigma_{t}^{2}}\frac{\mathbf{x}_{t}-\sqrt{\bar{\alpha}_{t}}\mathbf{x}_{0}}{\sqrt{1-\bar{\alpha}_{t}}},\sigma_{t}^{2}\mathbf{I}) \end{aligned}</script><script type="math/tex; mode=display">\tilde{\beta}_t=\sigma_t^2=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\cdot\beta_t</script><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://huggingface.co/blog/annotated-diffusion">The Annotated Diffusion Model (huggingface.co)</a></li><li><a href="https://colab.research.google.com/drive/1sjy9odlSSy0RBVgMTgP7s99NXsqglsUL?usp=sharing#scrollTo=qWw50ui9IZ5q">diffusion_model.ipynb - Colaboratory (google.com)</a></li><li><a href="https://github.com/cloneofsimo/minDiffusion/tree/master">cloneofsimo/minDiffusion: Self-contained, minimalistic implementation of diffusion models with Pytorch. (github.com)</a></li><li><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/">What are Diffusion Models? | Lil’Log (lilianweng.github.io)</a></li><li><a href="https://spaces.ac.cn/archives/9119">生成扩散模型漫谈（一）：DDPM = 拆楼 + 建楼 - 科学空间|Scientific Spaces</a></li><li><a href="https://sungsoo.github.io/2022/07/20/diffusion-model.html">Diffusion Models from Scratch in PyTorch (sungsoo.github.io)</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近OpenAI的Sora模型又大火了一把,据说背后的技术是transformer+diffusion.之前我也大致介绍过stable diffusion的过程,这里我再稍微详细介绍一下经典的扩散模型以及改进之后的DDIM.其中我也有很多不太明白的,只有结合代码理解了.&lt;br&gt;</summary>
    
    
    
    
    <category term="diffusion model" scheme="https://www.sekyoro.top/tags/diffusion-model/"/>
    
  </entry>
  
  <entry>
    <title>机器学习回顾:集成学习</title>
    <link href="https://www.sekyoro.top/2024/02/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.sekyoro.top/2024/02/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-02-22T15:49:54.000Z</published>
    <updated>2024-02-23T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>传统的机器学习方法,现在用得不多了(自我感觉).但是有必要稍微了解一下原理。<br><span id="more"></span></p><p>集成学习方法可以分为Bagging,Boosting以及Stacking.</p><p>Bagging也称为bootstrap聚合，是预测模型的多个版本的聚合。每个模型都是单独训练的，并使用平均过程进行组合。装袋的主要重点是实现比任何模型单独具有的方差更小的方差。</p><p>Bootstrapping 是从给定的数据集中生成自举样本的过程。样本是通过随机抽取数据点并进行替换而形成的。</p><p>重新采样的数据包含原始数据中作为一个整体的不同特征。它绘制了数据点中存在的分布，并且往往保持彼此不同，即数据分布必须保持完整，同时保持Bootstrapping 样本之间的不相似性.其实这跟目前深度学习中的样本增强等概念又何尝不同呢.</p><p>在Bagging中,首先创建自举样本.然后,对每个样本应用回归算法或分类算法.最后在回归的情况下,对个体学习者预测的所有输出取平均值.对于分类,要么接受投票最多的类别（硬投票）,要么将所有类别概率的最高平均值作为输出（软投票）</p><script type="math/tex; mode=display">\widehat{f_{bag}}=\widehat{f_1}\left(X\right)+\widehat{f_2}\left(X\right)+\cdots+\widehat{f_b}\left(X\right)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = model_selection.KFold(n_splits=<span class="number">10</span>, random_state=seed)</span><br><span class="line">cart = DecisionTreeClassifier()</span><br><span class="line">num_trees = <span class="number">100</span></span><br><span class="line">model = BaggingClassifier(base_estimator=cart,n_estimators=num_trees, random_state=seed)</span><br><span class="line"></span><br><span class="line">results = model_selection.cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(results.mean())</span><br></pre></td></tr></table></figure><p>Stacking是通过一个元分类器或者元回归器来整合多个分类模型或回归模型的集成学习技术。基础模型利用整个训练集做训练，元模型将基础模型的特征作为特征进行训练.感觉有点类似于元学习(meta learning)的概念.</p><p><img data-src="https://pic1.zhimg.com/80/v2-6a1eb954185433e79498dea9bf87e0e0_720w.webp" alt="img"></p><p>或者又可以分为顺序的和并行的训练器.不同的模型按顺序生成,之前模型的错误由后面的分类器学习.这旨在通过赋予错误标记的示例更高的权重（例如AdaBoost）来利用模型之间的相关性。</p><p> 并行训练器,其中基础模型是并行生成的.这通过平均错误来利用模型之间的独立性（例如随机森林）</p><p>这里主要介绍其中的Boosting,Boosting算法试图从几个较弱模型的错误中建立一个强大的学习者（预测模型）。首先从训练数据创建模型.然后通过尝试减少上一个模型中的错误,从上一个创建第二个模型.依次添加模型,每个模型都对其前身进行校正,直到训练数据得到完美预测或添加了最大数量的模型。</p><p>Boosting包括AdaBoost,Gradient Tree Boosting等等.</p><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><p>AdaBoost是一种非常流行的Boosting技术,旨在将多个弱分类器组合起来构建一个强分类器.弱分类器比随机猜测性能更好，但在为对象指定类方面仍然表现不佳。单个分类器可能无法准确预测对象的类别，但当我们将多个弱分类器分组，每个弱分类器从其他错误分类的对象中逐步学习时，我们可以建立一个这样的强模型。这里提到的分类器可以是任何基本分类器，从决策树（通常是默认的）到逻辑回归等。</p><p>步骤1：基于加权样本在训练数据之上进行弱分类器（例如decision stump）.每个样本的权重表明正确分类的重要性。最初，对于第一个stump,我们给予所有样本相等的权重。</p><p>第2步：我们为每个变量创建一个决策树桩,看看每个树桩将样本分类到目标类的效果如何.</p><p>步骤3：将更多的权重分配给分类错误的样本,以便在下一个决策阶段对其进行正确分类.权重也根据分类器的精度分配给每个分类器,这意味着高精度=高权重</p><p>第4步：从第2步开始重复,直到所有数据点都被正确分类,或者达到最大迭代级别.</p><p>首先给每个样本相同权重,计算得到的预测结果错误率,根据错误率得到α</p><script type="math/tex; mode=display">error = sum(w(i) * terror(i)) / sum(w) \\terror = 0 if(y == p), otherwise 1</script><script type="math/tex; mode=display">\alpha_t=\frac12ln\frac{(1-TotalError)}{TotalError}</script><p>然后对权重进行更新</p><script type="math/tex; mode=display">w_i=w_{i-1}*e^{\pm\alpha}</script><p>当预测输出和实际输出一致时（样本分类正确），Alpha为正。在这种情况下，我们减少了样权重，因为已经表现得很好了。</p><p>当预测输出与实际类别不一致时（即样本分类错误），Alpha为负值。在这种情况下需要增加样本权重，以便在下一个树桩中不会重复相同的错误分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on Nov 28, 2010</span></span><br><span class="line"><span class="string">Adaboost is short for Adaptive Boosting</span></span><br><span class="line"><span class="string">@author: Peter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadSimpData</span>():</span></span><br><span class="line">    datMat = matrix([[ <span class="number">1.</span> ,  <span class="number">2.1</span>],</span><br><span class="line">        [ <span class="number">2.</span> ,  <span class="number">1.1</span>],</span><br><span class="line">        [ <span class="number">1.3</span>,  <span class="number">1.</span> ],</span><br><span class="line">        [ <span class="number">1.</span> ,  <span class="number">1.</span> ],</span><br><span class="line">        [ <span class="number">2.</span> ,  <span class="number">1.</span> ]])</span><br><span class="line">    classLabels = [<span class="number">1.0</span>, <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    <span class="keyword">return</span> datMat,classLabels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span>(<span class="params">fileName</span>):</span>      <span class="comment">#general function to parse tab -delimited floats</span></span><br><span class="line">    numFeat = <span class="built_in">len</span>(<span class="built_in">open</span>(fileName).readline().split(<span class="string">&#x27;\t&#x27;</span>)) <span class="comment">#get number of fields </span></span><br><span class="line">    dataMat = []; labelMat = []</span><br><span class="line">    fr = <span class="built_in">open</span>(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        lineArr =[]</span><br><span class="line">        curLine = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numFeat-<span class="number">1</span>):</span><br><span class="line">            lineArr.append(<span class="built_in">float</span>(curLine[i]))</span><br><span class="line">        dataMat.append(lineArr)</span><br><span class="line">        labelMat.append(<span class="built_in">float</span>(curLine[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> dataMat,labelMat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stumpClassify</span>(<span class="params">dataMatrix,dimen,threshVal,threshIneq</span>):</span><span class="comment">#just classify the data</span></span><br><span class="line">    retArray = ones((shape(dataMatrix)[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> threshIneq == <span class="string">&#x27;lt&#x27;</span>:</span><br><span class="line">        retArray[dataMatrix[:,dimen] &lt;= threshVal] = -<span class="number">1.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        retArray[dataMatrix[:,dimen] &gt; threshVal] = -<span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> retArray</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildStump</span>(<span class="params">dataArr,classLabels,D</span>):</span></span><br><span class="line">    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T</span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    numSteps = <span class="number">10.0</span>; bestStump = &#123;&#125;; bestClasEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    minError = inf <span class="comment">#init error sum, to +infinity</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#loop over all dimensions</span></span><br><span class="line">        rangeMin = dataMatrix[:,i].<span class="built_in">min</span>(); rangeMax = dataMatrix[:,i].<span class="built_in">max</span>();</span><br><span class="line">        stepSize = (rangeMax-rangeMin)/numSteps</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>,<span class="built_in">int</span>(numSteps)+<span class="number">1</span>):<span class="comment">#loop over all range in current dimension</span></span><br><span class="line">            <span class="keyword">for</span> inequal <span class="keyword">in</span> [<span class="string">&#x27;lt&#x27;</span>, <span class="string">&#x27;gt&#x27;</span>]: <span class="comment">#go over less than and greater than</span></span><br><span class="line">                threshVal = (rangeMin + <span class="built_in">float</span>(j) * stepSize)</span><br><span class="line">                predictedVals = stumpClassify(dataMatrix,i,threshVal,inequal)<span class="comment">#call stump classify with i, j, lessThan</span></span><br><span class="line">                errArr = mat(ones((m,<span class="number">1</span>)))</span><br><span class="line">                errArr[predictedVals == labelMat] = <span class="number">0</span></span><br><span class="line">                weightedError = D.T*errArr  <span class="comment">#calc total error multiplied by D</span></span><br><span class="line">                <span class="comment">#print &quot;split: dim %d, thresh %.2f, thresh ineqal: %s, the weighted error is %.3f&quot; % (i, threshVal, inequal, weightedError)</span></span><br><span class="line">                <span class="keyword">if</span> weightedError &lt; minError:</span><br><span class="line">                    minError = weightedError</span><br><span class="line">                    bestClasEst = predictedVals.copy()</span><br><span class="line">                    bestStump[<span class="string">&#x27;dim&#x27;</span>] = i</span><br><span class="line">                    bestStump[<span class="string">&#x27;thresh&#x27;</span>] = threshVal</span><br><span class="line">                    bestStump[<span class="string">&#x27;ineq&#x27;</span>] = inequal</span><br><span class="line">    <span class="keyword">return</span> bestStump,minError,bestClasEst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaBoostTrainDS</span>(<span class="params">dataArr,classLabels,numIt=<span class="number">40</span></span>):</span></span><br><span class="line">    weakClassArr = []</span><br><span class="line">    m = shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">    D = mat(ones((m,<span class="number">1</span>))/m)   <span class="comment">#init D to all equal</span></span><br><span class="line">    aggClassEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numIt):</span><br><span class="line">        bestStump,error,classEst = buildStump(dataArr,classLabels,D)<span class="comment">#build Stump</span></span><br><span class="line">        <span class="comment">#print &quot;D:&quot;,D.T</span></span><br><span class="line">        alpha = <span class="built_in">float</span>(<span class="number">0.5</span>*log((<span class="number">1.0</span>-error)/<span class="built_in">max</span>(error,<span class="number">1e-16</span>)))<span class="comment">#calc alpha, throw in max(error,eps) to account for error=0</span></span><br><span class="line">        bestStump[<span class="string">&#x27;alpha&#x27;</span>] = alpha  </span><br><span class="line">        weakClassArr.append(bestStump)                  <span class="comment">#store Stump Params in Array</span></span><br><span class="line">        <span class="comment">#print &quot;classEst: &quot;,classEst.T</span></span><br><span class="line">        expon = multiply(-<span class="number">1</span>*alpha*mat(classLabels).T,classEst) <span class="comment">#exponent for D calc, getting messy</span></span><br><span class="line">        D = multiply(D,exp(expon))                              <span class="comment">#Calc New D for next iteration</span></span><br><span class="line">        D = D/D.<span class="built_in">sum</span>()</span><br><span class="line">        <span class="comment">#calc training error of all classifiers, if this is 0 quit for loop early (use break)</span></span><br><span class="line">        aggClassEst += alpha*classEst</span><br><span class="line">        <span class="comment">#print &quot;aggClassEst: &quot;,aggClassEst.T</span></span><br><span class="line">        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T,ones((m,<span class="number">1</span>)))</span><br><span class="line">        errorRate = aggErrors.<span class="built_in">sum</span>()/m</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;total error: &quot;</span>,errorRate</span><br><span class="line">        <span class="keyword">if</span> errorRate == <span class="number">0.0</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> weakClassArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaClassify</span>(<span class="params">datToClass,classifierArr</span>):</span></span><br><span class="line">    dataMatrix = mat(datToClass)<span class="comment">#do stuff similar to last aggClassEst in adaBoostTrainDS</span></span><br><span class="line">    m = shape(dataMatrix)[<span class="number">0</span>]</span><br><span class="line">    aggClassEst = mat(zeros((m,<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classifierArr)):</span><br><span class="line">        classEst = stumpClassify(dataMatrix, classifierArr[i][<span class="string">&#x27;dim&#x27;</span>],\</span><br><span class="line">                                 classifierArr[i][<span class="string">&#x27;thresh&#x27;</span>],\</span><br><span class="line">                                 classifierArr[i][<span class="string">&#x27;ineq&#x27;</span>])<span class="comment">#call stump classify</span></span><br><span class="line">        aggClassEst += classifierArr[i][<span class="string">&#x27;alpha&#x27;</span>]*classEst</span><br><span class="line">        <span class="built_in">print</span> aggClassEst</span><br><span class="line">    <span class="keyword">return</span> sign(aggClassEst)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotROC</span>(<span class="params">predStrengths, classLabels</span>):</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    cur = (<span class="number">1.0</span>,<span class="number">1.0</span>) <span class="comment">#cursor</span></span><br><span class="line">    ySum = <span class="number">0.0</span> <span class="comment">#variable to calculate AUC</span></span><br><span class="line">    numPosClas = <span class="built_in">sum</span>(array(classLabels)==<span class="number">1.0</span>)</span><br><span class="line">    yStep = <span class="number">1</span>/<span class="built_in">float</span>(numPosClas); xStep = <span class="number">1</span>/<span class="built_in">float</span>(<span class="built_in">len</span>(classLabels)-numPosClas)</span><br><span class="line">    sortedIndicies = predStrengths.argsort()<span class="comment">#get sorted index, it&#x27;s reverse</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    fig.clf()</span><br><span class="line">    ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line">    <span class="comment">#loop through all the values, drawing a line segment at each point</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> sortedIndicies.tolist()[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">if</span> classLabels[index] == <span class="number">1.0</span>:</span><br><span class="line">            delX = <span class="number">0</span>; delY = yStep;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            delX = xStep; delY = <span class="number">0</span>;</span><br><span class="line">            ySum += cur[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#draw line from cur to (cur[0]-delX,cur[1]-delY)</span></span><br><span class="line">        ax.plot([cur[<span class="number">0</span>],cur[<span class="number">0</span>]-delX],[cur[<span class="number">1</span>],cur[<span class="number">1</span>]-delY], c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        cur = (cur[<span class="number">0</span>]-delX,cur[<span class="number">1</span>]-delY)</span><br><span class="line">    ax.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],<span class="string">&#x27;b--&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;False positive rate&#x27;</span>); plt.ylabel(<span class="string">&#x27;True positive rate&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;ROC curve for AdaBoost horse colic detection system&#x27;</span>)</span><br><span class="line">    ax.axis([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;the Area Under the Curve is: &quot;</span>,ySum*xStep</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://machinelearningmastery.com/boosting-and-adaboost-for-machine-learning/">Boosting and AdaBoost for Machine Learning - MachineLearningMastery.com</a></li><li><a href="https://machinelearningmastery.com/gentle-introduction-xgboost-applied-machine-learning/">A Gentle Introduction to XGBoost for Applied Machine Learning - MachineLearningMastery.com</a></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;传统的机器学习方法,现在用得不多了(自我感觉).但是有必要稍微了解一下原理。&lt;br&gt;</summary>
    
    
    
    
    <category term="Ensemble Learning" scheme="https://www.sekyoro.top/tags/Ensemble-Learning/"/>
    
  </entry>
  
</feed>
